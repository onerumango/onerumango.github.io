{"version":3,"file":"src_app_pages_change-password_change-password_module_ts.js","mappings":"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","sources":["./src/app/pages/change-password/change-password-routing.module.ts","./src/app/pages/change-password/change-password.module.ts","./src/app/pages/change-password/change-password.page.ts","./src/app/services/custom-validators.service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ChangePasswordPage } from './change-password.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ChangePasswordPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ChangePasswordPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { ChangePasswordPageRoutingModule } from './change-password-routing.module';\r\n\r\nimport { ChangePasswordPage } from './change-password.page';\r\nimport { SharedMaterialModule } from 'src/app/shared/shared-material.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ReactiveFormsModule,\r\n    ChangePasswordPageRoutingModule,\r\n    SharedMaterialModule\r\n  ],\r\n  declarations: [ChangePasswordPage]\r\n})\r\nexport class ChangePasswordPageModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { ApiService } from 'src/app/services/api.service';\r\nimport { CustomValidatorsService } from 'src/app/services/custom-validators.service';\r\nimport { ToastController } from '@ionic/angular';\r\nimport { Location } from '@angular/common';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-change-password',\r\n  templateUrl: './change-password.page.html',\r\n  styleUrls: ['./change-password.page.scss'],\r\n})\r\nexport class ChangePasswordPage implements OnInit {\r\n  changePasswordForm: FormGroup;\r\n  currShowPassword: boolean = false;\r\n  newShowPassword: boolean = false;\r\n  reEnterShowPassword: boolean = false;\r\n  firstTimeLogin: any = 'N';\r\n  customerPhonenum: any;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private location: Location,\r\n    private api: ApiService,\r\n    public toastCtrl: ToastController\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.customerPhonenum = localStorage.getItem('customerPhonenum');\r\n\r\n    this.changePasswordForm = this.fb.group(\r\n      {\r\n        currentPassword: ['', [Validators.required]],\r\n        newPassword: [\r\n          '',\r\n          Validators.compose([\r\n            // 1. Password Field is Required\r\n            Validators.required,\r\n            // 2. check whether the entered password has a number\r\n            CustomValidatorsService.patternValidator(/\\d/, { hasNumber: true }),\r\n\r\n            // 3. check whether the entered password has upper case letter\r\n            CustomValidatorsService.patternValidator(/[A-Z]/, {\r\n              hasCapitalCase: true,\r\n            }),\r\n            // 4. check whether the entered password has a lower-case letter\r\n            CustomValidatorsService.patternValidator(/[a-z]/, {\r\n              hasSmallCase: true,\r\n            }),\r\n            // 5. check whether the entered password has a special character\r\n            CustomValidatorsService.patternValidator(\r\n              /[ !@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/,\r\n              {\r\n                hasSpecialCharacters: true,\r\n              }\r\n            ),\r\n            // 6. Has a minimum length of 8 characters\r\n            Validators.minLength(8),\r\n          ]),\r\n        ],\r\n        newPasswordConfirmation: ['', Validators.compose([Validators.required])],\r\n      },\r\n      {\r\n        // check whether our password and confirm password match\r\n        validator: CustomValidatorsService.passwordMatchValidator,\r\n      }\r\n    );\r\n  }\r\n\r\n  checkDisable() {\r\n    return this.changePasswordForm.get('currentPassword').value === ''\r\n    || this.changePasswordForm.get('newPassword').value === ''\r\n    || this.changePasswordForm.get('newPasswordConfirmation').value === ''\r\n    || !this.changePasswordForm.valid;\r\n  }\r\n\r\n  save() {\r\n    if (\r\n      this.changePasswordForm.value.newPassword !==\r\n      this.changePasswordForm.value.newPasswordConfirmation\r\n    ) {\r\n      this.openToast('Password do not match');\r\n      return;\r\n    }\r\n    if (\r\n      this.changePasswordForm.value.currentPassword ===\r\n      this.changePasswordForm.value.newPassword\r\n    ) {\r\n      this.openToast('Current Password and New password can not be same');\r\n      return;\r\n    }\r\n\r\n    var obj = {\r\n      phoneNumber: this.customerPhonenum,\r\n      currentPassword: this.changePasswordForm.value.currentPassword,\r\n      newPassword: this.changePasswordForm.value.newPasswordConfirmation,\r\n    };\r\n\r\n    this.api.updateCustomerPassword(obj).subscribe((res: any) => {\r\n      if (res.status == 200) {\r\n        this.openToast('Updated password successfully');\r\n      } else {\r\n        this.openToast(res?.message);\r\n      }\r\n      this.goBack();\r\n    }, (error: any) => {\r\n      this.openToast('Unable to update password');\r\n    });\r\n\r\n  }\r\n\r\n\r\n  async openToast(message) {\r\n    const toast = await this.toastCtrl.create({\r\n      message: `${message}`,\r\n      duration: 2500,\r\n      position: 'bottom',\r\n    });\r\n    toast.present();\r\n  }\r\n\r\n  goBack() {\r\n    this.location.back();\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ValidationErrors, ValidatorFn, AbstractControl } from '@angular/forms';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CustomValidatorsService {\r\n\r\n  constructor() { }\r\n  static patternValidator(regex: RegExp, error: ValidationErrors): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => {\r\n      if (!control.value) {\r\n        // if control is empty return no error\r\n        return null;\r\n      }\r\n\r\n      // test the value of the control against the regexp supplied\r\n      const valid = regex.test(control.value);\r\n\r\n      // if true, return no error (no error), else return error passed in the second parameter\r\n      return valid ? null : error;\r\n    };\r\n  }\r\n\r\n  static passwordMatchValidator(control: AbstractControl) {\r\n    const password: string = control.get('newPassword').value; // get password from our password form control\r\n    const confirmPassword: string = control.get('newPasswordConfirmation').value; // get password from our confirmPassword form control\r\n    // compare is the password math\r\n    if (password !== confirmPassword) {\r\n      // if they don't match, set an error in our confirmPassword form control\r\n      control.get('newPasswordConfirmation').setErrors({ NoPassswordMatch: true });\r\n    }\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}