{"version":3,"file":"default-node_modules_rxweb_reactive-form-validators___ivy_ngcc___fesm2015_rxweb-reactive-form-0ffb67-es2015.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA0B;AACW;AACqJ;AAC9B;AAC3D;;AAEzD;AACE;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C,mEAAmE,gBAAgB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,EAAE;AACvE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,yFAAyF;AACxI;AACA,+CAA+C,sGAAsG;AACrJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,mCAAmC,+BAA+B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,2BAA2B,aAAa;AACjH;AACA;AACA;AACA,4CAA4C,EAAE,GAAG,SAAS,qBAAqB,EAAE;AACjF;AACA;AACA,wCAAwC,uBAAuB,EAAE,SAAS;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACboCAAoC,qBAAqB;AACzD;AACA;AACA,8CAA8C,qBAAqB;AACnE;AACA,8CAA8C,qBAAqB;AACnE;AACA,8CAA8C,qBAAqB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,oCAAoC;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,gBAAgB,EAAE,OAAO,EAAE,qBAAqB,OAAO,sBAAsB,GAAG,gBAAgB,EAAE,OAAO,EAAE,qBAAqB;AAC/L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mHAAmH;AACnH;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,gCAAgC;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,uCAAuC;AACvC;AACA,iBAAiB;AACjB,8CAA8C;AAC9C,uCAAuC;AACvC;AACA,iBAAiB;AACjB,8CAA8C;AAC9C,uCAAuC;AACvC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,mEAAmE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,0GAA0G;AAC7K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA,4CAA4C,SAAS,EAAE;AACvD,+CAA+C,EAAE,gCAAgC,KAAK,6CAA6C,KAAK;AACxI,4DAA4D,6BAA6B,IAAI,QAAQ,IAAI,QAAQ,IAAI,QAAQ,IAAI,gCAAgC,GAAG;AACpK;AACA;AACA,4BAA4B,EAAE,UAAU,EAAE;AAC1C,kCAAkC,EAAE,UAAU,EAAE;AAChD;AACA;AACA;AACA,0HAA0H,EAAE,+MAA+M,EAAE;AAC7U;AACA;AACA,8FAA8F,GAAG,iDAAiD,GAAG,2DAA2D,GAAG,yBAAyB,GAAG;AAC/O,uDAAuD,IAAI,YAAY,EAAE,aAAa,EAAE,cAAc,EAAE,kDAAkD,IAAI,YAAY,EAAE,aAAa,EAAE,cAAc,EAAE,6DAA6D,IAAI,YAAY,EAAE,aAAa,EAAE,cAAc,EAAE;AACzT;AACA;AACA,2CAA2C,kBAAkB,wBAAwB,WAAW,2BAA2B;AAC3H;AACA,oDAAoD,IAAI;AACxD,gBAAgB,IAAI,OAAO,IAAI,OAAO,IAAI,OAAO,IAAI;AACrD,2BAA2B,IAAI,GAAG,EAAE,cAAc,IAAI,kBAAkB,IAAI,GAAG,EAAE,oFAAoF,EAAE,aAAa,IAAI,kBAAkB,IAAI,GAAG,EAAE,qFAAqF,EAAE,cAAc,IAAI,EAAE,IAAI,kBAAkB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,kFAAkF,EAAE,cAAc,IAAI,EAAE,IAAI,kBAAkB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,kFAAkF,EAAE,cAAc,IAAI,EAAE,IAAI,kBAAkB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,kFAAkF,EAAE,cAAc,IAAI,EAAE,IAAI,kBAAkB,IAAI,GAAG,EAAE,gBAAgB,IAAI,EAAE,IAAI,kFAAkF,EAAE,cAAc,IAAI,EAAE,IAAI,wBAAwB,IAAI,EAAE,IAAI,kFAAkF,EAAE,gBAAgB,IAAI,EAAE,IAAI,mBAAmB,GAAG;AAC5mC;AACA;AACA,sBAAsB,EAAE;AACxB,8BAA8B,EAAE,iBAAiB,EAAE,iBAAiB,GAAG,iBAAiB,EAAE;AAC1F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,EAAE,QAAQ;AAC3D,SAAS;AACT;AACA;AACA,qDAAqD,EAAE,WAAW;AAClE,aAAa;AACbmCAAmC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,qDAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wBAAwB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4BAA4B;AACxD;AACA,iDAAiD,2BAA2B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0BAA0B;AAC1D;AACA;AACA;AACA;AACA,gCAAgC,iCAAiC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC,4CAA4C;;AAE7C;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kEAAkE;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,qDAAS;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,2CAA2C;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,2CAA2C;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,0BAA0B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G;AAC/G;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,WAAW,EAAE,OAAO;AACvE;AACA;AACA;AACA;AACA,sDAAsD,KAAK,EAAE,OAAO;AACpE;AACA,4BAA4B,0BAA0B;AACtD;AACA,iCAAiC,gBAAgB,YAAY,QAAQ,EAAE,OAAO;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,2BAA2B,SAAS,GAAG,EAAE,uIAAuI;AAClO,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,KAAK,GAAG,WAAW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sHAAsH,KAAK,GAAG,OAAO,OAAO,OAAO;AACnJ;AACA,8GAA8G,KAAK,GAAG,OAAO,OAAO,OAAO;AAC3I;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,EAAE,MAAM,EAAE,yHAAyH,EAAE;AAC1K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,EAAE;AACtC;AACA;AACA,+EAA+E,EAAE,QAAQ,EAAE;AAC3F;AACA;AACA,+EAA+E,EAAE,QAAQ,EAAE;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,MAAM;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,kCAAkC;AAClC,kCAAkC;AAClC,gCAAgC;AAChC,gCAAgC;AAChC,mCAAmC;AACnC,mCAAmC;AACnC,iCAAiC;AACjC;AACA;AACA;AACA;AACA,kBAAkB,KAAK,EAAE,MAAM;AAC/B;AACA;AACA;AACA;AACA,kBAAkB,MAAM,EAAE,KAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uDAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,yBAAyB,uBAAuB;AAChaAAa,EAAE,OAAO;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uEAAuE;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,UAAU,GAAG,WAAW;AAC5E;AACA;AACA,kCAAkC,WAAW,GAAG,MAAM;AACtD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C,2GAA2G,SAAS,GAAG,EAAE;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,uDAAW;AAC5D;AACA;AACA,iDAAiD,uDAAW,uBAAuB,qDAAS;AAC5F;AACA;AACA,iDAAiD,qDAAS;AAC1D;AACA;AACA,iDAAiD,qDAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,qDAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,qDAAS;AACvE;AACA;AACA,oCAAoC,uCAAuC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,qDAAS,mCAAmC,qDAAS;AACtG;AACA;AACA;AACA;AACA,oDAAoD,qDAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,qDAAS;AAC5D;AACA,wDAAwD,qDAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,qDAAS;AACxD;AACA,oDAAoD,qDAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,qDAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,qDAAS;AAC9D;AACA;AACA;AACA;AACA,0DAA0D,qDAAS;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uDAAuD,qDAAS,gGAAgG,qDAAS,oGAAoG,uDAAW;AACxR,oFAAoF,qBAAqB;AACzG;AACA,2DAA2D,qDAAS;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uDAAuD,qDAAS,gGAAgG,qDAAS;AACzK;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uDAAuD,qDAAS,gGAAgG,qDAAS;AACzK;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,qDAAS;AAC9D;AACA;AACA;AACA;AACA,0DAA0D,qDAAS;AACnE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,qDAAS;AACnE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,0DAA0D,qDAAS;AACnE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,KAAK,sBAAsB,WAAW;AAC/F,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,uBAAuB;AAC3E;AACA,oDAAoD,uBAAuB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,0CAA0C;AACtgCAAgC,kBAAkB;AAClD;AACA;AACA;AACA,iEAAiE,oDAAoD;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,WAAW;AACnaAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kBAAkB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,gCAAgC,8BAA8B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,EAAE,IAAI,EAAE,SAAS,GAAG;AACvC,mBAAmB,EAAE,IAAI,EAAE,GAAG,GAAG;AACjC,mBAAmB,EAAE,IAAI,EAAE,SAAS,GAAG;AACvC,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,UAAU,EAAE,GAAG,GAAG;AACvC,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE;AAC9C,mBAAmB,EAAE,OAAO,EAAE,SAAS,GAAG;AAC1C,mBAAmB,EAAE,IAAI,GAAG,MAAM,EAAE,SAAS,EAAE;AAC/C,mBAAmB,EAAE,UAAU,EAAE,GAAG,GAAG;AACvC,mBAAmB,EAAE,IAAI,EAAE,SAAS,GAAG;AACvC,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,EAAE,SAAS,GAAG;AACvC,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,OAAO,EAAE,GAAG,GAAG;AACpC,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,GAAG,SAAS,GAAG,GAAG,EAAE;AAC7C,mBAAmB,EAAE,OAAO,EAAE,GAAG,GAAG;AACpC,mBAAmB,EAAE,UAAU,EAAE,GAAG,GAAG;AACvC,mBAAmB,EAAE,OAAO,EAAE,SAAS,GAAG;AAC1C,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,EAAE,SAAS,GAAG;AACvC,mBAAmB,EAAE,UAAU,EAAE,SAAS,GAAG;AAC7C,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,UAAU,EAAE,GAAG,GAAG;AACvC,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,OAAO,EAAE,GAAG,GAAG;AACpC,mBAAmB,EAAE,KAAK,EAAE,IAAI,GAAG;AACnC,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,OAAO,EAAE,GAAG,GAAG,SAAS,GAAG;AAChD,mBAAmB,EAAE,OAAO,EAAE,GAAG,GAAG;AACpC,mBAAmB,EAAE,OAAO,EAAE,SAAS,GAAG;AAC1C,mBAAmB,EAAE,IAAI,EAAE,SAAS,GAAG;AACvC,mBAAmB,EAAE,IAAI,EAAE,SAAS,GAAG;AACvC,mBAAmB,EAAE,OAAO,EAAE,SAAS,GAAG;AAC1C,mBAAmB,EAAE,IAAI,EAAE,SAAS,GAAG;AACvC,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,EAAE,SAAS,GAAG;AACvC,mBAAmB,EAAE,OAAO,EAAE,SAAS,GAAG;AAC1C,mBAAmB,EAAE,IAAI,GAAG,SAAS,GAAG,GAAG,EAAE;AAC7C,mBAAmB,EAAE,UAAU,GAAG;AAClC,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,EAAE,SAAS,GAAG,GAAG,EAAE;AAC5C,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,GAAG;AAC/C,mBAAmB,EAAE,OAAO,EAAE,GAAG,GAAG,MAAM,EAAE;AAC5C,mBAAmB,EAAE,OAAO,EAAE,GAAG,GAAG;AACpC,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,UAAU,EAAE,GAAG,GAAG;AACvC,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,UAAU,EAAE,GAAG,GAAG;AACvC,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,OAAO,EAAE,SAAS,GAAG;AAC1C,mBAAmB,EAAE,OAAO,EAAE,SAAS,GAAG;AAC1C,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,EAAE,SAAS,GAAG;AACvC,mBAAmB,EAAE,OAAO,EAAE,GAAG,GAAG,MAAM,EAAE;AAC5C,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,OAAO,EAAE,GAAG,GAAG,SAAS,GAAG;AAChD,mBAAmB,EAAE,UAAU,EAAE,GAAG,GAAG;AACvC,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,IAAI,EAAE,SAAS,GAAG;AACvC,mBAAmB,EAAE,IAAI,EAAE,SAAS,GAAG;AACvC,mBAAmB,EAAE,IAAI,GAAG;AAC5B,mBAAmB,EAAE,UAAU,EAAE,GAAG,GAAG;AACvC,mBAAmB,EAAE,IAAI,GAAG;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA,4DAA4D,IAAI;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wDAAwD,mDAAG;AAC3D;AACA,mBAAmB,wCAAE;AACrB;AACA;AACA,mBAAmB,wCAAE;AACrB;AACA;AACA;AACA;AACA,sEAAsE,2BAA2B,2BAA2B;AAC5H;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACduFAAuF,+CAA+C,+DAAwB,CAAC,sDAAkB;AACjL,kDAAkD,+DAAwB,GAAG,4FAA4F,yCAAyC;AAClN;AACA,MAAM,MAAM,sDAAW;AACvB;AACA;AACA,aAAa,MAAM,gDAAK,kCAAkC;AAC1D;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,sDAAkB,EAAE,IAAI,IAAI;AAClE,kBAAkB,gDAAK;AACvB;AACA,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yDAAyD;AACzD,mCAAmC,+DAAwB,GAAG,+BAA+B,kBAAkB;AAC/G;AACA,cAAc,MAAM,gDAAK,EAAE;AAC3B;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB,KAAK,WAAW;AAChB,kBAAkB,gDAAK;AACvB,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,kBAAkB;AAC/D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,gEAAgE,iFAAiF;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,yDAAyD,4EAA4E;AACrI;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F,qDAAS;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yCAAyC,qDAAS;AAClD;AACA,8CAA8C,qDAAS;AACvD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,4CAA4C,qDAAS;AACrD,kEAAkE,UAAU;AAC5E;AACA,4CAA4C,qDAAS;AACrD;AACA;AACA;AACA,oEAAoE,UAAU;AAC9E,qBAAqB;AACrB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,qDAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,oDAAoD,qDAAS;AAC7D;AACA;AACA;AACA,uDAAuD,QAAQ;AAC/D;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,sDAAsD,qCAAqC,gDAAgD,8EAA8E,mEAA4B,qDAAqD;AAC1S,wCAAwC,+DAAwB,GAAG,+FAA+F,yDAAyD,aAAa,wEAAiC,GAAG;AAC5Q;AACA,kBAAkB,MAAM,gDAAK,EAAE;AAC/B,eAAe,MAAM,gDAAK,wBAAwB;AAClD;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,WAAW;AAChB,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB;AACA,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA,eAAe,wCAAE;AACjB;AACA;AACA,+EAA+E;AAC/E,8CAA8C,+DAAwB,GAAG,kIAAkI,gBAAgB,aAAa,gEAAyB;AACjQ,yBAAyB,+DAAmB;AAC5C,6BAA6B,yDAAU;AACvC;AACA,aAAa,KAAK;AAClB;AACA,cAAc,MAAM,gDAAK,EAAE;AAC3B;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA,iCAAiC,+DAAmB;AACpD,qCAAqC,yDAAU;AAC/C;AACA,qBAAqB;AACrB,aAAa;AACb,KAAK,WAAW;AAChB,kBAAkB,gDAAK;AACvB,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,uCAAuC,+DAAwB,CAAC,qDAAiB;AACxJ,0CAA0C,+DAAwB,GAAG,wIAAwI;AAC7M,QAAQ,wDAAiB,6EAA6E,yCAAyC,oEAAoE,yBAAyB;AAC5O,OAAO,YAAY,oFAAoF,aAAa,gEAAyB,IAAI,SAAS,6DAAiB,kDAAkD;AAC7N,yBAAyB,yDAAa;AACtC,6BAA6B,yDAAU;AACvC;AACA,aAAa,KAAK;AAClB;AACA,MAAM,MAAM,qDAAU;AACtB;AACA;AACA,kBAAkB,MAAM,gDAAK,EAAE;AAC/B,kBAAkB,MAAM,gDAAK,EAAE;AAC/B,iBAAiB,MAAM,gDAAK,EAAE;AAC9B,aAAa,MAAM,gDAAK,EAAE;AAC1B;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,8BAA8B,SAAS,6DAAiB,kDAAkD;AAC1G,iCAAiC,yDAAa;AAC9C,qCAAqC,yDAAU;AAC/C;AACA,qBAAqB;AACrB,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,qDAAiB,EAAE,IAAI,IAAI;AACjE,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wCAAE;AACjB;AACA;AACA,iFAAiF,4CAA4C,+DAAwB,CAAC,qDAAiB;AACvK,+CAA+C,+DAAwB,GAAG,mFAAmF,gBAAgB,aAAa,gEAAyB;AACnN,yBAAyB,+DAAmB;AAC5C,6BAA6B,yDAAU;AACvC;AACA,aAAa,KAAK;AAClB;AACA,MAAM,MAAM,qDAAU;AACtB;AACA;AACA,cAAc,MAAM,gDAAK,EAAE;AAC3B;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA,iCAAiC,+DAAmB;AACpD,qCAAqC,yDAAU;AAC/C;AACA,qBAAqB;AACrB,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,qDAAiB,EAAE,IAAI,IAAI;AACjE,kBAAkB,gDAAK;AACvB,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E;AAC/E,8CAA8C,+DAAwB,GAAG,0CAA0C,oDAAoD;AACvK;AACA,aAAa,MAAM,gDAAK,EAAE;AAC1B,wBAAwB,MAAM,gDAAK,EAAE;AACrC;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB,KAAK,iBAAiB,YAAY,IAAI;AACtC,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,gCAAgC,2CAA2C,oEAAoE,mEAA4B,2CAA2C;AACvQ,mCAAmC,+DAAwB,GAAG,+BAA+B,4BAA4B,aAAa,wEAAiC,GAAG;AAC1K;AACA,oBAAoB,MAAM,gDAAK,EAAE;AACjC;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB,KAAK,WAAW;AAChB,kBAAkB,gDAAK;AACvB,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sEAAqB,WAAW,iEAAoB;AACpF;AACA,8BAA8B,sEAAqB,WAAW,+DAAkB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,kCAAkC,sDAAe,CAAC,wDAAkB,GAAG,sDAAe,CAAC,oDAAS;AAC7J,sCAAsC,gEAAyB,GAAG,uDAAuD;AACzH;AACA,MAAM,MAAM,wDAAW,EAAE;AACzB,MAAM,6BAA6B,MAAM,iDAAM,SAAS,oDAAS,IAAI;AACrE;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,qDAAU;AACxB,KAAK,iBAAiB,UAAU,MAAM,wDAAkB,EAAE,IAAI;AAC9D,sBAAsB,iDAAM;AAC5B,uBAAuB,oDAAS;AAChC,aAAa,GAAG,IAAI,UAAU;;AAE9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,2CAA2C,6BAA6B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,cAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,cAAc;AAClwBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,yDAAa;AAC1B,iBAAiB,yDAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc,iFAAiF,cAAc;AACxI,wEAAwE,cAAc;AACtF;AACA,mFAAmF,cAAc;AACjG;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,yCAAyC,+DAAwB,CAAC,qDAAiB,GAAG,+DAAwB,CAAC,oDAAgB,GAAG,+DAAwB;AACrO,4CAA4C,+DAAwB,GAAG,gIAAgI,8uCAA8uC,aAAa,gEAAyB,qBAAqB,wEAAiC,GAAG;AACphD;AACA,MAAM,MAAM,qDAAU,EAAE;AACxB,MAAM,MAAM,oDAAS,EAAE;AACvB,MAAM;AACN;AACA;AACA,gBAAgB,MAAM,gDAAK,EAAE;AAC7B,uBAAuB,MAAM,gDAAK,EAAE;AACpC,gBAAgB,MAAM,gDAAK,EAAE;AAC7B,kBAAkB,MAAM,gDAAK,EAAE;AAC/B,kBAAkB,MAAM,gDAAK,EAAE;AAC/B,mBAAmB,MAAM,gDAAK,EAAE;AAChC,qBAAqB,MAAM,gDAAK,EAAE;AAClC,kBAAkB,MAAM,gDAAK,EAAE;AAC/B,oBAAoB,MAAM,gDAAK,EAAE;AACjC,gBAAgB,MAAM,gDAAK,EAAE;AAC7B,gBAAgB,MAAM,gDAAK,EAAE;AAC7B,mBAAmB,MAAM,gDAAK,EAAE;AAChC,eAAe,MAAM,gDAAK,EAAE;AAC5B,oBAAoB,MAAM,gDAAK,EAAE;AACjC,iBAAiB,MAAM,gDAAK,EAAE;AAC9B,mBAAmB,MAAM,gDAAK,EAAE;AAChC,6BAA6B,MAAM,gDAAK,EAAE;AAC1C,sBAAsB,MAAM,gDAAK,EAAE;AACnC,mBAAmB,MAAM,gDAAK,EAAE;AAChC,eAAe,MAAM,gDAAK,EAAE;AAC5B,mBAAmB,MAAM,gDAAK,EAAE;AAChC,kBAAkB,MAAM,gDAAK,EAAE;AAC/B,mBAAmB,MAAM,gDAAK,EAAE;AAChC,mBAAmB,MAAM,gDAAK,EAAE;AAChC,0BAA0B,MAAM,gDAAK,EAAE;AACvC,oBAAoB,MAAM,gDAAK,EAAE;AACjC,oBAAoB,MAAM,gDAAK,EAAE;AACjC,cAAc,MAAM,gDAAK,EAAE;AAC3B,kBAAkB,MAAM,gDAAK,EAAE;AAC/B,oBAAoB,MAAM,gDAAK,EAAE;AACjC,oBAAoB,MAAM,gDAAK,EAAE;AACjC,kBAAkB,MAAM,gDAAK,EAAE;AAC/B,oBAAoB,MAAM,gDAAK,EAAE;AACjC,oBAAoB,MAAM,gDAAK,EAAE;AACjC,kBAAkB,MAAM,gDAAK,EAAE;AAC/B,cAAc,MAAM,gDAAK,EAAE;AAC3B,mBAAmB,MAAM,gDAAK,EAAE;AAChC,eAAe,MAAM,gDAAK,EAAE;AAC5B,sBAAsB,MAAM,gDAAK,EAAE;AACnC,mBAAmB,MAAM,gDAAK,EAAE;AAChC,gBAAgB,MAAM,gDAAK,EAAE;AAC7B,eAAe,MAAM,gDAAK,EAAE;AAC5B,qBAAqB,MAAM,gDAAK,EAAE;AAClC,eAAe,MAAM,gDAAK,EAAE;AAC5B,oBAAoB,MAAM,gDAAK,EAAE;AACjC,cAAc,MAAM,gDAAK,EAAE;AAC3B,iBAAiB,MAAM,gDAAK,EAAE;AAC9B,mBAAmB,MAAM,gDAAK,EAAE;AAChC,gBAAgB,MAAM,gDAAK,EAAE;AAC7B,eAAe,MAAM,gDAAK,EAAE;AAC5B,eAAe,MAAM,gDAAK,EAAE;AAC5B;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,qDAAiB,EAAE,IAAI,MAAM,oDAAgB,EAAE,IAAI,uBAAuB,IAAI,IAAI;AACxH,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,2DAAe;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,uCAAuC,+DAAwB,CAAC,2DAAuB;AAC9J,0CAA0C,+DAAwB,GAAG,4EAA4E,qCAAqC;AACtL;AACA,MAAM,MAAM,2DAAgB;AAC5B;AACA;AACA,eAAe,MAAM,gDAAK,0BAA0B;AACpD;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,2DAAuB,EAAE,IAAI,IAAI;AACvE,kBAAkB,gDAAK;AACvB;AACA,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,qCAAqC;AAC1E,sDAAsD,kBAAkB,UAAU,KAAK;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,gBAAgB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,0BAA0B;AACtF;AACA;AACA;AACA,uDAAuD,0BAA0B;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,qCAAqC,cAAc;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,qBAAqB;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,IAAI;AAC3E;AACA;AACA,qCAAqC,cAAc;AACnD,8BAA8B,uDAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,2BAA2B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iJAAiJ,4BAA4B;AAC7K;AACA;AACA;AACA,6IAA6I,4BAA4B;AACzK;AACA;AACA;AACA,oCAAoC,qDAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,uDAAW;AAClF,iDAAiD,qDAAS;AAC1D,yDAAyD,qDAAS;AAClE;AACA;AACA,oCAAoC,qDAAS;AAC7C;AACA;AACA;AACA,yCAAyC,qDAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qKAAqK,6BAA6B;AAClM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG,uDAAW,wDAAwD,qDAAS;AAC5K;AACA;AACA,qCAAqC,qDAAS;AAC9C;AACA;AACA,qCAAqC,uDAAW;AAChD;AACA,iIAAiI,4BAA4B;AAC7J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,uDAAW;AAChF;AACA;AACA,iOAAiO;AACjO;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA,oKAAoK;AACpK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF;AACpF,qGAAqG,qDAAS;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2HAA2H,cAAc;AACzI;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,qDAAS;AACjE;AACA;AACA;AACA;AACA,mHAAmH,qDAAS;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yHAAyH,cAAc,OAAO,cAAc,GAAG,MAAM;AACrK;AACA;AACA;AACA;AACA;AACA,mIAAmI;AACnI;AACA;AACA,wEAAwE,wFAAwF,iDAAiD,uBAAuB,GAAG;AAC3O;AACA;AACA,wDAAwD,UAAU;AAClE,qFAAqF,yBAAyB;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,qDAAS;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gEAAgE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yDAAyD;AACzD,oCAAoC,gEAAyB,GAAG,mDAAmD;AACnH;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,qDAAU;AACxB,KAAK,iBAAiB,YAAY,UAAU;;AAE5C;AACA;AACA,+BAA+B,uDAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D,uCAAuC,gEAAyB,GAAG,yDAAyD;AAC5H;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,qDAAU;AACxB,KAAK,iBAAiB,YAAY,UAAU;;AAE5C;AACA,uBAAuB,SAAS;AAChC;AACA,yEAAyE;AACzE,2CAA2C,8DAAuB,GAAG,6BAA6B;AAClG,2CAA2C,8DAAuB,GAAG,4CAA4C,wDAAW,cAAc,yDAAY,EAAE,uDAAW,EAAE,+DAAmB,IAAI;AAC5L,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,mDAAQ;AACtB;AACA;AACA,0BAA0B,yDAAY,EAAE,uDAAW,EAAE,+DAAmB;AACxE,4DAA4D,wDAAW;AACvE;AACA,aAAa;AACb,KAAK,iBAAiB;AACtB,eAAe,mDAAmD,gEAAyB,0BAA0B,4BAA4B,qLAAqL,yBAAyB,QAAQ,yDAAY,EAAE,uDAAW,EAAE,+DAAmB,IAAI,yBAAyB,iKAAiK,IAAI;AACvlB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA,+EAA+E;AAC/E,8CAA8C,8DAAuB,GAAG,gCAAgC;AACxG,8CAA8C,8DAAuB,GAAG,cAAc,SAAS,uDAAW,8BAA8B,gCAAgC,yDAAY,EAAE,uDAAW,EAAE,+DAAmB,oCAAoC,+DAAmB,EAAE,uDAAW,EAAE,+DAAmB,GAAG;AAClT;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,mDAAQ;AACtB;AACA;AACA,0BAA0B,yDAAY,EAAE,uDAAW,EAAE,+DAAmB;AACxE,8BAA8B,SAAS,uDAAW,8BAA8B;AAChF,0BAA0B,+DAAmB,EAAE,uDAAW,EAAE,+DAAmB;AAC/E,aAAa;AACb,KAAK,iBAAiB,YAAY,UAAU;AAC5C,eAAe,mDAAmD,gEAAyB,6BAA6B,uBAAuB,QAAQ,yDAAY,EAAE,uDAAW,EAAE,+DAAmB,2BAA2B,yBAAyB,QAAQ,+DAAmB,EAAE,uDAAW,EAAE,+DAAmB,MAAM,IAAI;;AAEhU;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,yBAAyB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,yBAAyB;AAC7E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2EAA2E,cAAc;AACzF;AACA;AACA;AACA;;AAEA;AACA,0EAA0E,cAAc;AACxF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sEAAsE,cAAc;AACpF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uEAAuE,cAAc;AACrnwNv6D,MAAM,YAAY;IAEvB,YACS,QAA4B;QAA5B,aAAQ,GAAR,QAAQ,CAAoB;IACjC,CAAC;IAEL,cAAc,CAAC,KAAa,EAAE,GAAW;QACvC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;YACpB,KAAK,EAAE,KAAK;YACZ,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE,CAAC;YACT,OAAO,EAAE,KAAK;YACd,QAAQ,EAAE,UAAU;YACpB,gBAAgB,EAAE,KAAK;YACvB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;IACL,CAAC;IAED,YAAY,CAAC,KAAa,EAAE,GAAW;QACrC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;YAClB,KAAK,EAAE,KAAK;YACZ,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE,CAAC;YACT,OAAO,EAAE,KAAK;YACd,QAAQ,EAAE,UAAU;YACpB,gBAAgB,EAAE,KAAK;YACvB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;IACL,CAAC;IAED,WAAW,CAAC,KAAa,EAAE,GAAW;QACpC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YACjB,KAAK,EAAE,KAAK;YACZ,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE,CAAC;YACT,OAAO,EAAE,KAAK;YACd,QAAQ,EAAE,UAAU;YACpB,gBAAgB,EAAE,KAAK;YACvB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;IACL,CAAC;;wEAxCU,YAAY;6GAAZ,YAAY,WAAZ,YAAY,mBAFX,MAAM","sources":["./node_modules/@rxweb/reactive-form-validators/__ivy_ngcc__/fesm2015/rxweb-reactive-form-validators.js","./src/app/shared/services/toast.service.ts"],"sourcesContent":["import { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FormArray, FormControl, FormGroup, NG_ASYNC_VALIDATORS, NG_VALUE_ACCESSOR, NG_VALIDATORS, AbstractControl, FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Directive, TemplateRef, Input, forwardRef, ElementRef, Injectable, Inject, LOCALE_ID, Renderer2, ViewContainerRef, NgModule } from '@angular/core';\nimport { getLocaleNumberSymbol, NumberSymbol, DecimalPipe, CommonModule } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nclass TypedForm {\r\n}\n\nconst ValidationAlphabetLocale = {\r\n    'danish': 'danish',\r\n    'french': 'french',\r\n    'german': 'german',\r\n    'greek': 'greek',\r\n    'spanish': 'spanish',\r\n    'russian': 'russian'\r\n};\n\nconst CONTROLS_ERROR = \"controlsError\";\r\nconst VALUE_CHANGED_SYNC = \"valueChangedSync\";\r\nconst FUNCTION_STRING = \"function\";\r\nconst OBJECT_STRING = \"object\";\r\nconst RX_WEB_VALIDATOR = \"rxwebValidator\";\r\nconst NUMBER = \"number\";\r\nconst BOOLEAN$1 = \"boolean\";\r\nconst CUSTOM = \"custom\";\r\nconst TEMPLATE_VALIDATION_CONFIG = \"template-validation-config\";\r\nconst CONDITIONAL_VALIDATOR = \"conditionalValidator\";\r\nconst VALIDATOR_CONFIG$2 = \"validatorConfig\";\r\nconst THIS = \"this\";\r\nconst RXCODE = \"-rxw-\";\r\nconst MODEL = \"model\";\r\nconst MODEL_INSTANCE = \"modelInstance\";\r\nconst PATCH = \"patch\";\n\nclass Linq {\r\n    static functionCreator(expression) {\r\n        var functionSetter = [];\r\n        var match = expression.match(/^\\s*\\(?\\s*([^)]*)\\s*\\)?\\s*=>(.*)/);\r\n        var splitSelect = match[2].split(\",\");\r\n        for (var i = 0; i < splitSelect.length; i++) {\r\n            var equalToOperator = splitSelect[i].match(/^\\s*\\(?\\s*([^)]*)\\s*\\)?\\s*|===|!==|==|!=|>=|>|<=|<|(.*)/);\r\n            if (equalToOperator !== null) {\r\n                functionSetter = new Function(match[1], \"return \" + equalToOperator.input);\r\n            }\r\n            else {\r\n                equalToOperator = splitSelect[i].match(/^\\s*\\(?\\s*([^)]*)\\s*\\)?\\s*=(.*)/);\r\n                if (equalToOperator === null) {\r\n                    functionSetter = new Function(match[1], \"return \" + splitSelect.input);\r\n                }\r\n                else {\r\n                    functionSetter = new Function(match[1], \"return \" + equalToOperator.input);\r\n                }\r\n            }\r\n        }\r\n        if (splitSelect.length == 0)\r\n            functionSetter = { accessFunction: new Function(match[1], \"return \" + match[2]) };\r\n        return functionSetter;\r\n    }\r\n    static execute(jObject, config, parentObject, modelInstance, isDynamicConfig) {\r\n        let expressionFunction = isDynamicConfig ? config.dynamicConfig : config.conditionalExpression;\r\n        let lastParam = isDynamicConfig ? config : modelInstance;\r\n        if (parentObject && typeof expressionFunction == \"string\")\r\n            expressionFunction = Linq.functionCreator(expressionFunction);\r\n        if (parentObject && expressionFunction)\r\n            return modelInstance && modelInstance.constructor !== Object ? expressionFunction.call(modelInstance, parentObject, jObject, lastParam) : expressionFunction(parentObject, jObject, lastParam);\r\n        return true;\r\n    }\r\n    static getConditionPath(texts) {\r\n        let path = \"\";\r\n        for (var i = 1; i < texts.length; i++)\r\n            path += (texts.length - 1) == i ? texts[i].trim() : `${texts[i].trim()}.`;\r\n        return path;\r\n    }\r\n    static expressionParser(expression, isNonValidationExpression) {\r\n        let splitExpressions = [];\r\n        let columns = [];\r\n        let expressionString = expression.toString();\r\n        let expressionArguments = Linq.extractArguments(expressionString);\r\n        if (expressionArguments.length > 0) {\r\n            let splitTexts = [];\r\n            expressionString.replace(/\\s/g, '').replace(new RegExp(/{|}/, \"g\"), \"\").split(new RegExp(/return|===|!==|==|!=|>=|>|<=|<|&&/)).forEach(t => {\r\n                let texts = t.replace(/\\(|\\)/g, \"\").split(\"||\");\r\n                for (let text of texts)\r\n                    splitTexts.push(text);\r\n            });\r\n            splitTexts.forEach(t => {\r\n                expressionArguments.forEach((x, i) => {\r\n                    t = t.trim();\r\n                    if (t.startsWith(x + '.')) {\r\n                        var splitText = t.split('.');\r\n                        if (splitText.length == 2 || (splitText.length >= 2 && isNonValidationExpression))\r\n                            if (!isNonValidationExpression)\r\n                                columns.push({ propName: splitText[1].trim(), argumentIndex: i == 3 ? 0 : i == 2 ? 1 : i == 1 ? -1 : i });\r\n                            else\r\n                                columns.push({ propName: this.getConditionPath(splitText), argumentIndex: i == 3 ? 0 : i == 2 ? 1 : i == 1 ? -1 : i });\r\n                        else {\r\n                            var arrayProp = splitText[1].split('[');\r\n                            let jObject = {\r\n                                propName: splitText[splitText.length - 1].trim(),\r\n                                objectPropName: arrayProp[0],\r\n                                arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace(\"]\", \"\") : undefined,\r\n                                argumentIndex: i === 3 ? 0 : i === 2 ? 1 : i\r\n                            };\r\n                            columns.push(jObject);\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        return columns;\r\n    }\r\n    static extractArguments(splitText) {\r\n        let expressionArguments = [THIS];\r\n        if (splitText[0].trim() !== \"(\" && !splitText.trim().startsWith(\"function\")) {\r\n            let text = splitText[0].split(\"=>\")[0];\r\n            expressionArguments.push(text.trim().replace(\"(\", \"\").replace(\")\", \"\"));\r\n        }\r\n        else {\r\n            let splitTexts = splitText.match(/\\(([^)]+)\\)/g);\r\n            if (splitTexts && splitTexts[0])\r\n                splitTexts[0].split(\",\").forEach(t => expressionArguments.push(t.trim().replace(\"(\", \"\").replace(\")\", \"\")));\r\n        }\r\n        return expressionArguments;\r\n    }\r\n    static expressionColumns(expression, isNonValidationExpression = false) {\r\n        var columns = [];\r\n        let splitExpressions = [];\r\n        if (typeof expression == \"string\") {\r\n            expression.split(\"=>\")[1].split(\" && \").forEach(t => {\r\n                t.split(\" || \").forEach(x => {\r\n                    splitExpressions.push(x.trim().split(' ')[0]);\r\n                });\r\n            });\r\n            splitExpressions.forEach(t => {\r\n                var splitText = t.split('.');\r\n                if (splitText.length == 2)\r\n                    columns.push({ propName: splitText[1].trim() });\r\n                else {\r\n                    var arrayProp = splitText[1].split('[');\r\n                    let jObject = {\r\n                        propName: splitText[splitText.length - 1].trim(),\r\n                        objectPropName: arrayProp[0],\r\n                        arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace(\"]\", \"\") : undefined\r\n                    };\r\n                    columns.push(jObject);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            columns = Linq.expressionParser(expression, isNonValidationExpression);\r\n        }\r\n        return columns;\r\n    }\r\n    static dynamicConfigParser(expression, propName) {\r\n        let controlNames = [];\r\n        let expressionString = expression.toString();\r\n        let expressionArguments = Linq.extractArguments(expressionString);\r\n        let splitString = expressionString.replace(new RegExp(/\\r?\\n|\\r|;/g), ' ').replace(/[\"%()\\{}=\\\\?�`'#<>|,;:+-]+/g, \" \").split(/ /g);\r\n        if (expressionArguments.length > 3)\r\n            expressionArguments.splice(expressionArguments.length - 1, 1);\r\n        expressionArguments.forEach(t => {\r\n            splitString.filter(x => x != `${t}.${propName}` && x.startsWith(`${t}.`)).forEach(x => {\r\n                let split = x.split('.');\r\n                if (split.length == 2)\r\n                    controlNames.push({ propName: x.replace(`${t}.`, '') });\r\n                else {\r\n                    var arrayProp = split[1].split('[');\r\n                    let jObject = {\r\n                        propName: split[split.length - 1].trim(),\r\n                        objectPropName: arrayProp[0],\r\n                        arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace(\"]\", \"\") : undefined,\r\n                    };\r\n                    controlNames.push(jObject);\r\n                }\r\n            });\r\n        });\r\n        return controlNames;\r\n    }\r\n}\n\nconst AnnotationTypes = {\r\n    numeric: 'numeric',\r\n    required: 'required',\r\n    minLength: 'minLength',\r\n    maxLength: 'maxLength',\r\n    minNumber: 'minNumber',\r\n    maxNumber: 'maxNumber',\r\n    pattern: 'pattern',\r\n    password: 'password',\r\n    compare: 'compare',\r\n    minDate: 'minDate',\r\n    maxDate: 'maxDate',\r\n    alpha: 'alpha',\r\n    alphaNumeric: 'alphaNumeric',\r\n    email: 'email',\r\n    hexColor: 'hexColor',\r\n    lowerCase: 'lowerCase',\r\n    url: 'url',\r\n    upperCase: 'upperCase',\r\n    nested: 'nested',\r\n    propArray: 'propArray',\r\n    propObject: 'propObject',\r\n    contains: 'contains',\r\n    range: 'range',\r\n    custom: 'custom',\r\n    digit: \"digit\",\r\n    creditCard: \"creditCard\",\r\n    time: \"time\",\r\n    json: \"json\",\r\n    greaterThan: \"greaterThan\",\r\n    greaterThanEqualTo: \"greaterThanEqualTo\",\r\n    lessThan: \"lessThan\",\r\n    lessThanEqualTo: \"lessThanEqualTo\",\r\n    choice: \"choice\",\r\n    different: \"different\",\r\n    even: \"even\",\r\n    odd: \"odd\",\r\n    factor: \"factor\",\r\n    leapYear: \"leapYear\",\r\n    allOf: \"allOf\",\r\n    oneOf: \"oneOf\",\r\n    noneOf: \"noneOf\",\r\n    mac: \"mac\",\r\n    ascii: \"ascii\",\r\n    dataUri: \"dataUri\",\r\n    port: \"port\",\r\n    latLong: \"latLong\",\r\n    extension: \"extension\",\r\n    fileSize: \"fileSize\",\r\n    endsWith: \"endsWith\",\r\n    startsWith: \"startsWith\",\r\n    primeNumber: \"primeNumber\",\r\n    latitude: \"latitude\",\r\n    longitude: \"longitude\",\r\n    compose: \"compose\",\r\n    rule: \"rule\",\r\n    file: \"file\",\r\n    image: \"image\",\r\n    unique: \"unique\",\r\n    notEmpty: \"notEmpty\",\r\n    ip: \"ip\",\r\n    cusip: \"cusip\",\r\n    grid: \"grid\",\r\n    date: 'date',\r\n    and: 'and',\r\n    or: 'or',\r\n    not: 'not',\r\n    minTime: 'minTime',\r\n    maxTime: 'maxTime',\r\n    requiredTrue: 'requiredTrue',\r\n    mask: 'mask',\r\n    iban: 'iban',\r\n    updateOn: 'updateOn'\r\n};\n\nconst INVALID = \"INVALID\";\r\nconst PROPERTY = \"property\";\r\nconst OBJECT_PROPERTY = \"objectProperty\";\r\nconst ARRAY_PROPERTY = \"arrayProperty\";\r\nconst STRING = \"string\";\r\nconst MESSAGE = \"message\";\r\nconst BLANK = \"\";\n\nconst KEYPRESS = \"onkeypress\";\r\nconst ONCHANGE = \"onchange\";\r\nconst ONCLICK = \"onclick\";\r\nconst ONKEYUP = \"onkeyup\";\r\nconst ONBLUR = \"onblur\";\r\nconst ONFOCUS = \"onfocus\";\r\nconst ELEMENT_VALUE = \"value\";\r\nconst BLUR = \"blur\";\r\nconst FOCUS = \"focus\";\r\nconst CHANGE = \"change\";\r\nconst KEY_DOWN = \"keydown\";\r\nconst KEY_PRESS = \"keypress\";\r\nconst PASTE = \"paste\";\n\nconst INPUT = \"INPUT\";\r\nconst SELECT = \"SELECT\";\r\nconst CHECKBOX = \"checkbox\";\r\nconst RADIO = \"radio\";\r\nconst FILE = \"file\";\r\nconst TEXTAREA = \"textarea\";\n\nconst DECORATORS = {\r\n    disabled: 'disabled',\r\n    error: 'error',\r\n    trim: 'trim',\r\n    ltrim: 'ltrim',\r\n    rtrim: 'rtrim',\r\n    blacklist: 'blacklist',\r\n    stripLow: 'stripLow',\r\n    toBoolean: 'toBoolean',\r\n    toDate: 'toDate',\r\n    toDouble: 'toDouble',\r\n    toFloat: 'toFloat',\r\n    toInt: 'toInt',\r\n    string: 'toString',\r\n    whitelist: 'whitelist',\r\n    escape: 'escape',\r\n    prefix: 'prefix',\r\n    suffix: 'suffix',\r\n    sanitize: 'sanitize',\r\n    elementClass: 'elementClass',\r\n    updateOn: 'updateOn'\r\n};\n\nconst defaultContainer = new (class {\r\n    constructor() {\r\n        this.instances = [];\r\n        this.modelIncrementCount = 0;\r\n    }\r\n    get(instanceFunc) {\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        return instance;\r\n    }\r\n    getInstance(target, parameterIndex, propertyKey, decoratorType) {\r\n        let isPropertyKey = (propertyKey != undefined);\r\n        let instanceFunc = !isPropertyKey ? target : target.constructor;\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        if (!instance)\r\n            instance = this.addInstanceContainer(instanceFunc);\r\n        return instance;\r\n    }\r\n    addPropsConfig(target, configs) {\r\n        let instanceContainer = this.instances.filter(instance => instance.instance == target)[0];\r\n        if (instanceContainer) {\r\n            for (let config of configs) {\r\n                for (let prop of config.propNames) {\r\n                    let propertyInfo = instanceContainer.properties.filter(t => t.name == prop && (t.propertyType !== OBJECT_PROPERTY && t.propertyType !== ARRAY_PROPERTY))[0];\r\n                    if (propertyInfo) {\r\n                        this.addPropConfig(target, [propertyInfo], config);\r\n                    }\r\n                    else if (prop === \":all:\")\r\n                        this.addPropConfig(target, instanceContainer.properties.filter(t => t.propertyType !== OBJECT_PROPERTY && t.propertyType !== ARRAY_PROPERTY), config);\r\n                }\r\n            }\r\n        }\r\n        else if (configs === undefined)\r\n            this.addInstanceContainer(target);\r\n    }\r\n    addPropConfig(target, properties, config) {\r\n        for (var propertyInfo of properties) {\r\n            let excludeProp = false;\r\n            if (config.excludePropNames)\r\n                excludeProp = config.excludePropNames.filter(t => t == propertyInfo.name)[0] !== undefined;\r\n            if (!excludeProp) {\r\n                if (config.validationConfig)\r\n                    for (let typeName in config.validationConfig) {\r\n                        this.init({ constructor: target }, 0, propertyInfo.name, typeName, config.validationConfig[typeName] === true ? undefined : config.validationConfig[typeName], false);\r\n                    }\r\n                if (config.error)\r\n                    this.addDecoratorConfig({ constructor: target }, 0, propertyInfo.name, config.error, DECORATORS.error);\r\n                if (config.disable)\r\n                    this.addDecoratorConfig({ constructor: target }, 0, propertyInfo.name, config.disable, DECORATORS.disabled);\r\n                if (config.elementClass)\r\n                    this.addDecoratorConfig({ constructor: target }, 0, propertyInfo.name, config.elementClass, DECORATORS.elementClass);\r\n                if (config.ignore)\r\n                    propertyInfo.ignore = config.ignore;\r\n            }\r\n        }\r\n    }\r\n    addSanitizer(target, parameterIndex, propertyKey, decoratorType, value) {\r\n        let instance = this.getInstance(target, parameterIndex, propertyKey, decoratorType);\r\n        if (instance) {\r\n            if (!instance.sanitizers[propertyKey])\r\n                instance.sanitizers[propertyKey] = [];\r\n            instance.sanitizers[propertyKey].push({ name: decoratorType, config: value });\r\n        }\r\n    }\r\n    addDecoratorConfig(target, parameterIndex, propertyKey, config, decoratorType) {\r\n        let isPropertyKey = (propertyKey != undefined);\r\n        let instanceFunc = !isPropertyKey ? target : target.constructor;\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        if (!instance)\r\n            instance = this.addInstanceContainer(instanceFunc);\r\n        instance.nonValidationDecorators[decoratorType].conditionalExpressions[propertyKey] = config.conditionalExpression;\r\n        let columns = Linq.expressionColumns(config.conditionalExpression, true);\r\n        columns.forEach(column => {\r\n            if (column.argumentIndex !== -1) {\r\n                let columnName = (!column.objectPropName) ? `${column.propName}${RXCODE}${column.argumentIndex}` : `${column.objectPropName}.${column.propName}${RXCODE}${column.argumentIndex}`;\r\n                if (!instance.nonValidationDecorators[decoratorType].changeDetection[columnName])\r\n                    instance.nonValidationDecorators[decoratorType].changeDetection[columnName] = [];\r\n                let disabledColumns = instance.nonValidationDecorators[decoratorType].changeDetection[columnName];\r\n                if (disabledColumns.indexOf(columnName) === -1)\r\n                    disabledColumns.push(propertyKey);\r\n            }\r\n            else {\r\n                if (!instance.nonValidationDecorators[decoratorType].controlProp[propertyKey])\r\n                    instance.nonValidationDecorators[decoratorType].controlProp[propertyKey] = {};\r\n                instance.nonValidationDecorators[decoratorType].controlProp[propertyKey][column.propName.replace(\";\", \"\")] = true;\r\n            }\r\n        });\r\n    }\r\n    init(target, parameterIndex, propertyKey, annotationType, config, isAsync) {\r\n        var decoratorConfiguration = {\r\n            propertyIndex: parameterIndex,\r\n            propertyName: propertyKey,\r\n            annotationType: annotationType,\r\n            config: config,\r\n            isAsync: isAsync,\r\n            isValidator: annotationType !== \"updateOn\"\r\n        };\r\n        let isPropertyKey = (propertyKey != undefined);\r\n        this.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);\r\n    }\r\n    initPropertyObject(name, propertyType, entity, target, config) {\r\n        var propertyInfo = {\r\n            name: name,\r\n            propertyType: propertyType,\r\n            entity: entity,\r\n            dataPropertyName: config ? config.name : undefined,\r\n            entityProvider: config ? config.entityProvider : undefined,\r\n            defaultValue: config ? config.defaultValue : undefined,\r\n            objectConfig: config && config.autoCreate ? { autoCreate: config.autoCreate } : undefined\r\n        };\r\n        defaultContainer.addProperty(target.constructor, propertyInfo);\r\n    }\r\n    addInstanceContainer(instanceFunc) {\r\n        let instanceContainer = {\r\n            instance: instanceFunc,\r\n            propertyAnnotations: [],\r\n            properties: [],\r\n            nonValidationDecorators: {\r\n                disabled: {\r\n                    conditionalExpressions: {},\r\n                    changeDetection: {},\r\n                    controlProp: {}\r\n                }, error: {\r\n                    conditionalExpressions: {},\r\n                    changeDetection: {},\r\n                    controlProp: {}\r\n                }, elementClass: {\r\n                    conditionalExpressions: {},\r\n                    changeDetection: {},\r\n                    controlProp: {}\r\n                }\r\n            },\r\n            sanitizers: {}\r\n        };\r\n        this.instances.push(instanceContainer);\r\n        return instanceContainer;\r\n    }\r\n    addProperty(instanceFunc, propertyInfo, isFromAnnotation = false) {\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        if (instance) {\r\n            this.addPropertyInfo(instance, propertyInfo, !isFromAnnotation);\r\n        }\r\n        else {\r\n            instance = this.addInstanceContainer(instanceFunc);\r\n            this.addPropertyInfo(instance, propertyInfo);\r\n        }\r\n    }\r\n    addPropertyInfo(instance, propertyInfo, isAddProperty = false) {\r\n        var property = this.getProperty(instance, propertyInfo);\r\n        if (!property)\r\n            instance.properties.push(propertyInfo);\r\n        else if (isAddProperty)\r\n            this.updateProperty(property, propertyInfo);\r\n        if (property && propertyInfo.messageNexus)\r\n            property.messageNexus = propertyInfo.messageNexus;\r\n    }\r\n    addAnnotation(instanceFunc, decoratorConfiguration) {\r\n        this.addProperty(instanceFunc, { propertyType: PROPERTY, name: decoratorConfiguration.propertyName }, true);\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        if (instance)\r\n            instance.propertyAnnotations.push(decoratorConfiguration);\r\n        else {\r\n            instance = this.addInstanceContainer(instanceFunc);\r\n            instance.propertyAnnotations.push(decoratorConfiguration);\r\n        }\r\n        if (decoratorConfiguration.config && decoratorConfiguration.config.conditionalExpression) {\r\n            let columns = Linq.expressionColumns(decoratorConfiguration.config.conditionalExpression);\r\n            this.addChangeValidation(instance, decoratorConfiguration.propertyName, columns);\r\n        }\r\n        if (decoratorConfiguration.config && decoratorConfiguration.config.dynamicConfig) {\r\n            let columns = Linq.dynamicConfigParser(decoratorConfiguration.config.dynamicConfig, decoratorConfiguration.propertyName);\r\n            this.addChangeValidation(instance, decoratorConfiguration.propertyName, columns);\r\n        }\r\n        this.setConditionalColumns(instance, decoratorConfiguration);\r\n    }\r\n    setConditionalColumns(instance, decoratorConfiguration) {\r\n        if (instance && decoratorConfiguration.config) {\r\n            if (decoratorConfiguration.annotationType == AnnotationTypes.and || decoratorConfiguration.annotationType == AnnotationTypes.or || decoratorConfiguration.annotationType == AnnotationTypes.not) {\r\n                Object.keys(decoratorConfiguration.config.validation).forEach(t => {\r\n                    if (typeof decoratorConfiguration.config.validation[t] !== \"boolean\")\r\n                        this.setLogicalConditional(instance, t, decoratorConfiguration.config.validation[t].fieldName, decoratorConfiguration.propertyName);\r\n                });\r\n            }\r\n            else\r\n                this.setLogicalConditional(instance, decoratorConfiguration.annotationType, decoratorConfiguration.config.fieldName, decoratorConfiguration.propertyName);\r\n        }\r\n    }\r\n    setLogicalConditional(instance, annotationType, fieldName, propertyName) {\r\n        if (instance && ((annotationType == AnnotationTypes.compare || annotationType == AnnotationTypes.greaterThan || annotationType == AnnotationTypes.greaterThanEqualTo || annotationType == AnnotationTypes.lessThan || annotationType == AnnotationTypes.lessThanEqualTo || annotationType == AnnotationTypes.different || annotationType == AnnotationTypes.factor || annotationType == AnnotationTypes.minTime || annotationType == AnnotationTypes.maxTime) || (annotationType == AnnotationTypes.creditCard && fieldName) || ((annotationType == AnnotationTypes.minDate || annotationType == AnnotationTypes.maxDate) && fieldName))) {\r\n            this.setConditionalValueProp(instance, fieldName, propertyName);\r\n        }\r\n    }\r\n    setConditionalValueProp(instance, propName, refPropName) {\r\n        if (propName) {\r\n            let splitProps = propName.split ? propName.split('.') : '';\r\n            if (splitProps.length < 2) {\r\n                if (!instance.conditionalValidationProps)\r\n                    instance.conditionalValidationProps = {};\r\n                if (!instance.conditionalValidationProps[propName])\r\n                    instance.conditionalValidationProps[propName] = [];\r\n                if (instance.conditionalValidationProps[propName].indexOf(refPropName) == -1)\r\n                    instance.conditionalValidationProps[propName].push(refPropName);\r\n            }\r\n            else\r\n                this.addChangeValidation(instance, refPropName, [{ argumentIndex: 1, objectPropName: splitProps[0], propName: splitProps[1], referencePropName: refPropName }]);\r\n        }\r\n    }\r\n    addChangeValidation(instance, propertyName, columns) {\r\n        if (instance) {\r\n            if (!instance.conditionalValidationProps)\r\n                instance.conditionalValidationProps = {};\r\n            columns.forEach(t => {\r\n                if (t.propName && !t.objectPropName) {\r\n                    if (!instance.conditionalValidationProps[t.propName])\r\n                        instance.conditionalValidationProps[t.propName] = [];\r\n                    if (instance.conditionalValidationProps[t.propName].indexOf(propertyName) == -1)\r\n                        instance.conditionalValidationProps[t.propName].push(propertyName);\r\n                }\r\n                else {\r\n                    if (t.propName && t.objectPropName) {\r\n                        if (!instance.conditionalObjectProps)\r\n                            instance.conditionalObjectProps = [];\r\n                        t.referencePropName = propertyName;\r\n                        instance.conditionalObjectProps.push(t);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    clearInstance(instanceFunc) {\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        if (instance) {\r\n            let indexOf = this.instances.indexOf(instance);\r\n            this.instances.splice(indexOf, 1);\r\n        }\r\n    }\r\n    getProperty(instance, propertyInfo) {\r\n        return instance.properties.filter(t => t.name == propertyInfo.name)[0];\r\n    }\r\n    updateProperty(property, currentProperty) {\r\n        property.dataPropertyName = currentProperty.dataPropertyName;\r\n        property.defaultValue = currentProperty.defaultValue;\r\n    }\r\n})();\n\nfunction baseDecoratorFunction(annotationType, config, isAsync = false) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.init(target, parameterIndex, propertyKey, annotationType, config, isAsync);\r\n    };\r\n}\n\nconst RegExRule = {\r\n    alpha: /^[a-zA-Z]+$/,\r\n    alphaExits: /[a-zA-Z]/,\r\n    alphaWithSpace: /^[a-zA-Z\\s]+$/,\r\n    macId: /^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/,\r\n    onlyDigit: /^[0-9]+$/,\r\n    isDigitExits: /[0-9]/,\r\n    lowerCase: /[a-z]/,\r\n    upperCase: /[A-Z]/,\r\n    specialCharacter: /[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi,\r\n    advancedEmail: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\r\n    basicEmail: /^(([^<>()\\[\\]\\\\.,,:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n    alphaNumeric: /^[0-9a-zA-Z]+$/,\r\n    alphaNumericWithSpace: /^[0-9a-zA-Z\\s]+$/,\r\n    hexColor: /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i,\r\n    strictHexColor: /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i,\r\n    float: /^(?:[-+]?(?:[0-9]+))?(?:\\.[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$/,\r\n    decimal: /^[-+]?([0-9]+|\\.[0-9]+|[0-9]+\\.[0-9]+)$/,\r\n    hexaDecimal: /^[0-9A-F]+$/i,\r\n    date: /^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$/,\r\n    time: /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,\r\n    timeWithSeconds: /^([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/,\r\n    url: /^(https?:\\/\\/(?:www\\.|(?!www)|(?!a-zA-Z))[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www)|(?!a-zA-Z))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})$/,\r\n    localhostUrl: /^(https?:\\/\\/localhost\\:([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])|localhost\\::([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])|https?:\\/\\/localhost\\::([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))$/,\r\n    interanetUrl: /^(https?:\\/\\/[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9])$/,\r\n    ascii: /^[\\x00-\\x7F]+$/,\r\n    dataUri: /^data:([a-z]+\\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s]*?)$/i,\r\n    lat: /^\\(?[+-]?(90(\\.0+)?|[1-8]?\\d(\\.\\d+)?)$/,\r\n    long: /^\\s?[+-]?(180(\\.0+)?|1[0-7]\\d(\\.\\d+)?|\\d{1,2}(\\.\\d+)?)\\)?$/,\r\n    ipV4: /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/,\r\n    ipV6: /^((?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\d]{1,4}:){4}(?:(:[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\d]{1,4}:){3}(?:(:[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\d]{1,4}:){2}(?:(:[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\d]{1,4}:){1}(?:(:[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,6}|:)|(?::((?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:)))(%[0-9a-zA-Z]{1,})?$/,\r\n    cidrV4: /^(3[0-2]|[12]?[0-9])$/,\r\n    cidrV6: /^(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,\r\n    cusip: /^[0-9A-Z]{9}$/,\r\n    grid: /^[GRID:]*([0-9A-Z]{2})[-\\s]*([0-9A-Z]{5})[-\\s]*([0-9A-Z]{10})[-\\s]*([0-9A-Z]{1})$/g\r\n};\n\nconst ALPHABET = \"alphabet\";\r\nconst DIGIT = \"digit\";\r\nconst CONTAINS = \"contains\";\r\nconst LOWERCASE = \"lowerCase\";\r\nconst UPPERCASE = \"upperCase\";\r\nconst SPECIAL_CHARACTER = \"specialCharacter\";\r\nconst MIN_LENGTH = \"minLength\";\r\nconst MAX_LENGTH = \"maxLength\";\r\nclass RegexValidator {\r\n    static isExits(value, regex) {\r\n        return value.match(regex) != null;\r\n    }\r\n    static isValid(value, regex) {\r\n        return regex.test(value);\r\n    }\r\n    static isNotBlank(value, isRemoveSpace = false) {\r\n        return !isRemoveSpace ?\r\n            (value === 0) || (value !== undefined && value !== null && value !== \"\") :\r\n            (value === 0) || (value !== undefined && value !== null && String(value).trim() !== \"\");\r\n    }\r\n    static isValidPassword(passwordValidation, value) {\r\n        let isValid = false;\r\n        let jObject = {};\r\n        let keyName = \"status\";\r\n        let objectProperties = Object.getOwnPropertyNames(passwordValidation);\r\n        for (let propertyName of objectProperties) {\r\n            switch (propertyName) {\r\n                case ALPHABET:\r\n                    isValid = RegexValidator.isExits(value, RegExRule.alphaExits);\r\n                    keyName = ALPHABET;\r\n                    break;\r\n                case DIGIT:\r\n                    isValid = RegexValidator.isValid(value, RegExRule.isDigitExits);\r\n                    keyName = DIGIT;\r\n                    break;\r\n                case CONTAINS:\r\n                    isValid = value.indexOf(passwordValidation[CONTAINS]) != -1;\r\n                    keyName = CONTAINS;\r\n                    break;\r\n                case LOWERCASE:\r\n                    isValid = RegexValidator.isValid(value, RegExRule.lowerCase);\r\n                    keyName = LOWERCASE;\r\n                    break;\r\n                case UPPERCASE:\r\n                    isValid = RegexValidator.isValid(value, RegExRule.upperCase);\r\n                    keyName = UPPERCASE;\r\n                    break;\r\n                case SPECIAL_CHARACTER:\r\n                    isValid = RegexValidator.isExits(value, RegExRule.specialCharacter);\r\n                    keyName = SPECIAL_CHARACTER;\r\n                    break;\r\n                case MIN_LENGTH:\r\n                    isValid = value.length >= passwordValidation[propertyName];\r\n                    keyName = MIN_LENGTH;\r\n                    break;\r\n                case MAX_LENGTH:\r\n                    isValid = value.length <= passwordValidation[propertyName];\r\n                    keyName = MAX_LENGTH;\r\n                    break;\r\n            }\r\n            if (!isValid)\r\n                break;\r\n        }\r\n        return { isValid: isValid, keyName: keyName };\r\n    }\r\n    static isZero(value) {\r\n        return value == 0;\r\n    }\r\n    static commaRegex() {\r\n        return new RegExp(\",\", \"g\");\r\n    }\r\n}\n\nclass ReactiveFormConfig {\r\n    static set(jObject) {\r\n        if (jObject)\r\n            ReactiveFormConfig.json = jObject;\r\n    }\r\n    static get(path) {\r\n        let jObject;\r\n        if (ReactiveFormConfig.json) {\r\n            let splitPath = path.split('.');\r\n            for (let columnName of splitPath) {\r\n                jObject = (!jObject) ? ReactiveFormConfig.json[columnName] : jObject[columnName];\r\n                if (!jObject)\r\n                    break;\r\n            }\r\n        }\r\n        return jObject;\r\n    }\r\n}\r\nReactiveFormConfig.i18n = {};\r\nReactiveFormConfig.number = {};\r\nReactiveFormConfig.json = {};\r\nReactiveFormConfig.autoInstancePush = false;\n\nclass ObjectMaker {\r\n    static toJson(key, config, values, additional = {}) {\r\n        ObjectMaker.setMessage();\r\n        let message = config ? config.message : null;\r\n        let messageKey = undefined;\r\n        if (!message && config && config.messageKey)\r\n            messageKey = config.messageKey;\r\n        let messageText = (message) ? message : (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.validationMessage && ReactiveFormConfig.json.validationMessage[messageKey || key]) ? ReactiveFormConfig.json.validationMessage[messageKey || key] : '';\r\n        values.forEach((t, index) => {\r\n            if (t instanceof Date)\r\n                t = this.getDateString(t);\r\n            messageText = messageText.replace(`{{${index}}}`, t);\r\n        });\r\n        if (config && config.messageNexus)\r\n            Object.keys(config.messageNexus).forEach(propName => {\r\n                messageText = messageText.replace(`{{${propName}}}`, config.messageNexus[propName]);\r\n            });\r\n        let jObject = {};\r\n        jObject[key] = {\r\n            message: messageText, refValues: values\r\n        };\r\n        if (config && config.isAddMessageKey)\r\n            jObject[\"messageKey\"] = messageKey;\r\n        if (additional) {\r\n            if (additional.min)\r\n                jObject[key].min = additional.min;\r\n            if (additional.max)\r\n                jObject[key].max = additional.max;\r\n        }\r\n        return jObject;\r\n    }\r\n    static null() {\r\n        return null;\r\n    }\r\n    static getPasswordMessage() {\r\n        let messageKey = \"password\";\r\n        return (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.validationMessage && ReactiveFormConfig.json.validationMessage[messageKey]) ? ReactiveFormConfig.json.validationMessage[messageKey] : '';\r\n    }\r\n    static setMessage() {\r\n        if (ReactiveFormConfig.i18n && ReactiveFormConfig.i18n.validationMessage && ObjectMaker.language !== ReactiveFormConfig.i18n.language) {\r\n            if (!ReactiveFormConfig.json)\r\n                ReactiveFormConfig.json = {};\r\n            ReactiveFormConfig.json.validationMessage = ReactiveFormConfig.i18n.validationMessage();\r\n            ObjectMaker.language = ReactiveFormConfig.i18n.language;\r\n        }\r\n    }\r\n    static getDateString(value) {\r\n        let seperator = ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.seperator ? ReactiveFormConfig.json.baseConfig.seperator : \"/\";\r\n        let dateFormat = ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.dateFormat ? ReactiveFormConfig.json.baseConfig.dateFormat : \"mdy\";\r\n        if (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.dateFormat && ReactiveFormConfig.json.internationalization.seperator) {\r\n            seperator = ReactiveFormConfig.json.internationalization.seperator;\r\n            dateFormat = ReactiveFormConfig.json.internationalization.dateFormat;\r\n        }\r\n        let result = '';\r\n        let year = value.getFullYear().toString();\r\n        let month = String(value.getMonth() + 1);\r\n        let day = String(value.getDay());\r\n        switch (dateFormat) {\r\n            case 'ymd':\r\n                result = \"\".concat(year, seperator, month, seperator, day);\r\n                break;\r\n            case 'dmy':\r\n                result = \"\".concat(day, seperator, month, seperator, year);\r\n                break;\r\n            case 'mdy':\r\n                result = \"\".concat(month, seperator, day, seperator, year);\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n}\r\nObjectMaker.language = \"\";\n\nfunction isObjectType(value) {\r\n    return !(typeof value == \"string\" || typeof value === \"number\" || typeof value === \"boolean\" || value instanceof Date);\r\n}\r\nfunction isObject(value) {\r\n    return Object.prototype.toString.call(value) === '[object Object]';\r\n}\r\nfunction clone(jsonObject) {\r\n    let jObject = {};\r\n    if (isObjectType(jsonObject)) {\r\n        for (var columnName in jsonObject) {\r\n            if ((columnName != \"formGroup\")) {\r\n                if (Array.isArray(jsonObject[columnName])) {\r\n                    jObject[columnName] = [];\r\n                    for (let row of jsonObject[columnName]) {\r\n                        if (isObject(row))\r\n                            jObject[columnName].push(clone(row));\r\n                        else\r\n                            jObject[columnName].push(row);\r\n                    }\r\n                }\r\n                else if (typeof jsonObject[columnName] == \"object\" && !(jsonObject[columnName] instanceof RegExp))\r\n                    jObject[columnName] = clone(jsonObject[columnName]);\r\n                else\r\n                    jObject[columnName] = jsonObject[columnName];\r\n            }\r\n        }\r\n        return jObject;\r\n    }\r\n    else\r\n        return jsonObject;\r\n}\r\nfunction merge(firstObject, secondObject) {\r\n    for (var columnName in secondObject) {\r\n        if (Array.isArray(secondObject[columnName])) {\r\n            if (!firstObject[columnName])\r\n                firstObject[columnName] = [];\r\n            for (let row of secondObject[columnName])\r\n                firstObject[columnName].push(clone(row));\r\n        }\r\n        else if (typeof firstObject[columnName] == \"object\" && !(firstObject[columnName] instanceof RegExp))\r\n            firstObject[columnName] = merge(firstObject[columnName], secondObject[columnName]);\r\n        else\r\n            firstObject[columnName] = secondObject[columnName];\r\n    }\r\n    return firstObject;\r\n}\r\nfunction isMatched(jsonObject, compareObject) {\r\n    let isModified = false;\r\n    for (var columnName in compareObject) {\r\n        if (Array.isArray(jsonObject[columnName])) {\r\n            for (var i = 0; i < jsonObject[columnName].length; i++) {\r\n                isModified = isMatched(jsonObject[columnName][i], compareObject[columnName][i]);\r\n            }\r\n        }\r\n        else if (typeof jsonObject[columnName] == \"object\" && !(jsonObject[columnName] instanceof RegExp))\r\n            isModified = isMatched(jsonObject[columnName], compareObject[columnName]);\r\n        else\r\n            isModified = !(jsonObject[columnName] == compareObject[columnName]);\r\n        if (isModified)\r\n            break;\r\n    }\r\n    return isModified;\r\n}\n\nconst PROP_ARRAY = \"propArray\";\r\nclass RxFormArray extends FormArray {\r\n    constructor(arrayObject, controls, validatorOrOpts, asyncValidator, arrayConfig) {\r\n        super(controls, validatorOrOpts, asyncValidator);\r\n        this.arrayObject = arrayObject;\r\n        this.arrayConfig = arrayConfig;\r\n        this._isModified = false;\r\n        this._modified = [];\r\n        this.cloneObject(arrayObject);\r\n    }\r\n    get isModified() {\r\n        return this._isModified;\r\n    }\r\n    push(control, options = { isAddedInstance: false }) {\r\n        let formGroup = this.root;\r\n        if (this.arrayObject)\r\n            if (control.modelInstance) {\r\n                if (!options.isAddedInstance)\r\n                    this.arrayObject.push(control.modelInstance);\r\n                else\r\n                    this.arrayObject[this.arrayObject.length] = control.modelInstance;\r\n            }\r\n        super.push(control);\r\n        if (formGroup[VALUE_CHANGED_SYNC])\r\n            formGroup.valueChangedSync();\r\n        this.patch();\r\n        this.checkValidation();\r\n    }\r\n    patch() {\r\n        this.checkModification();\r\n        if (this.parent)\r\n            this.parent[PATCH]();\r\n    }\r\n    resetForm(options) {\r\n        if (options && options.index >= 0 && options.groupOption) {\r\n            this.controls[options.index].resetForm(options.groupOption);\r\n        }\r\n        else {\r\n            for (var i = 0; i < this._baseValue.length; i++) {\r\n                if (this.controls[i] !== undefined)\r\n                    this.controls[i].resetForm({ value: this._baseValue[i] });\r\n                else if (options && options.pushFunction) {\r\n                    let formGroup = options.pushFunction(this._baseValue[i]);\r\n                    this.push(formGroup);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    commit() {\r\n        this._baseValue = [];\r\n        for (let formGroup of this.controls) {\r\n            formGroup.commit();\r\n            this._baseValue.push(clone(formGroup.value));\r\n        }\r\n        this.patch();\r\n    }\r\n    removeAt(index, options = { isRemovedInstance: false }) {\r\n        let formGroup = this.root;\r\n        if (!options.isRemovedInstance)\r\n            this.arrayObject.splice(index, 1);\r\n        else {\r\n            for (var i = index; i < this.arrayObject.length - 1; i++)\r\n                this.arrayObject[i] = this.arrayObject[i + 1];\r\n            this.arrayObject.pop();\r\n        }\r\n        super.removeAt(index, options);\r\n        if (formGroup[VALUE_CHANGED_SYNC])\r\n            formGroup.valueChangedSync();\r\n        this.patch();\r\n        this.checkValidation();\r\n    }\r\n    checkValidation() {\r\n        setTimeout(() => {\r\n            if (this.arrayConfig != undefined && this.arrayConfig.allowMaxIndex && this.length > this.arrayConfig.allowMaxIndex)\r\n                this.setErrors(ObjectMaker.toJson(PROP_ARRAY, this.arrayConfig, [this.length, this.arrayConfig.allowMaxIndex]));\r\n            else if (this.errors && this.errors[PROP_ARRAY])\r\n                delete this.errors[PROP_ARRAY];\r\n        });\r\n    }\r\n    checkModification() {\r\n        this._isModified = !(this._baseValue.length == this.controls.length);\r\n        if (!this._isModified)\r\n            for (var i = 0; i < this.controls.length; i++) {\r\n                this._isModified = isMatched(this._baseValue[i], this.controls[i].value);\r\n                if (this._isModified)\r\n                    break;\r\n            }\r\n    }\r\n    cloneObject(value) {\r\n        this._baseValue = [];\r\n        for (let row of value) {\r\n            this._baseValue.push(clone(row));\r\n        }\r\n    }\r\n}\n\nvar NumericValueType;\r\n(function (NumericValueType) {\r\n    NumericValueType[NumericValueType[\"PositiveNumber\"] = 1] = \"PositiveNumber\";\r\n    NumericValueType[NumericValueType[\"NegativeNumber\"] = 2] = \"NegativeNumber\";\r\n    NumericValueType[NumericValueType[\"Both\"] = 3] = \"Both\";\r\n})(NumericValueType || (NumericValueType = {}));\n\nvar IpVersion;\r\n(function (IpVersion) {\r\n    IpVersion[IpVersion[\"V4\"] = 1] = \"V4\";\r\n    IpVersion[IpVersion[\"V6\"] = 2] = \"V6\";\r\n    IpVersion[IpVersion[\"AnyOne\"] = 3] = \"AnyOne\";\r\n})(IpVersion || (IpVersion = {}));\n\nvar ErrorMessageBindingStrategy;\r\n(function (ErrorMessageBindingStrategy) {\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"None\"] = 0] = \"None\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnSubmit\"] = 1] = \"OnSubmit\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnDirty\"] = 2] = \"OnDirty\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnTouched\"] = 3] = \"OnTouched\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnDirtyOrTouched\"] = 4] = \"OnDirtyOrTouched\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnDirtyOrSubmit\"] = 5] = \"OnDirtyOrSubmit\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnTouchedOrSubmit\"] = 6] = \"OnTouchedOrSubmit\";\r\n})(ErrorMessageBindingStrategy || (ErrorMessageBindingStrategy = {}));\n\nvar ResetFormType;\r\n(function (ResetFormType) {\r\n    ResetFormType[ResetFormType[\"ControlsOnly\"] = 1] = \"ControlsOnly\";\r\n    ResetFormType[ResetFormType[\"FormGroupsOnly\"] = 2] = \"FormGroupsOnly\";\r\n    ResetFormType[ResetFormType[\"FormArraysOnly\"] = 3] = \"FormArraysOnly\";\r\n    ResetFormType[ResetFormType[\"ControlsAndFormGroupsOnly\"] = 4] = \"ControlsAndFormGroupsOnly\";\r\n    ResetFormType[ResetFormType[\"DefinedPropsOnly\"] = 5] = \"DefinedPropsOnly\";\r\n    ResetFormType[ResetFormType[\"All\"] = 6] = \"All\";\r\n})(ResetFormType || (ResetFormType = {}));\n\nconst MODEL_INSTANCE_VALUE = \"modelInstanceValue\";\r\nclass ApplicationUtil {\r\n    static getParentObjectValue(control) {\r\n        if (control.parent) {\r\n            let parent = this.parentObjectValue(control.parent);\r\n            return parent.value;\r\n        }\r\n        return {};\r\n    }\r\n    static getParentModelInstanceValue(control) {\r\n        if (control.parent) {\r\n            let parent = this.parentObjectValue(control.parent);\r\n            return parent[MODEL_INSTANCE_VALUE];\r\n        }\r\n        return {};\r\n    }\r\n    static getRootFormGroup(control) {\r\n        if (control.parent) {\r\n            return this.getRootFormGroup(control.parent);\r\n        }\r\n        return control;\r\n    }\r\n    static getParentControl(control) {\r\n        if (control.parent) {\r\n            let parent = this.parentObjectValue(control.parent);\r\n            return parent;\r\n        }\r\n        return control;\r\n    }\r\n    static getFormControlName(control) {\r\n        let controlName = '';\r\n        if (control.parent) {\r\n            for (var formControlName in control.parent.controls) {\r\n                if (control.parent.controls[formControlName] == control) {\r\n                    controlName = formControlName;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return controlName;\r\n    }\r\n    static getParentFormArray(control) {\r\n        if (control.parent && !(control.parent instanceof FormArray || control.parent instanceof RxFormArray)) {\r\n            let parent = this.getParentFormArray(control.parent);\r\n            return parent;\r\n        }\r\n        return control.parent;\r\n    }\r\n    static toLower(value) {\r\n        if (value)\r\n            return String(value).toLowerCase().trim();\r\n        return value;\r\n    }\r\n    static getControl(fieldName, formGroup) {\r\n        let splitText = fieldName.split('.');\r\n        if (splitText.length > 1) {\r\n            var formControl = formGroup;\r\n            splitText.forEach((name, index) => { formControl = formControl.controls[name]; });\r\n            return formControl;\r\n        }\r\n        else\r\n            return formGroup.controls[fieldName];\r\n    }\r\n    static getFormControl(fieldName, control) {\r\n        let splitText = fieldName.split('.');\r\n        if (splitText.length > 1 && control.parent) {\r\n            var formControl = this.getParentControl(control);\r\n            splitText.forEach((name, index) => { formControl = formControl.controls[name]; });\r\n            return formControl;\r\n        }\r\n        return (control.parent) ? control.parent.get([fieldName]) : undefined;\r\n    }\r\n    static parentObjectValue(control) {\r\n        if (!control.parent)\r\n            return control;\r\n        else\r\n            control = this.parentObjectValue(control.parent);\r\n        return control;\r\n    }\r\n    static isNumeric(value) {\r\n        return (value - parseFloat(value) + 1) >= 0;\r\n    }\r\n    static notEqualTo(primaryValue, secondaryValue) {\r\n        let firstValue = (primaryValue === undefined || primaryValue === null) ? \"\" : primaryValue;\r\n        let secondValue = (secondaryValue === undefined || secondaryValue === null) ? \"\" : secondaryValue;\r\n        if (firstValue instanceof Date && secondValue instanceof Date)\r\n            return +firstValue != +secondValue;\r\n        return (firstValue != secondValue);\r\n    }\r\n    static numericValidation(allowDecimal, acceptValue) {\r\n        let decimalSymbol;\r\n        if (ReactiveFormConfig && ReactiveFormConfig.number) {\r\n            decimalSymbol = (ReactiveFormConfig.json && ReactiveFormConfig.json.allowDecimalSymbol) ? ReactiveFormConfig.json.allowDecimalSymbol : ReactiveFormConfig.number.decimalSymbol;\r\n        }\r\n        else {\r\n            decimalSymbol = \".\";\r\n        }\r\n        acceptValue = (acceptValue == undefined) ? NumericValueType.PositiveNumber : acceptValue;\r\n        let regex = /^[0-9]+$/;\r\n        switch (acceptValue) {\r\n            case NumericValueType.PositiveNumber:\r\n                regex = (!allowDecimal) ? /^[0-9]+$/ : (decimalSymbol == \".\" || decimalSymbol == undefined) ? /^[0-9\\.]+$/ : /^[0-9\\,]+$/;\r\n                break;\r\n            case NumericValueType.NegativeNumber:\r\n                regex = (!allowDecimal) ? /^[-][0-9]+$/ : (decimalSymbol == \".\" || decimalSymbol == undefined) ? /^[-][0-9\\.]+$/ : /^[-][0-9\\,]+$/;\r\n                break;\r\n            case NumericValueType.Both:\r\n                regex = (!allowDecimal) ? /^[-|+]?[0-9]+$/ : (decimalSymbol == \".\" || decimalSymbol == undefined) ? /^[-|+]?[0-9\\.]+$/ : /^[-|+]?[0-9\\,]+$/;\r\n                break;\r\n        }\r\n        return regex;\r\n    }\r\n    static configureControl(control, config, type) {\r\n        if (!control.validatorConfig) {\r\n            let jObject = {};\r\n            jObject[type] = config;\r\n            Object.assign(control, { validatorConfig: jObject });\r\n        }\r\n        else\r\n            control.validatorConfig[type] = config;\r\n    }\r\n    static lowerCaseWithTrim(value) {\r\n        return typeof value === \"string\" ? value.toLowerCase().trim() : String(value).toLowerCase().trim();\r\n    }\r\n    /** Check if a value is an object */\r\n    static isObject(value) {\r\n        return Object.prototype.toString.call(value) === '[object Object]';\r\n    }\r\n    /** Check if a value is an object */\r\n    static isArray(value) {\r\n        return Array.isArray(value);\r\n    }\r\n    static cloneValue(value) {\r\n        return ApplicationUtil.isObject(value) ? ApplicationUtil.isArray(value) ? [...value] : Object.assign({}, value) : value;\r\n    }\r\n}\n\nfunction instanceProvider(instanceFunc, entityObject) {\r\n    let instance = defaultContainer.get(instanceFunc);\r\n    let prototype = entityObject ? entityObject.__proto__ : getInstance(instanceFunc, []).__proto__;\r\n    if (prototype.__proto__) {\r\n        let isLoop = false;\r\n        do {\r\n            isLoop = prototype.__proto__.constructor != Object;\r\n            if (isLoop) {\r\n                let extendClassInstance = defaultContainer.get(prototype.__proto__.constructor);\r\n                instance = merge(clone(instance), clone(extendClassInstance));\r\n                prototype = prototype.__proto__;\r\n            }\r\n        } while (isLoop);\r\n    }\r\n    return instance;\r\n}\r\nfunction getInstance(model, objectArguments) {\r\n    let classInstance = Object.create(model.prototype);\r\n    try {\r\n        model.apply(classInstance, objectArguments);\r\n    }\r\n    catch (ex) {\r\n        ///resolution of issue https://github.com/rxweb/rxweb/issues/188\r\n        classInstance = Reflect.construct(model, objectArguments);\r\n    }\r\n    return classInstance;\r\n}\n\nclass DisableProvider {\r\n    constructor(decoratorType, entityObject) {\r\n        this.decoratorType = decoratorType;\r\n        this.entityObject = entityObject;\r\n    }\r\n    getFormGroupName(currentFormGroup) {\r\n        let keyName = '';\r\n        if (currentFormGroup.parent)\r\n            for (var controlName of Object.keys(currentFormGroup.parent.controls))\r\n                if (currentFormGroup.parent.controls[controlName] == currentFormGroup) {\r\n                    keyName = controlName;\r\n                    break;\r\n                }\r\n        return keyName;\r\n    }\r\n    zeroArgumentProcess(control, columnName) {\r\n        let disabledColumns = [];\r\n        this.getDisabledColumns(control.parent, `${columnName}${RXCODE}0`, false).forEach(t => disabledColumns.push(t));\r\n        let path = this.topControlPath(control, columnName);\r\n        let splitPath = path.split(\".\");\r\n        if (splitPath.length > 1) {\r\n            let rootFormGroup = ApplicationUtil.getRootFormGroup(control);\r\n            this.getDisabledColumns(rootFormGroup, `${path}${RXCODE}0`, true).forEach(t => disabledColumns.push(t));\r\n            let controlPath = '';\r\n            for (var i = 0; i < splitPath.length - 2; i++) {\r\n                let controlName = splitPath[i];\r\n                controlPath = `${path.replace(`${controlName}.`, '')}${RXCODE}-0`;\r\n                if (rootFormGroup.controls[controlName]) {\r\n                    this.getDisabledColumns(rootFormGroup.controls[controlName], controlPath, true, controlName).forEach(t => disabledColumns.push(t));\r\n                    rootFormGroup = rootFormGroup.controls[controlName];\r\n                }\r\n            }\r\n        }\r\n        return disabledColumns;\r\n    }\r\n    getDisabledColumns(formGroup, columnName, isRoot, pathName = \"\") {\r\n        if (formGroup[MODEL_INSTANCE]) {\r\n            let instanceContainer = instanceProvider(formGroup[MODEL_INSTANCE].constructor, this.entityObject);\r\n            return this.getChangeDetectionColumns(instanceContainer, columnName, isRoot, pathName);\r\n        }\r\n        return [];\r\n    }\r\n    getChangeDetectionColumns(instanceContainer, columnName, isRoot, pathName = \"\") {\r\n        let conditionalDisableControls = [];\r\n        let columns = instanceContainer.nonValidationDecorators[this.decoratorType].changeDetection[columnName];\r\n        if (columns) {\r\n            columns.forEach(t => {\r\n                conditionalDisableControls.push({ controlPath: pathName ? `${pathName}.${t}` : t, conditionalExpression: instanceContainer.nonValidationDecorators[this.decoratorType].conditionalExpressions[t], isRoot: isRoot });\r\n            });\r\n        }\r\n        return conditionalDisableControls;\r\n    }\r\n    topControlPath(control, columnName) {\r\n        if (control.parent) {\r\n            let name = this.getFormGroupName(control.parent);\r\n            if (name) {\r\n                columnName = `${name}.${columnName}`;\r\n                return this.topControlPath(control.parent, columnName);\r\n            }\r\n        }\r\n        return columnName;\r\n    }\r\n    childControlDisabledExpression(formGroup, columnName, path = \"\") {\r\n        let disabledColumns = [];\r\n        if (formGroup[MODEL_INSTANCE]) {\r\n            let instanceContainer = defaultContainer.get(formGroup[MODEL_INSTANCE].constructor);\r\n            if (instanceContainer) {\r\n                this.getChangeDetectionColumns(instanceContainer, columnName, true, path).forEach(t => disabledColumns.push(t));\r\n                var props = instanceContainer.properties.filter(t => t.propertyType == OBJECT_PROPERTY);\r\n                props.forEach(t => {\r\n                    if (formGroup.controls[t.name]) {\r\n                        let columns = this.getDisabledColumns(formGroup.controls[t.name], columnName, true, path ? `${path}.${t.name}` : `${t.name}`);\r\n                        columns.forEach(x => disabledColumns.push(x));\r\n                        this.childControlDisabledExpression(formGroup.controls[t.name], columnName, path ? `${path}.${t.name}` : `${t.name}`).forEach(y => disabledColumns.push(y));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return disabledColumns;\r\n    }\r\n    oneArgumentProcess(control, columnName) {\r\n        let path = this.topControlPath(control, columnName);\r\n        let rootFormGroup = ApplicationUtil.getRootFormGroup(control);\r\n        let childColumns = this.childControlDisabledExpression(rootFormGroup, path);\r\n        return childColumns;\r\n    }\r\n}\n\nconst ISO_DATE_REGEX = /^(?:[\\+-]?\\d{4}(?!\\d{2}\\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\\1(?:[12]\\d|0[1-9]|3[01]))?|W(?:[0-4]\\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\\d|[12]\\d{2}|3(?:[0-5]\\d|6[1-6])))(?:[T\\s](?:(?:(?:[01]\\d|2[0-3])(?:(:?)[0-5]\\d)?|24\\:?00)(?:[\\.,]\\d+(?!:))?)?(?:\\2[0-5]\\d(?:[\\.,]\\d+)?)?(?:[zZ]|(?:[\\+-])(?:[01]\\d|2[0-3]):?(?:[0-5]\\d)?)?)?)?$/;\r\nclass DateProvider {\r\n    isDate(value) {\r\n        return value instanceof Date && !isNaN(value.valueOf());\r\n    }\r\n    getRegex(dateFormat) {\r\n        var regExp;\r\n        switch (dateFormat) {\r\n            case 'ymd':\r\n                regExp = \"^(?:[0-9]{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])$\";\r\n                break;\r\n            case 'dmy':\r\n                regExp = \"^(3[01]|[12][0-9]|0?[1-9])-(1[0-2]|0?[1-9])-(?:[0-9]{2})?[0-9]{2}$\";\r\n                break;\r\n            case 'mdy':\r\n                regExp = \"^(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])-(?:[0-9]{2})?[0-9]{2}$\";\r\n                break;\r\n        }\r\n        return new RegExp(regExp);\r\n    }\r\n    regex(config) {\r\n        var regExp;\r\n        if (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.dateFormat && ReactiveFormConfig.json.internationalization.seperator)\r\n            regExp = this.getRegex(config.dateFormat || ReactiveFormConfig.json.internationalization.dateFormat);\r\n        else\r\n            regExp = (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.dateFormat) ? this.getRegex(config.dateFormat || ReactiveFormConfig.json.baseConfig.dateFormat) : this.getRegex(config.dateFormat || \"mdy\");\r\n        return regExp;\r\n    }\r\n    getDate(value, configDateFormat = undefined, isBaseFormat = false) {\r\n        let year, month, day;\r\n        if (!this.isDate(value)) {\r\n            let seperator;\r\n            let dateFormat;\r\n            if (ISO_DATE_REGEX.test(value)) {\r\n                return new Date(value);\r\n            }\r\n            else {\r\n                seperator = ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.seperator ? ReactiveFormConfig.json.baseConfig.seperator : \"/\";\r\n                dateFormat = configDateFormat || ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.dateFormat ? ReactiveFormConfig.json.baseConfig.dateFormat : \"mdy\";\r\n            }\r\n            if (!isBaseFormat && ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.dateFormat && ReactiveFormConfig.json.internationalization.seperator) {\r\n                seperator = ReactiveFormConfig.json.internationalization.seperator;\r\n                dateFormat = configDateFormat || ReactiveFormConfig.json.internationalization.dateFormat;\r\n            }\r\n            switch (dateFormat) {\r\n                case 'ymd':\r\n                    [year, month, day] = value.split(seperator).map((val) => +val);\r\n                    break;\r\n                case 'dmy':\r\n                    [day, month, year] = value.split(seperator).map((val) => +val);\r\n                    break;\r\n                case 'mdy':\r\n                    [month, day, year] = value.split(seperator).map((val) => +val);\r\n                    break;\r\n            }\r\n            return new Date(year, month - 1, day);\r\n        }\r\n        else\r\n            return value;\r\n    }\r\n    isValid(value, config) {\r\n        if (config && config.isValid)\r\n            return config.isValid(value);\r\n        if (typeof value == \"string\") {\r\n            // Fixed issue : https://github.com/rxweb/rxweb/issues/280 & feature request : https://github.com/rxweb/rxweb/issues/295\r\n            if (config && config.allowISODate && ISO_DATE_REGEX.test(value))\r\n                return true;\r\n            let seperator = '/';\r\n            if (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.seperator)\r\n                seperator = ReactiveFormConfig.json.baseConfig.seperator;\r\n            if (ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.seperator)\r\n                seperator = ReactiveFormConfig.json.internationalization.seperator;\r\n            if (value.split(seperator).length !== 3)\r\n                return false;\r\n            value = value.replace(seperator, '-').replace(seperator, '-');\r\n            return this.regex(config).test(value);\r\n        }\r\n        else\r\n            return this.isDate(value);\r\n    }\r\n    getConfigDateValue(config) {\r\n        let date = config.value;\r\n        if (config.value && typeof config.value == \"string\") {\r\n            date = this.getDate(config.value, config.dateFormat, true);\r\n        }\r\n        return date;\r\n    }\r\n    getCompareDate(config, control) {\r\n        let date = this.getConfigDateValue(config);\r\n        if (config.fieldName) {\r\n            let checkControl = ApplicationUtil.getFormControl(config.fieldName, control);\r\n            if (checkControl && checkControl.value) {\r\n                date = this.getDate(checkControl.value, config.dateFormat);\r\n            }\r\n        }\r\n        return date;\r\n    }\r\n}\n\nfunction isNotBlank(value) {\r\n    return (value !== undefined && value !== null && value !== \"\");\r\n}\r\nfunction trim$1(value) {\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\")\r\n            return value.trim();\r\n    return value;\r\n}\r\n;\r\nfunction ltrim$1(value) {\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\")\r\n            return value.replace(/^\\s+/g, '');\r\n    return value;\r\n}\r\nfunction rtrim$1(value) {\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\")\r\n            return value.replace(/\\s+$/g, '');\r\n    return value;\r\n}\r\nfunction blacklist$1(value, chars) {\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\")\r\n            return value.replace(new RegExp('[$' + chars + ']+', 'g'), '');\r\n    return value;\r\n}\r\n;\r\nfunction stripLow$1(value, keepNewLines) {\r\n    let chars = keepNewLines === true ? '\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F' : '\\x00-\\x1F\\x7F';\r\n    return blacklist$1(value, chars);\r\n}\r\nfunction toBoolean$1(value, strict) {\r\n    if (isNotBlank(value)) {\r\n        if (strict) {\r\n            return value === '1' || value === 'true';\r\n        }\r\n        return value !== '0' && value !== 'false' && value !== '';\r\n    }\r\n    return value;\r\n}\r\nfunction toFloat$1(value) {\r\n    if (isNotBlank(value)) {\r\n        var decimalSymbol = '.';\r\n        if (ReactiveFormConfig && ReactiveFormConfig.number) {\r\n            decimalSymbol = (ReactiveFormConfig.json && ReactiveFormConfig.json.allowDecimalSymbol) ? ReactiveFormConfig.json.allowDecimalSymbol : ReactiveFormConfig.number.decimalSymbol;\r\n        }\r\n        if (decimalSymbol == ',' && typeof value == \"string\")\r\n            value = value.replace(',', '.');\r\n        if (ApplicationUtil.isNumeric(value))\r\n            return parseFloat(value);\r\n    }\r\n    return null;\r\n}\r\nfunction toDouble$1(value) {\r\n    return toFloat$1(value);\r\n}\r\nfunction toInt$1(value, radix) {\r\n    if (isNotBlank(value))\r\n        if (ApplicationUtil.isNumeric(value))\r\n            return parseInt(value, radix || 10);\r\n    return null;\r\n}\r\nfunction toString$1(value, radix) {\r\n    if (isNotBlank(value))\r\n        return String(value);\r\n    return value;\r\n}\r\nfunction whitelist$1(value, chars) {\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\")\r\n            return value.replace(new RegExp(`[^${chars}]+`, 'g'), '');\r\n    return value;\r\n}\r\nfunction toDate$1(value, config) {\r\n    var dateProvider = new DateProvider();\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\" && dateProvider.isValid(value, config)) {\r\n            value = dateProvider.getDate(value);\r\n            return value;\r\n        }\r\n    return null;\r\n}\r\nfunction escape$1(value) {\r\n    if (isNotBlank(value))\r\n        return (value.replace(/&/g, '&amp;')\r\n            .replace(/\"/g, '&quot;')\r\n            .replace(/'/g, '&#x27;')\r\n            .replace(/</g, '&lt;')\r\n            .replace(/>/g, '&gt;')\r\n            .replace(/\\//g, '&#x2F;')\r\n            .replace(/\\\\/g, '&#x5C;')\r\n            .replace(/`/g, '&#96;'));\r\n    return value;\r\n}\r\nfunction prefix$1(value, text) {\r\n    if (isNotBlank(value))\r\n        return `${text}${value}`;\r\n    return value;\r\n}\r\nfunction suffix$1(value, text) {\r\n    if (isNotBlank(value))\r\n        return `${value}${text}`;\r\n    return value;\r\n}\r\nfunction sanitize$1(value, config) {\r\n    return config.custom(value);\r\n}\r\nconst SANITIZERS = {\r\n    trim: trim$1,\r\n    ltrim: ltrim$1,\r\n    rtrim: rtrim$1,\r\n    blacklist: blacklist$1,\r\n    stripLow: stripLow$1,\r\n    toBoolean: toBoolean$1,\r\n    toDouble: toDouble$1,\r\n    toFloat: toFloat$1,\r\n    toInt: toInt$1,\r\n    'toString': toString$1,\r\n    whitelist: whitelist$1,\r\n    toDate: toDate$1,\r\n    escape: escape$1,\r\n    prefix: prefix$1,\r\n    suffix: suffix$1,\r\n    sanitize: sanitize$1\r\n};\n\nconst DIRTY = \"dirty\";\r\nconst TOUCHED = \"touched\";\r\nconst UNTOUCHED = \"untouched\";\r\nconst PRISTINE = \"pristine\";\r\nconst PENDING = \"pending\";\r\nclass RxFormControl extends FormControl {\r\n    constructor(formState, validator, asyncValidator, entityObject, baseObject, controlName, _sanitizers) {\r\n        super(formState, validator, asyncValidator);\r\n        this.entityObject = entityObject;\r\n        this.baseObject = baseObject;\r\n        this._sanitizers = _sanitizers;\r\n        this._errorMessages = [];\r\n        this._childColumns = [];\r\n        this._refDisableControls = [];\r\n        this._refMessageControls = [];\r\n        this._refClassNameControls = [];\r\n        this._isPassedExpression = false;\r\n        this._dirty = false;\r\n        this.backEndErrors = {};\r\n        this.defineErrorsProperty();\r\n        this._baseValue = formState === undefined ? null : this.getFormState(formState);\r\n        this._isModified = false;\r\n        this.keyName = controlName;\r\n        this._validators = validator.validators;\r\n        this._asyncValidators = validator.asyncValidators;\r\n        this._errorMessageBindingStrategy = ReactiveFormConfig.get(\"reactiveForm.errorMessageBindingStrategy\");\r\n        if (this._sanitizers) {\r\n            var floatSanitizer = this._sanitizers.filter(t => t.name == \"toFloat\")[0];\r\n            if (floatSanitizer && this._baseValue && ReactiveFormConfig.number && ReactiveFormConfig.number.decimalSymbol == \",\") {\r\n                let baseValue = String(this._baseValue);\r\n                if (baseValue.indexOf('.') != -1) {\r\n                    this._baseValue = baseValue.replace(\".\", ReactiveFormConfig.number.decimalSymbol);\r\n                    super.setValue(this._baseValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    get errorMessages() {\r\n        if (!this._messageExpression) {\r\n            if (this._errorMessages.length == 0 && this.errors)\r\n                this.setControlErrorMessages();\r\n        }\r\n        else if (this._messageExpression && !this._isPassedExpression)\r\n            return [];\r\n        if (!this.errors && this._errorMessages.length > 0)\r\n            this.setControlErrorMessages();\r\n        if (this._language != this.getLanguage())\r\n            this.setControlErrorMessages();\r\n        return this._errorMessages;\r\n    }\r\n    get errorMessage() {\r\n        if (!this._messageExpression) {\r\n            if (this._errorMessage == undefined && this.errors)\r\n                this.setControlErrorMessages();\r\n        }\r\n        else if (this._messageExpression && !this._isPassedExpression)\r\n            return undefined;\r\n        if (!this.errors && this._errorMessage)\r\n            this.setControlErrorMessages();\r\n        if (this._language != this.getLanguage())\r\n            this.setControlErrorMessages();\r\n        return this._errorMessage;\r\n    }\r\n    defineErrorsProperty() {\r\n        Object.defineProperty(this, \"errors\", {\r\n            configurable: true,\r\n            get() {\r\n                if (this._language && this._language != this.getLanguage() && this.validator) {\r\n                    this[\"errors\"] = this.validator(this);\r\n                }\r\n                return this._errors;\r\n            },\r\n            set(value) { this._errors = value; },\r\n        });\r\n    }\r\n    getFormState(value) {\r\n        let baseValue = value;\r\n        if (Array.isArray(value)) {\r\n            baseValue = [];\r\n            value.forEach(t => baseValue.push(t));\r\n        }\r\n        return baseValue;\r\n    }\r\n    get isModified() {\r\n        return this._isModified;\r\n    }\r\n    getValidators() {\r\n        return this.getValidatorSource(this._validators);\r\n    }\r\n    getAsyncValidators() {\r\n        return this.getValidatorSource(this._asyncValidators);\r\n    }\r\n    getValidatorSource(validators) {\r\n        if (validators)\r\n            return Array.isArray(validators) ? [...validators] : [validators];\r\n        return [];\r\n    }\r\n    setValidators(newValidator) {\r\n        this._validators = newValidator;\r\n        super.setValidators(newValidator);\r\n    }\r\n    setAsyncValidators(newValidator) {\r\n        this._asyncValidators = newValidator;\r\n        super.setAsyncValidators(newValidator);\r\n    }\r\n    setValue(value, options) {\r\n        this.parent.changing = true;\r\n        let parsedValue = this.getSanitizedValue(value);\r\n        if (options && options.dirty)\r\n            this.baseObject[this.keyName] = value;\r\n        this.entityObject[this.keyName] = parsedValue;\r\n        super.setValue(value, options);\r\n        this.bindError();\r\n        this.bindClassName();\r\n        this.executeExpressions();\r\n        this.callPatch();\r\n        if (options && !options.updateChanged && this.root[VALUE_CHANGED_SYNC]) {\r\n            this.root[VALUE_CHANGED_SYNC]();\r\n        }\r\n        this.parent.changing = false;\r\n    }\r\n    getControlValue() {\r\n        return this.getSanitizedValue(this.value);\r\n    }\r\n    bindError() {\r\n        if (this._messageExpression)\r\n            this._isPassedExpression = this.executeExpression(this._messageExpression, this);\r\n        this.setControlErrorMessages();\r\n        var t = this;\r\n        t[\"errors\"] = this.errors;\r\n    }\r\n    bindClassName() {\r\n        if (this.updateOnElementClass && typeof this.updateOnElementClass === \"function\") {\r\n            let className = this.executeExpression(this._classNameExpression, this);\r\n            let updateElement = this.updateOnElementClass;\r\n            updateElement(className);\r\n        }\r\n    }\r\n    setBackEndErrors(error) {\r\n        Object.keys(error).forEach(key => this.backEndErrors[key] = error[key]);\r\n        this.setControlErrorMessages();\r\n    }\r\n    clearBackEndErrors(errors) {\r\n        if (!errors)\r\n            this.backEndErrors = {};\r\n        else\r\n            Object.keys(errors).forEach(t => delete this.backEndErrors[t]);\r\n        this.setControlErrorMessages();\r\n    }\r\n    markAsTouched(opts) {\r\n        let currentState = this.touched;\r\n        super.markAsTouched(opts);\r\n        if (currentState != this.touched)\r\n            this.runControlPropChangeExpression([TOUCHED, UNTOUCHED]);\r\n    }\r\n    markAsUntouched(opts) {\r\n        let currentState = this.untouched;\r\n        super.markAsUntouched(opts);\r\n        if (currentState != this.untouched)\r\n            this.runControlPropChangeExpression([UNTOUCHED, TOUCHED]);\r\n    }\r\n    markAsDirty(opts) {\r\n        let currentState = this._dirty;\r\n        super.markAsDirty(opts);\r\n        this._dirty = true;\r\n        if (currentState != this._dirty)\r\n            this.runControlPropChangeExpression([DIRTY]);\r\n    }\r\n    markAsPristine(opts) {\r\n        let currentState = this.pristine;\r\n        super.markAsPristine(opts);\r\n        if (currentState != this.pristine)\r\n            this.runControlPropChangeExpression([PRISTINE]);\r\n    }\r\n    markAsPending(opts) {\r\n        let currentState = this.pending;\r\n        super.markAsDirty(opts);\r\n        if (currentState != this.pending)\r\n            this.runControlPropChangeExpression([PENDING]);\r\n    }\r\n    runControlPropChangeExpression(propNames) {\r\n        propNames.forEach(name => {\r\n            if ((this._controlProp && this._messageExpression && this._controlProp[name]) || (!this._messageExpression && this.checkErrorMessageStrategy()))\r\n                this.bindError();\r\n            if (this._classNameControlProp && this._classNameControlProp[name])\r\n                this.bindClassName();\r\n        });\r\n    }\r\n    refresh() {\r\n        this.getMessageExpression(this.parent, this.keyName);\r\n        this.bindConditionalControls(DECORATORS.disabled, \"_refDisableControls\");\r\n        this.bindConditionalControls(DECORATORS.error, \"_refMessageControls\");\r\n        this.bindConditionalControls(DECORATORS.elementClass, \"_refClassNameControls\");\r\n        this.executeExpressions();\r\n        this.bindError();\r\n    }\r\n    reset(value, options = {}) {\r\n        if (value !== undefined)\r\n            this.setValue(value, options);\r\n        else\r\n            this.setValue(this.getFormState(this._baseValue), options);\r\n        this._dirty = false;\r\n    }\r\n    commit() {\r\n        this._baseValue = this.value;\r\n        this.callPatch();\r\n    }\r\n    callPatch() {\r\n        this._isModified = this.getValue(this._baseValue) != this.getValue(this.value);\r\n        if (this.parent && this.parent[PATCH])\r\n            this.parent[PATCH](this.keyName);\r\n    }\r\n    checkErrorMessageStrategy() {\r\n        let isBind = true;\r\n        switch (this._errorMessageBindingStrategy) {\r\n            case ErrorMessageBindingStrategy.OnSubmit:\r\n                isBind = this.parent.submitted;\r\n                break;\r\n            case ErrorMessageBindingStrategy.OnDirty:\r\n                isBind = this._dirty;\r\n                break;\r\n            case ErrorMessageBindingStrategy.OnTouched:\r\n                isBind = this.touched;\r\n                break;\r\n            case ErrorMessageBindingStrategy.OnDirtyOrTouched:\r\n                isBind = this._dirty || this.touched;\r\n                break;\r\n            case ErrorMessageBindingStrategy.OnDirtyOrSubmit:\r\n                isBind = this._dirty || this.parent.submitted;\r\n                break;\r\n            case ErrorMessageBindingStrategy.OnTouchedOrSubmit:\r\n                isBind = this.touched || this.parent.submitted;\r\n                break;\r\n            default:\r\n                isBind = true;\r\n        }\r\n        return isBind;\r\n    }\r\n    executeExpressions() {\r\n        this.processExpression(\"_refDisableControls\", \"disabled\");\r\n        this.processExpression(\"_refMessageControls\", \"bindError\");\r\n        this.processExpression(\"_refClassNameControls\", \"bindClassName\");\r\n    }\r\n    getMessageExpression(formGroup, keyName) {\r\n        if (formGroup[MODEL_INSTANCE]) {\r\n            let instanceContainer = defaultContainer.get(formGroup[MODEL_INSTANCE].constructor);\r\n            if (instanceContainer) {\r\n                this._messageExpression = instanceContainer.nonValidationDecorators.error.conditionalExpressions[keyName];\r\n                this._controlProp = instanceContainer.nonValidationDecorators.error.controlProp[this.keyName];\r\n                this._classNameExpression = instanceContainer.nonValidationDecorators.elementClass.conditionalExpressions[keyName];\r\n                this._classNameControlProp = instanceContainer.nonValidationDecorators.elementClass.controlProp[keyName];\r\n                if (this._classNameExpression)\r\n                    this.updateOnElementClass = true;\r\n            }\r\n        }\r\n    }\r\n    getSanitizedValue(value) {\r\n        if (this._sanitizers) {\r\n            for (let sanitizer of this._sanitizers) {\r\n                value = SANITIZERS[sanitizer.name](value, sanitizer.config);\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n    bindConditionalControls(decoratorType, refName) {\r\n        this._disableProvider = new DisableProvider(decoratorType, this.entityObject);\r\n        this[refName] = this._disableProvider.zeroArgumentProcess(this, this.keyName);\r\n        this._disableProvider.oneArgumentProcess(this, `${this.keyName}${RXCODE}1`).forEach(t => this[refName].push(t));\r\n    }\r\n    setControlErrorMessages() {\r\n        if ((!this._messageExpression && this.checkErrorMessageStrategy()) || this._isPassedExpression) {\r\n            this._errorMessages = [];\r\n            if (this.errors) {\r\n                Object.keys(this.errors).forEach(t => {\r\n                    if (this.parent) {\r\n                        this.parent[CONTROLS_ERROR][this.keyName] = this._errorMessage = this.getErrorMessage(this.errors, t);\r\n                        if (!this._errorMessage) {\r\n                            let errorObject = ObjectMaker.toJson(t, undefined, [this.errors[t][t]]);\r\n                            this.parent[CONTROLS_ERROR][this.keyName] = this._errorMessage = this.getErrorMessage(errorObject, t);\r\n                        }\r\n                    }\r\n                    else\r\n                        this._errorMessage = this.getErrorMessage(this.errors, t);\r\n                    this._errorMessages.push(this._errorMessage);\r\n                });\r\n            }\r\n            else {\r\n                this._errorMessage = undefined;\r\n                if (this.parent) {\r\n                    this.parent[CONTROLS_ERROR][this.keyName] = undefined;\r\n                    delete this.parent[CONTROLS_ERROR][this.keyName];\r\n                }\r\n            }\r\n            let backEndErrors = Object.keys(this.backEndErrors);\r\n            if (backEndErrors.length > 0)\r\n                backEndErrors.forEach(t => { this._errorMessages.push(this._errorMessage = this.backEndErrors[t]); });\r\n        }\r\n        else {\r\n            this._errorMessages = [];\r\n            this._errorMessage = undefined;\r\n        }\r\n        this._language = this.getLanguage();\r\n    }\r\n    getLanguage() {\r\n        return (ReactiveFormConfig.i18n && ReactiveFormConfig.i18n.language) ? ReactiveFormConfig.i18n.language : undefined;\r\n    }\r\n    getErrorMessage(errorObject, keyName) {\r\n        if (errorObject[keyName][MESSAGE])\r\n            return errorObject[keyName][MESSAGE];\r\n        return;\r\n    }\r\n    processExpression(propName, operationType) {\r\n        if (this[propName])\r\n            for (var controlInfo of this[propName]) {\r\n                let control = controlInfo.isRoot ? ApplicationUtil.getControl(controlInfo.controlPath, ApplicationUtil.getRootFormGroup(this)) : ApplicationUtil.getFormControl(controlInfo.controlPath, this);\r\n                if (control) {\r\n                    if (operationType == \"disabled\") {\r\n                        let result = this.executeExpression(controlInfo.conditionalExpression, control);\r\n                        if (result)\r\n                            control.disable();\r\n                        else\r\n                            control.enable();\r\n                    }\r\n                    else if (operationType == \"bindError\")\r\n                        control.bindError();\r\n                    else if (operationType == \"bindClassName\")\r\n                        control.bindClassName();\r\n                }\r\n            }\r\n    }\r\n    executeExpression(expression, control) {\r\n        return expression.call(control.parent[MODEL_INSTANCE], control, ApplicationUtil.getParentModelInstanceValue(this), control.parent[MODEL_INSTANCE]);\r\n    }\r\n    getValue(value) {\r\n        return value !== undefined && value !== null && value !== \"\" ? value : \"\";\r\n    }\r\n}\n\nconst OBJECT = \"object\";\r\nconst BOOLEAN = \"boolean\";\r\nclass FormDataProvider {\r\n    convertToFormData(jObject, options) {\r\n        return this.convertFormData(jObject, undefined, undefined, options);\r\n    }\r\n    convertFormData(jObject, currentFormData, parentKey, options) {\r\n        let formData = currentFormData || new FormData();\r\n        let propName = '';\r\n        for (var columnName in jObject) {\r\n            propName = !parentKey ? columnName : `${parentKey}[${columnName}]`;\r\n            if (Array.isArray(jObject[columnName])) {\r\n                jObject[columnName].forEach((row, index) => {\r\n                    propName = `${columnName}[${index}]`;\r\n                    if (typeof row === OBJECT)\r\n                        this.convertFormData(row, formData, propName, options);\r\n                    else\r\n                        this.nonObjectValueBind(row, formData, propName, options);\r\n                });\r\n            }\r\n            else if (jObject[columnName] !== null && !(jObject[columnName] instanceof Date) && typeof jObject[columnName] === OBJECT && !(jObject[columnName] instanceof File || jObject[columnName] instanceof FileList)) {\r\n                this.convertFormData(jObject[columnName], formData, propName, options);\r\n            }\r\n            else {\r\n                this.nonObjectValueBind(jObject[columnName], formData, propName, options);\r\n            }\r\n        }\r\n        return formData;\r\n    }\r\n    nonObjectValueBind(value, formData, propName, options) {\r\n        if (typeof value === BOOLEAN) {\r\n            let formValue = value ? true : false;\r\n            formData.append(propName, formValue);\r\n        }\r\n        else if (value instanceof FileList) {\r\n            for (var i = 0; i < value.length; i++) {\r\n                formData.append(options && options.excludeImageIndex && value.length === 1 ? propName : `${propName}[${i}]`, value.item(i));\r\n            }\r\n        }\r\n        else {\r\n            if (RegexValidator.isNotBlank(value))\r\n                formData.append(propName, value);\r\n        }\r\n    }\r\n}\n\nfunction isResetControl(controlName, control, options) {\r\n    let isReset = true;\r\n    if (options) {\r\n        isReset = false;\r\n        if (options.resetType)\r\n            switch (options.resetType) {\r\n                case ResetFormType.ControlsOnly:\r\n                    isReset = control instanceof FormControl;\r\n                    break;\r\n                case ResetFormType.ControlsAndFormGroupsOnly:\r\n                    isReset = control instanceof FormControl || control instanceof FormGroup;\r\n                    break;\r\n                case ResetFormType.FormGroupsOnly:\r\n                    isReset = control instanceof FormGroup;\r\n                    break;\r\n                case ResetFormType.FormArraysOnly:\r\n                    isReset = control instanceof FormArray;\r\n                    break;\r\n                case ResetFormType.DefinedPropsOnly:\r\n                    isReset = options.value ? Object.keys(options.value).indexOf(controlName) != -1 : false;\r\n                    break;\r\n                default:\r\n                    isReset = true;\r\n                    break;\r\n            }\r\n        if (!isReset && options.with)\r\n            isReset = options.with.filter(x => x.split('.')[0] == controlName.split('.')[0])[0] !== undefined;\r\n        if (!isReset && options.value && (options.resetType === undefined || options.resetType !== ResetFormType.DefinedPropsOnly))\r\n            isReset = true;\r\n    }\r\n    return isReset;\r\n}\r\nfunction getNestedOptions(controlName, options) {\r\n    if (options) {\r\n        let jObjectOptions = {};\r\n        if (options.resetType)\r\n            jObjectOptions.resetType = (options.resetType == ResetFormType.FormGroupsOnly || options.resetType == ResetFormType.FormArraysOnly) ? ResetFormType.ControlsOnly : options.resetType;\r\n        if (options.with) {\r\n            let nestedControls = options.with.filter(t => t.split('.')[0] == controlName);\r\n            let controlNames = nestedControls.map(x => {\r\n                let splitControls = x.split('.');\r\n                splitControls.splice(0, 1);\r\n                return splitControls.join('.');\r\n            });\r\n            jObjectOptions.with = controlNames;\r\n        }\r\n        if (options.value && options.value[controlName])\r\n            jObjectOptions.value = options.value[controlName];\r\n        jObjectOptions = Object.keys(jObjectOptions).length > 0 ? jObjectOptions : undefined;\r\n        return jObjectOptions;\r\n    }\r\n    return undefined;\r\n}\n\nclass RxFormGroup extends FormGroup {\r\n    constructor(model, entityObject, controls, validatorOrOpts, asyncValidator) {\r\n        super(controls, validatorOrOpts, asyncValidator);\r\n        this.model = model;\r\n        this.entityObject = entityObject;\r\n        this._modified = {};\r\n        this._isModified = false;\r\n        this.changing = false;\r\n        this.baseObject = {};\r\n        for (var column in this.entityObject)\r\n            this.baseObject[column] = this.entityObject[column];\r\n        this.formDataProvider = new FormDataProvider();\r\n    }\r\n    bindPrimaryKey(modelInstance, jObject) {\r\n        let instanceContainer = defaultContainer.get(modelInstance.constructor);\r\n        if (instanceContainer) {\r\n            let primaryKeyProp = instanceContainer.properties.filter(x => x.isPrimaryKey)[0];\r\n            if (primaryKeyProp && this.modelInstance[primaryKeyProp.name])\r\n                jObject[primaryKeyProp.name] = this.modelInstance[primaryKeyProp.name];\r\n        }\r\n    }\r\n    get modifiedValue() {\r\n        let jObject = {};\r\n        if (Object.keys(this._modified).length > 0) {\r\n            this.bindPrimaryKey(this.modelInstance, jObject);\r\n            for (var columnName in this._modified) {\r\n                if (this.controls[columnName] instanceof RxFormGroup)\r\n                    jObject[columnName] = this.controls[columnName].modifiedValue;\r\n                else if (this.controls[columnName] instanceof FormArray) {\r\n                    let formArray = this.controls[columnName];\r\n                    jObject[columnName] = [];\r\n                    for (var i = 0; i < this._modified[columnName].length; i++) {\r\n                        let modifiedValue = formArray.controls[i].modifiedValue;\r\n                        if (Object.keys(modifiedValue).length > 0)\r\n                            jObject[columnName].push(modifiedValue);\r\n                    }\r\n                    if (jObject[columnName].length == 0)\r\n                        delete jObject[columnName];\r\n                }\r\n                else\r\n                    jObject[columnName] = this._modified[columnName];\r\n            }\r\n            return jObject;\r\n        }\r\n        return this._modified;\r\n    }\r\n    get isModified() {\r\n        return this._isModified;\r\n    }\r\n    patch(controlName) {\r\n        if (controlName) {\r\n            let control = this.controls[controlName];\r\n            this.processModified(controlName, control);\r\n        }\r\n        else {\r\n            this.nestedFormsModification();\r\n        }\r\n        this._isModified = Object.keys(this._modified).length > 0;\r\n        if (!this._isModified)\r\n            this.nestedArrayIsModified();\r\n        if (this.parent && this.parent.patch)\r\n            this.parent.patch();\r\n    }\r\n    isDirty() {\r\n        let isDirty = false;\r\n        for (let name in this.value) {\r\n            let currentValue = this.modelInstance[name];\r\n            if (!(this.controls[name] instanceof FormGroup || this.controls[name] instanceof FormArray)) {\r\n                isDirty = ApplicationUtil.notEqualTo(this.baseObject[name], currentValue);\r\n            }\r\n            else if (this.controls[name] instanceof RxFormGroup)\r\n                isDirty = this.controls[name].isDirty();\r\n            else if (this.controls[name] instanceof FormArray) {\r\n                for (let formGroup of this.controls[name].controls) {\r\n                    isDirty = formGroup.isDirty();\r\n                }\r\n            }\r\n            if (isDirty)\r\n                break;\r\n        }\r\n        return isDirty;\r\n    }\r\n    ;\r\n    resetForm(options) {\r\n        for (let name in this.controls) {\r\n            if (isResetControl(name, this.controls[name], options)) {\r\n                if (this.controls[name] instanceof FormGroup)\r\n                    this.controls[name].resetForm(getNestedOptions(name, options));\r\n                else if (this.controls[name] instanceof FormArray) {\r\n                    this.controls[name].resetForm(options && options.value ? options.value[name] : undefined);\r\n                }\r\n                else {\r\n                    if (options && options.value && RegexValidator.isNotBlank(options.value[name]))\r\n                        this.controls[name].reset(options.value[name]);\r\n                    else\r\n                        this.controls[name].reset();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    commit() {\r\n        for (let name in this.controls) {\r\n            if (this.controls[name] instanceof FormGroup)\r\n                this.controls[name].commit();\r\n            else if (this.controls[name] instanceof FormArray) {\r\n                this.controls[name].commit();\r\n            }\r\n            else {\r\n                this.controls[name].commit();\r\n            }\r\n        }\r\n    }\r\n    patchModelValue(value, options) {\r\n        if (value) {\r\n            for (let name in this.controls) {\r\n                if (this.controls[name] instanceof RxFormGroup && value[name])\r\n                    this.controls[name].patchModelValue(value[name], options);\r\n                else if (this.controls[name] instanceof FormArray && Array.isArray(value[name])) {\r\n                    let index = 0;\r\n                    for (let formGroup of this.controls[name].controls) {\r\n                        if (value[name][index])\r\n                            formGroup.patchModelValue(value[name][index], options);\r\n                        index = index + 1;\r\n                    }\r\n                }\r\n                else if (value[name] !== undefined)\r\n                    this.controls[name].patchValue(value[name], options);\r\n            }\r\n        }\r\n    }\r\n    getErrorSummary(onlyMessage) {\r\n        let jObject = {};\r\n        Object.keys(this.controls).forEach(columnName => {\r\n            if (this.controls[columnName] instanceof FormGroup) {\r\n                let error = this.controls[columnName].getErrorSummary(false);\r\n                if (Object.keys(error).length > 0)\r\n                    jObject[columnName] = error;\r\n            }\r\n            else if (this.controls[columnName] instanceof FormArray) {\r\n                let index = 0;\r\n                for (let formGroup of this.controls[columnName].controls) {\r\n                    let error = formGroup.getErrorSummary(false);\r\n                    if (Object.keys(error).length > 0) {\r\n                        error.index = index;\r\n                        if (!jObject[columnName])\r\n                            jObject[columnName] = [];\r\n                        jObject[columnName].push(error);\r\n                    }\r\n                    index++;\r\n                }\r\n            }\r\n            else {\r\n                if (this.controls[columnName].errors) {\r\n                    let error = this.controls[columnName].errors;\r\n                    if (onlyMessage)\r\n                        for (let validationName in error)\r\n                            jObject[columnName] = error[validationName].message;\r\n                    else\r\n                        jObject[columnName] = error;\r\n                }\r\n            }\r\n        });\r\n        return jObject;\r\n    }\r\n    valueChangedSync() {\r\n        Object.keys(this.controls).forEach(columnName => {\r\n            if (!(this.controls[columnName] instanceof FormArray || this.controls[columnName] instanceof RxFormArray) && !(this.controls[columnName] instanceof FormGroup || this.controls[columnName] instanceof RxFormGroup) && !(this.entityObject[columnName] instanceof FormControl || this.entityObject[columnName] instanceof RxFormControl) && this.controls[columnName].getControlValue && ApplicationUtil.notEqualTo(this.controls[columnName].getControlValue(), this.entityObject[columnName])) {\r\n                this.controls[columnName].setValue(this.entityObject[columnName], { updateChanged: true });\r\n            }\r\n            else if ((this.controls[columnName] instanceof FormArray || this.controls[columnName] instanceof RxFormArray)) {\r\n                for (let formGroup of this.controls[columnName].controls) {\r\n                    formGroup.valueChangedSync();\r\n                }\r\n            }\r\n            else if ((this.controls[columnName] instanceof RxFormGroup)) {\r\n                this.controls[columnName].valueChangedSync();\r\n            }\r\n        });\r\n    }\r\n    refreshDisable() {\r\n        Object.keys(this.controls).forEach(columnName => {\r\n            if (!(this.controls[columnName] instanceof FormArray || this.controls[columnName] instanceof RxFormArray) && !(this.controls[columnName] instanceof FormGroup || this.controls[columnName] instanceof RxFormGroup)) {\r\n                this.controls[columnName].refresh();\r\n            }\r\n            else if ((this.controls[columnName] instanceof RxFormGroup)) {\r\n                this.controls[columnName].refreshDisable();\r\n            }\r\n        });\r\n    }\r\n    bindErrorMessages() {\r\n        Object.keys(this.controls).forEach(columnName => {\r\n            if (!(this.controls[columnName] instanceof FormArray || this.controls[columnName] instanceof RxFormArray) && !(this.controls[columnName] instanceof FormGroup || this.controls[columnName] instanceof RxFormGroup)) {\r\n                this.controls[columnName].bindError();\r\n            }\r\n            else if ((this.controls[columnName] instanceof RxFormGroup)) {\r\n                this.controls[columnName].bindErrorMessages();\r\n            }\r\n        });\r\n    }\r\n    get submitted() {\r\n        return this._submitted;\r\n    }\r\n    set submitted(value) {\r\n        this._submitted = value;\r\n        Object.keys(this.controls).forEach(columnName => {\r\n            if (this.controls[columnName] instanceof FormArray) {\r\n                let formArray = this.controls[columnName];\r\n                for (let formGroup of formArray.controls)\r\n                    formGroup.submitted = value;\r\n            }\r\n            else if (this.controls[columnName] instanceof FormGroup) {\r\n                this.controls[columnName].submitted = value;\r\n            }\r\n            else\r\n                this.controls[columnName].bindError();\r\n        });\r\n    }\r\n    get modelInstanceValue() {\r\n        return clone(this.entityObject);\r\n    }\r\n    get modelInstance() {\r\n        return this.entityObject;\r\n    }\r\n    get controlsError() {\r\n        return this.getErrorSummary(true);\r\n    }\r\n    toFormData(options) {\r\n        return this.formDataProvider.convertToFormData(this.value, options);\r\n    }\r\n    processModified(controlName, control) {\r\n        if (control.isModified)\r\n            this._modified[controlName] = control.value;\r\n        else\r\n            delete this._modified[controlName];\r\n        this._isModified = Object.keys(this._modified).length > 0;\r\n    }\r\n    nestedArrayIsModified() {\r\n        for (var controlName in this.controls) {\r\n            if (this.controls[controlName] instanceof RxFormArray)\r\n                this._isModified = this.controls[controlName].isModified;\r\n            if (this._isModified)\r\n                break;\r\n        }\r\n    }\r\n    setBackEndErrors(errors) {\r\n        Object.keys(errors).forEach(controlName => {\r\n            if (this.controls[controlName]) {\r\n                if (this.controls[controlName] instanceof FormGroup)\r\n                    this.controls[controlName].setBackEndErrors(errors[controlName]);\r\n                else\r\n                    this.controls[controlName].setBackEndErrors(errors[controlName]);\r\n            }\r\n        });\r\n    }\r\n    clearBackEndErrors(errors) {\r\n        let clearErrors = errors ? Object.keys(errors) : Object.keys(this.controls);\r\n        clearErrors.forEach(controlName => {\r\n            if (this.controls[controlName]) {\r\n                if (this.controls[controlName] instanceof FormGroup)\r\n                    errors ? this.controls[controlName].clearBackEndErrors(errors[controlName]) : this.controls[controlName].clearBackEndErrors();\r\n                else\r\n                    errors ? this.controls[controlName].clearBackEndErrors(errors[controlName]) : this.controls[controlName].clearBackEndErrors();\r\n            }\r\n        });\r\n    }\r\n    nestedFormsModification() {\r\n        for (var controlName in this.controls) {\r\n            if (this.controls[controlName] instanceof RxFormGroup)\r\n                this.processModified(controlName, this.controls[controlName]);\r\n            else if (this.controls[controlName] instanceof RxFormArray) {\r\n                if (this.controls[controlName].isModified) {\r\n                    let formGroups = this.controls[controlName].controls;\r\n                    this._modified[controlName] = [];\r\n                    for (var formGroup of formGroups) {\r\n                        if (formGroup.isModified) {\r\n                            if (!this._modified[controlName])\r\n                                this._modified[controlName] = [];\r\n                            this._modified[controlName].push(formGroup.modifiedValue);\r\n                        }\r\n                    }\r\n                    if (this._modified[controlName].length == 0)\r\n                        delete this._modified[controlName];\r\n                }\r\n                else if (this._modified[controlName])\r\n                    delete this._modified[controlName];\r\n            }\r\n        }\r\n    }\r\n}\n\nclass FormProvider {\r\n    static ProcessRule(control, config, isDynamicConfig = false) {\r\n        if (config && config.expressionProcessed)\r\n            return true;\r\n        const formGroupValue = ApplicationUtil.getParentObjectValue(control);\r\n        const parentObject = (control.parent) ? ApplicationUtil.cloneValue(control.parent.value) : undefined;\r\n        let modelInstance = undefined;\r\n        if (control.parent && control.parent instanceof RxFormGroup)\r\n            modelInstance = control.parent.modelInstance;\r\n        if (parentObject) {\r\n            this.updateFormControlValue(parentObject, control.parent.controls, control, config);\r\n            this.forDisableUpdate(parentObject, config);\r\n        }\r\n        else if (config.conditionalExpression)\r\n            return false;\r\n        return Linq.execute(formGroupValue, config, parentObject, modelInstance, isDynamicConfig);\r\n    }\r\n    static updateFormControlValue(parentObject, controls, control, config) {\r\n        for (var controlName in parentObject) {\r\n            if (!(parentObject[controlName] instanceof Object))\r\n                if (controls[controlName] === control) {\r\n                    parentObject[controlName] = control.value;\r\n                    break;\r\n                }\r\n        }\r\n    }\r\n    static forDisableUpdate(parentObject, config) {\r\n        if (config.disableConfig)\r\n            Object.keys(config.disableConfig).forEach(column => {\r\n                parentObject[column] = config.disableConfig[column];\r\n            });\r\n    }\r\n}\n\nclass ValidatorValueChecker {\r\n    static pass(control, config) {\r\n        if (FormProvider.ProcessRule(control, config))\r\n            return RegexValidator.isNotBlank(control.value);\r\n        else\r\n            return false;\r\n    }\r\n    static passArrayValue(control, config) {\r\n        if (FormProvider.ProcessRule(control, config))\r\n            return typeof control.value === \"string\" ? RegexValidator.isNotBlank(control.value) : control.value instanceof Array;\r\n        else\r\n            return false;\r\n    }\r\n}\n\nconst ARRAY_CONFIG = \"ArrayConfig\";\r\nconst FIELD_CONFIG = \"FieldConfig\";\r\nconst IP_CONFIG = \"IpConfig\";\r\nconst NUMBER_CONFIG = \"NumberConfig\";\r\nconst PASSWORD_CONFIG = \"PasswordConfig\";\r\nconst PATTERN_CONFIG = \"PatternConfig\";\r\nconst RANGE_CONFIG = \"RangeConfig\";\r\nconst RELATIONAL_OPERATOR_CONFIG = \"RelationalOperatorConfig\";\n\nconst CONFIG_REQUIRED_FIELDS = {\r\n    [ARRAY_CONFIG]: [\"matchValues\"],\r\n    [FIELD_CONFIG]: [\"fieldName\"],\r\n    [IP_CONFIG]: [\"version\"],\r\n    [PASSWORD_CONFIG]: [\"validation\"],\r\n    [NUMBER_CONFIG]: [\"value\"],\r\n    [PATTERN_CONFIG]: [\"expression\"],\r\n    [RANGE_CONFIG]: [\"minimumNumber\", \"maximumNumber\"],\r\n};\n\nfunction getConfigObject(config, control, configName = '') {\r\n    return (config != undefined && config != true) ? configProvider(control, config, configName) : {};\r\n}\r\nfunction configProvider(control, config, configName) {\r\n    if (config.dynamicConfig) {\r\n        let currentConfig = FormProvider.ProcessRule(control, clone(config), true);\r\n        if (typeof currentConfig != \"boolean\") {\r\n            currentConfig.conditionalExpression = config.conditionalExpression;\r\n            currentConfig.dynamicConfig = config.dynamicConfig;\r\n            Object.keys(config).forEach(t => {\r\n                if ((t != \"conditionalExpression\" && t != \"dynamicConfig\") || currentConfig[t] === undefined) {\r\n                    currentConfig[t] = config[t];\r\n                }\r\n            });\r\n            return currentConfig;\r\n        }\r\n        else\r\n            return config;\r\n    }\r\n    return checkRequiredProps(config, configName);\r\n}\r\nfunction checkRequiredProps(config, configName) {\r\n    let props = CONFIG_REQUIRED_FIELDS[configName];\r\n    if (configName) {\r\n        props.forEach(prop => {\r\n            if (config[prop] === undefined)\r\n                throw new Error(`Pass the property of '${prop}' with value in the ${configName}, otherwise it won't work.`);\r\n        });\r\n    }\r\n    return config;\r\n}\n\nconst alphabet = {\r\n    'danish': /^[A-ZÆØÅ]+$/i,\r\n    'french': /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,\r\n    'german': /^[A-ZÄÖÜß]+$/i,\r\n    'spanish': /^[a-zñáéíóúü]+$/i,\r\n    'russian': /^[А-ЯЁ]+$/i,\r\n};\r\nconst alphaWithWhitespace = {\r\n    'danish': /^[A-ZÆØÅ\\s]+$/i,\r\n    'french': /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ\\s]+$/i,\r\n    'german': /^[A-ZÄÖÜß\\s]+$/i,\r\n    'spanish': /^[a-zñáéíóúü\\s]+$/i,\r\n    'russian': /^[А-ЯЁ\\s]+$/i,\r\n};\r\nconst alphanumeric = {\r\n    'danish': /^[0-9A-ZÆØÅ]+$/i,\r\n    'french': /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,\r\n    'german': /^[0-9A-ZÄÖÜß]+$/i,\r\n    'spanish': /^[0-9a-zñáéíóúü]+$/i,\r\n    'russian': /^[0-9А-ЯЁ]+$/i,\r\n};\r\nconst alphanumericWithWitespace = {\r\n    'danish': /^[0-9A-ZÆØÅ\\s]+$/i,\r\n    'french': /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ\\s]+$/i,\r\n    'german': /^[0-9A-ZÄÖÜß\\s]+$/i,\r\n    'spanish': /^[0-9a-zñáéíóúü\\s]+$/i,\r\n    'russian': /^[0-9А-ЯЁ\\s]+$/i,\r\n};\n\nfunction alphaValidation(configModel, control, regExps, key) {\r\n    let config = getConfigObject(configModel, control);\r\n    if (ValidatorValueChecker.pass(control, config)) {\r\n        regExps = getRegex(key, regExps, config);\r\n        var isValid = (!config || !config.allowWhiteSpace) ?\r\n            RegexValidator.isValid(control.value, regExps[0]) :\r\n            RegexValidator.isValid(control.value, regExps[1]);\r\n        if (!isValid)\r\n            return ObjectMaker.toJson(key, config, [control.value]);\r\n    }\r\n    return ObjectMaker.null();\r\n}\r\nfunction getRegex(key, regExps, config) {\r\n    if (config.allowCharacters)\r\n        if (config.allowWhiteSpace)\r\n            regExps[1] = new RegExp(`^[0-9a-zA-Z @${config.allowCharacters}]+$`, ``);\r\n        else\r\n            regExps[0] = new RegExp(`^[0-9a-zA-Z @${config.allowCharacters}]+$`, ``);\r\n    switch (key) {\r\n        case \"alpha\":\r\n            var alphaLocale = config.locale ? config.locale : ReactiveFormConfig.json && ReactiveFormConfig.json.defaultValidationLocale && ReactiveFormConfig.json.defaultValidationLocale.alpha ? ReactiveFormConfig.json.defaultValidationLocale.alpha : \"\";\r\n            return [\r\n                alphaLocale && alphaLocale in alphabet ? alphabet[alphaLocale] : regExps[0],\r\n                alphaLocale && alphaLocale in alphaWithWhitespace ? alphaWithWhitespace[alphaLocale] : regExps[1]\r\n            ];\r\n            break;\r\n        case \"alphaNumeric\":\r\n            var alphaNumericLocale = config.locale ? config.locale : ReactiveFormConfig.json && ReactiveFormConfig.json.defaultValidationLocale && ReactiveFormConfig.json.defaultValidationLocale.alphaNumeric ? ReactiveFormConfig.json.defaultValidationLocale.alphaNumeric : \"\";\r\n            return [\r\n                alphaNumericLocale && alphaNumericLocale in alphanumeric ? alphanumeric[alphaNumericLocale] : regExps[0],\r\n                alphaNumericLocale && alphaNumericLocale in alphanumericWithWitespace ? alphanumericWithWitespace[alphaNumericLocale] : regExps[1]\r\n            ];\r\n            break;\r\n    }\r\n}\n\nfunction alphaValidator(configModel) {\r\n    return (control) => {\r\n        return alphaValidation(configModel, control, [RegExRule.alpha, RegExRule.alphaWithSpace], AnnotationTypes.alpha);\r\n    };\r\n}\n\nfunction alphaNumericValidator(configModel) {\r\n    return (control) => {\r\n        return alphaValidation(configModel, control, [RegExRule.alphaNumeric, RegExRule.alphaNumericWithSpace], AnnotationTypes.alphaNumeric);\r\n    };\r\n}\n\nfunction compareValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, FIELD_CONFIG);\r\n        const compareControl = ApplicationUtil.getFormControl(config.fieldName, control);\r\n        const controlValue = control.value;\r\n        const compareControlValue = (compareControl) ? compareControl.value : '';\r\n        if (RegexValidator.isNotBlank(controlValue) || RegexValidator.isNotBlank(compareControlValue)) {\r\n            if (!(compareControl && compareControl.value === controlValue))\r\n                return ObjectMaker.toJson(AnnotationTypes.compare, config, [controlValue, compareControlValue]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction containsValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let failed = false;\r\n            const values = config.values ? config.values : [config.value];\r\n            for (let value of values) {\r\n                failed = control.value.indexOf(value) == -1;\r\n                if (!failed)\r\n                    break;\r\n            }\r\n            if (failed)\r\n                return ObjectMaker.toJson(AnnotationTypes.contains, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction checkLength(length, checks) {\r\n    let isPassed = false;\r\n    for (let check of checks) {\r\n        isPassed = (check == length);\r\n        if (isPassed)\r\n            break;\r\n    }\r\n    return isPassed;\r\n}\n\nfunction calculate(numbers) {\r\n    let numberSum = 0;\r\n    for (var i = 0; i < numbers.length; i++)\r\n        numberSum += parseInt(numbers.substring(i, i + 1));\r\n    let deltas = new Array(0, 1, 2, 3, 4, -4, -3, -2, -1, 0);\r\n    for (var i = numbers.length - 1; i >= 0; i -= 2) {\r\n        numberSum += deltas[parseInt(numbers.substring(i, i + 1))];\r\n    }\r\n    let mod = numberSum % 10;\r\n    mod = 10 - mod;\r\n    if (mod == 10)\r\n        mod = 0;\r\n    return mod;\r\n}\n\nfunction creditCardValidator(configModel) {\r\n    let cardDigits = {\r\n        AmericanExpress: [15],\r\n        DinersClub: [14, 16, 19],\r\n        Discover: [16, 19],\r\n        JCB: [16, 19],\r\n        Maestro: [12, 16, 19],\r\n        MasterCard: [16],\r\n        Visa: [13, 16, 19]\r\n    };\r\n    function validate(creditCardNumber) {\r\n        var digit = parseInt(creditCardNumber.substring(creditCardNumber.length - 1, creditCardNumber.length));\r\n        return calculate(creditCardNumber.substring(0, creditCardNumber.length - 1)) == parseInt(String(digit)) ? !0 : !1;\r\n    }\r\n    function getCardProviderName(cardNumber) {\r\n        var cardProviderName = \"\";\r\n        return /^(5018|5020|5038|5612|5893|6304|6759|6761|6762|6763|0604|6390)\\d+$/.test(cardNumber) ? cardProviderName = \"Maestro\" : /^5[1-5]/.test(cardNumber) ? cardProviderName = \"MasterCard\" : /^4/.test(cardNumber) ? cardProviderName = \"Visa\" : /^3[47]/.test(cardNumber) ? cardProviderName = \"AmericanExpress\" : /^(?:2131|1800|35)/.test(cardNumber) ? cardProviderName = \"JCB\" : /^3(?:0[0-5]|[68])/.test(cardNumber) ? cardProviderName = \"DinersClub\" : /^6(?:011|5)/.test(cardNumber) && (cardProviderName = \"Discover\"), cardProviderName;\r\n    }\r\n    return (control) => {\r\n        const controlValue = control.value;\r\n        let config = getConfigObject(configModel, control);\r\n        const parentObject = (control.parent) ? control.parent.value : undefined;\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (RegexValidator.isNotBlank(controlValue)) {\r\n                let isValid = false;\r\n                let cardTypes = config.fieldName && parentObject[config.fieldName] ? [parentObject[config.fieldName]] : config.creditCardTypes;\r\n                let cardType = '';\r\n                for (let creditCardType of cardTypes) {\r\n                    isValid = checkLength(controlValue.length, cardDigits[creditCardType]) && getCardProviderName(controlValue) == creditCardType && validate(controlValue);\r\n                    cardType = creditCardType;\r\n                    if (isValid)\r\n                        break;\r\n                }\r\n                if (!isValid)\r\n                    return ObjectMaker.toJson(AnnotationTypes.creditCard, config, [controlValue, cardType]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction regexValidation(configModel, control, regExp, key) {\r\n    let config = getConfigObject(configModel, control);\r\n    return validate(config, control, regExp, key);\r\n}\r\nfunction validate(config, control, regExp, key) {\r\n    if (ValidatorValueChecker.pass(control, config)) {\r\n        if (!RegexValidator.isValid(control.value, regExp))\r\n            return ObjectMaker.toJson(key, config, [control.value]);\r\n    }\r\n    return ObjectMaker.null();\r\n}\n\nfunction digitValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.onlyDigit, AnnotationTypes.digit);\r\n    };\r\n}\n\nfunction emailValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.basicEmail, AnnotationTypes.email);\r\n    };\r\n}\n\nfunction hexColorValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.strictHexColor, AnnotationTypes.hexColor);\r\n    };\r\n}\n\nfunction lowercaseValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(control.value === control.value.toLowerCase()))\r\n                return ObjectMaker.toJson(AnnotationTypes.lowerCase, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nconst OPERATORS = {\r\n    lessThan: \"<\",\r\n    greaterThan: \">\",\r\n    lessThanEqualTo: \"<=\",\r\n    greaterThanEqualTo: \">=\"\r\n};\n\nfunction runCondition$1(leftValue, rightValue, operator) {\r\n    let result = false;\r\n    switch (operator) {\r\n        case OPERATORS.lessThan:\r\n        case OPERATORS.greaterThan:\r\n            result = leftValue > rightValue;\r\n            break;\r\n        case OPERATORS.lessThanEqualTo:\r\n        case OPERATORS.greaterThanEqualTo:\r\n            result = leftValue >= rightValue;\r\n            break;\r\n    }\r\n    return result;\r\n}\r\nfunction dateChecker(control, config, operationType) {\r\n    config = getConfigObject(config, control);\r\n    var dateProvider = new DateProvider();\r\n    if (FormProvider.ProcessRule(control, config)) {\r\n        if (RegexValidator.isNotBlank(control.value)) {\r\n            let checkDate = dateProvider.getCompareDate(config, control);\r\n            if (dateProvider.isDate(control.value) || dateProvider.isValid(control.value, config)) {\r\n                let currentControlValue = dateProvider.getDate(control.value);\r\n                let isValid = operationType == AnnotationTypes.minDate ? runCondition$1(currentControlValue, checkDate, config.operator || OPERATORS.greaterThanEqualTo) : runCondition$1(checkDate, currentControlValue, config.operator || OPERATORS.lessThanEqualTo);\r\n                if (!isValid)\r\n                    return ObjectMaker.toJson(operationType, config, [control.value, checkDate]);\r\n            }\r\n            else\r\n                return ObjectMaker.toJson(operationType, config, [control.value, checkDate]);\r\n        }\r\n    }\r\n    return ObjectMaker.null();\r\n}\r\nfunction validateDate(control, config, operationType) {\r\n    config = getConfigObject(config, control);\r\n    var dateProvider = new DateProvider();\r\n    if (FormProvider.ProcessRule(control, config)) {\r\n        if (RegexValidator.isNotBlank(control.value)) {\r\n            if (!dateProvider.isDate(control.value) && !dateProvider.isValid(control.value, config)) {\r\n                return ObjectMaker.toJson(operationType, config, [control.value]);\r\n            }\r\n        }\r\n    }\r\n    return ObjectMaker.null();\r\n}\n\nfunction maxDateValidator(configModel) {\r\n    return (control) => {\r\n        return dateChecker(control, configModel, AnnotationTypes.maxDate);\r\n    };\r\n}\n\nfunction maxLengthValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, NUMBER_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(control.value.length <= config.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.maxLength, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction maxNumberValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, NUMBER_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(parseFloat(control.value) <= config.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.maxNumber, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction minDateValidator(configModel) {\r\n    return (control) => {\r\n        return dateChecker(control, configModel, AnnotationTypes.minDate);\r\n    };\r\n}\n\nfunction minLengthValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, NUMBER_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(String(control.value).length >= config.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.minLength, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction minNumberValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, NUMBER_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(parseFloat(control.value) >= config.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.minNumber, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction passwordValidator(configModel) {\r\n    function getMessageObject(jObject, keyName) {\r\n        if (!jObject.message && !jObject.messageKey) {\r\n            let message = ObjectMaker.getPasswordMessage();\r\n            jObject.message = message && typeof message == \"string\" ? message : ApplicationUtil.isObject(message) ? message[keyName] : \"\";\r\n            if (!jObject.message)\r\n                jObject.message = message[\"password\"];\r\n            jObject.messageKey = \"\";\r\n        }\r\n        return jObject;\r\n    }\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, PASSWORD_CONFIG);\r\n        let controlValue = control.value;\r\n        if (RegexValidator.isNotBlank(controlValue)) {\r\n            let validation = RegexValidator.isValidPassword(config.validation, controlValue);\r\n            let jObject = {};\r\n            jObject.message = (config.message && config.message[validation.keyName]) ? config.message[validation.keyName] : typeof config.message == \"string\" ? config.message : '';\r\n            jObject.messageKey = (config.messageKey && config.messageKey[validation.keyName]) ? config.messageKey[validation.keyName] : typeof config.messageKey == \"string\" ? config.messageKey : \"\";\r\n            jObject = getMessageObject(jObject, validation.keyName);\r\n            if (!validation.isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.password, jObject, [controlValue]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction rangeValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, RANGE_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!((control.value || control.value === 0) && parseFloat(control.value) >= config.minimumNumber && parseFloat(control.value) <= config.maximumNumber))\r\n                return ObjectMaker.toJson(AnnotationTypes.range, config, [control.value, config.minimumNumber, config.maximumNumber]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction uppercaseValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(control.value === control.value.toUpperCase()))\r\n                return ObjectMaker.toJson(AnnotationTypes.upperCase, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction requiredValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (!RegexValidator.isNotBlank(control.value)) {\r\n                return ObjectMaker.toJson(AnnotationTypes.required, config, []);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction patternValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, PATTERN_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            for (var pattern in config.expression)\r\n                if (!(RegexValidator.isValid(control.value, config.expression[pattern])))\r\n                    return ObjectMaker.toJson(pattern, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction timeValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let isValid = config.allowSeconds ? RegexValidator.isValid(control.value, RegExRule.timeWithSeconds) : RegexValidator.isValid(control.value, RegExRule.time);\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.time, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction urlValidation(configModel, control) {\r\n    var regex = RegExRule.url;\r\n    let config = getConfigObject(configModel, control);\r\n    if (config && config.urlValidationType) {\r\n        switch (config.urlValidationType) {\r\n            case 1:\r\n                regex = RegExRule.url;\r\n                break;\r\n            case 2:\r\n                regex = RegExRule.localhostUrl;\r\n                break;\r\n            case 3:\r\n                regex = RegExRule.interanetUrl;\r\n                break;\r\n        }\r\n    }\r\n    return validate(config, control, regex, AnnotationTypes.url);\r\n}\r\nfunction urlValidator(configModel) {\r\n    return (control) => {\r\n        return urlValidation(configModel, control);\r\n    };\r\n}\n\nfunction jsonValidator(configModel) {\r\n    function process(value) {\r\n        var result = false;\r\n        try {\r\n            var json = JSON.parse(value);\r\n            result = !!json && typeof json === 'object';\r\n        }\r\n        catch (ex) {\r\n            result = false;\r\n        }\r\n        return result;\r\n    }\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!process(control.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.json, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nconst operatorOpposite = {\r\n    [AnnotationTypes.greaterThan]: AnnotationTypes.lessThan,\r\n    [AnnotationTypes.lessThan]: AnnotationTypes.greaterThan,\r\n    [AnnotationTypes.greaterThanEqualTo]: AnnotationTypes.lessThanEqualTo,\r\n    [AnnotationTypes.lessThanEqualTo]: AnnotationTypes.greaterThanEqualTo,\r\n};\r\nfunction relationalCheck(control, config, relationalOperatorName) {\r\n    config = getConfigObject(config, control);\r\n    const matchControl = config.fieldName ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;\r\n    const matchControlValue = (matchControl) ? matchControl.value : config.value !== undefined ? config.value : '';\r\n    if (FormProvider.ProcessRule(control, config)) {\r\n        if (config.isArrayControl)\r\n            return arrayControlValidation(control, config, relationalOperatorName);\r\n        if (isValid$1(control, matchControlValue, relationalOperatorName) === false)\r\n            return ObjectMaker.toJson(relationalOperatorName, config, [control.value, matchControlValue]);\r\n    }\r\n    return ObjectMaker.null();\r\n}\r\nfunction isValid$1(control, matchControlValue, relationalOperatorName) {\r\n    if (RegexValidator.isNotBlank(control.value) && RegexValidator.isNotBlank(matchControlValue)) {\r\n        let isValid = false;\r\n        switch (relationalOperatorName) {\r\n            case AnnotationTypes.greaterThan:\r\n                isValid = parseFloat(control.value) > parseFloat(matchControlValue);\r\n                break;\r\n            case AnnotationTypes.lessThan:\r\n                isValid = parseFloat(control.value) < parseFloat(matchControlValue);\r\n                break;\r\n            case AnnotationTypes.greaterThanEqualTo:\r\n                isValid = parseFloat(control.value) >= parseFloat(matchControlValue);\r\n                break;\r\n            case AnnotationTypes.lessThanEqualTo:\r\n                isValid = parseFloat(control.value) <= parseFloat(matchControlValue);\r\n                break;\r\n        }\r\n        return isValid;\r\n    }\r\n    return null;\r\n}\r\nfunction setTimeFunc(invalidateControls) {\r\n    let timeOut = setTimeout(() => {\r\n        invalidateControls.forEach(t => {\r\n            t.updateValueAndValidity();\r\n        });\r\n        clearTimeout(timeOut);\r\n    }, 200);\r\n}\r\nfunction arrayControlValidation(control, config, relationalOperatorName) {\r\n    let formArray = ApplicationUtil.getParentFormArray(control);\r\n    let parentFormGroup = control.parent ? control.parent : undefined;\r\n    let oppositeOperator = operatorOpposite[relationalOperatorName];\r\n    let updateValidityControls = [];\r\n    if (formArray && parentFormGroup && formArray.controls.length > 1) {\r\n        let indexOf = formArray.controls.indexOf(parentFormGroup);\r\n        let fieldName = ApplicationUtil.getFormControlName(control);\r\n        let valid = true;\r\n        if (indexOf > 0)\r\n            valid = validateControl(formArray, control, indexOf - 1, fieldName, oppositeOperator, relationalOperatorName, updateValidityControls);\r\n        if (valid && formArray.controls.length > indexOf + 1)\r\n            valid = validateControl(formArray, control, indexOf + 1, fieldName, relationalOperatorName, relationalOperatorName, updateValidityControls);\r\n        if (updateValidityControls.length > 0)\r\n            setTimeFunc(updateValidityControls);\r\n        if (valid === false)\r\n            return ObjectMaker.toJson(relationalOperatorName, config, [control.value]);\r\n    }\r\n    return ObjectMaker.null();\r\n}\r\nfunction validateControl(formArray, control, indexOf, fieldName, oppositeOperator, relationalOperatorName, updateValidityControls) {\r\n    let valid = false;\r\n    let formGroup = formArray.controls[indexOf];\r\n    if (formGroup && formGroup.controls) {\r\n        let formControl = formGroup.controls[fieldName];\r\n        valid = isValid$1(control, formControl.value, oppositeOperator);\r\n        if (valid && formControl.errors && formControl.errors[relationalOperatorName])\r\n            updateValidityControls.push(formControl);\r\n    }\r\n    return valid;\r\n}\n\nfunction greaterThanValidator(configModel) {\r\n    return (control) => {\r\n        return relationalCheck(control, configModel, AnnotationTypes.greaterThan);\r\n    };\r\n}\n\nfunction greaterThanEqualToValidator(configModel) {\r\n    return (control) => {\r\n        return relationalCheck(control, configModel, AnnotationTypes.greaterThanEqualTo);\r\n    };\r\n}\n\nfunction lessThanEqualToValidator(configModel) {\r\n    return (control) => {\r\n        return relationalCheck(control, configModel, AnnotationTypes.lessThanEqualTo);\r\n    };\r\n}\n\nfunction lessThanValidator(configModel) {\r\n    return (control) => {\r\n        return relationalCheck(control, configModel, AnnotationTypes.lessThan);\r\n    };\r\n}\n\nfunction choiceValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (control.value instanceof Array) {\r\n                config.minLength = (config.minLength == undefined) ? 0 : config.minLength;\r\n                config.maxLength = (config.maxLength == undefined) ? 0 : config.maxLength;\r\n                if ((((control.value.length) < config.minLength) || (config.maxLength !== 0 && control.value.length > config.maxLength)))\r\n                    return ObjectMaker.toJson(AnnotationTypes.choice, config, [control.value]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction differentValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, FIELD_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            const differentControl = ApplicationUtil.getFormControl(config.fieldName, control);\r\n            const differentControlValue = (differentControl) ? differentControl.value : '';\r\n            if (!(differentControl && differentControl.value != control.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.different, config, [control.value, differentControlValue]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction numericValidator(configModel) {\r\n    return (control) => {\r\n        if (configModel && (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.numeric]))\r\n            ApplicationUtil.configureControl(control, configModel, AnnotationTypes.numeric);\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!RegexValidator.isValid(control.value, ApplicationUtil.numericValidation(config.allowDecimal, config.acceptValue)))\r\n                return ObjectMaker.toJson(AnnotationTypes.numeric, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction evenValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(control.value % 2 == 0))\r\n                return ObjectMaker.toJson(AnnotationTypes.even, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction oddValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(!(control.value % 2 == 0)) || !ApplicationUtil.isNumeric(control.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.odd, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction factorValidator(configModel) {\r\n    function positiveFactors(dividend, value) {\r\n        let isPositive = false;\r\n        for (var index = 1; index <= Math.floor(Math.sqrt(dividend)); index += 1) {\r\n            if (dividend % index === 0) {\r\n                if (index == value)\r\n                    isPositive = true;\r\n                if (dividend / index !== index)\r\n                    if ((dividend / index) == value)\r\n                        isPositive = true;\r\n                if (isPositive)\r\n                    break;\r\n            }\r\n        }\r\n        return isPositive;\r\n    }\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        const dividendField = (control.parent && config.fieldName) ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;\r\n        const dividend = (config.fieldName && dividendField) ? dividendField.value : config.dividend;\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (RegexValidator.isNotBlank(control.value) && dividend > 0) {\r\n                if (!RegexValidator.isValid(control.value, RegExRule.onlyDigit) || !positiveFactors(dividend, parseInt(control.value)))\r\n                    return ObjectMaker.toJson(AnnotationTypes.factor, config, [control.value]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction leapYearValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            var isValid = (control.value % 100 === 0) ? (control.value % 400 === 0) : (control.value % 4 === 0);\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.leapYear, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction allOfValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, ARRAY_CONFIG);\r\n        if (ValidatorValueChecker.passArrayValue(control, config)) {\r\n            var testResult = false;\r\n            for (let value of config.matchValues) {\r\n                testResult = control.value.some((y) => y == value);\r\n                if (!testResult)\r\n                    break;\r\n            }\r\n            if (!testResult)\r\n                return ObjectMaker.toJson(AnnotationTypes.allOf, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction oneOfValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, ARRAY_CONFIG);\r\n        if (ValidatorValueChecker.passArrayValue(control, config)) {\r\n            var testResult = false;\r\n            for (let value of config.matchValues) {\r\n                let matchValue = ApplicationUtil.lowerCaseWithTrim(value);\r\n                testResult = Array.isArray(control.value) ? control.value.some((y) => ApplicationUtil.lowerCaseWithTrim(y) === matchValue) : ApplicationUtil.lowerCaseWithTrim(control.value) === matchValue;\r\n                if (testResult)\r\n                    break;\r\n            }\r\n            if (!testResult)\r\n                return ObjectMaker.toJson(AnnotationTypes.oneOf, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction noneOfValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, ARRAY_CONFIG);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            var testResult = false;\r\n            for (let value of config.matchValues) {\r\n                let matchValue = ApplicationUtil.lowerCaseWithTrim(value);\r\n                testResult = Array.isArray(control.value) ? control.value.some((y) => ApplicationUtil.lowerCaseWithTrim(y) === matchValue) : ApplicationUtil.lowerCaseWithTrim(control.value) === matchValue;\r\n                if (testResult)\r\n                    break;\r\n            }\r\n            if (testResult)\r\n                return ObjectMaker.toJson(AnnotationTypes.noneOf, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction macValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.macId, AnnotationTypes.mac);\r\n    };\r\n}\n\nfunction asciiValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.ascii, AnnotationTypes.ascii);\r\n    };\r\n}\n\nfunction dataUriValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.dataUri, AnnotationTypes.dataUri);\r\n    };\r\n}\n\nfunction portValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let isValid = RegexValidator.isValid(control.value, RegExRule.onlyDigit) && (control.value >= 0 && control.value <= 65535);\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.port, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction latLongValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let splitText = control.value.split(',');\r\n            if (!(splitText.length > 1 && RegexValidator.isValid(splitText[0], RegExRule.lat) && RegexValidator.isValid(splitText[1], RegExRule.long)))\r\n                return ObjectMaker.toJson(AnnotationTypes.latLong, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction extensionValidator(configModel) {\r\n    return (control, files) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.extension])\r\n            ApplicationUtil.configureControl(control, config, AnnotationTypes.extension);\r\n        if (files && FormProvider.ProcessRule(control, config)) {\r\n            if (RegexValidator.isNotBlank(control.value)) {\r\n                let testResult = true;\r\n                let extension = '';\r\n                for (var i = 0; i < files.length; i++) {\r\n                    let file = files.item(i);\r\n                    let splitText = file.name.split(\".\");\r\n                    extension = splitText[splitText.length - 1];\r\n                    let result = config.extensions.filter(t => { return extension.toLowerCase() == t.toLowerCase(); })[0];\r\n                    if (!result && !configModel.isExcludeExtensions) {\r\n                        testResult = false;\r\n                        break;\r\n                    }\r\n                    else {\r\n                        if (result && configModel.isExcludeExtensions) {\r\n                            testResult = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (!testResult)\r\n                    return ObjectMaker.toJson(AnnotationTypes.extension, config, [extension, config.extensions.join(\",\")]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction fileSizeValidator(configModel) {\r\n    return (control, files) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.fileSize])\r\n            ApplicationUtil.configureControl(control, config, AnnotationTypes.fileSize);\r\n        if (files && FormProvider.ProcessRule(control, config)) {\r\n            if (RegexValidator.isNotBlank(control.value)) {\r\n                let minFileSize = config.minSize ? config.minSize : 0;\r\n                let testResult = false;\r\n                let fileSize = 0;\r\n                for (var i = 0; i < files.length; i++) {\r\n                    let file = files.item(i);\r\n                    fileSize = file.size;\r\n                    testResult = (!(fileSize >= minFileSize && fileSize <= config.maxSize));\r\n                    if (testResult)\r\n                        break;\r\n                }\r\n                if (testResult)\r\n                    return ObjectMaker.toJson(AnnotationTypes.fileSize, config, [fileSize, minFileSize, config.maxSize]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction endsWithValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let failed = false;\r\n            let values = config.values ? config.values : [config.value];\r\n            for (let value of values) {\r\n                var endString = String(control.value).substr(control.value.length - value.length, value.length);\r\n                failed = (endString != value);\r\n                if (!failed)\r\n                    break;\r\n            }\r\n            if (failed)\r\n                return ObjectMaker.toJson(AnnotationTypes.endsWith, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction startsWithValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let failed = false;\r\n            let values = config.values ? config.values : [config.value];\r\n            for (let value of values) {\r\n                let startString = String(control.value).substr(0, value.length);\r\n                failed = (config.isRestrict && String(startString).toLowerCase() == String(value).toLowerCase()) || (!config.isRestrict && startString != value);\r\n                if (!failed)\r\n                    break;\r\n            }\r\n            if (failed)\r\n                return ObjectMaker.toJson(AnnotationTypes.startsWith, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction primeNumberValidator(configModel) {\r\n    function isPrime(value) {\r\n        let isPrimeNumber = value != 1;\r\n        for (var i = 2; i < value; i++) {\r\n            if (value % i == 0) {\r\n                isPrimeNumber = false;\r\n                break;\r\n            }\r\n        }\r\n        return isPrimeNumber;\r\n    }\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!ApplicationUtil.isNumeric(control.value) || !isPrime(control.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.primeNumber, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction latitudeValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.lat, AnnotationTypes.latitude);\r\n    };\r\n}\n\nfunction longitudeValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.long, AnnotationTypes.longitude);\r\n    };\r\n}\n\nfunction composeValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (config.validators) {\r\n                let result = undefined;\r\n                for (let validator of config.validators) {\r\n                    result = validator(control);\r\n                    if (result)\r\n                        break;\r\n                }\r\n                if (result)\r\n                    return (config.messageKey || config.message) ? ObjectMaker.toJson(config.messageKey || AnnotationTypes.compose, config, [control.value]) : result;\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction ruleValidator(configModel, entity) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            let result = null;\r\n            for (let rule of config.customRules) {\r\n                result = rule(entity);\r\n                if (result)\r\n                    break;\r\n            }\r\n            if (result)\r\n                return result;\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction fileValidator(configModel) {\r\n    return (control, files) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.file])\r\n            ApplicationUtil.configureControl(control, config, AnnotationTypes.file);\r\n        if (files) {\r\n            if (FormProvider.ProcessRule(control, config)) {\r\n                if (RegexValidator.isNotBlank(control.value)) {\r\n                    let minFiles = config.minFiles ? config.minFiles : 0;\r\n                    let maxFiles = config.maxFiles ? config.maxFiles : files.length;\r\n                    if (!(files.length > 0 && files[0] instanceof File && files.length >= minFiles && files.length <= maxFiles))\r\n                        return ObjectMaker.toJson(AnnotationTypes.file, config, [files.length, minFiles, maxFiles]);\r\n                }\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction customValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            const formGroupValue = ApplicationUtil.getParentObjectValue(control);\r\n            const parentObject = (control.parent) ? control.parent.value : undefined;\r\n            let result = null;\r\n            for (let rule of config.customRules) {\r\n                result = rule(formGroupValue, parentObject, config.additionalValue);\r\n                if (result)\r\n                    break;\r\n            }\r\n            if (result)\r\n                return result;\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction uniqueValidator(configModel) {\r\n    var setTimeoutFunc = (invalidateControls, controlValues) => {\r\n        let timeOut = setTimeout(() => {\r\n            invalidateControls.forEach(t => {\r\n                let isMatched = controlValues.filter(x => x == t.value)[0];\r\n                if (!isMatched)\r\n                    t.updateValueAndValidity();\r\n            });\r\n            clearTimeout(timeOut);\r\n        }, 200);\r\n    };\r\n    var additionalValidation = (config, fieldName, formGroup, formArray, currentValue) => {\r\n        let indexOf = formArray.controls.indexOf(formGroup);\r\n        let formArrayValue = [];\r\n        if (indexOf != -1) {\r\n            formArray.value.forEach((t, i) => {\r\n                if (indexOf != i)\r\n                    formArrayValue.push(t);\r\n            });\r\n            return config.additionalValidation(currentValue, indexOf, fieldName, formGroup.value, formArrayValue);\r\n        }\r\n        return false;\r\n    };\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (RegexValidator.isNotBlank(control.value)) {\r\n                let formArray = ApplicationUtil.getParentFormArray(control);\r\n                let parentFormGroup = control.parent ? control.parent : undefined;\r\n                let invalidateControls = [];\r\n                let controlValues = [];\r\n                if (formArray && parentFormGroup) {\r\n                    let currentValue = control.value;\r\n                    let fieldName = ApplicationUtil.getFormControlName(control);\r\n                    let isMatched = false;\r\n                    for (let formGroup of formArray.controls) {\r\n                        if (formGroup != parentFormGroup) {\r\n                            isMatched = (ApplicationUtil.toLower(formGroup.controls[fieldName].value) == ApplicationUtil.toLower(currentValue) && !(formGroup.controls[fieldName].errors && formGroup.controls[fieldName].errors[AnnotationTypes.unique]));\r\n                            if (formGroup.controls[fieldName].errors && formGroup.controls[fieldName].errors[AnnotationTypes.unique]) {\r\n                                var matchedControl = formArray.controls.filter(t => t.controls[fieldName] != formGroup.controls[fieldName] && ApplicationUtil.toLower(t.controls[fieldName].value) == ApplicationUtil.toLower(formGroup.controls[fieldName].value))[0];\r\n                                if (!matchedControl)\r\n                                    invalidateControls.push(formGroup.controls[fieldName]);\r\n                            }\r\n                            else\r\n                                controlValues.push(formGroup.controls[fieldName].value);\r\n                        }\r\n                        if (isMatched)\r\n                            break;\r\n                    }\r\n                    if (invalidateControls.length > 0)\r\n                        setTimeoutFunc(invalidateControls, controlValues);\r\n                    let validation = false;\r\n                    if (config.additionalValidation) {\r\n                        validation = additionalValidation(config, fieldName, parentFormGroup, formArray, currentValue);\r\n                    }\r\n                    if (isMatched && !validation)\r\n                        return ObjectMaker.toJson(AnnotationTypes.unique, config, [control.value]);\r\n                }\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction imageValidator(configModel) {\r\n    return (control, files) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.image])\r\n            ApplicationUtil.configureControl(control, config, AnnotationTypes.image);\r\n        if (!files)\r\n            return ObjectMaker.null();\r\n        return new Promise((resolve, reject) => {\r\n            if (FormProvider.ProcessRule(control, config)) {\r\n                if (RegexValidator.isNotBlank(control.value)) {\r\n                    let testResult = false;\r\n                    for (var i = 0; i < files.length; i++) {\r\n                        let file = files.item(i);\r\n                        let type = file.type ? file.type.split('/') : [];\r\n                        testResult = type.length > 1 && type[0] == \"image\";\r\n                        if (!testResult)\r\n                            break;\r\n                        let image = new Image();\r\n                        config.minWidth = config.minWidth ? config.minWidth : 0;\r\n                        config.minHeight = config.minHeight ? config.minHeight : 0;\r\n                        image.onload = () => {\r\n                            testResult = (image.width >= config.minWidth && image.height >= config.minHeight) && (image.width <= config.maxWidth && image.height <= config.maxHeight);\r\n                            if (!testResult)\r\n                                resolve(ObjectMaker.toJson(AnnotationTypes.image, config, [image.width, image.height]));\r\n                            else\r\n                                resolve(ObjectMaker.null());\r\n                        };\r\n                        image.onerror = () => {\r\n                            resolve(ObjectMaker.toJson(AnnotationTypes.image, config, []));\r\n                        };\r\n                        image.src = URL.createObjectURL(file);\r\n                    }\r\n                    if (!testResult)\r\n                        resolve(ObjectMaker.toJson(AnnotationTypes.image, config, []));\r\n                }\r\n            }\r\n            return ObjectMaker.null();\r\n        });\r\n    };\r\n}\n\nfunction notEmptyValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (!RegexValidator.isNotBlank(control.value, true)) {\r\n                return ObjectMaker.toJson(AnnotationTypes.notEmpty, config, []);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction checkIpV4(value) {\r\n    let isValid = RegexValidator.isValid(value, RegExRule.ipV4);\r\n    if (isValid) {\r\n        const splitDots = value.split('.');\r\n        for (let ipNum of splitDots) {\r\n            isValid = ipNum <= 255;\r\n            if (!isValid)\r\n                break;\r\n        }\r\n    }\r\n    return isValid;\r\n}\r\nfunction checkIpV6(value) {\r\n    return RegexValidator.isValid(value, RegExRule.ipV6);\r\n}\n\nfunction ipValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, IP_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let values = config.isCidr ? control.value.split('/') : [control.value];\r\n            var isValid = (config.version == IpVersion.V4) ?\r\n                checkIpV4(values[0]) :\r\n                (config.version == IpVersion.V6) ?\r\n                    checkIpV6(values[0]) :\r\n                    (checkIpV4(values[0]) || checkIpV6(values[0]));\r\n            if (config.isCidr && isValid) {\r\n                isValid = (values.length > 1) ?\r\n                    config.version == IpVersion.V4 ?\r\n                        RegexValidator.isValid(values[1], RegExRule.cidrV4) :\r\n                        config.version == IpVersion.V6 ?\r\n                            RegexValidator.isValid(values[1], RegExRule.cidrV6) :\r\n                            (RegexValidator.isValid(values[1], RegExRule.cidrV4) || RegexValidator.isValid(values[1], RegExRule.cidrV6)) :\r\n                    false;\r\n            }\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.ip, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction cusipValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            var controlValue = control.value.toUpperCase();\r\n            let isValid = RegexValidator.isValid(controlValue, RegExRule.cusip);\r\n            if (isValid) {\r\n                let numericValues = controlValue.split(\"\").map((value) => {\r\n                    var charCode = value.charCodeAt(0);\r\n                    return charCode >= \"A\".charCodeAt(0) && charCode <= \"Z\".charCodeAt(0) ? charCode - \"A\".charCodeAt(0) + 10 : value;\r\n                });\r\n                let totalCount = 0;\r\n                for (var i = 0; i < numericValues.length - 1; i++) {\r\n                    var numericValue = parseInt(numericValues[i], 10);\r\n                    if (i % 2 !== 0) {\r\n                        numericValue *= 2;\r\n                    }\r\n                    if (numericValue > 9) {\r\n                        numericValue -= 9;\r\n                    }\r\n                    totalCount += numericValue;\r\n                }\r\n                totalCount = (10 - (totalCount % 10)) % 10;\r\n                isValid = totalCount == numericValues[numericValues.length - 1];\r\n            }\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.cusip, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction gridValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let controlValue = control.value.toUpperCase();\r\n            var isValid = RegexValidator.isValid(controlValue, RegExRule.grid);\r\n            if (isValid) {\r\n                controlValue = controlValue.replace(/\\s/g, '').replace(/-/g, '');\r\n                if ('GRID:' === controlValue.substr(0, 5)) {\r\n                    controlValue = controlValue.substr(5);\r\n                }\r\n                let alphaNums = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n                var alphaNumLength = alphaNums.length, length = controlValue.length, check = Math.floor(alphaNumLength / 2);\r\n                for (var i = 0; i < length; i++) {\r\n                    check = (((check || alphaNumLength) * 2) % (alphaNumLength + 1) + alphaNums.indexOf(controlValue.charAt(i))) % alphaNumLength;\r\n                }\r\n                isValid = (check === 1);\r\n            }\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.grid, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction dateValidator(configModel) {\r\n    return (control) => {\r\n        return validateDate(control, configModel, AnnotationTypes.date);\r\n    };\r\n}\n\nfunction runCondition(leftValue, rightValue, operator) {\r\n    let result = false;\r\n    switch (operator) {\r\n        case OPERATORS.lessThan:\r\n        case OPERATORS.greaterThan:\r\n            result = leftValue > rightValue;\r\n            break;\r\n        case OPERATORS.lessThanEqualTo:\r\n        case OPERATORS.greaterThanEqualTo:\r\n            result = leftValue >= rightValue;\r\n            break;\r\n    }\r\n    return result;\r\n}\r\nfunction isValid(control, config) {\r\n    return config.allowSeconds ? RegexValidator.isValid(control.value, RegExRule.timeWithSeconds) : RegexValidator.isValid(control.value, RegExRule.time);\r\n}\r\nfunction getTime(value) {\r\n    let splitTime = (value) ? value.split(':') : [];\r\n    return new Date(1970, 0, 1, splitTime[0] ? splitTime[0] : 0, splitTime[1] ? splitTime[1] : 0, splitTime[2] ? splitTime[2] : 0).getTime();\r\n}\r\nfunction timeChecker(control, config, operationType) {\r\n    config = getConfigObject(config, control);\r\n    if (FormProvider.ProcessRule(control, config)) {\r\n        if (RegexValidator.isNotBlank(control.value)) {\r\n            if (isValid(control, config)) {\r\n                let crossFormControl = config.fieldName ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;\r\n                let crossControlValue = crossFormControl ? getTime(crossFormControl.value) : getTime(config.value);\r\n                let currentControlValue = getTime(control.value);\r\n                let isValid = operationType == AnnotationTypes.minTime ? runCondition(currentControlValue, crossControlValue, config.operator || OPERATORS.greaterThanEqualTo) : runCondition(crossControlValue, currentControlValue, config.operator || OPERATORS.lessThanEqualTo);\r\n                let additionalValue = { [operationType == AnnotationTypes.minTime ? \"min\" : \"max\"]: crossControlValue };\r\n                if (!isValid)\r\n                    return ObjectMaker.toJson(operationType, config, [control.value], additionalValue);\r\n            }\r\n            else\r\n                return ObjectMaker.toJson(operationType, config, [control.value]);\r\n        }\r\n    }\r\n    return ObjectMaker.null();\r\n}\n\nfunction minTimeValidator(configModel) {\r\n    return (control) => {\r\n        return timeChecker(control, configModel, AnnotationTypes.minTime);\r\n    };\r\n}\n\nfunction maxTimeValidator(configModel) {\r\n    return (control) => {\r\n        return timeChecker(control, configModel, AnnotationTypes.maxTime);\r\n    };\r\n}\n\nfunction requiredTrueValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (control.value !== true) {\r\n                return ObjectMaker.toJson(AnnotationTypes.requiredTrue, config, []);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction maskValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.mask])\r\n            ApplicationUtil.configureControl(control, config, AnnotationTypes.mask);\r\n        return null;\r\n    };\r\n}\n\nconst IBAN_COUNTRY_CODE_REGEX = {\r\n    AD: /^(AD[0-9]{2})\\d{8}[A-Z0-9]{12}$/,\r\n    AE: /^(AE[0-9]{2})\\d{3}\\d{16}$/,\r\n    AL: /^(AL[0-9]{2})\\d{8}[A-Z0-9]{16}$/,\r\n    AT: /^(AT[0-9]{2})\\d{16}$/,\r\n    AZ: /^(AZ[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\r\n    BA: /^(BA[0-9]{2})\\d{16}$/,\r\n    BE: /^(BE[0-9]{2})\\d{12}$/,\r\n    BG: /^(BG[0-9]{2})[A-Z]{4}\\d{6}[A-Z0-9]{8}$/,\r\n    BH: /^(BH[0-9]{2})[A-Z]{4}[A-Z0-9]{14}$/,\r\n    BR: /^(BR[0-9]{2})\\d{23}[A-Z]{1}[A-Z0-9]{1}$/,\r\n    BY: /^(BY[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\r\n    CH: /^(CH[0-9]{2})\\d{5}[A-Z0-9]{12}$/,\r\n    CR: /^(CR[0-9]{2})\\d{18}$/,\r\n    CY: /^(CY[0-9]{2})\\d{8}[A-Z0-9]{16}$/,\r\n    CZ: /^(CZ[0-9]{2})\\d{20}$/,\r\n    DE: /^(DE[0-9]{2})\\d{18}$/,\r\n    DK: /^(DK[0-9]{2})\\d{14}$/,\r\n    DO: /^(DO[0-9]{2})[A-Z]{4}\\d{20}$/,\r\n    EE: /^(EE[0-9]{2})\\d{16}$/,\r\n    EG: /^(EG[0-9]{2})\\d{25}$/,\r\n    ES: /^(ES[0-9]{2})\\d{20}$/,\r\n    FI: /^(FI[0-9]{2})\\d{14}$/,\r\n    FO: /^(FO[0-9]{2})\\d{14}$/,\r\n    FR: /^(FR[0-9]{2})\\d{10}[A-Z0-9]{11}\\d{2}$/,\r\n    GB: /^(GB[0-9]{2})[A-Z]{4}\\d{14}$/,\r\n    GE: /^(GE[0-9]{2})[A-Z0-9]{2}\\d{16}$/,\r\n    GI: /^(GI[0-9]{2})[A-Z]{4}[A-Z0-9]{15}$/,\r\n    GL: /^(GL[0-9]{2})\\d{14}$/,\r\n    GR: /^(GR[0-9]{2})\\d{7}[A-Z0-9]{16}$/,\r\n    GT: /^(GT[0-9]{2})[A-Z0-9]{4}[A-Z0-9]{20}$/,\r\n    HR: /^(HR[0-9]{2})\\d{17}$/,\r\n    HU: /^(HU[0-9]{2})\\d{24}$/,\r\n    IE: /^(IE[0-9]{2})[A-Z0-9]{4}\\d{14}$/,\r\n    IL: /^(IL[0-9]{2})\\d{19}$/,\r\n    IQ: /^(IQ[0-9]{2})[A-Z]{4}\\d{15}$/,\r\n    IR: /^(IR[0-9]{2})0\\d{2}0\\d{18}$/,\r\n    IS: /^(IS[0-9]{2})\\d{22}$/,\r\n    IT: /^(IT[0-9]{2})[A-Z]{1}\\d{10}[A-Z0-9]{12}$/,\r\n    JO: /^(JO[0-9]{2})[A-Z]{4}\\d{22}$/,\r\n    KW: /^(KW[0-9]{2})[A-Z]{4}[A-Z0-9]{22}$/,\r\n    KZ: /^(KZ[0-9]{2})\\d{3}[A-Z0-9]{13}$/,\r\n    LB: /^(LB[0-9]{2})\\d{4}[A-Z0-9]{20}$/,\r\n    LC: /^(LC[0-9]{2})[A-Z]{4}[A-Z0-9]{24}$/,\r\n    LI: /^(LI[0-9]{2})\\d{5}[A-Z0-9]{12}$/,\r\n    LT: /^(LT[0-9]{2})\\d{16}$/,\r\n    LU: /^(LU[0-9]{2})\\d{3}[A-Z0-9]{13}$/,\r\n    LV: /^(LV[0-9]{2})[A-Z]{4}[A-Z0-9]{13}$/,\r\n    MC: /^(MC[0-9]{2})\\d{10}[A-Z0-9]{11}\\d{2}$/,\r\n    MD: /^(MD[0-9]{2})[A-Z0-9]{20}$/,\r\n    ME: /^(ME[0-9]{2})\\d{18}$/,\r\n    MK: /^(MK[0-9]{2})\\d{3}[A-Z0-9]{10}\\d{2}$/,\r\n    MR: /^(MR[0-9]{2})\\d{23}$/,\r\n    MT: /^(MT[0-9]{2})[A-Z]{4}\\d{5}[A-Z0-9]{18}$/,\r\n    MU: /^(MU[0-9]{2})[A-Z]{4}\\d{19}[A-Z]{3}$/,\r\n    NL: /^(NL[0-9]{2})[A-Z]{4}\\d{10}$/,\r\n    NO: /^(NO[0-9]{2})\\d{11}$/,\r\n    PK: /^(PK[0-9]{2})[A-Z0-9]{4}\\d{16}$/,\r\n    PL: /^(PL[0-9]{2})\\d{24}$/,\r\n    PS: /^(PS[0-9]{2})[A-Z0-9]{4}\\d{21}$/,\r\n    PT: /^(PT[0-9]{2})\\d{21}$/,\r\n    QA: /^(QA[0-9]{2})[A-Z]{4}[A-Z0-9]{21}$/,\r\n    RO: /^(RO[0-9]{2})[A-Z]{4}[A-Z0-9]{16}$/,\r\n    RS: /^(RS[0-9]{2})\\d{18}$/,\r\n    SA: /^(SA[0-9]{2})\\d{2}[A-Z0-9]{18}$/,\r\n    SC: /^(SC[0-9]{2})[A-Z]{4}\\d{20}[A-Z]{3}$/,\r\n    SE: /^(SE[0-9]{2})\\d{20}$/,\r\n    SI: /^(SI[0-9]{2})\\d{15}$/,\r\n    SK: /^(SK[0-9]{2})\\d{20}$/,\r\n    SM: /^(SM[0-9]{2})[A-Z]{1}\\d{10}[A-Z0-9]{12}$/,\r\n    SV: /^(SV[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\r\n    TL: /^(TL[0-9]{2})\\d{19}$/,\r\n    TN: /^(TN[0-9]{2})\\d{20}$/,\r\n    TR: /^(TR[0-9]{2})\\d{5}[A-Z0-9]{17}$/,\r\n    UA: /^(UA[0-9]{2})\\d{6}[A-Z0-9]{19}$/,\r\n    VA: /^(VA[0-9]{2})\\d{18}$/,\r\n    VG: /^(VG[0-9]{2})[A-Z0-9]{4}\\d{16}$/,\r\n    XK: /^(XK[0-9]{2})\\d{16}$/,\r\n};\n\nfunction hasValidIbanFormat(value, countryCode) {\r\n    const strippedStr = value.replace(/[\\s\\-]+/gi, '').toUpperCase();\r\n    const isoCountryCode = countryCode || strippedStr.slice(0, 2).toUpperCase();\r\n    return (isoCountryCode in IBAN_COUNTRY_CODE_REGEX) &&\r\n        IBAN_COUNTRY_CODE_REGEX[isoCountryCode].test(strippedStr);\r\n}\r\nfunction hasValidIbanChecksum(str) {\r\n    const strippedStr = str.replace(/[^A-Z0-9]+/gi, '').toUpperCase(); // Keep only digits and A-Z latin alphabetic\r\n    const rearranged = strippedStr.slice(4) + strippedStr.slice(0, 4);\r\n    const alphaCapsReplacedWithDigits = rearranged.replace(/[A-Z]/g, char => char.charCodeAt(0) - 55);\r\n    const remainder = alphaCapsReplacedWithDigits.match(/\\d{1,7}/g)\r\n        .reduce((acc, value) => Number(acc + value) % 97, '');\r\n    return remainder === 1;\r\n}\r\nfunction ibanValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(hasValidIbanFormat(control.value, config.countryCode) && hasValidIbanChecksum(control.value)))\r\n                return ObjectMaker.toJson(AnnotationTypes.iban, config, [control.value, config.countryCode]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nconst APP_VALIDATORS = {\r\n    \"alphaNumeric\": alphaNumericValidator,\r\n    \"alpha\": alphaValidator,\r\n    \"compare\": compareValidator,\r\n    \"email\": emailValidator,\r\n    \"hexColor\": hexColorValidator,\r\n    \"lowerCase\": lowercaseValidator,\r\n    \"maxDate\": maxDateValidator,\r\n    \"maxNumber\": maxNumberValidator,\r\n    \"minDate\": minDateValidator,\r\n    \"minNumber\": minNumberValidator,\r\n    \"contains\": containsValidator,\r\n    \"upperCase\": uppercaseValidator,\r\n    \"maxLength\": maxLengthValidator,\r\n    \"minLength\": minLengthValidator,\r\n    \"password\": passwordValidator,\r\n    \"range\": rangeValidator,\r\n    \"required\": requiredValidator,\r\n    \"creditCard\": creditCardValidator,\r\n    \"digit\": digitValidator,\r\n    \"pattern\": patternValidator,\r\n    \"time\": timeValidator,\r\n    \"url\": urlValidator,\r\n    \"json\": jsonValidator,\r\n    \"greaterThan\": greaterThanValidator,\r\n    \"greaterThanEqualTo\": greaterThanEqualToValidator,\r\n    \"lessThan\": lessThanValidator,\r\n    \"lessThanEqualTo\": lessThanEqualToValidator,\r\n    \"choice\": choiceValidator,\r\n    \"different\": differentValidator,\r\n    \"numeric\": numericValidator,\r\n    \"even\": evenValidator,\r\n    \"odd\": oddValidator,\r\n    \"factor\": factorValidator,\r\n    \"leapYear\": leapYearValidator,\r\n    \"allOf\": allOfValidator,\r\n    \"oneOf\": oneOfValidator,\r\n    \"noneOf\": noneOfValidator,\r\n    \"mac\": macValidator,\r\n    \"ascii\": asciiValidator,\r\n    \"dataUri\": dataUriValidator,\r\n    \"port\": portValidator,\r\n    \"latLong\": latLongValidator,\r\n    \"extension\": extensionValidator,\r\n    \"fileSize\": fileSizeValidator,\r\n    \"endsWith\": endsWithValidator,\r\n    \"startsWith\": startsWithValidator,\r\n    \"primeNumber\": primeNumberValidator,\r\n    \"latitude\": latitudeValidator,\r\n    \"longitude\": longitudeValidator,\r\n    \"compose\": composeValidator,\r\n    \"rule\": ruleValidator,\r\n    \"file\": fileValidator,\r\n    \"unique\": uniqueValidator,\r\n    \"image\": imageValidator,\r\n    \"notEmpty\": notEmptyValidator,\r\n    \"ip\": ipValidator,\r\n    \"cusip\": cusipValidator,\r\n    \"grid\": gridValidator,\r\n    \"date\": dateValidator,\r\n    \"minTime\": minTimeValidator,\r\n    \"maxTime\": maxTimeValidator,\r\n    \"requiredTrue\": requiredTrueValidator,\r\n    \"mask\": maskValidator,\r\n    \"iban\": ibanValidator\r\n};\n\nfunction baseAsyncValidator(configModel, validatorName) {\r\n    return (control) => {\r\n        configModel = configModel || {};\r\n        if (configModel.validatorConfig) {\r\n            if (FormProvider.ProcessRule(control, configModel)) {\r\n                return configModel.validatorConfig.pipe(map(resolveConfig(configModel, validatorName, control)));\r\n            }\r\n            return of(null);\r\n        }\r\n        else\r\n            return of(resolveConfig(configModel, validatorName, control)(configModel));\r\n    };\r\n}\r\nfunction resolveConfig(configModel, validatorName, control) {\r\n    return config => {\r\n        let configClone = Object.assign(Object.assign(Object.assign({}, configModel), config), { expressionProcessed: true });\r\n        return APP_VALIDATORS[validatorName](configClone)(control);\r\n    };\r\n}\n\nfunction alpha(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.alpha, config);\r\n}\r\nfunction alphaAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.alpha, [baseAsyncValidator(config, AnnotationTypes.alpha)], true);\r\n}\n\nfunction alphaNumeric(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.alphaNumeric, config);\r\n}\r\nfunction alphaNumericAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.alphaNumeric, [baseAsyncValidator(config, AnnotationTypes.alphaNumeric)], true);\r\n}\n\nfunction compare(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.compare, config);\r\n}\n\nfunction contains(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.contains, config);\r\n}\r\nfunction containsAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.contains, [baseAsyncValidator(config, AnnotationTypes.contains)], true);\r\n}\n\nfunction creditCard(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.creditCard, config);\r\n}\r\nfunction creditCardAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.creditCard, [baseAsyncValidator(config, AnnotationTypes.creditCard)], true);\r\n}\n\nfunction digit(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.digit, config);\r\n}\n\nfunction email(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.email, config);\r\n}\n\nfunction hexColor(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.hexColor, config);\r\n}\n\nfunction lowerCase(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.lowerCase, config);\r\n}\n\nfunction maxDate(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxDate, config);\r\n}\r\nfunction maxDateAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxDate, [baseAsyncValidator(config, AnnotationTypes.maxDate)], true);\r\n}\n\nfunction maxLength(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxLength, config);\r\n}\r\nfunction maxLengthAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxLength, [baseAsyncValidator(config, AnnotationTypes.maxLength)], true);\r\n}\n\nfunction minDate(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minDate, config);\r\n}\r\nfunction minDateAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minDate, [baseAsyncValidator(config, AnnotationTypes.minDate)], true);\r\n}\n\nfunction maxNumber(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxNumber, config);\r\n}\r\nfunction maxNumberAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxNumber, [baseAsyncValidator(config, AnnotationTypes.maxNumber)], true);\r\n}\n\nfunction minLength(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minLength, config);\r\n}\r\nfunction minLengthAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minLength, [baseAsyncValidator(config, AnnotationTypes.minLength)], true);\r\n}\n\nfunction minNumber(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minNumber, config);\r\n}\r\nfunction minNumberAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minNumber, [baseAsyncValidator(config, AnnotationTypes.minNumber)], true);\r\n}\n\nfunction password(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.password, config);\r\n}\r\nfunction passwordAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.password, [baseAsyncValidator(config, AnnotationTypes.password)], true);\r\n}\n\nfunction pattern(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.pattern, config);\r\n}\r\nfunction patternAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.pattern, [baseAsyncValidator(config, AnnotationTypes.pattern)], true);\r\n}\n\nfunction propArray(entity, config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        var propertyInfo = {\r\n            name: propertyKey,\r\n            propertyType: ARRAY_PROPERTY,\r\n            entity: entity,\r\n            dataPropertyName: config ? config.name : undefined,\r\n            entityProvider: config ? config.entityProvider : undefined,\r\n            arrayConfig: config ? {\r\n                allowMaxIndex: config.allowMaxIndex, messageKey: config.messageKey, createBlank: config.createBlank\r\n            } : undefined\r\n        };\r\n        defaultContainer.addProperty(target.constructor, propertyInfo);\r\n    };\r\n}\n\nfunction propObject(entity, config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.initPropertyObject(propertyKey, OBJECT_PROPERTY, entity, target, config);\r\n    };\r\n}\n\nfunction prop(config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        var propertyInfo = {\r\n            name: propertyKey,\r\n            propertyType: PROPERTY,\r\n            dataPropertyName: config ? config.name : undefined,\r\n            defaultValue: config ? config.defaultValue : undefined,\r\n            ignore: config ? config.ignore : undefined,\r\n            isPrimaryKey: config ? config.isPrimaryKey : undefined,\r\n            messageNexus: config ? config.messageNexus : undefined\r\n        };\r\n        defaultContainer.addProperty(target.constructor, propertyInfo);\r\n    };\r\n}\n\nfunction range(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.range, config);\r\n}\r\nfunction rangeAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.range, [baseAsyncValidator(config, AnnotationTypes.range)], true);\r\n}\n\nfunction required(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.required, config);\r\n}\n\nfunction upperCase(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.upperCase, config);\r\n}\n\nfunction time(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.time, config);\r\n}\r\nfunction timeAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.time, [baseAsyncValidator(config, AnnotationTypes.time)], true);\r\n}\n\nfunction url(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.url, config);\r\n}\r\nfunction urlAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.url, [baseAsyncValidator(config, AnnotationTypes.url)], true);\r\n}\n\nfunction json(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.json, config);\r\n}\n\nfunction greaterThan(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.greaterThan, config);\r\n}\r\nfunction greaterThanAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.greaterThan, [baseAsyncValidator(config, AnnotationTypes.greaterThan)], true);\r\n}\n\nfunction greaterThanEqualTo(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.greaterThanEqualTo, config);\r\n}\r\nfunction greaterThanEqualToAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.greaterThanEqualTo, [baseAsyncValidator(config, AnnotationTypes.greaterThanEqualTo)], true);\r\n}\n\nfunction lessThanEqualTo(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.lessThanEqualTo, config);\r\n}\r\nfunction lessThanEqualToAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.lessThanEqualTo, [baseAsyncValidator(config, AnnotationTypes.lessThanEqualTo)], true);\r\n}\n\nfunction lessThan(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.lessThan, config);\r\n}\r\nfunction lessThanAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.lessThan, [baseAsyncValidator(config, AnnotationTypes.lessThan)], true);\r\n}\n\nfunction choice(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.choice, config);\r\n}\r\nfunction choiceAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.choice, [baseAsyncValidator(config, AnnotationTypes.choice)], true);\r\n}\n\nfunction different(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.different, config);\r\n}\n\nfunction numeric(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.numeric, config);\r\n}\r\nfunction numericAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.numeric, [baseAsyncValidator(config, AnnotationTypes.numeric)], true);\r\n}\n\nfunction even(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.even, config);\r\n}\n\nfunction odd(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.odd, config);\r\n}\n\nfunction factor(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.factor, config);\r\n}\r\nfunction factorAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.factor, [baseAsyncValidator(config, AnnotationTypes.factor)], true);\r\n}\n\nfunction leapYear(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.leapYear, config);\r\n}\n\nfunction allOf(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.allOf, config);\r\n}\r\nfunction allOfAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.allOf, [baseAsyncValidator(config, AnnotationTypes.allOf)], true);\r\n}\n\nfunction oneOf(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.oneOf, config);\r\n}\r\nfunction oneOfAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.oneOf, [baseAsyncValidator(config, AnnotationTypes.oneOf)], true);\r\n}\n\nfunction noneOf(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.noneOf, config);\r\n}\r\nfunction noneOfAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.noneOf, [baseAsyncValidator(config, AnnotationTypes.noneOf)], true);\r\n}\n\nfunction mac(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.mac, config);\r\n}\n\nfunction ascii(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.ascii, config);\r\n}\n\nfunction dataUri(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.dataUri, config);\r\n}\n\nfunction port(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.port, config);\r\n}\n\nfunction latLong(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.latLong, config);\r\n}\n\nfunction extension(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.extension, config);\r\n}\r\nfunction extensionAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.extension, [baseAsyncValidator(config, AnnotationTypes.extension)], true);\r\n}\n\nfunction fileSize(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.fileSize, config);\r\n}\r\nfunction fileSizeAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.fileSize, [baseAsyncValidator(config, AnnotationTypes.fileSize)], true);\r\n}\n\nfunction endsWith(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.endsWith, config);\r\n}\r\nfunction endsWithAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.endsWith, [baseAsyncValidator(config, AnnotationTypes.endsWith)], true);\r\n}\n\nfunction startsWith(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.startsWith, config);\r\n}\r\nfunction startsWithAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.startsWith, [baseAsyncValidator(config, AnnotationTypes.startsWith)], true);\r\n}\n\nfunction primeNumber(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.primeNumber, config);\r\n}\n\nfunction latitude(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.latitude, config);\r\n}\n\nfunction longitude(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.longitude, config);\r\n}\n\nfunction rule(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.rule, config);\r\n}\n\nfunction file(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.file, config);\r\n}\r\nfunction fileAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.file, [baseAsyncValidator(config, AnnotationTypes.file)], true);\r\n}\n\nfunction custom(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.custom, config);\r\n}\r\nfunction customAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.custom, [baseAsyncValidator(config, AnnotationTypes.custom)], true);\r\n}\n\nfunction unique(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.unique, config);\r\n}\n\nfunction image(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.image, config);\r\n}\r\nfunction imageAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.image, [baseAsyncValidator(config, AnnotationTypes.image)], true);\r\n}\n\nfunction notEmpty(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.notEmpty, config);\r\n}\n\nfunction async(validators) {\r\n    return baseDecoratorFunction(AnnotationTypes.async, validators, true);\r\n}\n\nfunction cusip(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.cusip, config);\r\n}\n\nfunction grid(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.grid, config);\r\n}\n\nfunction date(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.date, config);\r\n}\r\nfunction dateAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.date, [baseAsyncValidator(config, AnnotationTypes.date)], true);\r\n}\n\nfunction disable(config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addDecoratorConfig(target, parameterIndex, propertyKey, config, DECORATORS.disabled);\r\n    };\r\n}\n\nfunction error(config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addDecoratorConfig(target, parameterIndex, propertyKey, config, DECORATORS.error);\r\n    };\r\n}\n\nfunction and(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.and, config);\r\n}\n\nfunction or(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.or, config);\r\n}\n\nfunction not(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.not, config);\r\n}\n\nfunction trim() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.trim);\r\n    };\r\n}\n\nfunction ltrim() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.ltrim);\r\n    };\r\n}\n\nfunction rtrim() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.rtrim);\r\n    };\r\n}\n\nfunction blacklist(chars) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.blacklist, chars);\r\n    };\r\n}\n\nfunction stripLow(keepNewLines) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.stripLow, keepNewLines);\r\n    };\r\n}\n\nfunction toBoolean(strict) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toBoolean, strict);\r\n    };\r\n}\n\nfunction toDouble() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toDouble);\r\n    };\r\n}\n\nfunction toFloat() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toFloat);\r\n    };\r\n}\n\nfunction toInt(radix) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toInt, radix);\r\n    };\r\n}\n\nfunction toString() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.string);\r\n    };\r\n}\n\nfunction whitelist(chars) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.whitelist, chars);\r\n    };\r\n}\n\nfunction toDate(config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toDate, config);\r\n    };\r\n}\n\nfunction escape() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.escape);\r\n    };\r\n}\n\nfunction prefix(text) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.prefix, text);\r\n    };\r\n}\n\nfunction suffix(text) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.suffix, text);\r\n    };\r\n}\n\nfunction model(config) {\r\n    return function (target) {\r\n        defaultContainer.addPropsConfig(target, config);\r\n    };\r\n}\n\nfunction sanitize(config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.sanitize, config);\r\n    };\r\n}\n\nfunction elementClass(config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addDecoratorConfig(target, parameterIndex, propertyKey, config, DECORATORS.elementClass);\r\n    };\r\n}\n\nfunction minTime(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minTime, config);\r\n}\r\nfunction minTimeAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minTime, [baseAsyncValidator(config, AnnotationTypes.minTime)], true);\r\n}\n\nfunction maxTime(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxTime, config);\r\n}\r\nfunction maxTimeAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxTime, [baseAsyncValidator(config, AnnotationTypes.maxTime)], true);\r\n}\n\nfunction compose(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.compose, config);\r\n}\n\nfunction requiredTrue(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.requiredTrue, config);\r\n}\n\nfunction mask(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.mask, config);\r\n}\n\nfunction updateOn(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.updateOn, config);\r\n}\n\nclass HtmlControlTemplateDirective {\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n    ;\r\n}\nHtmlControlTemplateDirective.ɵfac = function HtmlControlTemplateDirective_Factory(t) { return new (t || HtmlControlTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nHtmlControlTemplateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HtmlControlTemplateDirective, selectors: [[\"\", \"htmlControlTemplate\", \"\"]], inputs: { type: [\"htmlControlTemplate\", \"type\"] } });\r\nHtmlControlTemplateDirective.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\nHtmlControlTemplateDirective.propDecorators = {\r\n    type: [{ type: Input, args: ['htmlControlTemplate',] }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HtmlControlTemplateDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[htmlControlTemplate]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { type: [{\n            type: Input,\n            args: ['htmlControlTemplate']\n        }] }); })();\n\nclass BaseDirective {\r\n    applyValidations(controls, model = null) {\r\n        if (this.model) {\r\n            let modelConfig = defaultContainer.get(model || this.model.constructor);\r\n            if (modelConfig) {\r\n                modelConfig.properties.forEach(property => {\r\n                    if (controls[property.name]) {\r\n                        switch (property.propertyType) {\r\n                            case PROPERTY:\r\n                                this.setValidatorConfig(controls[property.name], modelConfig, property);\r\n                                break;\r\n                            case OBJECT_PROPERTY:\r\n                                this.applyValidations(controls[property.name].controls, property.entity);\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    setValidatorConfig(control, modelConfig, property) {\r\n        let annotations = modelConfig.propertyAnnotations.filter(t => t.propertyName == property.name);\r\n        annotations.forEach(annotation => {\r\n            if (!control[TEMPLATE_VALIDATION_CONFIG])\r\n                control[TEMPLATE_VALIDATION_CONFIG] = {};\r\n            ApplicationUtil.configureControl(control, annotation.config ? annotation.config : \"\", annotation.annotationType);\r\n        });\r\n    }\r\n}\nBaseDirective.ɵfac = function BaseDirective_Factory(t) { return new (t || BaseDirective)(); };\nBaseDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: BaseDirective, inputs: { model: \"model\" } });\r\nBaseDirective.propDecorators = {\r\n    model: [{ type: Input }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseDirective, [{\n        type: Directive\n    }], null, { model: [{\n            type: Input\n        }] }); })();\n\nconst DISABLED_EXPRESSION = \"disableExpression\";\r\nfunction conditionalChangeValidator(conditionalValidationProps) {\r\n    var timeOuts = [];\r\n    var oldValue = undefined;\r\n    var setTimeOut = (control, config) => {\r\n        if (control[DISABLED_EXPRESSION])\r\n            runDisabledExpression(control, config);\r\n        var timeOut = setTimeout(t => {\r\n            clearTimeout(timeOut);\r\n            control.updateValueAndValidity({ emitEvent: false });\r\n        }, 100);\r\n    };\r\n    return (control) => {\r\n        let value = control.value;\r\n        if (control.parent && oldValue != value) {\r\n            const rootFormGroup = ApplicationUtil.getRootFormGroup(control);\r\n            const parentFormGroup = control.parent;\r\n            oldValue = value;\r\n            timeOuts = [];\r\n            let controlName = ApplicationUtil.getFormControlName(control);\r\n            let disabledConfig = { [controlName]: value };\r\n            conditionalValidationProps.forEach(t => {\r\n                let a = control;\r\n                if (t.indexOf(\"[]\") != -1) {\r\n                    var splitText = t.split(\"[]\");\r\n                    var formArray = rootFormGroup.get([splitText[0]]);\r\n                    if (formArray)\r\n                        formArray.controls.forEach(formGroup => {\r\n                            var abstractControl = formGroup.get(splitText[1]);\r\n                            if (abstractControl) {\r\n                                setTimeOut(abstractControl, disabledConfig);\r\n                            }\r\n                        });\r\n                }\r\n                else {\r\n                    let splitText = t.split('.');\r\n                    if (splitText.length > 1) {\r\n                        var control = null;\r\n                        t.split('.').forEach((name, index) => { control = (index == 0) ? rootFormGroup.controls[name] : control.controls[name]; });\r\n                    }\r\n                    else {\r\n                        control = parentFormGroup.controls[t];\r\n                    }\r\n                    if (control) {\r\n                        setTimeOut(control, disabledConfig);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\r\nfunction runDisabledExpression(control, config) {\r\n    let isDisabled = FormProvider.ProcessRule(control, { conditionalExpression: control[DISABLED_EXPRESSION], disableConfig: config });\r\n    if (isDisabled && !control.disabled)\r\n        control.disable();\r\n    else if (control.disabled)\r\n        control.enable();\r\n}\n\nclass RxwebFormDirective extends BaseDirective {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.clearTimeoutNumber = 0;\r\n        this.validationRule = {};\r\n    }\r\n    ngAfterContentInit() {\r\n        if (this.formGroup && !this.formGroup[MODEL] && this.formGroup.parent == null) {\r\n            this.expressionProcessor(this.formGroup.controls);\r\n            this.setConditionalValidator(this.formGroup.controls);\r\n        }\r\n        else if (this.formGroup && !this.formGroup[MODEL] && this.formGroup.parent instanceof FormArray) {\r\n            this.expressionProcessor(this.formGroup.controls);\r\n            this.setConditionalValidator(this.formGroup.controls);\r\n        }\r\n        else if (this.ngForm) {\r\n            this.configureModelValidations();\r\n        }\r\n    }\r\n    configureModelValidations() {\r\n        this.clearTimeoutNumber = setTimeout(() => {\r\n            clearTimeout(this.clearTimeoutNumber);\r\n            this.applyValidations(this.ngForm.form.controls);\r\n            this.expressionProcessor(this.ngForm.form.controls);\r\n            this.setConditionalValidator(this.ngForm.form.controls);\r\n            this.updateValueAndValidity(this.ngForm.form.controls);\r\n        }, 500);\r\n    }\r\n    updateValueAndValidity(controls) {\r\n        Object.keys(controls).forEach(key => {\r\n            if (controls[key] instanceof FormGroup)\r\n                this.updateValueAndValidity(controls[key].controls);\r\n            else if (controls[key] instanceof FormArray)\r\n                this.updateValueAndValidity(controls[key].controls);\r\n            else\r\n                controls[key].updateValueAndValidity();\r\n        });\r\n    }\r\n    expressionProcessor(controls, rootFieldName = \"\") {\r\n        Object.keys(controls).forEach(fieldName => {\r\n            let formControl = controls[fieldName];\r\n            if (formControl.validatorConfig) {\r\n                Object.keys(AnnotationTypes).forEach(validatorName => {\r\n                    if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].disableExpression) {\r\n                        formControl[\"disableExpression\"] = formControl.validatorConfig[validatorName].disableExpression;\r\n                        let columns = Linq.expressionColumns(formControl.validatorConfig[validatorName].disableExpression);\r\n                        columns.forEach(t => {\r\n                            defaultContainer.setConditionalValueProp(this.validationRule, rootFieldName + t.propName, fieldName);\r\n                        });\r\n                    }\r\n                    if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].conditionalExpression) {\r\n                        let columns = Linq.expressionColumns(formControl.validatorConfig[validatorName].conditionalExpression);\r\n                        columns.forEach(t => {\r\n                            defaultContainer.setConditionalValueProp(this.validationRule, rootFieldName + t.propName, fieldName);\r\n                        });\r\n                    }\r\n                    if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].dynamicConfig) {\r\n                        let columns = Linq.dynamicConfigParser(formControl.validatorConfig[validatorName].dynamicConfig, fieldName);\r\n                        columns.forEach(t => {\r\n                            defaultContainer.setConditionalValueProp(this.validationRule, rootFieldName + t.propName, fieldName);\r\n                        });\r\n                    }\r\n                    if (formControl.validatorConfig[validatorName] && (validatorName == AnnotationTypes.and || validatorName == AnnotationTypes.or || validatorName == AnnotationTypes.not)) {\r\n                        Object.keys(formControl.validatorConfig[validatorName].validation).forEach(t => {\r\n                            if (typeof formControl.validatorConfig[validatorName].validation[t] !== \"boolean\")\r\n                                defaultContainer.setLogicalConditional(this.validationRule, t, formControl.validatorConfig[validatorName].validation[t].fieldName, fieldName);\r\n                        });\r\n                    }\r\n                    else if (formControl.validatorConfig[validatorName] && ((validatorName == AnnotationTypes.compare || validatorName == AnnotationTypes.greaterThan || validatorName == AnnotationTypes.greaterThanEqualTo || validatorName == AnnotationTypes.lessThan || validatorName == AnnotationTypes.lessThanEqualTo || validatorName == AnnotationTypes.different || validatorName == AnnotationTypes.factor || validatorName == AnnotationTypes.minTime || validatorName == AnnotationTypes.maxTime) || (validatorName == AnnotationTypes.creditCard && formControl.validatorConfig[validatorName].fieldName) || ((validatorName == AnnotationTypes.minDate || validatorName == AnnotationTypes.maxDate) && formControl.validatorConfig[validatorName].fieldName))) {\r\n                        defaultContainer.setConditionalValueProp(this.validationRule, formControl.validatorConfig[validatorName].fieldName, fieldName);\r\n                    }\r\n                });\r\n            }\r\n            else if (formControl instanceof FormGroup) {\r\n                this.expressionProcessor(formControl.controls, `${fieldName}.`);\r\n            }\r\n            else if (formControl instanceof FormArray) {\r\n                if (formControl.controls)\r\n                    formControl.controls.forEach((t, i) => {\r\n                        if (t.controls)\r\n                            this.expressionProcessor(t.controls, `${fieldName}[]`);\r\n                    });\r\n            }\r\n        });\r\n    }\r\n    setConditionalValidator(controls) {\r\n        Object.keys(controls).forEach(fieldName => {\r\n            if (this.validationRule.conditionalValidationProps && this.validationRule.conditionalValidationProps[fieldName]) {\r\n                controls[fieldName][CONDITIONAL_VALIDATOR] = conditionalChangeValidator(this.validationRule.conditionalValidationProps[fieldName]);\r\n            }\r\n            else if (controls[fieldName] instanceof FormGroup && this.validationRule.conditionalObjectProps) {\r\n                var fields = this.validationRule.conditionalObjectProps.filter(t => t.objectPropName == fieldName);\r\n                let nestedFormGroup = controls[fieldName];\r\n                let propWiseConditionalControls = {};\r\n                fields.forEach(x => {\r\n                    if (!propWiseConditionalControls[x.propName])\r\n                        propWiseConditionalControls[x.propName] = [];\r\n                    propWiseConditionalControls[x.propName].push(x.referencePropName);\r\n                });\r\n                Object.keys(propWiseConditionalControls).forEach(key => {\r\n                    nestedFormGroup.controls[key][CONDITIONAL_VALIDATOR] = conditionalChangeValidator(propWiseConditionalControls[key]);\r\n                });\r\n            }\r\n            else if (controls[fieldName] instanceof FormArray) {\r\n                //fix https://github.com/rxweb/rxweb/issues/274\r\n                controls[fieldName].controls.forEach((t, i) => {\r\n                    if (t.controls == undefined)\r\n                        this.setConditionalValidator({ [i]: t });\r\n                    else\r\n                        this.setConditionalValidator(t.controls);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n    }\r\n}\nRxwebFormDirective.ɵfac = /*@__PURE__*/ function () { let ɵRxwebFormDirective_BaseFactory; return function RxwebFormDirective_Factory(t) { return (ɵRxwebFormDirective_BaseFactory || (ɵRxwebFormDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(RxwebFormDirective)))(t || RxwebFormDirective); }; }();\nRxwebFormDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: RxwebFormDirective, selectors: [[\"\", \"formGroup\", \"\"], [\"\", \"rxwebForm\", \"\"]], inputs: { formGroup: \"formGroup\", ngForm: [\"rxwebForm\", \"ngForm\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nRxwebFormDirective.propDecorators = {\r\n    formGroup: [{ type: Input }],\r\n    ngForm: [{ type: Input, args: ['rxwebForm',] }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RxwebFormDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[formGroup],[rxwebForm]'\n            }]\n    }], null, { formGroup: [{\n            type: Input\n        }], ngForm: [{\n            type: Input,\n            args: ['rxwebForm']\n        }] }); })();\n\nclass AsyncValidationDirective {\r\n    validate(control) {\r\n        if (this.async)\r\n            return this.async(control);\r\n        return of(null);\r\n    }\r\n}\nAsyncValidationDirective.ɵfac = function AsyncValidationDirective_Factory(t) { return new (t || AsyncValidationDirective)(); };\nAsyncValidationDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: AsyncValidationDirective, selectors: [[\"\", \"ngModel\", \"\"], [\"\", \"formControlName\", \"\"], [\"\", \"formControl\", \"\"]], inputs: { async: \"async\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: NG_ASYNC_VALIDATORS,\n                useExisting: forwardRef(() => AsyncValidationDirective),\n                multi: true\n            }])] });\r\nAsyncValidationDirective.propDecorators = {\r\n    async: [{ type: Input }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AsyncValidationDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngModel],[formControlName],[formControl]',\n                providers: [{\n                        provide: NG_ASYNC_VALIDATORS,\n                        useExisting: forwardRef(() => AsyncValidationDirective),\n                        multi: true\n                    }]\n            }]\n    }], null, { async: [{\n            type: Input\n        }] }); })();\n\nconst VALIDATOR_CONFIG$1 = \"validatorConfig\";\r\nconst FILE_VALIDATOR_NAMES = [\"extension\", \"fileSize\", \"file\"];\r\nclass FileControlDirective {\r\n    constructor(elementRef) {\r\n        this.elementRef = elementRef;\r\n        this.isProcessed = false;\r\n        this.validators = [];\r\n        this.onChange = (_) => { };\r\n        this.onTouched = () => { };\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n    onChangeCall(element) {\r\n        let files = element.files;\r\n        if (this.writeFile)\r\n            this.onChange(files);\r\n        else {\r\n            if (files.length > 0)\r\n                this.onChange(element.value);\r\n            else\r\n                this.onChange(undefined);\r\n        }\r\n    }\r\n    writeValue(value) { }\r\n    registerOnChange(invocation) { this.onChange = invocation; }\r\n    registerOnTouched(invocation) { this.onTouched = invocation; }\r\n    set extension(config) {\r\n        this.pushValidator(FILE_VALIDATOR_NAMES[0], config);\r\n    }\r\n    set fileSize(config) {\r\n        this.pushValidator(FILE_VALIDATOR_NAMES[1], config);\r\n    }\r\n    set file(config) {\r\n        this.pushValidator(FILE_VALIDATOR_NAMES[2], config);\r\n    }\r\n    setConfig(control) {\r\n        FILE_VALIDATOR_NAMES.forEach(t => {\r\n            if (!this[t] && control[VALIDATOR_CONFIG$1] && control[VALIDATOR_CONFIG$1][t])\r\n                this[t] = control[VALIDATOR_CONFIG$1][t];\r\n        });\r\n        this.isProcessed = true;\r\n    }\r\n    pushValidator(validatorName, config) {\r\n        if (config)\r\n            this.validators.push(APP_VALIDATORS[validatorName](config));\r\n    }\r\n    validate(control) {\r\n        if (!this.isProcessed)\r\n            this.setConfig(control);\r\n        var result = null;\r\n        for (var validator of this.validators) {\r\n            result = validator(control, this.element.files);\r\n            if (result)\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n}\nFileControlDirective.ɵfac = function FileControlDirective_Factory(t) { return new (t || FileControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nFileControlDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FileControlDirective, selectors: [[\"input\", \"type\", \"file\"]], hostBindings: function FileControlDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function FileControlDirective_change_HostBindingHandler($event) { return ctx.onChangeCall($event.target); })(\"blur\", function FileControlDirective_blur_HostBindingHandler() { return ctx.onTouched(); });\n    } }, inputs: { extension: \"extension\", fileSize: \"fileSize\", file: \"file\", writeFile: \"writeFile\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: NG_VALUE_ACCESSOR, useExisting: FileControlDirective, multi: true }, {\n                provide: NG_VALIDATORS,\n                useExisting: forwardRef(() => FileControlDirective),\n                multi: true\n            }])] });\r\nFileControlDirective.ctorParameters = () => [\r\n    { type: ElementRef }\r\n];\r\nFileControlDirective.propDecorators = {\r\n    writeFile: [{ type: Input }],\r\n    extension: [{ type: Input }],\r\n    fileSize: [{ type: Input }],\r\n    file: [{ type: Input }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FileControlDirective, [{\n        type: Directive,\n        args: [{\n                selector: \"input[type=file]\",\n                host: {\n                    \"(change)\": \"onChangeCall($event.target)\",\n                    \"(blur)\": \"onTouched()\"\n                },\n                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: FileControlDirective, multi: true }, {\n                        provide: NG_VALIDATORS,\n                        useExisting: forwardRef(() => FileControlDirective),\n                        multi: true\n                    }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { extension: [{\n            type: Input\n        }], fileSize: [{\n            type: Input\n        }], file: [{\n            type: Input\n        }], writeFile: [{\n            type: Input\n        }] }); })();\n\nconst VALIDATOR_CONFIG = \"validatorConfig\";\r\nclass ImageFileControlDirective {\r\n    constructor(elementRef) {\r\n        this.elementRef = elementRef;\r\n        this.isProcessed = false;\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n    set image(config) {\r\n        this.imageValidation = APP_VALIDATORS.image(config);\r\n    }\r\n    setConfig(control) {\r\n        let image = \"image\";\r\n        if (!this[image] && control[VALIDATOR_CONFIG] && control[VALIDATOR_CONFIG][image])\r\n            this[image] = control[VALIDATOR_CONFIG][image];\r\n        this.isProcessed = true;\r\n    }\r\n    validate(control) {\r\n        if (!this.isProcessed)\r\n            this.setConfig(control);\r\n        if (this.imageValidation) {\r\n            return this.imageValidation(control, this.element.files);\r\n        }\r\n        return of(null);\r\n    }\r\n}\nImageFileControlDirective.ɵfac = function ImageFileControlDirective_Factory(t) { return new (t || ImageFileControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nImageFileControlDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ImageFileControlDirective, selectors: [[\"input\", \"type\", \"file\"]], inputs: { image: \"image\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: NG_ASYNC_VALIDATORS,\n                useExisting: forwardRef(() => ImageFileControlDirective),\n                multi: true\n            }])] });\r\nImageFileControlDirective.ctorParameters = () => [\r\n    { type: ElementRef }\r\n];\r\nImageFileControlDirective.propDecorators = {\r\n    image: [{ type: Input }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImageFileControlDirective, [{\n        type: Directive,\n        args: [{\n                selector: \"input[type=file]\",\n                providers: [{\n                        provide: NG_ASYNC_VALIDATORS,\n                        useExisting: forwardRef(() => ImageFileControlDirective),\n                        multi: true\n                    }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { image: [{\n            type: Input\n        }] }); })();\n\nclass ControlExpressionProcess {\r\n    constructor() {\r\n        this.controlConfig = {};\r\n        this.isProcessed = false;\r\n    }\r\n    setModelConfig(control) {\r\n        this.isProcessed = true;\r\n        if (this.controlConfig && this.controlConfig.validatorConfig) {\r\n            control[VALIDATOR_CONFIG$2] = this.controlConfig.validatorConfig;\r\n            this.controlConfig = undefined;\r\n        }\r\n    }\r\n}\nControlExpressionProcess.ɵfac = function ControlExpressionProcess_Factory(t) { return new (t || ControlExpressionProcess)(); };\nControlExpressionProcess.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ControlExpressionProcess, inputs: { name: \"name\", formControlName: \"formControlName\" } });\r\nControlExpressionProcess.propDecorators = {\r\n    name: [{ type: Input }],\r\n    formControlName: [{ type: Input }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ControlExpressionProcess, [{\n        type: Directive\n    }], function () { return []; }, { name: [{\n            type: Input\n        }], formControlName: [{\n            type: Input\n        }] }); })();\n\nclass BaseValidator extends ControlExpressionProcess {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.validators = [];\r\n    }\r\n    validation(control) {\r\n        let result = null;\r\n        for (let validator of this.validators) {\r\n            result = validator(control);\r\n            if (result)\r\n                break;\r\n        }\r\n        if (!result && this.maskProvider)\r\n            result = this.maskProvider.validate();\r\n        return result;\r\n    }\r\n    setEventName() {\r\n        var eventName = '';\r\n        switch (this.element.tagName) {\r\n            case INPUT:\r\n            case TEXTAREA:\r\n                eventName = (this.element.type == CHECKBOX || this.element.type == RADIO || this.element.type == FILE) ? CHANGE : INPUT;\r\n                break;\r\n            case SELECT:\r\n                eventName = CHANGE;\r\n                break;\r\n        }\r\n        this.eventName = eventName.toLowerCase();\r\n    }\r\n}\nBaseValidator.ɵfac = /*@__PURE__*/ function () { let ɵBaseValidator_BaseFactory; return function BaseValidator_Factory(t) { return (ɵBaseValidator_BaseFactory || (ɵBaseValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BaseValidator)))(t || BaseValidator); }; }();\nBaseValidator.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: BaseValidator, inputs: { formControl: \"formControl\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nBaseValidator.propDecorators = {\r\n    formControl: [{ type: Input }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseValidator, [{\n        type: Directive\n    }], null, { formControl: [{\n            type: Input\n        }] }); })();\n\nclass DecimalProvider {\r\n    constructor(decimalPipe, localeId) {\r\n        this.decimalPipe = decimalPipe;\r\n        this.localeId = localeId;\r\n        this.decimalSeperator = \".\";\r\n        this.groupSeperator = \",\";\r\n        this.isSetConfig = false;\r\n        this.decimalSeperator = getLocaleNumberSymbol(localeId, NumberSymbol.Decimal);\r\n        ;\r\n        this.groupSeperator = getLocaleNumberSymbol(localeId, NumberSymbol.Group);\r\n        this.setSymbolInConfig();\r\n    }\r\n    replacer(value) {\r\n        value = String(value);\r\n        if (!this.isSetConfig)\r\n            this.bindConfig();\r\n        value = value.split(this.groupSeperator).join(BLANK);\r\n        if (this.allowDecimalSymbol)\r\n            value = value.replace(this.decimalSeperator, this.allowDecimalSymbol);\r\n        var splitValue = value.split(this.decimalSeperator);\r\n        value = (splitValue.length > 1 && splitValue[1] && RegexValidator.isZero(splitValue[1])) ? splitValue[0] : value;\r\n        return value;\r\n    }\r\n    transFormDecimal(value, digitsInfo, persistZero) {\r\n        value = String(value);\r\n        if (!value) {\r\n            return value;\r\n        }\r\n        let transformedValue = this.decimalPipe.transform(value.replace(ReactiveFormConfig.number.groupSymbol, \"\").replace(this.decimalSeperator, \".\"), digitsInfo, this.localeId);\r\n        if (persistZero && value.indexOf(this.decimalSeperator)) {\r\n            let splitTransformed = transformedValue.split(\".\");\r\n            let splitDigitsInfo = digitsInfo ? digitsInfo.split(\"-\") : [];\r\n            let digits = splitDigitsInfo.length > 1 ? parseInt(splitDigitsInfo[splitDigitsInfo.length - 1]) : 0;\r\n            if (splitTransformed.length > 1 && splitDigitsInfo.length > 0 && digits !== 0 && splitTransformed[1].length !== digits) {\r\n                let diff = digits - splitTransformed[1].length;\r\n                for (let i = 0; i < diff; i++) {\r\n                    transformedValue += \"0\";\r\n                }\r\n            }\r\n        }\r\n        return transformedValue;\r\n    }\r\n    setSymbolInConfig() {\r\n        ReactiveFormConfig.number = { decimalSymbol: this.decimalSeperator, groupSymbol: this.groupSeperator };\r\n    }\r\n    bindConfig() {\r\n        if (ReactiveFormConfig.json) {\r\n            if (ReactiveFormConfig.json.localeId)\r\n                this.localeId = ReactiveFormConfig.json.localeId;\r\n            if (ReactiveFormConfig.json.allowDecimalSymbol)\r\n                this.allowDecimalSymbol = ReactiveFormConfig.json.allowDecimalSymbol;\r\n        }\r\n        this.isSetConfig = true;\r\n    }\r\n}\nDecimalProvider.ɵfac = function DecimalProvider_Factory(t) { return new (t || DecimalProvider)(ɵngcc0.ɵɵinject(ɵngcc1.DecimalPipe), ɵngcc0.ɵɵinject(LOCALE_ID)); };\nDecimalProvider.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DecimalProvider, factory: DecimalProvider.ɵfac });\r\nDecimalProvider.ctorParameters = () => [\r\n    { type: DecimalPipe },\r\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DecimalProvider, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc1.DecimalPipe }, { type: String, decorators: [{\n                type: Inject,\n                args: [LOCALE_ID]\n            }] }]; }, null); })();\n\nconst SIMPLE_EMAIL_VALIDATION = \"simple-email-validation\";\r\nconst ADVANCED_EMAIL_VALIDATION = \"advanced-email-validation\";\n\nclass MaskProvider {\r\n    constructor(input, mask, renderer, formControl, config) {\r\n        this.input = input;\r\n        this.mask = mask;\r\n        this.renderer = renderer;\r\n        this.formControl = formControl;\r\n        this.config = config;\r\n        this.eventListeners = [];\r\n        this.oldValue = '';\r\n        this.type = 'text';\r\n        this.slotChar = '_';\r\n        this.autoClear = false;\r\n        this.isInvalid = false;\r\n        this.internalProcess = false;\r\n        this.bind();\r\n    }\r\n    bind() {\r\n        if (RegexValidator.isNotBlank(this.formControl.value))\r\n            this.input.value = this.formControl.value;\r\n        this.tests = [];\r\n        this.partialPosition = this.mask.length;\r\n        this.len = this.mask.length;\r\n        this.firstNonMaskPos = null;\r\n        this.defs = {\r\n            '9': '[0-9]',\r\n            'a': '[A-Za-z]',\r\n            '*': '[A-Za-z0-9]'\r\n        };\r\n        this.androidChrome = false;\r\n        let maskTokens = this.mask.split('');\r\n        for (let i = 0; i < maskTokens.length; i++) {\r\n            let c = maskTokens[i];\r\n            if (c == '?') {\r\n                this.len--;\r\n                this.partialPosition = i;\r\n            }\r\n            else if (this.defs[c]) {\r\n                this.tests.push(new RegExp(this.defs[c]));\r\n                if (this.firstNonMaskPos === null) {\r\n                    this.firstNonMaskPos = this.tests.length - 1;\r\n                }\r\n                if (i < this.partialPosition) {\r\n                    this.lastRequiredNonMaskPos = this.tests.length - 1;\r\n                }\r\n            }\r\n            else {\r\n                this.tests.push(null);\r\n            }\r\n        }\r\n        this.minLength = this.config.minLength ? this.lastRequiredNonMaskPos - (this.lastRequiredNonMaskPos - this.config.minLength) : this.lastRequiredNonMaskPos;\r\n        this.buffer = [];\r\n        for (let i = 0; i < maskTokens.length; i++) {\r\n            let c = maskTokens[i];\r\n            if (c != '?') {\r\n                if (this.defs[c])\r\n                    this.buffer.push(this.getPlaceholder(i));\r\n                else\r\n                    this.buffer.push(c);\r\n            }\r\n        }\r\n        this.defaultBuffer = this.buffer.join('');\r\n        this.focusText = this.input.value;\r\n        this.bindEvents();\r\n        this.checkVal();\r\n    }\r\n    bindEvents() {\r\n        this.eventListeners.push(this.renderer.listen(this.input, FOCUS, this.onFocus.bind(this)));\r\n        this.eventListeners.push(this.renderer.listen(this.input, BLUR, this.onBlur.bind(this)));\r\n        this.eventListeners.push(this.renderer.listen(this.input, KEY_DOWN, this.onKeyDown.bind(this)));\r\n        this.eventListeners.push(this.renderer.listen(this.input, KEY_PRESS, this.onKeyPress.bind(this)));\r\n        this.eventListeners.push(this.renderer.listen(this.input, \"input\", this.onInput.bind(this)));\r\n        this.eventListeners.push(this.renderer.listen(this.input, PASTE, this.handleInputChange.bind(this)));\r\n    }\r\n    validate() {\r\n        if ((this.input.value && this.oldValue != this.input.value)) {\r\n            this.checkVal(true);\r\n            this.isCompleted(null, true);\r\n            this.oldValue = this.input.value;\r\n        }\r\n        let config = getConfigObject(this.config, this.formControl);\r\n        if (RegexValidator.isNotBlank(this.getUnmaskedValue()) && FormProvider.ProcessRule(this.formControl, config)) {\r\n            if (this.isInvalid) {\r\n                return ObjectMaker.toJson(AnnotationTypes.mask, config, [this.formControl.value]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    }\r\n    writeValue(value) {\r\n        this.value = value;\r\n        if (this.input) {\r\n            if (this.value == undefined || this.value == null) {\r\n                this.input.value = '';\r\n            }\r\n            this.checkVal();\r\n        }\r\n        this.updateFilledState();\r\n    }\r\n    caret(first, last) {\r\n        let range, begin, end;\r\n        if (!this.input.offsetParent || this.input !== document.activeElement) {\r\n            return;\r\n        }\r\n        if (typeof first == 'number') {\r\n            begin = first;\r\n            end = (typeof last === 'number') ? last : begin;\r\n            if (this.input.setSelectionRange) {\r\n                this.input.setSelectionRange(begin, end);\r\n            }\r\n            else if (this.input['createTextRange']) {\r\n                range = this.input['createTextRange']();\r\n                range.collapse(true);\r\n                range.moveEnd('character', end);\r\n                range.moveStart('character', begin);\r\n                range.select();\r\n            }\r\n        }\r\n        else {\r\n            if (this.input.setSelectionRange) {\r\n                begin = this.input.selectionStart;\r\n                end = this.input.selectionEnd;\r\n            }\r\n            else if (document['selection'] && document['selection'].createRange) {\r\n                range = document['selection'].createRange();\r\n                begin = 0 - range.duplicate().moveStart('character', -100000);\r\n                end = begin + range.text.length;\r\n            }\r\n            return { begin: begin, end: end };\r\n        }\r\n    }\r\n    isCompleted(lastRequiredNonMaskPos, isNotRunValidator) {\r\n        let completed;\r\n        lastRequiredNonMaskPos = lastRequiredNonMaskPos || this.lastRequiredNonMaskPos;\r\n        for (let i = this.firstNonMaskPos; i <= lastRequiredNonMaskPos; i++) {\r\n            if (this.tests[i] && this.buffer[i] === this.getPlaceholder(i)) {\r\n                return false;\r\n            }\r\n        }\r\n        this.isInvalid = false;\r\n        if (!isNotRunValidator)\r\n            this.formControl.updateValueAndValidity();\r\n        return true;\r\n    }\r\n    getPlaceholder(i) {\r\n        if (i < this.slotChar.length) {\r\n            return this.slotChar.charAt(i);\r\n        }\r\n        return this.slotChar.charAt(0);\r\n    }\r\n    seekNext(pos) {\r\n        while (++pos < this.len && !this.tests[pos])\r\n            ;\r\n        return pos;\r\n    }\r\n    seekPrev(pos) {\r\n        while (--pos >= 0 && !this.tests[pos])\r\n            ;\r\n        return pos;\r\n    }\r\n    shiftL(begin, end) {\r\n        let i, j;\r\n        if (begin < 0) {\r\n            return;\r\n        }\r\n        for (i = begin, j = this.seekNext(end); i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                if (j < this.len && this.tests[i].test(this.buffer[j])) {\r\n                    this.buffer[i] = this.buffer[j];\r\n                    this.buffer[j] = this.getPlaceholder(j);\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n                j = this.seekNext(j);\r\n            }\r\n        }\r\n        this.writeBuffer();\r\n        this.caret(Math.max(this.firstNonMaskPos, begin));\r\n    }\r\n    shiftR(pos) {\r\n        let i, c, j, t;\r\n        for (i = pos, c = this.getPlaceholder(pos); i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                j = this.seekNext(i);\r\n                t = this.buffer[i];\r\n                this.buffer[i] = c;\r\n                if (j < this.len && this.tests[j].test(t)) {\r\n                    c = t;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    handleAndroidInput(e) {\r\n        var curVal = this.input.value;\r\n        var pos = this.caret();\r\n        if (this.oldVal && this.oldVal.length && this.oldVal.length > curVal.length) {\r\n            this.checkVal(true);\r\n            while (pos.begin > 0 && !this.tests[pos.begin - 1])\r\n                pos.begin--;\r\n            if (pos.begin === 0) {\r\n                while (pos.begin < this.firstNonMaskPos && !this.tests[pos.begin])\r\n                    pos.begin++;\r\n            }\r\n            this.caret(pos.begin, pos.begin);\r\n        }\r\n        else {\r\n            var pos2 = this.checkVal(true);\r\n            while (pos.begin < this.len && !this.tests[pos.begin])\r\n                pos.begin++;\r\n            this.caret(pos.begin, pos.begin);\r\n        }\r\n        if (this.isCompleted()) {\r\n            this.isInvalid = false;\r\n        }\r\n        else {\r\n            this.isInvalid = true;\r\n            this.formControl.updateValueAndValidity();\r\n        }\r\n    }\r\n    onBlur(e) {\r\n        this.focus = false;\r\n        this.checkVal();\r\n        this.updateModel(e);\r\n        this.updateFilledState();\r\n        if (this.input.value != this.focusText) {\r\n            let event = document.createEvent('HTMLEvents');\r\n            event.initEvent('change', true, false);\r\n            this.input.dispatchEvent(event);\r\n            let maskedValue = this.input.value;\r\n            this.formControl.setValue(this.config.valueWithMask ? maskedValue : this.getUnmaskedValue());\r\n            this.input.value = maskedValue;\r\n        }\r\n    }\r\n    onKeyDown(e) {\r\n        let k = e.which || e.keyCode, pos, begin, end;\r\n        let iPhone = false;\r\n        this.oldVal = this.input.value;\r\n        let controlValid = this.config.minLength ? this.isCompleted(this.minLength + 1) : false;\r\n        if (k === 8 || k === 46 || (iPhone && k === 127)) {\r\n            pos = this.caret();\r\n            begin = pos.begin;\r\n            end = pos.end;\r\n            if (end - begin === 0) {\r\n                begin = k !== 46 ? this.seekPrev(begin) : (end = this.seekNext(begin - 1));\r\n                end = k === 46 ? this.seekNext(end) : end;\r\n            }\r\n            this.clearBuffer(begin, end);\r\n            this.shiftL(begin, end - 1);\r\n            this.setControlValue(e, false, controlValid);\r\n            this.updateModel(e);\r\n            e.preventDefault();\r\n        }\r\n        else if (k === 13) {\r\n            this.onBlur(e);\r\n            this.setControlValue(e, false, controlValid);\r\n            this.updateModel(e);\r\n        }\r\n        else if (k === 27) {\r\n            this.input.value = this.focusText;\r\n            this.caret(0, this.checkVal());\r\n            this.updateModel(e);\r\n            this.setControlValue(e, false, controlValid);\r\n            e.preventDefault();\r\n        }\r\n    }\r\n    onKeyPress(e) {\r\n        var k = e.which || e.keyCode, pos = this.caret(), p, c, next, completed;\r\n        if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {\r\n            return;\r\n        }\r\n        else if (k && k !== 13) {\r\n            if (pos.end - pos.begin !== 0) {\r\n                this.clearBuffer(pos.begin, pos.end);\r\n                this.shiftL(pos.begin, pos.end - 1);\r\n            }\r\n            p = this.seekNext(pos.begin - 1);\r\n            if (p < this.len) {\r\n                c = String.fromCharCode(k);\r\n                if (this.tests[p].test(c)) {\r\n                    this.shiftR(p);\r\n                    this.buffer[p] = c;\r\n                    this.writeBuffer();\r\n                    next = this.seekNext(p);\r\n                    this.caret(next);\r\n                    if (pos.begin <= this.lastRequiredNonMaskPos) {\r\n                        completed = this.isCompleted();\r\n                    }\r\n                }\r\n            }\r\n            e.preventDefault();\r\n        }\r\n        this.updateModel(e);\r\n        if (completed === undefined)\r\n            completed = this.isCompleted();\r\n        this.setControlValue(e, completed, this.config.minLength ? this.isCompleted(this.minLength) : false);\r\n    }\r\n    clearBuffer(start, end) {\r\n        let i;\r\n        for (i = start; i < end && i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                this.buffer[i] = this.getPlaceholder(i);\r\n            }\r\n        }\r\n    }\r\n    writeBuffer() {\r\n        this.input.value = this.buffer.join('');\r\n    }\r\n    checkVal(allow) {\r\n        let test = this.input.value, lastMatch = -1, i, c, pos;\r\n        for (i = 0, pos = 0; i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                this.buffer[i] = this.getPlaceholder(i);\r\n                while (pos++ < test.length) {\r\n                    c = test.charAt(pos - 1);\r\n                    if (this.tests[i].test(c)) {\r\n                        this.buffer[i] = c;\r\n                        lastMatch = i;\r\n                        break;\r\n                    }\r\n                }\r\n                if (pos > test.length) {\r\n                    this.clearBuffer(i + 1, this.len);\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                if (this.buffer[i] === test.charAt(pos)) {\r\n                    pos++;\r\n                }\r\n                if (i < this.partialPosition) {\r\n                    lastMatch = i;\r\n                }\r\n            }\r\n        }\r\n        if (allow) {\r\n            this.writeBuffer();\r\n        }\r\n        else if ((lastMatch + 1 < this.partialPosition) && (!this.config.minLength || !(lastMatch >= this.minLength))) {\r\n            if (this.autoClear || this.buffer.join('') === this.defaultBuffer) {\r\n                this.isInvalid = true;\r\n            }\r\n            else {\r\n                this.isInvalid = true;\r\n                this.writeBuffer();\r\n            }\r\n        }\r\n        else {\r\n            this.writeBuffer();\r\n            this.input.value = this.input.value.substring(0, lastMatch + 1);\r\n        }\r\n        return (this.partialPosition ? i : this.firstNonMaskPos);\r\n    }\r\n    onFocus(event) {\r\n        this.focus = true;\r\n        clearTimeout(this.caretTimeoutId);\r\n        let pos;\r\n        this.focusText = this.input.value;\r\n        pos = this.checkVal();\r\n        this.caretTimeoutId = setTimeout(() => {\r\n            if (this.input !== document.activeElement) {\r\n                return;\r\n            }\r\n            this.writeBuffer();\r\n            if (pos == this.mask.replace(\"?\", \"\").length) {\r\n                this.caret(0, pos);\r\n            }\r\n            else {\r\n                this.caret(pos);\r\n            }\r\n            this.updateFilledState();\r\n        }, 10);\r\n    }\r\n    onInput(event) {\r\n        if (this.androidChrome)\r\n            this.handleAndroidInput(event);\r\n        else\r\n            this.handleInputChange(event);\r\n    }\r\n    setControlValue(e, isValid, isValidControl) {\r\n        this.isInvalid = isValidControl ? !isValidControl : !isValid;\r\n        let value = this.input.value;\r\n        let controlValue = '';\r\n        if (!this.isInvalid)\r\n            controlValue = this.config.valueWithMask ? value : this.getUnmaskedValue();\r\n        this.formControl.setValue(controlValue);\r\n        this.oldValue = this.input.value = value;\r\n        if (!isValid)\r\n            this.onFocus(e);\r\n    }\r\n    handleInputChange(event) {\r\n        setTimeout(() => {\r\n            var pos = this.checkVal(true);\r\n            this.caret(pos);\r\n            this.updateModel(event);\r\n            this.setControlValue(event, this.isCompleted());\r\n        }, 0);\r\n    }\r\n    getUnmaskedValue() {\r\n        let unmaskedBuffer = [];\r\n        for (let i = 0; i < this.buffer.length; i++) {\r\n            let c = this.buffer[i];\r\n            if (this.tests[i] && c != this.getPlaceholder(i)) {\r\n                unmaskedBuffer.push(c);\r\n            }\r\n        }\r\n        return unmaskedBuffer.join('');\r\n    }\r\n    updateModel(e) {\r\n    }\r\n    updateFilledState() {\r\n        this.filled = this.input && this.input.value != '';\r\n    }\r\n    onDestroy() {\r\n        let eventCount = this.eventListeners.length;\r\n        for (var i = 0; i < eventCount; i++) {\r\n            this.eventListeners[0]();\r\n            this.eventListeners.splice(0, 1);\r\n        }\r\n        this.eventListeners = [];\r\n    }\r\n}\n\nconst NGMODEL_BINDING = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => RxFormControlDirective),\r\n    multi: true\r\n};\r\nconst ALLOW_VALIDATOR_WITHOUT_CONFIG = ['required', 'notEmpty', 'alpha', 'alphaNumeric', 'ascii', 'dataUri', 'digit', 'email', 'even', 'hexColor', 'json', 'latitude', 'latLong', 'leapYear', 'longitude', 'lowerCase', 'mac', 'odd', 'port', 'primeNumber', 'time', 'upperCase', 'url', 'unique', 'cusip', 'gird'];\r\nconst NUMERIC = \"numeric\";\r\nconst IS_FORMAT = \"isFormat\";\r\nconst DIGITS_INFO = \"digitsInfo\";\r\nclass RxFormControlDirective extends BaseValidator {\r\n    constructor(elementRef, renderer, decimalProvider) {\r\n        super();\r\n        this.elementRef = elementRef;\r\n        this.renderer = renderer;\r\n        this.decimalProvider = decimalProvider;\r\n        this.eventListeners = [];\r\n        this.isNumericSubscribed = false;\r\n        this.isFocusCalled = false;\r\n        this.isMasked = false;\r\n        this.element = elementRef.nativeElement;\r\n        this.setEventName();\r\n    }\r\n    set validationControls(value) {\r\n        this.controls = value;\r\n    }\r\n    get validationControls() {\r\n        return this.controls;\r\n    }\r\n    ngOnInit() {\r\n        let validators = [];\r\n        Object.keys(APP_VALIDATORS).forEach(validatorName => {\r\n            if ((this[`rx${validatorName}`]) || (ALLOW_VALIDATOR_WITHOUT_CONFIG.indexOf(validatorName) != -1 && this[`rx${validatorName}`] == BLANK)) {\r\n                validators.push(APP_VALIDATORS[validatorName](this[`rx${validatorName}`]));\r\n                if (this.name && !(this.formControlName && this.formControl)) {\r\n                    ApplicationUtil.configureControl(this.controlConfig, this[`rx${validatorName}`], validatorName);\r\n                }\r\n            }\r\n        });\r\n        if (validators.length > 0)\r\n            this.validators = validators;\r\n        if (this.rxnumeric && (this.rxnumeric.isFormat || this.rxnumeric.digitsInfo)) {\r\n            this.bindNumericElementEvent();\r\n        }\r\n    }\r\n    blurEvent() {\r\n        if (!(this.formControl && this.formControl.errors && this.formControl.errors.numeric)) {\r\n            if (this.formControl.value !== null && this.formControl.value !== undefined) {\r\n                let value = this.decimalProvider.transFormDecimal(this.formControl.value, this.rxnumeric.digitsInfo, this.rxnumeric.persistZero);\r\n                value = (!this.rxnumeric.isFormat) ? this.decimalProvider.replacer(value) : value;\r\n                this.setValueOnElement(value);\r\n            }\r\n            this.isFocusCalled = false;\r\n        }\r\n    }\r\n    bindNumericElementEvent(config) {\r\n        if (config)\r\n            this.rxnumeric = config;\r\n        let listener = this.renderer.listen(this.element, BLUR, this.blurEvent.bind(this));\r\n        this.eventListeners.push(listener);\r\n        listener = this.renderer.listen(this.element, FOCUS, (event) => {\r\n            this.isFocusCalled = true;\r\n            if (!(this.formControl && this.formControl.errors && this.formControl.errors.numeric) && this.formControl.value != null) {\r\n                let value = this.decimalProvider.replacer(this.element.value);\r\n                this.setValueOnElement(value);\r\n            }\r\n        });\r\n        this.eventListeners.push(listener);\r\n    }\r\n    bindValueChangeEvent() {\r\n        if (this.eventName != BLANK) {\r\n            let listener = this.renderer.listen(this.element, this.eventName, () => {\r\n                Object.keys(this.validationControls).forEach(fieldName => {\r\n                    this.validationControls[fieldName].updateValueAndValidity();\r\n                });\r\n            });\r\n            this.eventListeners.push(listener);\r\n        }\r\n    }\r\n    subscribeNumericFormatter() {\r\n        if (this.formControl[VALIDATOR_CONFIG$2] && this.formControl[VALIDATOR_CONFIG$2][NUMERIC] && (this.formControl[VALIDATOR_CONFIG$2][NUMERIC][IS_FORMAT] || this.formControl[VALIDATOR_CONFIG$2][NUMERIC][DIGITS_INFO])) {\r\n            if (!this.isNumericSubscribed) {\r\n                this.bindNumericElementEvent(this.formControl[VALIDATOR_CONFIG$2][NUMERIC]);\r\n                this.isNumericSubscribed = true;\r\n            }\r\n            if (!this.isFocusCalled && RegexValidator.isNotBlank(this.formControl.value)) {\r\n                this.blurEvent();\r\n            }\r\n        }\r\n    }\r\n    subscribeMaskValidator() {\r\n        if (this.formControl[VALIDATOR_CONFIG$2] && this.formControl[VALIDATOR_CONFIG$2][\"mask\"] && !this.isMasked) {\r\n            let config = this.formControl[VALIDATOR_CONFIG$2][\"mask\"];\r\n            this.maskProvider = new MaskProvider(this.element, config.mask, this.renderer, this.formControl, config);\r\n            this.isMasked = true;\r\n        }\r\n    }\r\n    setValueOnElement(value) {\r\n        this.renderer.setProperty(this.element, ELEMENT_VALUE, value);\r\n    }\r\n    setTemplateValidators(control) {\r\n        for (let validatorName in control[VALIDATOR_CONFIG$2]) {\r\n            this[validatorName] = control[VALIDATOR_CONFIG$2][validatorName];\r\n        }\r\n        delete control[TEMPLATE_VALIDATION_CONFIG];\r\n        delete control[VALIDATOR_CONFIG$2];\r\n        this.ngOnInit();\r\n    }\r\n    updateOnElementClass(element) {\r\n        var previousClassName = '';\r\n        return function (className) {\r\n            if (previousClassName)\r\n                element.classList.remove(previousClassName);\r\n            if (className)\r\n                element.classList.add(className);\r\n            previousClassName = className;\r\n        };\r\n    }\r\n    setValidatorConfig(control) {\r\n        if (!this.formControl) {\r\n            this.formControl = control;\r\n            let rxFormControl = this.formControl;\r\n            if (rxFormControl.updateOnElementClass)\r\n                rxFormControl.updateOnElementClass = this.updateOnElementClass(this.element);\r\n        }\r\n        this.subscribeMaskValidator();\r\n        this.subscribeNumericFormatter();\r\n        if (control[TEMPLATE_VALIDATION_CONFIG])\r\n            this.setTemplateValidators(control);\r\n        if (control[CONDITIONAL_VALIDATOR]) {\r\n            this.conditionalValidator = control[CONDITIONAL_VALIDATOR];\r\n            delete control[CONDITIONAL_VALIDATOR];\r\n        }\r\n    }\r\n    validate(control) {\r\n        this.setValidatorConfig(control);\r\n        if (this.conditionalValidator)\r\n            this.conditionalValidator(control);\r\n        if (!this.isProcessed)\r\n            this.setModelConfig(control);\r\n        return ((this.validators && this.validators.length > 0) || this.maskProvider) ? this.validation(control) : null;\r\n    }\r\n    ngOnDestroy() {\r\n        this.controls = undefined;\r\n        let eventCount = this.eventListeners.length;\r\n        for (var i = 0; i < eventCount; i++) {\r\n            this.eventListeners[0]();\r\n            this.eventListeners.splice(0, 1);\r\n        }\r\n        this.eventListeners = [];\r\n        if (this.maskProvider)\r\n            this.maskProvider.onDestroy();\r\n    }\r\n}\nRxFormControlDirective.ɵfac = function RxFormControlDirective_Factory(t) { return new (t || RxFormControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DecimalProvider)); };\nRxFormControlDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: RxFormControlDirective, selectors: [[\"\", \"ngModel\", \"\"], [\"\", \"formControlName\", \"\"], [\"\", \"formControl\", \"\"]], inputs: { rxnumeric: \"rxnumeric\", rxalpha: \"rxalpha\", rxalphaNumeric: \"rxalphaNumeric\", rxascii: \"rxascii\", rxcompare: \"rxcompare\", rxcompose: \"rxcompose\", rxcontains: \"rxcontains\", rxcreditCard: \"rxcreditCard\", rxdataUri: \"rxdataUri\", rxdifferent: \"rxdifferent\", rxdigit: \"rxdigit\", rxemail: \"rxemail\", rxendsWith: \"rxendsWith\", rxeven: \"rxeven\", rxextension: \"rxextension\", rxfactor: \"rxfactor\", rxfileSize: \"rxfileSize\", rxgreaterThanEqualTo: \"rxgreaterThanEqualTo\", rxgreaterThan: \"rxgreaterThan\", rxhexColor: \"rxhexColor\", rxjson: \"rxjson\", rxlatitude: \"rxlatitude\", rxlatLong: \"rxlatLong\", rxleapYear: \"rxleapYear\", rxlessThan: \"rxlessThan\", rxlessThanEqualTo: \"rxlessThanEqualTo\", rxlongitude: \"rxlongitude\", rxlowerCase: \"rxlowerCase\", rxmac: \"rxmac\", rxmaxDate: \"rxmaxDate\", rxmaxLength: \"rxmaxLength\", rxmaxNumber: \"rxmaxNumber\", rxminDate: \"rxminDate\", rxminLength: \"rxminLength\", rxminNumber: \"rxminNumber\", rxodd: \"rxodd\", rxpassword: \"rxpassword\", rxport: \"rxport\", rxprimeNumber: \"rxprimeNumber\", rxrequired: \"rxrequired\", rxrange: \"rxrange\", rxrule: \"rxrule\", rxstartsWith: \"rxstartsWith\", rxtime: \"rxtime\", rxupperCase: \"rxupperCase\", rxurl: \"rxurl\", rxunique: \"rxunique\", rxnotEmpty: \"rxnotEmpty\", rxcusip: \"rxcusip\", rxgrid: \"rxgrid\", rxdate: \"rxdate\" }, features: [ɵngcc0.ɵɵProvidersFeature([NGMODEL_BINDING]), ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nRxFormControlDirective.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Renderer2 },\r\n    { type: DecimalProvider }\r\n];\r\nRxFormControlDirective.propDecorators = {\r\n    rxalpha: [{ type: Input }],\r\n    rxalphaNumeric: [{ type: Input }],\r\n    rxascii: [{ type: Input }],\r\n    rxcompare: [{ type: Input }],\r\n    rxcompose: [{ type: Input }],\r\n    rxcontains: [{ type: Input }],\r\n    rxcreditCard: [{ type: Input }],\r\n    rxdataUri: [{ type: Input }],\r\n    rxdifferent: [{ type: Input }],\r\n    rxdigit: [{ type: Input }],\r\n    rxemail: [{ type: Input }],\r\n    rxendsWith: [{ type: Input }],\r\n    rxeven: [{ type: Input }],\r\n    rxextension: [{ type: Input }],\r\n    rxfactor: [{ type: Input }],\r\n    rxfileSize: [{ type: Input }],\r\n    rxgreaterThanEqualTo: [{ type: Input }],\r\n    rxgreaterThan: [{ type: Input }],\r\n    rxhexColor: [{ type: Input }],\r\n    rxjson: [{ type: Input }],\r\n    rxlatitude: [{ type: Input }],\r\n    rxlatLong: [{ type: Input }],\r\n    rxleapYear: [{ type: Input }],\r\n    rxlessThan: [{ type: Input }],\r\n    rxlessThanEqualTo: [{ type: Input }],\r\n    rxlongitude: [{ type: Input }],\r\n    rxlowerCase: [{ type: Input }],\r\n    rxmac: [{ type: Input }],\r\n    rxmaxDate: [{ type: Input }],\r\n    rxmaxLength: [{ type: Input }],\r\n    rxmaxNumber: [{ type: Input }],\r\n    rxminDate: [{ type: Input }],\r\n    rxminLength: [{ type: Input }],\r\n    rxminNumber: [{ type: Input }],\r\n    rxnumeric: [{ type: Input }],\r\n    rxodd: [{ type: Input }],\r\n    rxpassword: [{ type: Input }],\r\n    rxport: [{ type: Input }],\r\n    rxprimeNumber: [{ type: Input }],\r\n    rxrequired: [{ type: Input }],\r\n    rxrange: [{ type: Input }],\r\n    rxrule: [{ type: Input }],\r\n    rxstartsWith: [{ type: Input }],\r\n    rxtime: [{ type: Input }],\r\n    rxupperCase: [{ type: Input }],\r\n    rxurl: [{ type: Input }],\r\n    rxunique: [{ type: Input }],\r\n    rxnotEmpty: [{ type: Input }],\r\n    rxcusip: [{ type: Input }],\r\n    rxgrid: [{ type: Input }],\r\n    rxdate: [{ type: Input }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RxFormControlDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngModel],[formControlName],[formControl]',\n                providers: [NGMODEL_BINDING]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: DecimalProvider }]; }, { rxnumeric: [{\n            type: Input\n        }], rxalpha: [{\n            type: Input\n        }], rxalphaNumeric: [{\n            type: Input\n        }], rxascii: [{\n            type: Input\n        }], rxcompare: [{\n            type: Input\n        }], rxcompose: [{\n            type: Input\n        }], rxcontains: [{\n            type: Input\n        }], rxcreditCard: [{\n            type: Input\n        }], rxdataUri: [{\n            type: Input\n        }], rxdifferent: [{\n            type: Input\n        }], rxdigit: [{\n            type: Input\n        }], rxemail: [{\n            type: Input\n        }], rxendsWith: [{\n            type: Input\n        }], rxeven: [{\n            type: Input\n        }], rxextension: [{\n            type: Input\n        }], rxfactor: [{\n            type: Input\n        }], rxfileSize: [{\n            type: Input\n        }], rxgreaterThanEqualTo: [{\n            type: Input\n        }], rxgreaterThan: [{\n            type: Input\n        }], rxhexColor: [{\n            type: Input\n        }], rxjson: [{\n            type: Input\n        }], rxlatitude: [{\n            type: Input\n        }], rxlatLong: [{\n            type: Input\n        }], rxleapYear: [{\n            type: Input\n        }], rxlessThan: [{\n            type: Input\n        }], rxlessThanEqualTo: [{\n            type: Input\n        }], rxlongitude: [{\n            type: Input\n        }], rxlowerCase: [{\n            type: Input\n        }], rxmac: [{\n            type: Input\n        }], rxmaxDate: [{\n            type: Input\n        }], rxmaxLength: [{\n            type: Input\n        }], rxmaxNumber: [{\n            type: Input\n        }], rxminDate: [{\n            type: Input\n        }], rxminLength: [{\n            type: Input\n        }], rxminNumber: [{\n            type: Input\n        }], rxodd: [{\n            type: Input\n        }], rxpassword: [{\n            type: Input\n        }], rxport: [{\n            type: Input\n        }], rxprimeNumber: [{\n            type: Input\n        }], rxrequired: [{\n            type: Input\n        }], rxrange: [{\n            type: Input\n        }], rxrule: [{\n            type: Input\n        }], rxstartsWith: [{\n            type: Input\n        }], rxtime: [{\n            type: Input\n        }], rxupperCase: [{\n            type: Input\n        }], rxurl: [{\n            type: Input\n        }], rxunique: [{\n            type: Input\n        }], rxnotEmpty: [{\n            type: Input\n        }], rxcusip: [{\n            type: Input\n        }], rxgrid: [{\n            type: Input\n        }], rxdate: [{\n            type: Input\n        }] }); })();\n\nvar UrlValidationType;\r\n(function (UrlValidationType) {\r\n    UrlValidationType[UrlValidationType[\"FQDN\"] = 1] = \"FQDN\";\r\n    UrlValidationType[UrlValidationType[\"LocalHost\"] = 2] = \"LocalHost\";\r\n    UrlValidationType[UrlValidationType[\"IntranetServer\"] = 3] = \"IntranetServer\";\r\n})(UrlValidationType || (UrlValidationType = {}));\n\nclass FormBuilderConfiguration {\r\n    constructor(formBuilderConfiguration) {\r\n        if (formBuilderConfiguration)\r\n            for (var column in formBuilderConfiguration)\r\n                this[column] = formBuilderConfiguration[column];\r\n    }\r\n}\n\nclass IAbstractControl extends AbstractControl {\r\n}\n\nclass ControlHostDirective {\r\n    constructor(viewContainerRef) {\r\n        this.viewContainerRef = viewContainerRef;\r\n    }\r\n    set portal(context) {\r\n        if (context.templateRef) {\r\n            if (this.view) {\r\n                this.view.destroy();\r\n                this.view = undefined;\r\n            }\r\n            this.view = this.viewContainerRef.createEmbeddedView(context.templateRef, context);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.view)\r\n            this.view.destroy();\r\n        if (this.viewContainerRef)\r\n            this.viewContainerRef.clear();\r\n    }\r\n}\nControlHostDirective.ɵfac = function ControlHostDirective_Factory(t) { return new (t || ControlHostDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nControlHostDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ControlHostDirective, selectors: [[\"\", \"controlHost\", \"\"]], inputs: { portal: [\"controlHost\", \"portal\"] } });\r\nControlHostDirective.ctorParameters = () => [\r\n    { type: ViewContainerRef }\r\n];\r\nControlHostDirective.propDecorators = {\r\n    portal: [{ type: Input, args: ['controlHost',] }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ControlHostDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[controlHost]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, { portal: [{\n            type: Input,\n            args: ['controlHost']\n        }] }); })();\n\nclass BaseFormBuilder {\r\n    constructor() {\r\n    }\r\n    createInstance() {\r\n        let instance = {};\r\n        defaultContainer.modelIncrementCount = defaultContainer.modelIncrementCount + 1;\r\n        let modelName = `RxWebModel${defaultContainer.modelIncrementCount}`;\r\n        instance.constructor = Function(`\"use strict\";return(function ${modelName}(){ })`)();\r\n        return instance;\r\n    }\r\n    createClassObject(model, formBuilderConfiguration, classInstance) {\r\n        let instanceContainer = defaultContainer.get(model);\r\n        let autoInstanceConfig = formBuilderConfiguration ? formBuilderConfiguration.autoInstanceConfig : undefined;\r\n        if (!autoInstanceConfig) {\r\n            return classInstance && typeof classInstance != \"function\" ? classInstance : getInstance(model, []);\r\n        }\r\n        else {\r\n            classInstance = classInstance && typeof classInstance != \"function\" ? classInstance : getInstance(model, autoInstanceConfig.arguments || []);\r\n            if (autoInstanceConfig.objectPropInstanceConfig && autoInstanceConfig.objectPropInstanceConfig.length > 0) {\r\n                autoInstanceConfig.objectPropInstanceConfig.forEach(t => {\r\n                    let objectProperty = instanceContainer.properties.filter(property => property.name == t.propertyName && property.propertyType == OBJECT_PROPERTY)[0];\r\n                    if (objectProperty) {\r\n                        let data = classInstance[t.propertyName];\r\n                        classInstance[t.propertyName] = getInstance(objectProperty.entity, t.arguments || []);\r\n                        if (data)\r\n                            this.setObjectValue(data, classInstance[t.propertyName]);\r\n                    }\r\n                });\r\n            }\r\n            if (autoInstanceConfig.arrayPropInstanceConfig && autoInstanceConfig.arrayPropInstanceConfig.length > 0) {\r\n                autoInstanceConfig.arrayPropInstanceConfig.forEach(t => {\r\n                    let property = instanceContainer.properties.filter(property => property.name == t.propertyName && property.propertyType == ARRAY_PROPERTY)[0];\r\n                    if (property) {\r\n                        let data = classInstance[t.propertyName];\r\n                        classInstance[t.propertyName] = [];\r\n                        for (var i = 0; i < t.rowItems; i++) {\r\n                            let instance = getInstance(property.entity, t.arguments || []);\r\n                            if (data && data[i])\r\n                                this.setObjectValue(data[i], instance);\r\n                            classInstance[t.propertyName].push(instance);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            return classInstance;\r\n        }\r\n    }\r\n    updateObject(model, entityObject, formBuilderConfiguration) {\r\n        let instanceContainer = instanceProvider(model);\r\n        let classInstance = getInstance(model, []);\r\n        if (instanceContainer) {\r\n            instanceContainer.properties.forEach(t => {\r\n                let entity = ((t.propertyType == OBJECT_PROPERTY || t.propertyType == ARRAY_PROPERTY) && t.entity) ? t.entity : (formBuilderConfiguration && formBuilderConfiguration.genericEntities) ? formBuilderConfiguration.genericEntities[t.name] : undefined;\r\n                if (!entity && t.entityProvider)\r\n                    entity = t.entityProvider.call(entityObject);\r\n                switch (t.propertyType) {\r\n                    case PROPERTY:\r\n                        classInstance[t.name] = this.getValue(entityObject, t, formBuilderConfiguration);\r\n                        break;\r\n                    case OBJECT_PROPERTY:\r\n                        let objectValue = this.getValue(entityObject, t, formBuilderConfiguration);\r\n                        if (objectValue)\r\n                            classInstance[t.name] = this.updateObject(entity, objectValue, formBuilderConfiguration);\r\n                        break;\r\n                    case ARRAY_PROPERTY:\r\n                        let arrayObjectValue = this.getValue(entityObject, t, formBuilderConfiguration);\r\n                        if (arrayObjectValue && Array.isArray(arrayObjectValue)) {\r\n                            classInstance[t.name] = [];\r\n                            for (let row of arrayObjectValue) {\r\n                                let instanceObject = this.updateObject(entity, row, formBuilderConfiguration);\r\n                                classInstance[t.name].push(instanceObject);\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n        return classInstance;\r\n    }\r\n    instaceProvider(instanceFunc, entityObject) {\r\n        return instanceProvider(instanceFunc, entityObject);\r\n    }\r\n    getDefaultValue(propertyInfo, value, formBuilderConfiguration) {\r\n        let defaultValue = (formBuilderConfiguration && formBuilderConfiguration.propsConfig && formBuilderConfiguration.propsConfig[propertyInfo.name] && formBuilderConfiguration.propsConfig[propertyInfo.name].defaultValue && !RegexValidator.isNotBlank(value)) ? formBuilderConfiguration.propsConfig[propertyInfo.name].defaultValue : (propertyInfo.defaultValue != undefined && !RegexValidator.isNotBlank(value)) ?\r\n            propertyInfo.defaultValue :\r\n            value;\r\n        return defaultValue;\r\n    }\r\n    sanitizeValue(instanceContainer, propertyName, value, entityObject, baseObject) {\r\n        if (instanceContainer.sanitizers && instanceContainer.sanitizers[propertyName]) {\r\n            for (let sanitizer of instanceContainer.sanitizers[propertyName])\r\n                value = SANITIZERS[sanitizer.name](value, sanitizer.config);\r\n        }\r\n        if (entityObject[propertyName] !== undefined && entityObject[propertyName] !== value)\r\n            entityObject[propertyName] = value;\r\n        if (baseObject[propertyName] !== undefined && baseObject[propertyName] !== value)\r\n            baseObject[propertyName] = value;\r\n        return value;\r\n    }\r\n    getValue(entityObject, propertyInfo, formBuilderConfiguration) {\r\n        let propValue = (propertyInfo.dataPropertyName) ? entityObject[propertyInfo.dataPropertyName] : entityObject[propertyInfo.name];\r\n        return this.getDefaultValue(propertyInfo, propValue, formBuilderConfiguration);\r\n    }\r\n    setObjectValue(entityObject, classInstance) {\r\n        for (var column in entityObject) {\r\n            classInstance[column] = entityObject[column];\r\n        }\r\n    }\r\n}\n\nfunction andValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let validatorNames = Object.keys(config.validation);\r\n            let failed = false;\r\n            for (var validatorName of validatorNames) {\r\n                failed = typeof config.validation[validatorName] == \"boolean\" ? APP_VALIDATORS[validatorName]()(control) : APP_VALIDATORS[validatorName](config.validation[validatorName])(control);\r\n                if (failed)\r\n                    break;\r\n            }\r\n            if (failed)\r\n                return ObjectMaker.toJson(AnnotationTypes.and, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction orValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let validatorNames = Object.keys(config.validation);\r\n            let failed = false;\r\n            for (var validatorName of validatorNames) {\r\n                failed = typeof config.validation[validatorName] == \"boolean\" ? APP_VALIDATORS[validatorName]()(control) : APP_VALIDATORS[validatorName](config.validation[validatorName])(control);\r\n                if (!failed)\r\n                    break;\r\n            }\r\n            if (failed)\r\n                return ObjectMaker.toJson(AnnotationTypes.or, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction notValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let validatorNames = Object.keys(config.validation);\r\n            let failed = false;\r\n            for (var validatorName of validatorNames) {\r\n                failed = typeof config.validation[validatorName] == \"boolean\" ? APP_VALIDATORS[validatorName]()(control) : APP_VALIDATORS[validatorName](config.validation[validatorName])(control);\r\n                if (!failed)\r\n                    break;\r\n            }\r\n            if (!failed)\r\n                return ObjectMaker.toJson(AnnotationTypes.not, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nconst LOGICAL_VALIDATORS = { and: andValidator, or: orValidator, not: notValidator };\r\nconst ASYNC = \"async\";\r\nconst ENTITY_OBJECT = \"entityObject\";\r\nclass RxFormBuilder extends BaseFormBuilder {\r\n    constructor() {\r\n        super();\r\n        this.conditionalObjectProps = [];\r\n        this.conditionalValidationInstance = {};\r\n        this.builderConfigurationConditionalObjectProps = [];\r\n        this.formGroupPropOtherValidator = {};\r\n        this.currentFormGroupPropOtherValidator = {};\r\n        this.isNested = false;\r\n        this.isGroupCalled = false;\r\n        this.isNestedBinding = false;\r\n    }\r\n    getInstanceContainer(instanceFunc, entityObject) {\r\n        return this.instaceProvider(instanceFunc, entityObject);\r\n    }\r\n    setValue(formGroup, object) {\r\n        for (var col in object) {\r\n            var control = formGroup.get([col]);\r\n            control.setValue(object[col]);\r\n            control.updateValueAndValidity();\r\n        }\r\n    }\r\n    extractExpressions(fomrBuilderConfiguration) {\r\n        if (fomrBuilderConfiguration && fomrBuilderConfiguration.dynamicValidation) {\r\n            for (var property in fomrBuilderConfiguration.dynamicValidation) {\r\n                for (var decorator in fomrBuilderConfiguration.dynamicValidation[property]) {\r\n                    if (fomrBuilderConfiguration.dynamicValidation[property][decorator].conditionalExpression) {\r\n                        let columns = Linq.expressionColumns(fomrBuilderConfiguration.dynamicValidation[property][decorator].conditionalExpression);\r\n                        defaultContainer.addChangeValidation(this.conditionalValidationInstance, property, columns);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    addAsyncValidation(property, propertyValidators, propValidationConfig) {\r\n        let asyncValidators = [];\r\n        if (propertyValidators) {\r\n            for (let propertyValidator of propertyValidators) {\r\n                if (propertyValidator.isAsync)\r\n                    propertyValidator.config.forEach(t => { asyncValidators.push(t); });\r\n            }\r\n        }\r\n        if (propValidationConfig && propValidationConfig[ASYNC]) {\r\n            propValidationConfig[ASYNC].forEach(t => { asyncValidators.push(t); });\r\n        }\r\n        return asyncValidators;\r\n    }\r\n    addFormControl(property, propertyValidators, propValidationConfig, instance, entity) {\r\n        let validators = [];\r\n        let columns = [];\r\n        if ((instance.conditionalValidationProps && instance.conditionalValidationProps[property.name]) || (this.conditionalValidationInstance.conditionalValidationProps && this.conditionalValidationInstance.conditionalValidationProps[property.name])) {\r\n            let props = [];\r\n            if ((instance.conditionalValidationProps && instance.conditionalValidationProps[property.name]))\r\n                instance.conditionalValidationProps[property.name].forEach(t => props.push(t));\r\n            if (this.conditionalValidationInstance.conditionalValidationProps && this.conditionalValidationInstance.conditionalValidationProps[property.name])\r\n                this.conditionalValidationInstance.conditionalValidationProps[property.name].forEach(t => props.push(t));\r\n            validators.push(conditionalChangeValidator(props));\r\n        }\r\n        if (this.conditionalObjectProps.length > 0 || this.builderConfigurationConditionalObjectProps.length > 0) {\r\n            let propConditions = [];\r\n            if (this.conditionalObjectProps)\r\n                propConditions = this.conditionalObjectProps.filter(t => t.propName == property.name);\r\n            if (this.builderConfigurationConditionalObjectProps)\r\n                this.builderConfigurationConditionalObjectProps.filter(t => t.propName == property.name).forEach(t => propConditions.push(t));\r\n            propConditions.forEach(t => {\r\n                if (t.referencePropName && columns.indexOf(t.referencePropName) == -1)\r\n                    columns.push(t.referencePropName);\r\n            });\r\n            if (columns.length > 0)\r\n                validators.push(conditionalChangeValidator(columns));\r\n        }\r\n        for (let propertyValidator of propertyValidators) {\r\n            if (!propertyValidator.isAsync) {\r\n                let config = propertyValidator.config;\r\n                if (property.messageNexus)\r\n                    config = config ? Object.assign({ messageNexus: property.messageNexus }, config) : { messageNexus: property.messageNexus };\r\n                switch (propertyValidator.annotationType) {\r\n                    case AnnotationTypes.rule:\r\n                        validators.push(APP_VALIDATORS[propertyValidator.annotationType](config, entity));\r\n                        break;\r\n                    case AnnotationTypes.and:\r\n                    case AnnotationTypes.or:\r\n                    case AnnotationTypes.not:\r\n                        validators.push(LOGICAL_VALIDATORS[propertyValidator.annotationType](config));\r\n                        break;\r\n                    default:\r\n                        validators.push(APP_VALIDATORS[propertyValidator.annotationType](config));\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (propValidationConfig)\r\n            this.additionalValidation(validators, propValidationConfig);\r\n        if (this.currentFormGroupPropOtherValidator[property.name])\r\n            this.currentFormGroupPropOtherValidator[property.name].forEach(t => { validators.push(t); });\r\n        return validators;\r\n    }\r\n    additionalValidation(validations, propValidationConfig) {\r\n        for (var col in AnnotationTypes) {\r\n            if (propValidationConfig[AnnotationTypes[col]] && col != \"custom\") {\r\n                validations.push(APP_VALIDATORS[AnnotationTypes[col]](propValidationConfig[AnnotationTypes[col]]));\r\n            }\r\n            else if (col == AnnotationTypes.custom && propValidationConfig[AnnotationTypes[col]])\r\n                validations.push(propValidationConfig[col]);\r\n        }\r\n    }\r\n    getEntity(object, formBuilderConfiguration, propertyName, isSameObjectConstructor = false) {\r\n        if (formBuilderConfiguration && formBuilderConfiguration.genericEntities && formBuilderConfiguration.genericEntities[propertyName])\r\n            return formBuilderConfiguration.genericEntities[propertyName];\r\n        return isSameObjectConstructor ? object.constructor : undefined;\r\n    }\r\n    getObjectPropertyInstance(object, propertyInfo, formBuilderConfiguration) {\r\n        if (propertyInfo.propertyType == OBJECT_PROPERTY && object[propertyInfo.name])\r\n            return object[propertyInfo.name].constructor;\r\n        else if (propertyInfo.propertyType == ARRAY_PROPERTY && object[propertyInfo.name] && object[propertyInfo.name].length > 0)\r\n            return object[propertyInfo.name][0].constructor;\r\n        return this.getEntity(object, formBuilderConfiguration, propertyInfo.name);\r\n    }\r\n    checkObjectPropAdditionalValidation(instanceContainer, object, formBuilderConfiguration) {\r\n        var props = instanceContainer.properties.filter(t => t.propertyType == OBJECT_PROPERTY || t.propertyType == ARRAY_PROPERTY);\r\n        props.forEach(t => {\r\n            let entity = t.entity;\r\n            if (!t.entity)\r\n                entity = this.getObjectPropertyInstance(object, t, formBuilderConfiguration);\r\n            if (entity) {\r\n                let instance = this.getInstanceContainer(entity, null);\r\n                if (instance && instance.conditionalValidationProps) {\r\n                    for (var key in instance.conditionalValidationProps) {\r\n                        var prop = instanceContainer.properties.filter(t => t.name == key)[0];\r\n                        if (prop) {\r\n                            if (!instanceContainer.conditionalValidationProps)\r\n                                instanceContainer.conditionalValidationProps = {};\r\n                            if (!instanceContainer.conditionalValidationProps[key])\r\n                                instanceContainer.conditionalValidationProps[key] = [];\r\n                            instance.conditionalValidationProps[key].forEach(x => {\r\n                                if (t.propertyType != ARRAY_PROPERTY)\r\n                                    instanceContainer.conditionalValidationProps[key].push([t.name, x].join('.'));\r\n                                else\r\n                                    instanceContainer.conditionalValidationProps[key].push([t.name, x].join('[]'));\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    getObject(model, entityObject, formBuilderConfiguration) {\r\n        let json = {};\r\n        if (typeof model == FUNCTION_STRING)\r\n            json.model = model;\r\n        if (typeof model == FUNCTION_STRING && (entityObject instanceof FormBuilderConfiguration)) {\r\n            json.entityObject = this.createClassObject(json.model, entityObject);\r\n        }\r\n        if (entityObject && !(entityObject instanceof FormBuilderConfiguration))\r\n            json.entityObject = entityObject;\r\n        if (entityObject instanceof FormBuilderConfiguration && !formBuilderConfiguration)\r\n            json.formBuilderConfiguration = entityObject;\r\n        else if (!(entityObject instanceof FormBuilderConfiguration) && formBuilderConfiguration) {\r\n            json.formBuilderConfiguration = formBuilderConfiguration;\r\n            json.entityObject = this.createClassObject(json.model, json.formBuilderConfiguration, json.entityObject);\r\n        }\r\n        if (!entityObject) {\r\n            if (typeof model == OBJECT_STRING)\r\n                json.model = model.constructor;\r\n            json.entityObject = this.createClassObject(json.model, json.formBuilderConfiguration, model);\r\n        }\r\n        else if (model && (entityObject instanceof FormBuilderConfiguration) && (typeof model == OBJECT_STRING)) {\r\n            json[MODEL] = model.constructor;\r\n            json[ENTITY_OBJECT] = this.createClassObject(json.model, json.formBuilderConfiguration, model);\r\n        }\r\n        return json;\r\n    }\r\n    control(value, validators, asyncValidators) {\r\n        return new RxFormControl(value, validators, asyncValidators, {}, {}, '', []);\r\n    }\r\n    array(values, validatorConfig) {\r\n        let formArray = this.group({ temp: values }, validatorConfig).get(\"temp\");\r\n        var formBuilder = new FormBuilder();\r\n        return formBuilder.array(formArray.controls);\r\n    }\r\n    group(groupObject, validatorConfig) {\r\n        let modelInstance = super.createInstance();\r\n        let entityObject = {};\r\n        this.formGroupPropOtherValidator = {};\r\n        this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator;\r\n        this.createValidatorFormGroup(groupObject, entityObject, modelInstance, validatorConfig);\r\n        this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator;\r\n        this.isGroupCalled = true;\r\n        let formGroup = this.formGroup(modelInstance.constructor, entityObject, validatorConfig);\r\n        this.isGroupCalled = false;\r\n        this.formGroupPropOtherValidator = {};\r\n        this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator;\r\n        this.formGroupPropOtherValidator = {};\r\n        return formGroup;\r\n    }\r\n    applyAllPropValidator(propName, validatorConfig, modelInstance) {\r\n        if (validatorConfig && validatorConfig.applyAllProps) {\r\n            if (!(validatorConfig.excludeProps && validatorConfig.excludeProps.length > 0 && validatorConfig.excludeProps.indexOf(propName) == -1)) {\r\n                validatorConfig.applyAllProps.forEach((t) => {\r\n                    if (t.name == RX_WEB_VALIDATOR) {\r\n                        t(propName, modelInstance);\r\n                    }\r\n                    else {\r\n                        if (!this.currentFormGroupPropOtherValidator[propName])\r\n                            this.currentFormGroupPropOtherValidator[propName] = [];\r\n                        this.currentFormGroupPropOtherValidator[propName].push(t);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    dynamicValidationPropCheck(propName, validatorConfig) {\r\n        return (validatorConfig == undefined) ? true : (!validatorConfig.dynamicValidationConfigurationPropertyName) ? true : validatorConfig.dynamicValidationConfigurationPropertyName == propName ? false : true;\r\n    }\r\n    isNotObject(value) {\r\n        return value instanceof Date || value === null || typeof value != OBJECT_STRING;\r\n    }\r\n    createValidatorFormGroup(groupObject, entityObject, modelInstance, validatorConfig) {\r\n        for (var propName in groupObject) {\r\n            var prop = groupObject[propName];\r\n            if (prop instanceof Array && prop.length > 0 && this.isNotObject(prop[0])) {\r\n                let propValidators = (prop.length > 1 && prop[1] instanceof Array) ? prop[1] : (prop.length == 2) ? [prop[1]] : [];\r\n                let propertyAdded = false;\r\n                for (var i = 0; i < propValidators.length; i++) {\r\n                    if (propValidators[i].name == RX_WEB_VALIDATOR) {\r\n                        propValidators[i](propName, modelInstance);\r\n                        propertyAdded = true;\r\n                    }\r\n                    else {\r\n                        if (!this.currentFormGroupPropOtherValidator[propName])\r\n                            this.currentFormGroupPropOtherValidator[propName] = [];\r\n                        this.currentFormGroupPropOtherValidator[propName].push(propValidators[i]);\r\n                    }\r\n                }\r\n                if (!propertyAdded)\r\n                    defaultContainer.initPropertyObject(propName, PROPERTY, undefined, typeof modelInstance == OBJECT_STRING ? modelInstance : { constructor: modelInstance });\r\n                this.applyAllPropValidator(propName, validatorConfig, modelInstance);\r\n            }\r\n            else if (prop === null || prop === undefined || typeof prop == STRING || typeof prop == NUMBER || typeof prop == BOOLEAN$1 || prop instanceof Date) {\r\n                defaultContainer.initPropertyObject(propName, PROPERTY, undefined, typeof modelInstance == OBJECT_STRING ? modelInstance : { constructor: modelInstance });\r\n                this.applyAllPropValidator(propName, validatorConfig, modelInstance);\r\n            }\r\n            else if (prop instanceof Array) {\r\n                if (prop instanceof FormArray) {\r\n                    entityObject[propName] = prop;\r\n                }\r\n                else {\r\n                    let propModelInstance = super.createInstance();\r\n                    if (typeof modelInstance == \"function\")\r\n                        modelInstance.constructor = modelInstance;\r\n                    defaultContainer.initPropertyObject(propName, ARRAY_PROPERTY, propModelInstance.constructor, modelInstance);\r\n                    entityObject[propName] = [];\r\n                    for (let row of prop) {\r\n                        let jObject = {};\r\n                        entityObject[propName].push(jObject);\r\n                        this.createValidatorFormGroup(row, jObject, propModelInstance.constructor, validatorConfig);\r\n                    }\r\n                }\r\n            }\r\n            else if (typeof prop == OBJECT_STRING && !(prop instanceof FormControl || prop instanceof RxFormControl)) {\r\n                let formGroup = (prop instanceof FormArray) ? prop.controls[0] : prop;\r\n                if (!formGroup.model && (prop instanceof FormGroup || prop instanceof RxFormGroup)) {\r\n                    formGroup = this.group(formGroup.controls);\r\n                }\r\n                if (prop instanceof FormGroup || prop instanceof RxFormGroup) {\r\n                    entityObject[propName] = prop;\r\n                    defaultContainer.initPropertyObject(propName, OBJECT_PROPERTY, formGroup.model, modelInstance);\r\n                }\r\n                else if (prop instanceof FormArray) {\r\n                    entityObject[propName] = prop;\r\n                    defaultContainer.initPropertyObject(propName, ARRAY_PROPERTY, formGroup.model, modelInstance);\r\n                }\r\n                else {\r\n                    if (this.dynamicValidationPropCheck(propName, validatorConfig)) {\r\n                        this.formGroupPropOtherValidator[propName] = {};\r\n                        this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator[propName];\r\n                        let propModelInstance = super.createInstance();\r\n                        entityObject[propName] = {};\r\n                        entityObject[propName].constructor = propModelInstance.constructor;\r\n                        defaultContainer.initPropertyObject(propName, OBJECT_PROPERTY, entityObject[propName].constructor, modelInstance.constructor == Function ? { constructor: modelInstance } : modelInstance);\r\n                        let objectValidationConfig = this.getValidatorConfig(validatorConfig, groupObject, propName + \".\");\r\n                        this.createValidatorFormGroup(groupObject[propName], entityObject[propName], entityObject[propName].constructor, objectValidationConfig);\r\n                    }\r\n                    else\r\n                        entityObject[propName] = groupObject[propName];\r\n                }\r\n            }\r\n            if (typeof prop == STRING || typeof prop == NUMBER || typeof prop == BOOLEAN$1 || prop instanceof Date) {\r\n                entityObject[propName] = prop;\r\n            }\r\n            else if ((prop && prop.length > 0 && this.isNotObject(prop[0]) && !(prop instanceof FormControl || prop instanceof RxFormControl) && !(prop instanceof FormArray))) {\r\n                entityObject[propName] = prop[0];\r\n            }\r\n            else if (prop instanceof FormArray) {\r\n                entityObject[propName] = prop;\r\n            }\r\n            else if (prop instanceof FormControl || prop instanceof RxFormControl) {\r\n                entityObject[propName] = prop;\r\n                defaultContainer.initPropertyObject(propName, PROPERTY, undefined, modelInstance.constructor ? modelInstance : { constructor: modelInstance });\r\n            }\r\n        }\r\n    }\r\n    getValidatorConfig(validatorConfig, entityObject, rootPropertyName, arrayPropertyName) {\r\n        let excludeProps = [];\r\n        let includeProps = [];\r\n        let ignoreUndefinedProps = [];\r\n        if (!validatorConfig)\r\n            return {};\r\n        const validationProps = this.getObjectForProperty(validatorConfig.dynamicValidation, rootPropertyName, arrayPropertyName);\r\n        const abstractControlOptions = this.getObjectForProperty(validatorConfig.abstractControlOptions, rootPropertyName, arrayPropertyName);\r\n        if (validatorConfig.excludeProps)\r\n            excludeProps = this.getProps(validatorConfig.excludeProps, rootPropertyName);\r\n        if (validatorConfig.includeProps)\r\n            includeProps = this.getProps(validatorConfig.includeProps, rootPropertyName);\r\n        if (validatorConfig.ignoreUndefinedProps)\r\n            ignoreUndefinedProps = this.getProps(validatorConfig.ignoreUndefinedProps, rootPropertyName, true);\r\n        if (!Object.keys(abstractControlOptions).length && rootPropertyName.endsWith('.') && validatorConfig.abstractControlOptions && validatorConfig.abstractControlOptions[rootPropertyName.substring(0, rootPropertyName.length - 1)])\r\n            abstractControlOptions['global'] = validatorConfig.abstractControlOptions[rootPropertyName.substring(0, rootPropertyName.length - 1)];\r\n        const dynamicValidation = (validatorConfig.dynamicValidationConfigurationPropertyName && entityObject[validatorConfig.dynamicValidationConfigurationPropertyName]) ? entityObject[validatorConfig.dynamicValidationConfigurationPropertyName] : validationProps;\r\n        return { ignoreUndefinedProps: ignoreUndefinedProps, includeProps: includeProps, dynamicValidation: dynamicValidation, excludeProps: excludeProps, abstractControlOptions: abstractControlOptions };\r\n    }\r\n    getObjectForProperty(rootObject, rootPropertyName, arrayPropertyName) {\r\n        const result = {};\r\n        for (let propName in rootObject) {\r\n            if (!propName.startsWith(rootPropertyName) && (!arrayPropertyName || !propName.startsWith(arrayPropertyName)))\r\n                continue;\r\n            let splitProp = propName.split(\".\", 2)[1];\r\n            if (!splitProp)\r\n                continue;\r\n            result[splitProp] = rootObject[propName];\r\n        }\r\n        return result;\r\n    }\r\n    getProps(properties, rootPropertyName, isIgnoreProp = false) {\r\n        let props = [];\r\n        for (let prop of properties) {\r\n            if (prop.indexOf(rootPropertyName) != -1) {\r\n                let splitProps = prop.split(\".\");\r\n                if (splitProps.length == 2) {\r\n                    props.push(splitProps[1]);\r\n                }\r\n                else if (splitProps.length > 2) {\r\n                    splitProps.splice(0, 1);\r\n                    props.push(splitProps.join(\".\"));\r\n                }\r\n            }\r\n        }\r\n        if (isIgnoreProp && properties.filter(x => x == rootPropertyName.replace('.', '')).length == 1)\r\n            props.push(':self:');\r\n        return props;\r\n    }\r\n    formGroup(model, entityObject, formBuilderConfiguration) {\r\n        let json = this.getObject(model, entityObject, formBuilderConfiguration);\r\n        model = json.model;\r\n        entityObject = json.entityObject;\r\n        if (entityObject.constructor != model && !this.isGroupCalled) {\r\n            entityObject = json.entityObject = this.updateObject(model, json.entityObject, formBuilderConfiguration);\r\n        }\r\n        formBuilderConfiguration = json.formBuilderConfiguration;\r\n        if (formBuilderConfiguration)\r\n            this.extractExpressions(formBuilderConfiguration);\r\n        let instanceContainer = this.getInstanceContainer(model, entityObject);\r\n        this.checkObjectPropAdditionalValidation(instanceContainer, entityObject, formBuilderConfiguration);\r\n        let formGroupObject = {};\r\n        let extendedProperties = {};\r\n        let formChildGroup = undefined;\r\n        let formArrayGroup = undefined;\r\n        var additionalValidations = {};\r\n        instanceContainer.properties.forEach(property => {\r\n            let isIncludeProp = true;\r\n            if (formBuilderConfiguration) {\r\n                if (formBuilderConfiguration.excludeProps && formBuilderConfiguration.excludeProps.length > 0)\r\n                    isIncludeProp = formBuilderConfiguration.excludeProps.indexOf(property.name) == -1;\r\n                if (formBuilderConfiguration.dynamicValidation)\r\n                    additionalValidations = formBuilderConfiguration.dynamicValidation;\r\n                if (formBuilderConfiguration.includeProps && formBuilderConfiguration.includeProps.length > 0)\r\n                    isIncludeProp = formBuilderConfiguration.includeProps.indexOf(property.name) != -1;\r\n                if (formBuilderConfiguration.ignoreUndefinedProps && formBuilderConfiguration.ignoreUndefinedProps.length > 0) {\r\n                    isIncludeProp = !(property.propertyType == PROPERTY && !RegexValidator.isNotBlank(json.entityObject[property.name]) && (formBuilderConfiguration.ignoreUndefinedProps.indexOf(property.name) !== -1 || formBuilderConfiguration.ignoreUndefinedProps.indexOf(\":self:\") !== -1));\r\n                }\r\n            }\r\n            if (property.ignore)\r\n                isIncludeProp = !property.ignore.call(json.entityObject, json.entityObject);\r\n            if (isIncludeProp) {\r\n                switch (property.propertyType) {\r\n                    case PROPERTY:\r\n                        if (!(entityObject[property.name] instanceof FormControl || entityObject[property.name] instanceof RxFormControl)) {\r\n                            let propertyValidators = instanceContainer.propertyAnnotations.filter(t => t.propertyName == property.name && t.isValidator);\r\n                            let updateOn = instanceContainer.propertyAnnotations.filter(t => t.propertyName == property.name && !t.isValidator && t.annotationType === \"updateOn\")[0];\r\n                            let sanitizeValue = super.sanitizeValue(instanceContainer, property.name, super.getDefaultValue(property, entityObject[property.name], formBuilderConfiguration), json.entityObject, Object.assign({}, json.entityObject));\r\n                            if (entityObject[property.name] === undefined && sanitizeValue)\r\n                                entityObject[property.name] = sanitizeValue;\r\n                            let validators = this.addFormControl(property, propertyValidators, additionalValidations[property.name], instanceContainer, entityObject);\r\n                            let abstractControlOptions = { validators: validators, asyncValidators: this.addAsyncValidation(property, propertyValidators, additionalValidations[property.name]) };\r\n                            abstractControlOptions = this.getAbstractControlOptions(property.name, formBuilderConfiguration, abstractControlOptions);\r\n                            if (updateOn && !abstractControlOptions.updateOn)\r\n                                abstractControlOptions.updateOn = updateOn.config.runOn;\r\n                            formGroupObject[property.name] = new RxFormControl(sanitizeValue, abstractControlOptions, undefined, json.entityObject, Object.assign({}, json.entityObject), property.name, instanceContainer.sanitizers[property.name]);\r\n                            this.isNested = false;\r\n                        }\r\n                        else\r\n                            formGroupObject[property.name] = super.getDefaultValue(property, entityObject[property.name], formBuilderConfiguration);\r\n                        extendedProperties[property.name] = true;\r\n                        break;\r\n                    case OBJECT_PROPERTY:\r\n                        let objectValue = entityObject[property.name];\r\n                        objectValue = !objectValue && property.defaultValue ? property.defaultValue : objectValue;\r\n                        if (!objectValue && property.objectConfig && property.objectConfig.autoCreate)\r\n                            objectValue = this.createClassObject(property.entity, {});\r\n                        if (objectValue && objectValue instanceof Object && !(objectValue instanceof FormGroup || objectValue instanceof RxFormGroup)) {\r\n                            this.isNestedBinding = this.isNested = true;\r\n                            if (instanceContainer && instanceContainer.conditionalObjectProps)\r\n                                this.conditionalObjectProps = instanceContainer.conditionalObjectProps.filter(t => t.objectPropName == property.name);\r\n                            if (this.conditionalValidationInstance && this.conditionalValidationInstance.conditionalObjectProps)\r\n                                this.builderConfigurationConditionalObjectProps = this.conditionalValidationInstance.conditionalObjectProps.filter(t => t.objectPropName == property.name);\r\n                            if (this.formGroupPropOtherValidator[property.name])\r\n                                this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator[property.name];\r\n                            let objectValidationConfig = this.getValidatorConfig(formBuilderConfiguration, objectValue, `${property.name}.`);\r\n                            let entity = property.entityProvider ? property.entityProvider.call(entityObject) : undefined;\r\n                            formGroupObject[property.name] = this.formGroup(entity || property.entity || this.getEntity(objectValue, formBuilderConfiguration, property.name, true), objectValue, objectValidationConfig);\r\n                            this.conditionalObjectProps = [];\r\n                            this.builderConfigurationConditionalObjectProps = [];\r\n                            this.isNestedBinding = this.isNested = false;\r\n                        }\r\n                        else if (objectValue instanceof FormGroup || objectValue instanceof RxFormGroup)\r\n                            formGroupObject[property.name] = objectValue;\r\n                        break;\r\n                    case ARRAY_PROPERTY:\r\n                        let arrayObjectValue = entityObject[property.name];\r\n                        if (arrayObjectValue && arrayObjectValue instanceof Array && !(arrayObjectValue instanceof FormArray)) {\r\n                            this.isNestedBinding = this.isNested = true;\r\n                            var formArrayGroup = [];\r\n                            let index = 0;\r\n                            let entity = property.entityProvider ? property.entityProvider.call(entityObject) : undefined;\r\n                            let objectValidationConfig = null;\r\n                            for (let subObject of arrayObjectValue) {\r\n                                if (instanceContainer && instanceContainer.conditionalObjectProps)\r\n                                    this.conditionalObjectProps = instanceContainer.conditionalObjectProps.filter(t => t.objectPropName == property.name && t.arrayIndex == index);\r\n                                if (this.conditionalValidationInstance && this.conditionalValidationInstance.conditionalObjectProps)\r\n                                    this.builderConfigurationConditionalObjectProps = this.conditionalValidationInstance.conditionalObjectProps.filter(t => t.objectPropName == property.name && t.arrayIndex == index);\r\n                                if (this.formGroupPropOtherValidator[property.name])\r\n                                    this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator[property.name];\r\n                                objectValidationConfig = this.getValidatorConfig(formBuilderConfiguration, subObject, `${property.name}.`, `${property.name}[${index}].`);\r\n                                formArrayGroup.push(this.formGroup(entity || property.entity || this.getEntity(subObject, formBuilderConfiguration, property.name, true), subObject, objectValidationConfig));\r\n                                index++;\r\n                                this.conditionalObjectProps = [];\r\n                                this.builderConfigurationConditionalObjectProps = [];\r\n                            }\r\n                            let abstractControlOptions = this.getAbstractControlOptions(property.name, formBuilderConfiguration, {});\r\n                            formGroupObject[property.name] = new RxFormArray(arrayObjectValue, formArrayGroup, abstractControlOptions, null, property.arrayConfig);\r\n                            if (ReactiveFormConfig.autoInstancePush) {\r\n                                arrayObjectValue.push = (instance) => { let formGroup = this.formGroup(instance.constructor, instance, objectValidationConfig); formGroupObject[property.name].push(formGroup, { isAddedInstance: true }); return 0; };\r\n                                arrayObjectValue.splice = (start, deleteCount) => {\r\n                                    let end = (start + deleteCount) - 1;\r\n                                    for (var i = start; i <= end; i++) {\r\n                                        formGroupObject[property.name].removeAt(i, { isRemovedInstance: true });\r\n                                    }\r\n                                    return [];\r\n                                };\r\n                            }\r\n                            this.isNestedBinding = this.isNested = false;\r\n                        }\r\n                        else if (arrayObjectValue instanceof FormArray)\r\n                            formGroupObject[property.name] = arrayObjectValue;\r\n                        else if (property.arrayConfig && property.arrayConfig.createBlank)\r\n                            formGroupObject[property.name] = new RxFormArray([], [], null, null, property.arrayConfig);\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n        if (!this.isNested) {\r\n            this.conditionalValidationInstance = {};\r\n            this.builderConfigurationConditionalObjectProps = [];\r\n        }\r\n        let abstractControlOptions = {\r\n            validators: [],\r\n            asyncValidators: [],\r\n            updateOn: formBuilderConfiguration && formBuilderConfiguration.abstractControlOptions && formBuilderConfiguration.abstractControlOptions['global']\r\n                ? formBuilderConfiguration.abstractControlOptions['global']\r\n                : undefined\r\n        };\r\n        abstractControlOptions = this.getAbstractControlOptions(\"global\", formBuilderConfiguration, abstractControlOptions);\r\n        let formGroup = new RxFormGroup(json.model, json.entityObject, formGroupObject, abstractControlOptions);\r\n        if (defaultContainer.isExperimental) {\r\n            json.entityObject[\"formGroup\"] = formGroup;\r\n            this.overrideProperties(formGroup, json.entityObject, extendedProperties);\r\n        }\r\n        if (!this.isNestedBinding && !this.isGroupCalled)\r\n            formGroup.refreshDisable();\r\n        return formGroup;\r\n    }\r\n    overrideProperties(formGroup, entityObject, properties) {\r\n        Object.keys(properties).forEach(t => {\r\n            this.overrideProp(entityObject, t, formGroup);\r\n        });\r\n    }\r\n    getAbstractControlOptions(name, formBuilderConfiguration, abstractControlOptions) {\r\n        if (formBuilderConfiguration && formBuilderConfiguration.abstractControlOptions && formBuilderConfiguration.abstractControlOptions[name])\r\n            abstractControlOptions.updateOn = formBuilderConfiguration.abstractControlOptions[name];\r\n        const controlOptions = formBuilderConfiguration ? formBuilderConfiguration.baseAbstractControlOptions : null;\r\n        if (controlOptions && controlOptions[name]) {\r\n            if (controlOptions[name].updateOn)\r\n                abstractControlOptions.updateOn = controlOptions[name].updateOn;\r\n            if (controlOptions[name].validators) {\r\n                if (Array.isArray(controlOptions[name].validators))\r\n                    controlOptions[name].validators.forEach(validator => abstractControlOptions.validators.push(validator));\r\n                else\r\n                    abstractControlOptions.validators.push(controlOptions[name].validators);\r\n            }\r\n            if (controlOptions[name].asyncValidators) {\r\n                if (Array.isArray(controlOptions[name].asyncValidators))\r\n                    controlOptions[name].asyncValidators.forEach(validator => abstractControlOptions.asyncValidators.push(validator));\r\n                else\r\n                    abstractControlOptions.asyncValidators.push(controlOptions[name].validators);\r\n            }\r\n        }\r\n        return abstractControlOptions;\r\n    }\r\n    overrideProp(entityObject, propName, formGroup) {\r\n        let descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(entityObject), propName);\r\n        let value = entityObject[propName];\r\n        let oldValue = null;\r\n        Object.defineProperty(entityObject, propName, {\r\n            get: () => { return descriptor ? descriptor.get.call(entityObject) : value; },\r\n            set: (v) => {\r\n                value = v;\r\n                if (oldValue != v) {\r\n                    if (descriptor)\r\n                        descriptor.set.call(entityObject, v);\r\n                    if (!formGroup.changing && formGroup.controls[propName]) {\r\n                        formGroup.controls[propName].setValue(v);\r\n                    }\r\n                }\r\n                oldValue = v;\r\n            }\r\n        });\r\n    }\r\n}\nRxFormBuilder.ɵfac = function RxFormBuilder_Factory(t) { return new (t || RxFormBuilder)(); };\nRxFormBuilder.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: RxFormBuilder, factory: RxFormBuilder.ɵfac });\r\nRxFormBuilder.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RxFormBuilder, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\nclass TypedFormBuilder {\r\n    constructor() {\r\n        this.formBuilder = new FormBuilder();\r\n        this.rxFormBuilder = new RxFormBuilder();\r\n    }\r\n    group(controlsConfig, options) {\r\n        let paramOptions = options || {};\r\n        if (typeof controlsConfig == FUNCTION_STRING)\r\n            return !(paramOptions && paramOptions.isInstance) ? this.rxFormBuilder.formGroup(controlsConfig, paramOptions.data, paramOptions.config) : this.rxFormBuilder.formGroup(controlsConfig, paramOptions.data, paramOptions.config).modelInstance;\r\n        return this.formBuilder.group(controlsConfig, options);\r\n    }\r\n}\nTypedFormBuilder.ɵfac = function TypedFormBuilder_Factory(t) { return new (t || TypedFormBuilder)(); };\nTypedFormBuilder.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TypedFormBuilder, factory: TypedFormBuilder.ɵfac });\r\nTypedFormBuilder.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TypedFormBuilder, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\nclass RxReactiveFormsModule {\r\n    static forRoot() { return { ngModule: RxReactiveFormsModule, providers: [] }; }\r\n}\nRxReactiveFormsModule.ɵfac = function RxReactiveFormsModule_Factory(t) { return new (t || RxReactiveFormsModule)(); };\nRxReactiveFormsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: RxReactiveFormsModule });\nRxReactiveFormsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [RxFormBuilder, DecimalProvider, DecimalPipe], imports: [[CommonModule, FormsModule, ReactiveFormsModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RxReactiveFormsModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [RxwebFormDirective, HtmlControlTemplateDirective, ControlHostDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective, AsyncValidationDirective],\n                imports: [CommonModule, FormsModule, ReactiveFormsModule],\n                providers: [RxFormBuilder, DecimalProvider, DecimalPipe],\n                exports: [AsyncValidationDirective, RxwebFormDirective, HtmlControlTemplateDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RxReactiveFormsModule, { declarations: function () { return [RxwebFormDirective, HtmlControlTemplateDirective, ControlHostDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective, AsyncValidationDirective]; }, imports: function () { return [CommonModule, FormsModule, ReactiveFormsModule]; }, exports: function () { return [AsyncValidationDirective, RxwebFormDirective, HtmlControlTemplateDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective]; } }); })();\r\n// Experimental\r\nclass ReactiveTypedFormsModule {\r\n    constructor() {\r\n        defaultContainer.isExperimental = true;\r\n        ReactiveFormConfig.autoInstancePush = true;\r\n    }\r\n    static forRoot() { return { ngModule: ReactiveTypedFormsModule, providers: [] }; }\r\n}\nReactiveTypedFormsModule.ɵfac = function ReactiveTypedFormsModule_Factory(t) { return new (t || ReactiveTypedFormsModule)(); };\nReactiveTypedFormsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ReactiveTypedFormsModule });\nReactiveTypedFormsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [{ provide: FormBuilder, useClass: TypedFormBuilder }, TypedFormBuilder], imports: [[CommonModule, FormsModule, ReactiveFormsModule, RxReactiveFormsModule.forRoot()], ReactiveFormsModule, FormsModule, ReactiveFormsModule] });\r\nReactiveTypedFormsModule.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ReactiveTypedFormsModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [],\n                imports: [CommonModule, FormsModule, ReactiveFormsModule, RxReactiveFormsModule.forRoot()],\n                providers: [{ provide: FormBuilder, useClass: TypedFormBuilder }, TypedFormBuilder],\n                exports: [ReactiveFormsModule, FormsModule, ReactiveFormsModule]\n            }]\n    }], function () { return []; }, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ReactiveTypedFormsModule, { imports: function () { return [CommonModule, FormsModule, ReactiveFormsModule, RxReactiveFormsModule]; }, exports: function () { return [ReactiveFormsModule, FormsModule, ReactiveFormsModule]; } }); })();\n\nfunction baseValidator(config, type, validator) {\r\n    var rxwebValidator = (control, target) => {\r\n        if (typeof control == STRING)\r\n            defaultContainer.init(target, 0, control, type, config, false);\r\n        else {\r\n            if (config && (!control.validatorConfig || !control.validatorConfig[type]))\r\n                ApplicationUtil.configureControl(control, config, type);\r\n            return validator(control);\r\n        }\r\n        return null;\r\n    };\r\n    Object.defineProperty(rxwebValidator, \"name\", { value: RX_WEB_VALIDATOR });\r\n    return rxwebValidator;\r\n}\r\nfunction baseAsyncValidatorExtension(config, type, validator) {\r\n    var rxwebValidator = (control, target) => {\r\n        if (typeof control == STRING)\r\n            defaultContainer.init(target, 0, control, type, config, true);\r\n        else {\r\n            if (config && (!control.validatorConfig || !control.validatorConfig[type]))\r\n                ApplicationUtil.configureControl(control, config, type);\r\n            return validator(control);\r\n        }\r\n        return null;\r\n    };\r\n    Object.defineProperty(rxwebValidator, \"name\", { value: RX_WEB_VALIDATOR });\r\n    return rxwebValidator;\r\n}\n\nfunction alphaValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.alpha, alphaValidator(config));\r\n}\r\nfunction alphaAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.alpha, baseAsyncValidator(config, AnnotationTypes.alpha));\r\n}\n\nfunction allOfValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.allOf, allOfValidator(config));\r\n}\r\nfunction allOfAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.allOf, baseAsyncValidator(config, AnnotationTypes.allOf));\r\n}\n\nfunction alphaNumericValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.alphaNumeric, alphaNumericValidator(config));\r\n}\r\nfunction alphaNumericAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.alphaNumeric, baseAsyncValidator(config, AnnotationTypes.alphaNumeric));\r\n}\n\nfunction choiceValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.choice, choiceValidator(config));\r\n}\r\nfunction choiceAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.choice, baseAsyncValidator(config, AnnotationTypes.choice));\r\n}\n\nfunction compareValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.compare, compareValidator(config));\r\n}\n\nfunction containsValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.contains, containsValidator(config));\r\n}\r\nfunction containsAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.contains, baseAsyncValidator(config, AnnotationTypes.contains));\r\n}\n\nfunction creditCardValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.creditCard, creditCardValidator(config));\r\n}\r\nfunction creditCardAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.creditCard, baseAsyncValidator(config, AnnotationTypes.creditCard));\r\n}\n\nfunction differentValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.different, differentValidator(config));\r\n}\n\nfunction digitValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.digit, digitValidator(config));\r\n}\n\nfunction emailValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.email, emailValidator(config));\r\n}\n\nfunction evenValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.even, evenValidator(config));\r\n}\n\nfunction factorValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.factor, factorValidator(config));\r\n}\r\nfunction factorAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.factor, baseAsyncValidator(config, AnnotationTypes.factor));\r\n}\n\nfunction greaterThanEqualToValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.greaterThanEqualTo, greaterThanEqualToValidator(config));\r\n}\r\nfunction greaterThanEqualToAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.greaterThanEqualTo, baseAsyncValidator(config, AnnotationTypes.greaterThanEqualTo));\r\n}\n\nfunction greaterThanValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.greaterThan, greaterThanValidator(config));\r\n}\r\nfunction greaterThanAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.greaterThan, baseAsyncValidator(config, AnnotationTypes.greaterThan));\r\n}\n\nfunction hexColorValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.hexColor, hexColorValidator(config));\r\n}\n\nfunction jsonValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.json, jsonValidator(config));\r\n}\n\nfunction leapYearValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.leapYear, leapYearValidator(config));\r\n}\n\nfunction lessThanEqualToValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.lessThanEqualTo, lessThanEqualToValidator(config));\r\n}\r\nfunction lessThanEqualToAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.lessThanEqualTo, baseAsyncValidator(config, AnnotationTypes.lessThanEqualTo));\r\n}\n\nfunction lessThanValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.lessThan, lessThanValidator(config));\r\n}\r\nfunction lessThanAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.lessThan, baseAsyncValidator(config, AnnotationTypes.lessThan));\r\n}\n\nfunction lowerCaseValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.lowerCase, lowercaseValidator(config));\r\n}\n\nfunction macValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.mac, macValidator(config));\r\n}\n\nfunction maxDateValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.maxDate, maxDateValidator(config));\r\n}\r\nfunction maxDateAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.maxDate, baseAsyncValidator(config, AnnotationTypes.maxDate));\r\n}\n\nfunction maxLengthValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.maxLength, maxLengthValidator(config));\r\n}\r\nfunction maxLengthAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.maxLength, baseAsyncValidator(config, AnnotationTypes.maxLength));\r\n}\n\nfunction maxNumberValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.maxNumber, maxNumberValidator(config));\r\n}\r\nfunction maxNumberAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.maxNumber, baseAsyncValidator(config, AnnotationTypes.maxNumber));\r\n}\n\nfunction minDateValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.minDate, minDateValidator(config));\r\n}\r\nfunction minDateAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.minDate, baseAsyncValidator(config, AnnotationTypes.minDate));\r\n}\n\nfunction minLengthValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.minLength, minLengthValidator(config));\r\n}\r\nfunction minLengthAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.minLength, baseAsyncValidator(config, AnnotationTypes.minLength));\r\n}\n\nfunction minNumberValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.minNumber, minNumberValidator(config));\r\n}\r\nfunction minNumberAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.minNumber, baseAsyncValidator(config, AnnotationTypes.minNumber));\r\n}\n\nfunction noneOfValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.noneOf, noneOfValidator(config));\r\n}\r\nfunction noneOfAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.noneOf, baseAsyncValidator(config, AnnotationTypes.noneOf));\r\n}\n\nfunction numericValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.numeric, numericValidator(config));\r\n}\r\nfunction numericAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.numeric, baseAsyncValidator(config, AnnotationTypes.numeric));\r\n}\n\nfunction oddValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.odd, oddValidator(config));\r\n}\n\nfunction oneOfValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.oneOf, oneOfValidator(config));\r\n}\r\nfunction oneOfAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.oneOf, baseAsyncValidator(config, AnnotationTypes.oneOf));\r\n}\n\nfunction passwordcValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.password, passwordValidator(config));\r\n}\r\nfunction passwordAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.password, baseAsyncValidator(config, AnnotationTypes.password));\r\n}\n\nfunction patternValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.pattern, patternValidator(config));\r\n}\r\nfunction patternAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.pattern, baseAsyncValidator(config, AnnotationTypes.pattern));\r\n}\n\nfunction rangeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.range, rangeValidator(config));\r\n}\r\nfunction rangeAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.range, baseAsyncValidator(config, AnnotationTypes.range));\r\n}\n\nfunction requiredValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.required, requiredValidator(config));\r\n}\n\nfunction timeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.time, timeValidator(config));\r\n}\r\nfunction timeAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.time, baseAsyncValidator(config, AnnotationTypes.time));\r\n}\n\nfunction upperCaseValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.upperCase, uppercaseValidator(config));\r\n}\n\nfunction urlValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.url, urlValidator(config));\r\n}\r\nfunction urlAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.url, baseAsyncValidator(config, AnnotationTypes.url));\r\n}\n\nfunction asciiValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.ascii, asciiValidator(config));\r\n}\n\nfunction dataUriValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.dataUri, dataUriValidator(config));\r\n}\n\nfunction portValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.port, portValidator(config));\r\n}\n\nfunction latLongValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.latLong, latLongValidator(config));\r\n}\n\nfunction extensionValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.extension, (control) => { return null; });\r\n}\r\nfunction extensionAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.extension, baseAsyncValidator(config, AnnotationTypes.extension));\r\n}\n\nfunction fileSizeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.fileSize, (control) => { return null; });\r\n}\r\nfunction fileSizeAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.fileSize, baseAsyncValidator(config, AnnotationTypes.fileSize));\r\n}\n\nfunction endsWithValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.endsWith, endsWithValidator(config));\r\n}\r\nfunction endsWithAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.endsWith, baseAsyncValidator(config, AnnotationTypes.endsWith));\r\n}\n\nfunction startsWithValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.startsWithWith, startsWithValidator(config));\r\n}\r\nfunction startsWithAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.startsWithWith, baseAsyncValidator(config, AnnotationTypes.startsWith));\r\n}\n\nfunction primeNumberValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.primeNumber, primeNumberValidator(config));\r\n}\n\nfunction latitudeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.latitude, latitudeValidator(config));\r\n}\n\nfunction longitudeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.longitude, longitudeValidator(config));\r\n}\n\nfunction composeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.compose, composeValidator(config));\r\n}\n\nfunction fileValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.file, (control) => { return null; });\r\n}\r\nfunction fileAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.file, baseAsyncValidator(config, AnnotationTypes.file));\r\n}\n\nfunction customValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.custom, customValidator(config));\r\n}\r\nfunction customAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.custom, baseAsyncValidator(config, AnnotationTypes.custom));\r\n}\n\nfunction uniqueValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.unique, uniqueValidator(config));\r\n}\n\nfunction imageValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.image, (control) => { return null; });\r\n}\r\nfunction imageAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.image, baseAsyncValidator(config, AnnotationTypes.image));\r\n}\n\nfunction notEmptyValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.notEmpty, notEmptyValidator(config));\r\n}\n\nfunction ipValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.ip, ipValidator(config));\r\n}\r\nfunction ipAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.ip, baseAsyncValidator(config, AnnotationTypes.ip));\r\n}\n\nfunction cusipValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.cusip, cusipValidator(config));\r\n}\n\nfunction gridValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.grid, gridValidator(config));\r\n}\n\nfunction dateValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.date, dateValidator(config));\r\n}\r\nfunction dateAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.date, baseAsyncValidator(config, AnnotationTypes.date));\r\n}\n\nfunction andValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.and, andValidator(config));\r\n}\n\nfunction orValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.or, orValidator(config));\r\n}\n\nfunction notValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.not, notValidator(config));\r\n}\n\nfunction minTimeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.minTime, minTimeValidator(config));\r\n}\r\nfunction minTimeAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.minTime, baseAsyncValidator(config, AnnotationTypes.minTime));\r\n}\n\nfunction maxTimeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.maxTime, maxTimeValidator(config));\r\n}\r\nfunction maxTimeAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.maxTime, baseAsyncValidator(config, AnnotationTypes.maxTime));\r\n}\n\nfunction requiredTrueValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.requiredTrue, requiredTrueValidator(config));\r\n}\n\nfunction maskValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.mask, maskValidator(config));\r\n}\n\nfunction ibanValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.iban, ibanValidator(config));\r\n}\r\nfunction ibanAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.iban, baseAsyncValidator(config, AnnotationTypes.iban));\r\n}\n\nclass RxwebValidators {\r\n}\r\nRxwebValidators.alpha = alphaValidatorExtension;\r\nRxwebValidators.allOf = allOfValidatorExtension;\r\nRxwebValidators.alphaNumeric = alphaNumericValidatorExtension;\r\nRxwebValidators.choice = choiceValidatorExtension;\r\nRxwebValidators.compare = compareValidatorExtension;\r\nRxwebValidators.contains = containsValidatorExtension;\r\nRxwebValidators.creditCard = creditCardValidatorExtension;\r\nRxwebValidators.different = differentValidatorExtension;\r\nRxwebValidators.digit = digitValidatorExtension;\r\nRxwebValidators.email = emailValidatorExtension;\r\nRxwebValidators.even = evenValidatorExtension;\r\nRxwebValidators.factor = factorValidatorExtension;\r\nRxwebValidators.greaterThanEqualTo = greaterThanEqualToValidatorExtension;\r\nRxwebValidators.greaterThan = greaterThanValidatorExtension;\r\nRxwebValidators.hexColor = hexColorValidatorExtension;\r\nRxwebValidators.json = jsonValidatorExtension;\r\nRxwebValidators.leapYear = leapYearValidatorExtension;\r\nRxwebValidators.lessThanEqualTo = lessThanEqualToValidatorExtension;\r\nRxwebValidators.lessThan = lessThanValidatorExtension;\r\nRxwebValidators.lowerCase = lowerCaseValidatorExtension;\r\nRxwebValidators.mac = macValidatorExtension;\r\nRxwebValidators.maxDate = maxDateValidatorExtension;\r\nRxwebValidators.maxLength = maxLengthValidatorExtension;\r\nRxwebValidators.maxNumber = maxNumberValidatorExtension;\r\nRxwebValidators.minDate = minDateValidatorExtension;\r\nRxwebValidators.minLength = minLengthValidatorExtension;\r\nRxwebValidators.minNumber = minNumberValidatorExtension;\r\nRxwebValidators.noneOf = noneOfValidatorExtension;\r\nRxwebValidators.numeric = numericValidatorExtension;\r\nRxwebValidators.odd = oddValidatorExtension;\r\nRxwebValidators.oneOf = oneOfValidatorExtension;\r\nRxwebValidators.password = passwordcValidatorExtension;\r\nRxwebValidators.pattern = patternValidatorExtension;\r\nRxwebValidators.range = rangeValidatorExtension;\r\nRxwebValidators.required = requiredValidatorExtension;\r\nRxwebValidators.time = timeValidatorExtension;\r\nRxwebValidators.upperCase = upperCaseValidatorExtension;\r\nRxwebValidators.url = urlValidatorExtension;\r\nRxwebValidators.ascii = asciiValidatorExtension;\r\nRxwebValidators.dataUri = dataUriValidatorExtension;\r\nRxwebValidators.port = portValidatorExtension;\r\nRxwebValidators.latLong = latLongValidatorExtension;\r\nRxwebValidators.extension = extensionValidatorExtension;\r\nRxwebValidators.fileSize = fileSizeValidatorExtension;\r\nRxwebValidators.endsWith = endsWithValidatorExtension;\r\nRxwebValidators.startsWith = startsWithValidatorExtension;\r\nRxwebValidators.primeNumber = primeNumberValidatorExtension;\r\nRxwebValidators.latitude = latitudeValidatorExtension;\r\nRxwebValidators.longitude = longitudeValidatorExtension;\r\nRxwebValidators.compose = composeValidatorExtension;\r\nRxwebValidators.file = fileValidatorExtension;\r\nRxwebValidators.custom = customValidatorExtension;\r\nRxwebValidators.unique = uniqueValidatorExtension;\r\nRxwebValidators.image = imageValidatorExtension;\r\nRxwebValidators.notEmpty = notEmptyValidatorExtension;\r\nRxwebValidators.ip = ipValidatorExtension;\r\nRxwebValidators.cusip = cusipValidatorExtension;\r\nRxwebValidators.grid = gridValidatorExtension;\r\nRxwebValidators.date = dateValidatorExtension;\r\nRxwebValidators.and = andValidatorExtension;\r\nRxwebValidators.or = orValidatorExtension;\r\nRxwebValidators.not = notValidatorExtension;\r\nRxwebValidators.minTime = minTimeValidatorExtension;\r\nRxwebValidators.maxTime = maxTimeValidatorExtension;\r\nRxwebValidators.requiredTrue = requiredTrueValidatorExtension;\r\nRxwebValidators.mask = maskValidatorExtension;\r\nRxwebValidators.iban = ibanValidatorExtension;\r\nRxwebValidators.alphaAsync = alphaAsyncValidatorExtension;\r\nRxwebValidators.alphaNumericAsync = alphaNumericAsyncValidatorExtension;\r\nRxwebValidators.allOfAsync = allOfAsyncValidatorExtension;\r\nRxwebValidators.choiceAsync = choiceAsyncValidatorExtension;\r\nRxwebValidators.containsAsync = containsAsyncValidatorExtension;\r\nRxwebValidators.creditCardAsync = creditCardAsyncValidatorExtension;\r\nRxwebValidators.customAsync = customAsyncValidatorExtension;\r\nRxwebValidators.dateAsync = dateAsyncValidatorExtension;\r\nRxwebValidators.endsWithAsync = endsWithAsyncValidatorExtension;\r\nRxwebValidators.extensionAsync = extensionAsyncValidatorExtension;\r\nRxwebValidators.factorAsync = factorAsyncValidatorExtension;\r\nRxwebValidators.fileSizeAsync = fileSizeAsyncValidatorExtension;\r\nRxwebValidators.fileAsync = fileAsyncValidatorExtension;\r\nRxwebValidators.greaterThanEqualToAsync = greaterThanEqualToAsyncValidatorExtension;\r\nRxwebValidators.greaterThanAsync = greaterThanAsyncValidatorExtension;\r\nRxwebValidators.imageAsync = imageAsyncValidatorExtension;\r\nRxwebValidators.ipAsync = ipAsyncValidatorExtension;\r\nRxwebValidators.lessThanEqualToAsync = lessThanEqualToAsyncValidatorExtension;\r\nRxwebValidators.lessThanAsync = lessThanAsyncValidatorExtension;\r\nRxwebValidators.maxDateAsync = maxDateAsyncValidatorExtension;\r\nRxwebValidators.maxLengthAsync = maxLengthAsyncValidatorExtension;\r\nRxwebValidators.maxNumberAsync = maxNumberAsyncValidatorExtension;\r\nRxwebValidators.maxTimeAsync = maxTimeAsyncValidatorExtension;\r\nRxwebValidators.minDateAsync = minDateAsyncValidatorExtension;\r\nRxwebValidators.minLengthAsync = minLengthAsyncValidatorExtension;\r\nRxwebValidators.minNumberAsync = minNumberAsyncValidatorExtension;\r\nRxwebValidators.minTimeAsync = minTimeAsyncValidatorExtension;\r\nRxwebValidators.noneOfAsync = noneOfAsyncValidatorExtension;\r\nRxwebValidators.numericAsync = numericAsyncValidatorExtension;\r\nRxwebValidators.oneOfAsync = oneOfAsyncValidatorExtension;\r\nRxwebValidators.passwordAsync = passwordAsyncValidatorExtension;\r\nRxwebValidators.patternAsync = patternAsyncValidatorExtension;\r\nRxwebValidators.rangeAsync = rangeAsyncValidatorExtension;\r\nRxwebValidators.startsWithAsync = startsWithAsyncValidatorExtension;\r\nRxwebValidators.timeAsync = timeAsyncValidatorExtension;\r\nRxwebValidators.urlAsync = urlAsyncValidatorExtension;\r\nRxwebValidators.ibanAsync = ibanAsyncValidatorExtension;\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AsyncValidationDirective, ErrorMessageBindingStrategy, FileControlDirective, FormBuilderConfiguration, HtmlControlTemplateDirective, IAbstractControl, ImageFileControlDirective, IpVersion, NumericValueType, ReactiveFormConfig, ReactiveTypedFormsModule, ResetFormType, RxFormArray, RxFormBuilder, RxFormControl, RxFormControlDirective, RxFormGroup, RxReactiveFormsModule, RxwebFormDirective, RxwebValidators, TypedForm, TypedFormBuilder, UrlValidationType, ValidationAlphabetLocale, allOf, allOfAsync, alpha, alphaAsync, alphaNumeric, alphaNumericAsync, and, ascii, async, blacklist, choice, choiceAsync, compare, compose, contains, containsAsync, creditCard, creditCardAsync, cusip, custom, customAsync, dataUri, date, dateAsync, different, digit, disable, elementClass, email, endsWith, endsWithAsync, error, escape, even, extension, extensionAsync, factor, factorAsync, file, fileAsync, fileSize, fileSizeAsync, greaterThan, greaterThanAsync, greaterThanEqualTo, greaterThanEqualToAsync, grid, hexColor, image, imageAsync, json, latLong, latitude, leapYear, lessThan, lessThanAsync, lessThanEqualTo, lessThanEqualToAsync, longitude, lowerCase, ltrim, mac, mask, maxDate, maxDateAsync, maxLength, maxLengthAsync, maxNumber, maxNumberAsync, maxTime, maxTimeAsync, minDate, minDateAsync, minLength, minLengthAsync, minNumber, minNumberAsync, minTime, minTimeAsync, model, noneOf, noneOfAsync, not, notEmpty, numeric, numericAsync, odd, oneOf, oneOfAsync, or, password, passwordAsync, pattern, patternAsync, port, prefix, primeNumber, prop, propArray, propObject, range, rangeAsync, required, requiredTrue, rtrim, rule, sanitize, startsWith, startsWithAsync, stripLow, suffix, time, timeAsync, toBoolean, toDate, toDouble, toFloat, toInt, toString, trim, unique, updateOn, upperCase, url, urlAsync, whitelist, BaseDirective as ɵa, BaseValidator as ɵb, ControlExpressionProcess as ɵc, DecimalProvider as ɵd, ControlHostDirective as ɵf, BaseFormBuilder as ɵg };\n\n","import { Injectable } from '@angular/core';\r\nimport { Ng2IzitoastService } from 'ng2-izitoast';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastService {\r\n\r\n  constructor(\r\n    public iziToast: Ng2IzitoastService\r\n  ) { }\r\n\r\n  successMessage(title: string, msg: string) {\r\n    this.iziToast.success({\r\n      title: title,\r\n      message: msg,\r\n      layout: 2,\r\n      balloon: false,\r\n      position: \"topRight\",\r\n      progressBarColor: \"red\",\r\n      pauseOnHover: true,\r\n    });\r\n  }\r\n\r\n  errorMessage(title: string, msg: string) {\r\n    this.iziToast.error({\r\n      title: title,\r\n      message: msg,\r\n      layout: 2,\r\n      balloon: false,\r\n      position: \"topRight\",\r\n      progressBarColor: \"red\",\r\n      pauseOnHover: true,\r\n    });\r\n  }\r\n\r\n  infoMessage(title: string, msg: string) {\r\n    this.iziToast.info({\r\n      title: title,\r\n      message: msg,\r\n      layout: 2,\r\n      balloon: false,\r\n      position: \"topRight\",\r\n      progressBarColor: \"red\",\r\n      pauseOnHover: true,\r\n    });\r\n  }\r\n\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///"}