{"version":3,"mappings":"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","names":["i0","_r6","ctx_r1","NgOtpInputComponent_div_0_input_1_Template","ctx_r0","KeyboardUtil","event","ifKey","keys","keysToCheck","split","some","k","key","KeysPipe","transform","value","Object","ɵfac","ɵpipe","name","type","pure","Pipe","args","NgOtpInputComponent","constructor","keysPipe","config","length","onInputChange","EventEmitter","inputControls","Array","componentKey","Math","random","toString","substring","Date","getTime","_a","_b","isPasswordInput","allowNumbersOnly","ngOnInit","otpForm","FormGroup","index","addControl","getControlName","FormControl","valueChanges","subscribe","v","controls","forEach","val","setValue","rebuildValue","ngAfterViewInit","disableAutoFocus","containerItem","document","getElementById","ele","getElementsByClassName","focus","idx","onKeyDown","$event","inputIdx","prevInputId","getBoxId","currentInputId","ifSpacebar","preventDefault","ifBackspace","target","clearInput","setSelected","onInput","newVal","currentVal","validateNumber","stopPropagation","onKeyUp","ifTab","nextInputId","ifRightArrow","ifLeftArrow","ifDelete","ifValidKeyCode","test","eleId","ctrlName","HTMLInputElement","focusTo","setSelectionRange","setTimeout","inp","isMobile","navigator","userAgent","isNaN","reset","replace","from","c","get","indexOfElementToFocus","ctrlVal","isLengthExceed","isCaseTransformEnabled","letterCase","toLocaleLowerCase","transformedVal","toUpperCase","toLowerCase","formCtrl","emit","handlePaste","e","clipboardData","window","pastedData","getData","ɵcmp","selectors","inputs","outputs","decls","vars","consts","template","NgOtpInputComponent_div_0_Template","ctx","directives","i2","i3","pipes","styles","Component","selector","Input","Output","NgOtpInputModule","ɵmod","ɵinj","providers","imports","CommonModule","FormsModule","ReactiveFormsModule","NgModule","declarations","exports","Config"],"sources":["webpack:///node_modules/ng-otp-input/fesm2015/ng-otp-input.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Pipe, EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass KeyboardUtil {\r\n    static ifTab(event) {\r\n        return this.ifKey(event, 'Tab');\r\n    }\r\n    static ifDelete(event) {\r\n        return this.ifKey(event, 'Delete;Del');\r\n    }\r\n    static ifBackspace(event) {\r\n        return this.ifKey(event, 'Backspace');\r\n    }\r\n    static ifRightArrow(event) {\r\n        return this.ifKey(event, 'ArrowRight;Right');\r\n    }\r\n    static ifLeftArrow(event) {\r\n        return this.ifKey(event, 'ArrowLeft;Left');\r\n    }\r\n    static ifSpacebar(event) {\r\n        return this.ifKey(event, 'Spacebar; '); //don't remove the space after ; as this will check for space key\r\n    }\r\n    static ifKey(event, keys) {\r\n        let keysToCheck = keys.split(';');\r\n        return keysToCheck.some(k => k === event.key);\r\n    }\r\n}\n\nclass KeysPipe {\r\n    transform(value) {\r\n        return Object.keys(value);\r\n    }\r\n}\r\n/** @nocollapse */ KeysPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: KeysPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\r\n/** @nocollapse */ KeysPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: KeysPipe, name: \"keys\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: KeysPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'keys'\r\n                }]\r\n        }] });\n\nclass NgOtpInputComponent {\r\n    constructor(keysPipe) {\r\n        this.keysPipe = keysPipe;\r\n        this.config = { length: 4 };\r\n        // tslint:disable-next-line: no-output-on-prefix\r\n        this.onInputChange = new EventEmitter();\r\n        this.inputControls = new Array(this.config.length);\r\n        this.componentKey = Math.random()\r\n            .toString(36)\r\n            .substring(2) + new Date().getTime().toString(36);\r\n    }\r\n    get inputType() {\r\n        var _a, _b;\r\n        return ((_a = this.config) === null || _a === void 0 ? void 0 : _a.isPasswordInput)\r\n            ? 'password'\r\n            : ((_b = this.config) === null || _b === void 0 ? void 0 : _b.allowNumbersOnly)\r\n                ? 'tel'\r\n                : 'text';\r\n    }\r\n    ngOnInit() {\r\n        this.otpForm = new FormGroup({});\r\n        for (let index = 0; index < this.config.length; index++) {\r\n            this.otpForm.addControl(this.getControlName(index), new FormControl());\r\n        }\r\n        this.otpForm.valueChanges.subscribe((v) => {\r\n            this.keysPipe.transform(this.otpForm.controls).forEach((k) => {\r\n                var val = this.otpForm.controls[k].value;\r\n                if (val && val.length > 1) {\r\n                    if (val.length >= this.config.length) {\r\n                        this.setValue(val);\r\n                    }\r\n                    else {\r\n                        this.rebuildValue();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ngAfterViewInit() {\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            if (containerItem) {\r\n                const ele = containerItem.getElementsByClassName('otp-input')[0];\r\n                if (ele && ele.focus) {\r\n                    ele.focus();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getControlName(idx) {\r\n        return `ctrl_${idx}`;\r\n    }\r\n    onKeyDown($event, inputIdx) {\r\n        const prevInputId = this.getBoxId(inputIdx - 1);\r\n        const currentInputId = this.getBoxId(inputIdx);\r\n        if (KeyboardUtil.ifSpacebar($event)) {\r\n            $event.preventDefault();\r\n            return false;\r\n        }\r\n        if (KeyboardUtil.ifBackspace($event)) {\r\n            if (!$event.target.value) {\r\n                this.clearInput(prevInputId, inputIdx - 1);\r\n                this.setSelected(prevInputId);\r\n            }\r\n            else {\r\n                this.clearInput(currentInputId, inputIdx);\r\n            }\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n    }\r\n    onInput($event) {\r\n        let newVal = this.currentVal ? `${this.currentVal}${$event.target.value}` : $event.target.value;\r\n        if (this.config.allowNumbersOnly && !this.validateNumber(newVal)) {\r\n            $event.target.value = '';\r\n            $event.stopPropagation();\r\n            $event.preventDefault();\r\n            return;\r\n        }\r\n    }\r\n    onKeyUp($event, inputIdx) {\r\n        if (KeyboardUtil.ifTab($event)) {\r\n            inputIdx -= 1;\r\n        }\r\n        const nextInputId = this.getBoxId(inputIdx + 1);\r\n        const prevInputId = this.getBoxId(inputIdx - 1);\r\n        const currentInputId = this.getBoxId(inputIdx);\r\n        if (KeyboardUtil.ifRightArrow($event)) {\r\n            $event.preventDefault();\r\n            this.setSelected(nextInputId);\r\n            return;\r\n        }\r\n        if (KeyboardUtil.ifLeftArrow($event)) {\r\n            $event.preventDefault();\r\n            this.setSelected(prevInputId);\r\n            return;\r\n        }\r\n        if (KeyboardUtil.ifDelete($event)) {\r\n            if (!$event.target.value) {\r\n                this.clearInput(prevInputId, inputIdx - 1);\r\n                this.setSelected(prevInputId);\r\n            }\r\n            else {\r\n                this.clearInput(currentInputId, inputIdx);\r\n            }\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        if (!$event.target.value) {\r\n            return;\r\n        }\r\n        if (this.ifValidKeyCode($event)) {\r\n            this.setSelected(nextInputId);\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    validateNumber(val) {\r\n        return val && /^\\d*\\.?\\d*$/.test(val);\r\n    }\r\n    getBoxId(idx) {\r\n        return `otp_${idx}_${this.componentKey}`;\r\n    }\r\n    clearInput(eleId, inputIdx) {\r\n        var _a;\r\n        let ctrlName = this.getControlName(inputIdx);\r\n        (_a = this.otpForm.controls[ctrlName]) === null || _a === void 0 ? void 0 : _a.setValue(null);\r\n        const ele = document.getElementById(eleId);\r\n        if (ele && ele instanceof HTMLInputElement) {\r\n            ele.value = null;\r\n        }\r\n    }\r\n    setSelected(eleId) {\r\n        this.focusTo(eleId);\r\n        const ele = document.getElementById(eleId);\r\n        if (ele && ele.setSelectionRange) {\r\n            setTimeout(() => {\r\n                ele.setSelectionRange(0, 1);\r\n            }, 0);\r\n        }\r\n    }\r\n    ifValidKeyCode(event) {\r\n        const inp = event.key;\r\n        const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n        return (isMobile ||\r\n            /[a-zA-Z0-9-_]/.test(inp));\r\n    }\r\n    focusTo(eleId) {\r\n        const ele = document.getElementById(eleId);\r\n        if (ele) {\r\n            ele.focus();\r\n        }\r\n    }\r\n    // method to set component value\r\n    setValue(value) {\r\n        if (this.config.allowNumbersOnly && isNaN(value)) {\r\n            return;\r\n        }\r\n        this.otpForm.reset();\r\n        if (!value) {\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        value = value.toString().replace(/\\s/g, ''); // remove whitespace\r\n        Array.from(value).forEach((c, idx) => {\r\n            if (this.otpForm.get(this.getControlName(idx))) {\r\n                this.otpForm.get(this.getControlName(idx)).setValue(c);\r\n            }\r\n        });\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            var indexOfElementToFocus = value.length < this.config.length ? value.length : (this.config.length - 1);\r\n            let ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];\r\n            if (ele && ele.focus) {\r\n                ele.focus();\r\n            }\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    rebuildValue() {\r\n        var _a;\r\n        let val = '';\r\n        this.keysPipe.transform(this.otpForm.controls).forEach(k => {\r\n            if (this.otpForm.controls[k].value) {\r\n                let ctrlVal = this.otpForm.controls[k].value;\r\n                let isLengthExceed = ctrlVal.length > 1;\r\n                let isCaseTransformEnabled = !this.config.allowNumbersOnly && this.config.letterCase && (this.config.letterCase.toLocaleLowerCase() == 'upper' || this.config.letterCase.toLocaleLowerCase() == 'lower');\r\n                ctrlVal = ctrlVal[0];\r\n                let transformedVal = isCaseTransformEnabled ? this.config.letterCase.toLocaleLowerCase() == 'upper' ? ctrlVal.toUpperCase() : ctrlVal.toLowerCase() : ctrlVal;\r\n                if (isCaseTransformEnabled && transformedVal == ctrlVal) {\r\n                    isCaseTransformEnabled = false;\r\n                }\r\n                else {\r\n                    ctrlVal = transformedVal;\r\n                }\r\n                val += ctrlVal;\r\n                if (isLengthExceed || isCaseTransformEnabled) {\r\n                    this.otpForm.controls[k].setValue(ctrlVal);\r\n                }\r\n            }\r\n        });\r\n        if ((_a = this.formCtrl) === null || _a === void 0 ? void 0 : _a.setValue) {\r\n            this.formCtrl.setValue(val);\r\n        }\r\n        this.onInputChange.emit(val);\r\n        this.currentVal = val;\r\n    }\r\n    handlePaste(e) {\r\n        // Get pasted data via clipboard API\r\n        let clipboardData = e.clipboardData || window['clipboardData'];\r\n        if (clipboardData) {\r\n            var pastedData = clipboardData.getData('Text');\r\n        }\r\n        // Stop data actually being pasted into div\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        if (!pastedData || (this.config.allowNumbersOnly && !this.validateNumber(pastedData))) {\r\n            return;\r\n        }\r\n        this.setValue(pastedData);\r\n    }\r\n}\r\n/** @nocollapse */ NgOtpInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputComponent, deps: [{ token: KeysPipe }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgOtpInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: NgOtpInputComponent, selector: \"ng-otp-input\", inputs: { config: \"config\", formCtrl: \"formCtrl\" }, outputs: { onInputChange: \"onInputChange\" }, ngImport: i0, template: \"<div class=\\\"ng-otp-input-wrapper wrapper {{config.containerClass}}\\\" id=\\\"c_{{componentKey}}\\\" *ngIf=\\\"otpForm?.controls\\\"\\r\\n  [ngStyle]=\\\"config.containerStyles\\\">\\r\\n  <input (paste)=\\\"handlePaste($event)\\\" [pattern]=\\\"config.allowNumbersOnly ? '\\\\\\\\d*' : ''\\\" [type]=\\\"inputType\\\"  [placeholder]=\\\"config?.placeholder || ''\\\"\\r\\n    [ngStyle]=\\\"config.inputStyles\\\" \\r\\n    class=\\\"otp-input {{config.inputClass}}\\\" autocomplete=\\\"one-time-code\\\" *ngFor=\\\"let item of otpForm?.controls | keys;let i=index\\\"\\r\\n    [formControl]=\\\"otpForm.controls[item]\\\" #inp [id]=\\\"getBoxId(i)\\\" \\r\\n    (keyup)=\\\"onKeyUp($event,i)\\\" (input)=\\\"onInput($event)\\\" (keydown)=\\\"onKeyDown($event,i)\\\" >\\r\\n</div>\", styles: [\".otp-input{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.ng-otp-input-wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input{width:30px;font-size:18px;height:30px}}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i3.PatternValidator, selector: \"[pattern][formControlName],[pattern][formControl],[pattern][ngModel]\", inputs: [\"pattern\"] }, { type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i3.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }], pipes: { \"keys\": KeysPipe } });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ng-otp-input', template: \"<div class=\\\"ng-otp-input-wrapper wrapper {{config.containerClass}}\\\" id=\\\"c_{{componentKey}}\\\" *ngIf=\\\"otpForm?.controls\\\"\\r\\n  [ngStyle]=\\\"config.containerStyles\\\">\\r\\n  <input (paste)=\\\"handlePaste($event)\\\" [pattern]=\\\"config.allowNumbersOnly ? '\\\\\\\\d*' : ''\\\" [type]=\\\"inputType\\\"  [placeholder]=\\\"config?.placeholder || ''\\\"\\r\\n    [ngStyle]=\\\"config.inputStyles\\\" \\r\\n    class=\\\"otp-input {{config.inputClass}}\\\" autocomplete=\\\"one-time-code\\\" *ngFor=\\\"let item of otpForm?.controls | keys;let i=index\\\"\\r\\n    [formControl]=\\\"otpForm.controls[item]\\\" #inp [id]=\\\"getBoxId(i)\\\" \\r\\n    (keyup)=\\\"onKeyUp($event,i)\\\" (input)=\\\"onInput($event)\\\" (keydown)=\\\"onKeyDown($event,i)\\\" >\\r\\n</div>\", styles: [\".otp-input{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.ng-otp-input-wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input{width:30px;font-size:18px;height:30px}}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: KeysPipe }]; }, propDecorators: { config: [{\r\n                type: Input\r\n            }], onInputChange: [{\r\n                type: Output\r\n            }], formCtrl: [{\r\n                type: Input\r\n            }] } });\n\nclass NgOtpInputModule {\r\n}\r\n/** @nocollapse */ NgOtpInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgOtpInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputModule, declarations: [NgOtpInputComponent, KeysPipe], imports: [CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule], exports: [NgOtpInputComponent] });\r\n/** @nocollapse */ NgOtpInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputModule, providers: [KeysPipe], imports: [[\r\n            CommonModule,\r\n            FormsModule,\r\n            ReactiveFormsModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule,\r\n                        FormsModule,\r\n                        ReactiveFormsModule\r\n                    ],\r\n                    declarations: [NgOtpInputComponent, KeysPipe],\r\n                    exports: [NgOtpInputComponent],\r\n                    providers: [KeysPipe]\r\n                }]\r\n        }] });\n\nclass Config {\r\n}\n\n/*\r\n * Public API Surface of ng-otp-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgOtpInputComponent, Config as NgOtpInputConfig, NgOtpInputModule };\n"]}