{"version":3,"mappings":"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","names":["LoginService","http","src_app_shared_config_app_constant__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","login","post","uri","user_id","get","userId","department","lastloggedin","departmentname","next","logouttime","userName","userapi","_angular_core__WEBPACK_IMPORTED_MODULE_2__","factory","providedIn","ToastService","iziToast","title","msg","success","message","layout","balloon","position","progressBarColor","pauseOnHover","error","info","_angular_core__WEBPACK_IMPORTED_MODULE_1__","routes","path","component","_forget_password_component__WEBPACK_IMPORTED_MODULE_0__","ForgetPasswordRoutingModule","_angular_router__WEBPACK_IMPORTED_MODULE_2__","imports","exports","_angular_core__WEBPACK_IMPORTED_MODULE_5__","ForgetPasswordComponent","router","route","apiService","fb","toastService","securityService","allowNumbersOnly","length","isPasswordInput","disableAutoFocus","placeholder","inputStyles","width","height","Login","queryParams","subscribe","params","modifyUserObject","username","isReadOnly","button2","reactiveForm","group","_angular_forms__WEBPACK_IMPORTED_MODULE_6__","otp","password","passwordRegex","maxPass","minPass","confirmPassword","localStorage","getItem","a","b","fetchSecurityPolicyService","resp","security","console","log","minPswdLength","maxPswdLength","buildForm","security1","ucase","pswdComplexUcase","lcase","pswdComplexLcase","num","pswdComplexNum","splc","pswdComplexSplc","errorMsg","reset","infoMessage","encryptedAES","crypto_js__WEBPACK_IMPORTED_MODULE_0__","USERNAME","data","toString","uname","login1","spinnerbutton","forgetPassword","res","var1","otpBtn","submitBtn","sweetalert2__WEBPACK_IMPORTED_MODULE_1___default","text","clickvalue","loginProcessing","fetchMedUser","response","user","email","setItem","sessionStorage","passwordReset1","getOtpForReset","button1","successMessage","getOtpButtonEnable","err","navigate","setValue","newPassword","pswdReuseAft","clear","selectors","viewQuery","ctx","ForgetPasswordModule","_angular_common__WEBPACK_IMPORTED_MODULE_3__","_forget_password_routing_module__WEBPACK_IMPORTED_MODULE_0__","_angular_forms__WEBPACK_IMPORTED_MODULE_4__","ng_otp_input__WEBPACK_IMPORTED_MODULE_5__","declarations","_forget_password_component__WEBPACK_IMPORTED_MODULE_1__"],"sources":["webpack:///src/app/shared/services/login.service.ts","webpack:///src/app/shared/services/toast.service.ts","webpack:///src/app/views/forget-password/forget-password-routing.module.ts","webpack:///src/app/views/forget-password/forget-password.component.html","webpack:///src/app/views/forget-password/forget-password.component.ts","webpack:///src/app/views/forget-password/forget-password.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AppConstants } from 'src/app/shared/config/app.constant';\r\n// import { any } from 'src/app/shared/models/user';\r\n// import  } from 'src/app/shared/models/login';\r\n// import { any } from '../security-policy/security-policy/security-dto';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n  private uri = AppConstants.baseURL;\r\n  dashboardapi =  AppConstants.baseURL + '/dashboard';\r\n  userapi= AppConstants.baseURL + '/users';\r\n  public departmentname:BehaviorSubject<any> = new BehaviorSubject<any>('');\r\n  public logouttime:BehaviorSubject<any> = new BehaviorSubject<any>('');\r\n\r\n  constructor(private http: HttpClient) { }\r\n  getOtp(login) {\r\n    return this.http.post<any>(`${this.uri}/login/otp`, login);\r\n  }\r\n  loginService(login) {\r\n    return this.http.post<any>(`${this.uri}/login/credentials`, login);\r\n  }\r\n  forgetPassword(login) {\r\n    return this.http.post<any>(`${this.uri}/login/forgetPsw`, login);\r\n  }\r\n  fristTimePassword(login) {\r\n    return this.http.post<any>(`${this.uri}/user/passwordReset`, login);\r\n  }\r\n  getOtpForReset(login) {\r\n    return this.http.post<any>(`${this.uri}/users/otpForReset`, login);\r\n  }\r\n  userPasswordExpireNotif(user_id) {\r\n    return this.http.get(`${this.uri}/login/pwdNotif/${user_id}`);\r\n  }\r\n   \r\n  fetchSecurityPolicyService() {\r\n    return this.http.get<any>(`${this.uri}/securityPolicy/fetch`);\r\n  }\r\n  fetchMedUser(userId) {\r\n    return this.http.get<any>(`${this.uri}/login/getUserByUserId/${userId}`);\r\n  }\r\n\r\n  settingdepartmentlogged(department, lastloggedin)\r\n  {\r\n     this.departmentname.next(department);\r\n     this.logouttime.next(lastloggedin);\r\n  }\r\n\r\n  gettingloginTimeandDepartment(userName)\r\n  {\r\n    return this.http.get<any>(`${this.userapi}/loganddept/${userName}`)\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Ng2IzitoastService } from 'ng2-izitoast';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastService {\r\n\r\n  constructor(\r\n    public iziToast: Ng2IzitoastService\r\n  ) { }\r\n\r\n  successMessage(title: string, msg: string) {\r\n    this.iziToast.success({\r\n      title: title,\r\n      message: msg,\r\n      layout: 2,\r\n      balloon: false,\r\n      position: \"topRight\",\r\n      progressBarColor: \"red\",\r\n      pauseOnHover: true,\r\n    });\r\n  }\r\n\r\n  errorMessage(title: string, msg: string) {\r\n    this.iziToast.error({\r\n      title: title,\r\n      message: msg,\r\n      layout: 2,\r\n      balloon: false,\r\n      position: \"topRight\",\r\n      progressBarColor: \"red\",\r\n      pauseOnHover: true,\r\n    });\r\n  }\r\n\r\n  infoMessage(title: string, msg: string) {\r\n    this.iziToast.info({\r\n      title: title,\r\n      message: msg,\r\n      layout: 2,\r\n      balloon: false,\r\n      position: \"topRight\",\r\n      progressBarColor: \"red\",\r\n      pauseOnHover: true,\r\n    });\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ForgetPasswordComponent } from './forget-password.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ForgetPasswordComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ForgetPasswordRoutingModule { }\r\n","<div class=\"pageContentMain\" class=\"mt-4\">\r\n  <form action=\"\" class=\"formStyle\" [formGroup]=\"reactiveForm\">\r\n    <div class=\"dbCardStyle fieldwidth\">\r\n      <h2 class=\"pageTitle text-center mb-md-4 mb-3\">Reset Password</h2>\r\n      <div class=\"row gy-4\">\r\n        <div class=\"col-12\">\r\n          <label class=\"formLbl\">User ID<span class=\"colorRed\">*</span></label>\r\n          <input\r\n            id=\"User Id\"\r\n            placeholder=\"User Id\"\r\n            required\r\n            class=\"form-control\"\r\n            value=\"\"\r\n            #user\r\n            name=\"userId\"\r\n            formControlName=\"userId\"\r\n            oninput=\"this.value = this.value.toUpperCase()\"\r\n          />\r\n        </div>\r\n        <!-- <div class=\"col-12\">\r\n          <label class=\"formLbl\">OTP<span class=\"colorRed\">*</span></label>\r\n          <input id=\"Otp\" placeholder=\"OTP\" required class=\"form-control\" value=\"\" #otp name=\"otp\"\r\n            formControlName=\"otp\">\r\n        </div> -->\r\n        <div class=\"mb-10 px-md-10\">\r\n          <!--begin::Label-->\r\n          <label class=\"formLbl\">OTP<span class=\"colorRed\">*</span></label>\r\n          <!--end::Label-->\r\n          <!--begin::Input group-->\r\n          <div class=\"d-flex flex-wrap flex-stack\">\r\n            <ng-otp-input\r\n              #ngOtpInput\r\n              [config]=\"config\"\r\n              style=\"font-size: 20px\"\r\n              (onInputChange)=\"onOtpChange($event)\"\r\n              inputControls=\"9\"\r\n            ></ng-otp-input>\r\n          </div>\r\n          <!--begin::Input group-->\r\n        </div>\r\n        <div class=\"col-12\">\r\n          <div class=\"row\">\r\n            <div class=\"col\">\r\n              <label class=\"formLbl\"\r\n                >New Password<span class=\"colorRed\">*</span></label\r\n              >\r\n            </div>\r\n          </div>\r\n          <div class=\"inputField\">\r\n            <div class=\"inputField pwdFldCol d-flex\">\r\n              <input\r\n                id=\"password\"\r\n                [type]=\"hide ? 'password' : 'text'\"\r\n                placeholder=\"New Password\"\r\n                required\r\n                class=\"form-control\"\r\n                type=\"password\"\r\n                value=\"\"\r\n                #newPassword\r\n                name=\"password\"\r\n                formControlName=\"password\"\r\n              />\r\n              <span toggle=\"#pwdFld\" class=\"alignSelf\" (click)=\"hide = !hide\">\r\n                <img\r\n                  class=\"showPwd\"\r\n                  *ngIf=\"!hide\"\r\n                  src=\"assets/images/show-icon.svg\"\r\n                  alt=\"...\"\r\n                />\r\n                <img\r\n                  class=\"hidePwd\"\r\n                  *ngIf=\"hide\"\r\n                  src=\"assets/images/hide-icon.svg\"\r\n                  alt=\"...\"\r\n                />\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n            <div class=\"invalid-feedback\"\r\n            *ngIf=\"reactiveForm.get('password').invalid &&\r\n            (reactiveForm.get('password').dirty ||\r\n            reactiveForm.get('password').touched)\">\r\n            <div *ngIf=\"reactiveForm.get('password').errors.pattern\">{{errorMsg}}</div>\r\n\r\n          </div>\r\n          <div\r\n            *ngIf=\"reactiveForm.get('password').hasError('minlength')\"\r\n            class=\"invalid-feedback\"\r\n          >\r\n            New Password Password must contain Minimum {{ minPass }} digits.\r\n          </div>\r\n          <div\r\n            *ngIf=\"reactiveForm.get('password').hasError('maxlength')\"\r\n            class=\"invalid-feedback\"\r\n          >\r\n            New Password must contain Maximum {{ maxPass }} digits.\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"col-12\">\r\n          <div class=\"row\">\r\n            <div class=\"col\">\r\n              <label class=\"formLbl\"\r\n                >Confirm Password<span class=\"colorRed\">*</span></label\r\n              >\r\n            </div>\r\n          </div>\r\n          <div class=\"inputField\">\r\n            <div class=\"inputField pwdFldCol d-flex\">\r\n              <input\r\n                id=\"confirm password\"\r\n                placeholder=\"Confirm Password\"\r\n                required\r\n                class=\"form-control\"\r\n                value=\"\"\r\n                #confirmPassword\r\n                name=\"confirmPassword\"\r\n                formControlName=\"confirmPassword\"\r\n                [type]=\"hide1 ? 'password' : 'text'\"\r\n              />\r\n              <span toggle=\"#pwdFld\" class=\"alignSelf\" (click)=\"hide1 = !hide1\">\r\n                <img\r\n                  class=\"showPwd\"\r\n                  *ngIf=\"!hide1\"\r\n                  src=\"assets/images/show-icon.svg\"\r\n                  alt=\"...\"\r\n                />\r\n                <img\r\n                  class=\"hidePwd\"\r\n                  *ngIf=\"hide1\"\r\n                  src=\"assets/images/hide-icon.svg\"\r\n                  alt=\"...\"\r\n                />\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div\r\n            class=\"invalid-feedback\"\r\n            *ngIf=\"reactiveForm.get('confirmPassword').invalid &&\r\n              (reactiveForm.get('confirmPassword').dirty ||\r\n              reactiveForm.get('confirmPassword').touched)\">\r\n            <div *ngIf=\"reactiveForm.get('confirmPassword').errors.pattern\">\r\n              {{ errorMsg }}\r\n            </div>\r\n          </div>\r\n          <div\r\n            *ngIf=\"reactiveForm.get('confirmPassword').hasError('minlength')\"\r\n            class=\"invalid-feedback\"\r\n          >\r\n            Confirm Password must contain Minimum {{ minPass }} digits.\r\n          </div>\r\n          <div\r\n            *ngIf=\"reactiveForm.get('confirmPassword').hasError('maxlength')\"\r\n            class=\"invalid-feedback\"\r\n          >\r\n            Confirm Password must contain Maximum {{ maxPass }} digits.\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"col-lg-12\">\r\n          <div class=\"row g-3 pb-3 pt-3 justify\">\r\n            <div class=\"col-auto\" *ngIf=\"clickvalue == 0\">\r\n              <button\r\n                (click)=\"getOtp(user.value)\"\r\n                [disabled]=\"otpBtn || !getOtpButtonEnable\"\r\n                class=\"btn smBtn minWdSmBtn btnPrimary\"\r\n              >\r\n                Get OTP\r\n              </button>\r\n            </div>\r\n            <div class=\"col-auto\" *ngIf=\"clickvalue == 1\">\r\n              <button\r\n                (click)=\"getOtp(user.value)\"\r\n                class=\"btn smBtn minWdSmBtn btnPrimary\"\r\n              >\r\n                Resend OTP\r\n              </button>\r\n            </div>\r\n            <div class=\"col-auto\">\r\n              <button\r\n                [disabled]=\"!reactiveForm.valid || submitBtn\"\r\n                (click)=\"\r\n                  changePassword(\r\n                    newPassword.value,\r\n                    confirmPassword.value,\r\n                    user.value,\r\n                    otp\r\n                  )\r\n                \"\r\n                class=\"btn smBtn minWdSmBtn btnSecondary\"\r\n              >\r\n                Save\r\n              </button>\r\n            </div>\r\n            <!-- <div class=\"col-auto\">\r\n              <a  type=\"reset\" (click)=\"resetButton()\" class=\"btn smBtn minWdSmBtn btnPrimary\">Reset</a>\r\n            </div> -->\r\n            <div class=\"col-auto\">\r\n              <a class=\"btn smBtn minWdSmBtn btnSecondary\" (click)=\"exit()\"\r\n                >Exit</a\r\n              >\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { ApiService } from \"src/app/shared/services/api.service\";\r\nimport { ToastService } from \"src/app/shared/services/toast.service\";\r\nimport { SecurityDto, User } from \"../auth/login/login.component\";\r\nimport * as CryptoJS from \"crypto-js\";\r\nimport { SecurityPolicyService } from \"src/app/shared/services/security-policy.service\";\r\nimport { LoginService } from \"src/app/shared/services/login.service\";\r\nimport Swal from \"sweetalert2\";\r\n@Component({\r\n  selector: \"npr-forget-password\",\r\n  templateUrl: \"./forget-password.component.html\",\r\n  styleUrls: [\"./forget-password.component.scss\"],\r\n})\r\nexport class ForgetPasswordComponent implements OnInit {\r\n  @ViewChild(\"ngOtpInput\", { static: false }) ngOtpInput: any;\r\n  config = {\r\n    allowNumbersOnly: true,\r\n    length: 6,\r\n    isPasswordInput: false,\r\n    disableAutoFocus: false,\r\n    placeholder: \"*\",\r\n    inputStyles: { width: \"40px\", height: \"40px\" },\r\n  };\r\n  loginProcessing = false;\r\n  passwordReset1: any;\r\n  login = new Login();\r\n  res: any;\r\n  editable: boolean = false;\r\n  finalpattern: string;\r\n  responseMsg: any;\r\n  responseError: any;\r\n  passwordDTO: any;\r\n  passwordStatus: boolean;\r\n  msg: any;\r\n  userId: string;\r\n  lowerCase: string;\r\n  security: SecurityDto;\r\n  security1: SecurityDto;\r\n  minPass: any;\r\n  maxPass: any;\r\n  ucase: any;\r\n  lcase: any;\r\n  num: any;\r\n  splc: any;\r\n\r\n  reactiveForm: FormGroup;\r\n  passwordRegex: any;\r\n  errorMsg: any = \"\";\r\n  username: string;\r\n  password: string;\r\n  otp: string;\r\n\r\n  hide = true;\r\n  hide1 = true;\r\n  hideConfirm = true;\r\n  modifyUserObject = new Login();\r\n  variable: any;\r\n  user: User;\r\n  var: any;\r\n  var1: any;\r\n  isReadOnly: any;\r\n  button1: any;\r\n  spinnerbutton: boolean;\r\n  button2: any;\r\n  login1 = new Login();\r\n  otpBtn: boolean = false;\r\n  submitBtn: boolean = false;\r\n  email: string;\r\n  getOtpButtonEnable: boolean = true;\r\n  clickvalue: number = 0;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private apiService: LoginService,\r\n    private fb: FormBuilder,\r\n\r\n    private toastService: ToastService,\r\n    private securityService: SecurityPolicyService\r\n  ) {\r\n    this.route.queryParams.subscribe((params) => {\r\n      this.modifyUserObject.username = params.userId;\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isReadOnly = false;\r\n    this.button2 = true;\r\n    this.reactiveForm = this.fb.group({\r\n      userId: new FormControl(\"\"), // added\r\n      otp: new FormControl(\"\", [Validators.required]),\r\n      password: new FormControl(\"\", [\r\n        Validators.required,\r\n        Validators.compose([\r\n          Validators.pattern(this.passwordRegex),\r\n          Validators.maxLength(this.maxPass),\r\n          Validators.minLength(this.minPass),\r\n        ]),\r\n      ]),\r\n      confirmPassword: new FormControl(\"\", [\r\n        Validators.required,\r\n        Validators.compose([\r\n          Validators.pattern(this.passwordRegex),\r\n          Validators.maxLength(this.maxPass),\r\n          Validators.minLength(this.minPass),\r\n        ]),\r\n      ]),\r\n    });\r\n\r\n    this.userId = localStorage.getItem(\"userIdForChangePassword\");\r\n    let a, b;\r\n    this.securityService.fetchSecurityPolicyService().subscribe((resp) => {\r\n      this.security = resp;\r\n      console.log(this.security);\r\n      this.minPass = this.security.minPswdLength;\r\n      this.maxPass = this.security.maxPswdLength;\r\n\r\n      this.buildForm(this.minPass, this.maxPass);\r\n      console.log(this.minPass, this.maxPass);\r\n      console.log(this.security);\r\n    });\r\n    this.buildForm(\r\n      this.minPass ? this.minPass : a,\r\n      this.maxPass ? this.maxPass : b\r\n    );\r\n  }\r\n  buildForm(a, b) {\r\n    this.securityService.fetchSecurityPolicyService().subscribe((resp) => {\r\n      this.security1 = resp;\r\n      this.ucase = this.security1.pswdComplexUcase;\r\n      this.lcase = this.security1.pswdComplexLcase;\r\n      this.num = this.security1.pswdComplexNum;\r\n      this.splc = this.security1.pswdComplexSplc;\r\n\r\n      if (this.security1.pswdComplexUcase == \"true\") {\r\n        this.passwordRegex = \"(?=[^A-Z]*[A-Z])\";\r\n        this.errorMsg = \" UpperCase\";\r\n      }\r\n      if (this.security1.pswdComplexLcase == \"true\") {\r\n        this.passwordRegex = this.passwordRegex + \"(?=[^a-z]*[a-z])\";\r\n        if (this.errorMsg != \"\") {\r\n          this.errorMsg = this.errorMsg + \", LowerCase\";\r\n        } else {\r\n          this.errorMsg = this.errorMsg + \" LowerCase\";\r\n        }\r\n      }\r\n      if (this.splc == \"true\") {\r\n        this.passwordRegex = this.passwordRegex + \"(?=.*[!@#$%^&*])\";\r\n        if (this.errorMsg != \"\")\r\n          this.errorMsg = this.errorMsg + \", Special Character\";\r\n        else this.errorMsg = this.errorMsg + \" Special Character\";\r\n      }\r\n\r\n      if (this.security1.pswdComplexNum == \"true\") {\r\n        this.passwordRegex = this.passwordRegex + \"(?=[^0-9]*[0-9])\";\r\n        if (this.errorMsg != \"\") {\r\n          this.errorMsg = this.errorMsg + \", Number\";\r\n        } else {\r\n          this.errorMsg = this.errorMsg + \" Number\";\r\n        }\r\n      }\r\n\r\n      this.passwordRegex =\r\n        this.passwordRegex + \".{\" + this.minPass + \",\" + this.maxPass + \"}\";\r\n      this.errorMsg =\r\n        \"Password must contain atleast one \" + this.errorMsg + \".\";\r\n      console.log(this.passwordRegex);\r\n\r\n      this.reactiveForm = this.fb.group({\r\n        userId: new FormControl(\"\"),\r\n        otp: new FormControl(\"\", [Validators.required]),\r\n        password: new FormControl(\"\", [\r\n          Validators.required,\r\n          Validators.compose([\r\n            Validators.pattern(this.passwordRegex),\r\n            Validators.maxLength(this.maxPass),\r\n            Validators.minLength(this.minPass),\r\n          ]),\r\n        ]),\r\n        confirmPassword: new FormControl(\"\", [\r\n          Validators.required,\r\n          Validators.compose([\r\n            Validators.pattern(this.passwordRegex),\r\n            Validators.maxLength(this.maxPass),\r\n            Validators.minLength(this.minPass),\r\n          ]),\r\n        ]),\r\n      });\r\n    });\r\n\r\n    console.log(this.minPass, this.maxPass);\r\n    console.log(\"form\", this.reactiveForm);\r\n  }\r\n  resetButton() {\r\n    this.reactiveForm.reset();\r\n  }\r\n  reset(login: Login) {\r\n    if (!login.username) {\r\n      this.toastService.infoMessage(\"Enter User Id.\", \"\");\r\n      return;\r\n    }\r\n\r\n    var encryptedAES = CryptoJS.AES.encrypt(\r\n      login.password,\r\n      \"@12#90!^*NPR*g&*()$34#$\"\r\n    );\r\n    var USERNAME = CryptoJS.AES.encrypt(\r\n      login.username,\r\n      \"@12#90!^*NPR*g&*()$34#$\"\r\n    );\r\n\r\n    var data = encryptedAES.toString();\r\n    var uname = USERNAME.toString();\r\n    this.login1.password = data;\r\n    this.login1.username = uname;\r\n\r\n    this.login1.otp = this.otp;\r\n    console.log(this.login1);\r\n    this.spinnerbutton = true;\r\n    this.apiService.forgetPassword(this.login1).subscribe((res) => {\r\n      this.var1 = res;\r\n      console.log(this.var1);\r\n      if (this.var1) {\r\n        this.spinnerbutton = false;\r\n        if (this.var1[0] === \"Login success.\") {\r\n          this.otpBtn = true;\r\n          this.submitBtn = true;\r\n          Swal.fire({ text: \"password Changed Successfully.\" });\r\n        } else {\r\n          Swal.fire({ text: this.var1[0] });\r\n        }\r\n      } else {\r\n        this.spinnerbutton = false;\r\n\r\n        Swal.fire({\r\n          text: \"Choose Other Password or otp is invalid.\",\r\n        });\r\n      }\r\n    });\r\n  }\r\n  getOtp(username) {\r\n    this.clickvalue = this.clickvalue + 1;\r\n    console.log(this.clickvalue);\r\n    this.loginProcessing = true;\r\n    if (!username) {\r\n      Swal.fire({ text: \"Enter User Id.\" });\r\n      return;\r\n    }\r\n    this.apiService.fetchMedUser(username).subscribe(\r\n      (response) => {\r\n        console.log(response);\r\n        this.user = response;\r\n\r\n        this.email = this.user.email;\r\n        localStorage.setItem(\"userFromLogin\", this.user.userId);\r\n        sessionStorage.setItem(\"user_id\", this.user.userId);\r\n\r\n        var USERNAME = CryptoJS.AES.encrypt(\r\n          username,\r\n          \"@12#90!^*NPR*g&*()$34#$\"\r\n        );\r\n        var uname = USERNAME.toString();\r\n        console.log(uname);\r\n\r\n        this.spinnerbutton = true;\r\n        this.passwordReset1 = uname;\r\n        console.log(\"uname\", uname);\r\n        this.apiService.getOtpForReset(this.passwordReset1).subscribe((res) => {\r\n          this.loginProcessing = false;\r\n          this.var = res;\r\n          if (this.var) {\r\n            this.button1 = true;\r\n            this.button2 = false;\r\n            this.isReadOnly = true;\r\n            this.spinnerbutton = false;\r\n            this.toastService.successMessage(\r\n              \"OTP sent successfully to \" + this.email,\r\n              \"\"\r\n            );\r\n            this.getOtpButtonEnable = false;\r\n          } else {\r\n            Swal.fire({\r\n              text: \"Unable to find User details.Verify your userid.\",\r\n            });\r\n            this.button1 = false;\r\n            this.button2 = true;\r\n            this.isReadOnly = true;\r\n            this.spinnerbutton = false;\r\n          }\r\n        });\r\n      },\r\n      (err: any) => {\r\n        // Swal.fire(\r\n        // {text:  \"Server Error,Unable to connect server.\"}\r\n        // Swal.fire(err.error.message);\r\n        // this.clickvalue = this.clickvalue + 1;\r\n        // console.log(this.clickvalue);\r\n        Swal.fire({ text: \"Unable to find User details.Verify your userid.\" });\r\n      }\r\n    );\r\n  }\r\n  goHome() {\r\n    this.router.navigate([\"/login\"]);\r\n  }\r\n  onOtpChange(otp: string) {\r\n    this.otp = otp;\r\n    if (this.otp.length === 6) {\r\n      this.reactiveForm.get(\"otp\").setValue(this.otp);\r\n    }\r\n  }\r\n  public changePassword(\r\n    newPassword: string,\r\n    confirmPassword: string,\r\n    userId: string,\r\n    otp\r\n  ) {\r\n    console.log(newPassword, confirmPassword, userId, otp);\r\n    if (newPassword != confirmPassword) {\r\n      Swal.fire({ text: \"Password Not Matched.\" });\r\n    } else {\r\n      this.loginProcessing = true;\r\n      let encryptedAES = CryptoJS.AES.encrypt(\r\n        newPassword,\r\n        \"@12#90!^*NPR*g&*()$34#$\"\r\n      );\r\n      let USERNAME = CryptoJS.AES.encrypt(userId, \"@12#90!^*NPR*g&*()$34#$\");\r\n\r\n      var data = encryptedAES.toString();\r\n      let uname = USERNAME.toString();\r\n      this.login.password = data;\r\n      this.login.username = uname;\r\n      this.login.otp = otp;\r\n      console.log(this.login);\r\n      this.apiService.forgetPassword(this.login).subscribe((res) => {\r\n        this.loginProcessing = false;\r\n        this.res = res;\r\n        console.log(this.res);\r\n        if (this.res) {\r\n          // this.spinnerbutton = false;\r\n          if (this.res[0] === \"Login success.\") {\r\n            this.otpBtn = true;\r\n            this.submitBtn = true;\r\n            Swal.fire({ text: \"Password Changed Successfully.\" });\r\n          }\r\n          if (this.res[0] == \"Time Expired\") {\r\n            Swal.fire({\r\n              text: \"This OTP is expired. Please click on Resend OTP to get a new OTP.\",\r\n            });\r\n          }\r\n          if (\r\n            res[0] ==\r\n            \"You cannot use your previous password. Please choose another password\"\r\n          ) {\r\n            Swal.fire(\r\n              \"You can not use your last \" +\r\n                this.security.pswdReuseAft +\r\n                \" passwords. Please choose another password.\",\r\n              \"\"\r\n            );\r\n          }\r\n          if (res[0] == \"OTP is invalid\") {\r\n            Swal.fire({ text: \"Otp is invalid.\" });\r\n          }\r\n          if (res[0] == \"successfull\") {\r\n            this.otpBtn = true;\r\n            this.submitBtn = true;\r\n            Swal.fire({ text: \"Password Changed Successfully.\" });\r\n          }\r\n        } else {\r\n          Swal.fire({ text: \"Choose Other Password or otp is invalid.\" });\r\n        }\r\n      });\r\n    }\r\n  }\r\n  exit() {\r\n    localStorage.clear();\r\n    sessionStorage.clear();\r\n    this.router.navigate([\"/session/login\"]);\r\n  }\r\n}\r\nexport class Login {\r\n  username: string;\r\n  password: string;\r\n  otp: string;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ForgetPasswordRoutingModule } from './forget-password-routing.module';\r\nimport { ForgetPasswordComponent } from './forget-password.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { NgOtpInputModule } from 'ng-otp-input';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ForgetPasswordComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ForgetPasswordRoutingModule,\r\n    ReactiveFormsModule,\r\n    NgOtpInputModule\r\n  ]\r\n})\r\nexport class ForgetPasswordModule { }\r\n"]}