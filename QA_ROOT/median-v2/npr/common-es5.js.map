{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAMaA;AAGX;AAAA;;AAFuB,0BAAe,EAAf;AAEN;;;;iBAEjB,oBAAQ,CACP;;;;;;;yBANUA;AAAuB;;;cAAvBA;AAAuBC;AAAAC;AAAAC;AAAA;AAAAC;AAAAC;AAAAC;AAAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCOvBC;;;;;yBAAAA;AAAgB;;;cAAhBA;;;kBALF,CACNC,yDADM;;;;4HAKED,mBAAgB;AAAAE,yBANZC,iGAMY,EANaC,4DAMb;AANyBC,oBAEjDJ,yDAFiD,CAMzB;AAJZK,oBAELH,iGAFK;AAIY;AAFM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCJtBI;AAEX;AAAA;AAAiB;;;;iBAEjB,oBAAQ,CACP;;;;;;;yBALUA;AAAY;;;cAAZA;AAAYd;AAAAG;AAAAC;AAAAC;AAAA;ACPzBU;;AAAGA;;AAAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCAAC;;;;UASAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCPAC;;;;UAWAC;;;;UAUAC;;;;UAKAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UC5BAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACIb,UAAMC,UAAU,GAAG,iFAAnB;AACA,UAAMC,eAAe,GAAG,OAAxB;;UAKaC;AACX;AAAA;AAAiB;;;;iBAEV,2BAAkBC,IAAlB,EAA+BC,aAA/B,EAAoD;AACzD,gBAAMC,SAAS,GAAmBC,sDAAyBH,IAAzB,CAAlC,CADyD,CAEzD;;AACA,gBAAMI,QAAQ,GAAkB;AAAEC,oBAAM,EAAE;AAAE,wBAAQH;AAAV,eAAV;AAAiCI,wBAAU,EAAE,CAAC,MAAD;AAA7C,aAAhC;AACA,gBAAMC,WAAW,GAAQJ,wCAAWC,QAAX,EAAqB;AAAEI,sBAAQ,EAAE,MAAZ;AAAoBC,kBAAI,EAAE;AAA1B,aAArB,CAAzB,CAJyD,CAKzD;;AACA,iBAAKC,eAAL,CAAqBH,WAArB,EAAkCN,aAAlC;AACD;;;iBAEO,yBAAgBU,MAAhB,EAA6BC,QAA7B,EAA6C;AACnD,gBAAMC,IAAI,GAAS,IAAIC,IAAJ,CAAS,CAACH,MAAD,CAAT,EAAmB;AACpCF,kBAAI,EAAEZ;AAD8B,aAAnB,CAAnB,CADmD,CAIpD;AACC;;AACAkB,2DAAiBF,IAAjB,EAAuBD,QAAQ,GAACd,eAAhC;AACD;;;;;;;yBAnBUC;AAAY;;;eAAZA;AAAYiB,iBAAZjB,aAAY;AAAAkB,oBAFX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCGDC;AAEX,wCAAoBC,UAApB,EAA0C;AAAA;;AAAtB;AADtB,yBAAQC,qFAAR;AAOU,qCAAsB,IAAIC,iDAAJ,CAAyB;AACrDC,sBAAU,EAAE,EADyC;AAEzDC,wBAAY,EAAE,EAF2C;AAGzDC,0BAAc,EAAE,EAHyC;AAIzDC,qBAAS,EAAE,EAJ8C;AAKzDC,uBAAW,EAAE,EAL4C;AAMzDC,oBAAQ,EAAE,EAN+C;AAOzDC,wBAAY,EAAE,EAP2C;AAQzDC,yBAAa,EAAE,EAR0C;AASzDC,yBAAa,EAAE,EAT0C;AAUzDC,kCAAsB,EAAC,EAVkC;AAWzDC,sBAAU,EAAE,EAX6C;AAYzDC,wBAAY,EAAE,EAZ2C;AAazDC,sCAA0B,EAAE,EAb6B;AAczDC,4BAAgB,EAAE,EAduC;AAezDC,0BAAc,EAAE,EAfyC;AAgBzDC,2BAAe,EAAE,EAhBwC;AAiBzDC,4BAAgB,EAAE,EAjBuC;AAkBzDC,sBAAU,EAAE,EAlB6C;AAmBzDC,wBAAY,EAAE,EAnB2C;AAoBzDC,wBAAY,EAAE,EApB2C;AAqBzDC,mBAAO,EAAE,EArBgD;AAsBzDC,yBAAa,EAAC;AAtB2C,WAAzB,CAAtB;AANuC;;;;iBAE/C,0BAAiBC,GAAjB,EAAoB;AAClBC,mBAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,mBAAO,KAAKzB,UAAL,CAAgB4B,IAAhB,WAA6B,KAAKC,OAAlC,2BAAiEJ,GAAjE,CAAP;AACD;;;iBAyBD,2BAAkB/B,IAAlB,EAAsB;AACpB,iBAAKoC,mBAAL,CAAyBC,IAAzB,CAA8BrC,IAA9B;AACD;;;iBACD,kCAAsB;AACpB,mBAAO,KAAKoC,mBAAL,CAAyBE,YAAzB,EAAP;AACD;;;iBACD,sCAA0B;AACxB,mBAAO,KAAKhC,UAAL,CAAgBiC,GAAhB,WAAoC,KAAKJ,OAAzC,2BAAP;AACD;;;iBAED,oCAAwB;AACtB,mBAAO,KAAK7B,UAAL,CAAgBiC,GAAhB,WAA8B,KAAKJ,OAAnC,sCAAP;AACD;;;iBACD,0BAAc;AACZ,mBAAO,KAAK7B,UAAL,CAAgBiC,GAAhB,WAA4B,KAAKJ,OAAjC,gDAAP;AACD,YACD;AACA;AACA;;;;iBACE,wBAAeK,WAAf,EAAkC;AAClC,mBAAO,KAAKlC,UAAL,CAAgB4B,IAAhB,WAAiC,KAAKC,OAAtC,2BAAqEK,WAArE,CAAP;AACD;;;iBACD,sBAAaC,SAAb,EAAuBV,GAAvB,EAA0B;AACxB,mBAAO,KAAKzB,UAAL,CAAgBoC,GAAhB,WAAuB,KAAKP,OAA5B,6BAAsDM,SAAtD,GAAkEV,GAAlE,CAAP;AACD;;;iBACF,8BAAqBY,MAArB,EAA4BC,QAA5B,EAAqCC,MAArC,EAA2C;AACxC,mBAAO,KAAKvC,UAAL,CAAgBiC,GAAhB,WAA4B,KAAKJ,OAAjC,iDAAsF,CAAtF,gBAAoG,IAApG,qBAAmHU,MAAnH,EAAP;AACD;;;;;;;yBA3DUxC,wBAAqByC;AAAA;;;eAArBzC;AAAqBF,iBAArBE,sBAAqB;AAAAD,oBAFpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFP,UAAM+B,QAAO,GAAGY,oFAAhB;;AACA,UAAMC,eAAc,GAAGD,uFAAuB,iBAA9C;;UAKME;AAEX,+BAAoBC,IAApB,EAAoC;AAAA;;AAAhB;AAAqB;;;;iBAEzC,iCAAwBC,MAAxB,EAAwCC,UAAxC,EAA4DC,QAA5D,EAA4E;AAC1E,mBAAO,KAAKH,IAAL,CAAUX,GAAV,WAAiBS,eAAjB,gCAAqDG,MAArD,cAA+DC,UAA/D,cAA6EC,QAA7E,EAAP;AAED;;;iBAED,6BAAoBF,MAApB,EAAkC;AAChC,mBAAO,KAAKD,IAAL,CAAUX,GAAV,WAAuBJ,QAAvB,oCAAwDgB,MAAxD,EAAP;AACD;;;iBAED,4BAAmBA,MAAnB,EAAiC;AAC/B,mBAAO,KAAKD,IAAL,CAAUX,GAAV,WAAuBJ,QAAvB,oCAAwDgB,MAAxD,EAAP;AACD;;;iBAED,2BAAkBG,IAAlB,EAA4B;AAC1B,mBAAO,KAAKJ,IAAL,CAAUhB,IAAV,WAA2BC,QAA3B,wBAAuDmB,IAAvD,CAAP;AACD;;;iBACD,2BAAkBA,IAAlB,EAA4B;AAC1B,mBAAO,KAAKJ,IAAL,CAAUhB,IAAV,WAA2BC,QAA3B,wBAAuDmB,IAAvD,CAAP;AACD;;;iBACD,kCAAsB;AACpB,mBAAO,KAAKJ,IAAL,CAAUX,GAAV,WAAyBJ,QAAzB,wBAAP;AACD;;;iBACD,iCAAqB;AACnB,mBAAO,KAAKe,IAAL,CAAUX,GAAV,WAA2BJ,QAA3B,4BAAP;AACD;;;iBACD,kCAAsB;AACpB,mBAAO,KAAKe,IAAL,CAAUX,GAAV,WAA2BJ,QAA3B,6BAAP;AACD;;;iBACD,0BAAc;AACZ,mBAAO,KAAKe,IAAL,CAAUX,GAAV,WAAsBJ,QAAtB,oCAAP;AACD;;;iBACD,8BAAqBoB,QAArB,EAAmC;AACjC,mBAAO,KAAKL,IAAL,CAAUX,GAAV,WAA2BJ,QAA3B,4BAAP;AAED;;;iBACD,gCAAoB,CAEnB;;;iBAED,oCAA2BgB,MAA3B,EAA2CK,OAA3C,EAA0D;AACxD,mBAAO,KAAKN,IAAL,CAAUX,GAAV,WAA0BJ,QAA1B,kCAAyDgB,MAAzD,cAAmEK,OAAnE,EAAP;AACD;;;iBACD,qCAA4BL,MAA5B,EAA4CK,OAA5C,EAA2D;AACzD,mBAAO,KAAKN,IAAL,CAAUX,GAAV,WAA0BJ,QAA1B,8BAAqDgB,MAArD,cAA+DK,OAA/D,EAAP;AACD;;;iBACD,qCAA4BL,MAA5B,EAA4CK,OAA5C,EAA2D;AACzD,mBAAO,KAAKN,IAAL,CAAUX,GAAV,WAA0BJ,QAA1B,+BAAsDgB,MAAtD,cAAgEK,OAAhE,EAAP;AACD;;;iBACD,qCAA4BC,gBAA5B,EAAiD;AAC/C,mBAAO,KAAKP,IAAL,CAAUX,GAAV,WAA0BJ,QAA1B,+BAAsDsB,gBAAtD,EAAP;AACD;;;iBACD,0BAAiBC,OAAjB,EAAwB;AACtB,mBAAO,KAAKR,IAAL,CAAUX,GAAV,WAAsBJ,QAAtB,+BAAkDuB,OAAlD,EAAP;AACD;;;iBACD,qBAAS;AACP,mBAAO,KAAKR,IAAL,CAAUX,GAAV,WAAsBJ,QAAtB,aAAP;AACD;;;;;;;yBA5DUc,eAAYU;AAAA;;;eAAZV;AAAY9C,iBAAZ8C,aAAY;AAAA7C,oBAFX;;;;","names":["AuditLogStatusComponent","selectors","inputs","auditLog","decls","vars","template","styles","ComponentsModule","_angular_common__WEBPACK_IMPORTED_MODULE_3__","declarations","_audit_log_status_audit_log_status_component__WEBPACK_IMPORTED_MODULE_0__","_otp_otp_component__WEBPACK_IMPORTED_MODULE_1__","imports","exports","OtpComponent","_angular_core__WEBPACK_IMPORTED_MODULE_0__","FirstAndSecondAuthAuditLogRespDTO","DataForProcessScreen","PendingForAuthDTO","GetDetailsQueryToggleReqDTO","DeUploadReqDTO","DeUploadRespStatusEntity","User","EXCEL_TYPE","EXCEL_EXTENSION","ExcelService","json","excelFileName","worksheet","xlsx__WEBPACK_IMPORTED_MODULE_1__","workbook","Sheets","SheetNames","excelBuffer","bookType","type","saveAsExcelFile","buffer","fileName","data","Blob","file_saver__WEBPACK_IMPORTED_MODULE_0__","factory","providedIn","SecurityPolicyService","httpClient","src_environments_environment_prod__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","authStatus","authorizedBy","authorizedTime","createdBy","createdDate","isActive","maxInvLogins","maxPswdLength","minPswdLength","passwordGenerationType","modifiedBy","modifiedTime","notifyPasswordExpiryInDays","pswdComplexLcase","pswdComplexNum","pswdComplexSplc","pswdComplexUcase","pswdExpiry","pswdReuseAft","recordStatus","version","firstTimeAuth","obj","console","log","post","API_URL","securityDetailsEdit","next","asObservable","get","passwordDTO","operation","put","pageNo","pageSize","sortBy","_angular_core__WEBPACK_IMPORTED_MODULE_2__","src_app_shared_config_app_constant__WEBPACK_IMPORTED_MODULE_0__","rolepermission","UsersService","http","userId","screenName","roleName","user","authUser","makerId","userobjForDelete","user_id","_angular_core__WEBPACK_IMPORTED_MODULE_1__"],"sources":["webpack:///src/app/shared/components/audit-log-status/audit-log-status.component.ts","webpack:///src/app/shared/components/components.module.ts","webpack:///src/app/shared/components/otp/otp.component.ts","webpack:///src/app/shared/components/otp/otp.component.html","webpack:///src/app/shared/models/audit-logs-dto-first-second.ts","webpack:///src/app/shared/models/pending-for-auth-dto.ts","webpack:///src/app/shared/models/users.ts","webpack:///src/app/shared/services/excel.service.ts","webpack:///src/app/shared/services/security-policy.service.ts","webpack:///src/app/views/users/users.service.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\n@Component({\r\n  selector: 'npr-audit-log-status',\r\n  templateUrl: './audit-log-status.component.html',\r\n  styleUrls: ['./audit-log-status.component.scss']\r\n})\r\nexport class AuditLogStatusComponent implements OnInit {\r\n  @Input('items') public auditLog: {} = {};\r\n  \r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AuditLogStatusComponent } from './audit-log-status/audit-log-status.component';\r\nimport { OtpComponent } from './otp/otp.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [AuditLogStatusComponent, OtpComponent],\r\n  imports: [\r\n     CommonModule,\r\n  ],\r\n  exports: [AuditLogStatusComponent]\r\n})\r\nexport class ComponentsModule {\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'npr-otp',\r\n  templateUrl: './otp.component.html',\r\n  styleUrls: ['./otp.component.scss']\r\n})\r\nexport class OtpComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>otp works!</p>\r\n","export class FirstAndSecondAuthAuditLogRespDTO {\r\n    inputBy: string;\r\n    inputDateTime: Date;\r\n    authorizer1: string;\r\n    authorizer1DateTime: Date;\r\n    authorizer2: string;\r\n    authorizer2DateTime: Date;\r\n}\r\n\r\nexport class DataForProcessScreen{\r\n    Source_Code: string;\r\n    Process_Code: string;\r\n    Branch_Code: any;\r\n    Batch_No: any;\r\n    Value_Date: string;\r\n    Account: string;\r\n    Account_Branch: any;\r\n    Currency: any;\r\n    Amount: any;\r\n    DrCr: any;\r\n    LcyEquivalent: any;\r\n    Exch_Rate: any;\r\n    Curr_No: any;\r\n    Addl_Text: any;\r\n    Trn_Code: any;\r\n    Period_Code: any;\r\n    Financial_Cycle: any;\r\n    Initiation_Date: string;\r\n    Upload_Date: string;\r\n    Input_By: any;\r\n    Input_Time: string;\r\n    UDF_Detail: any;\r\n    Error_Desc: any;\r\n    Validation_Error: any;\r\n    Related_Customer: any;\r\n    Related_Account: any;\r\n    Related_Reference: any;\r\n}","import { PendingForAuthDetailsDTO } from './pending-for-auth-details-dto';\r\n\r\nexport class PendingForAuthDTO {\r\n  externalSysName: string;\r\n  processName: string;\r\n  processingDate: Date;\r\n  currency: string;\r\n  fileName: string;\r\n  detailsQueryToggle: boolean;\r\n  batchNumber: string;\r\n\r\n}\r\n\r\nexport class GetDetailsQueryToggleReqDTO {\r\n  externalSysName: string;\r\n  processName: string;\r\n  currency: string;\r\n  processingDate: Date;\r\n  filename: string;\r\n  batchNumber: string;\r\n  overrides: string;\r\n}\r\n\r\nexport class DeUploadReqDTO {\r\n  pendingForAuthDTO: PendingForAuthDTO;\r\n  pendingForAuthDetailsDTOList: PendingForAuthDetailsDTO[];\r\n}\r\n\r\nexport class DeUploadRespStatusEntity {\r\n  statusMessage: string;\r\n}\r\n\r\n\r\n","export class User {\r\n  //  id: number;\r\n  modNo:string;\r\n  applications: string;\r\n  changePassword: boolean;\r\n  createdAt: Date;\r\n  creatorDtStamp: Date;\r\n  creatorId: string;\r\n  currentSignInAt: Date;\r\n  currentSignInIp: string;\r\n  email: string;\r\n  emailNotification: string;\r\n  encryptedPassword: string;\r\n  failedAttempts: number;\r\n  lastSignInAt: Date;\r\n  ldapUserId: string;\r\n  lockedAt: Date;\r\n  mobile: number;\r\n  msadUserId: string;\r\n  notificationEmails: string;\r\n  notificationMobiles: boolean;\r\n  rememberCreatedAt: Date;\r\n  resetPasswordSentAt: Date;\r\n  resetPasswordToken: string;\r\n  recordStatus: string;\r\n  signInCount: number;\r\n  smsNotification: boolean;\r\n  unlockToken: string;\r\n  updatedAt: Date;\r\n  userId: string;\r\n  userName: string;\r\n  verified: boolean;\r\n  verifierDtStamp: Date;\r\n  verifierId: string;\r\n  verifiedStatus: string;\r\n  autoAuth: boolean;\r\n  maintAllowed: boolean;\r\n  userAccessOption: string;\r\n  roleForUser: string;\r\n  versionNo: string;\r\n  updatedBy: string;\r\n  logoutTime: string;\r\n  verifiedOnce: string;\r\n  firstTimeLogin: string;\r\n  newRoleForUser: Array<any>;\r\n  statusForUser: string;\r\n  department: any;\r\n  intime: any;\r\n  outtime: any;\r\n  pwdChangeDate: Date;\r\n  passwordGenerationType:any;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\nconst EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\nconst EXCEL_EXTENSION = '.xlsx';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExcelService {\r\n  constructor() { }\r\n\r\n  public exportAsExcelFile(json: any[], excelFileName: string): void {\r\n    const worksheet: XLSX.WorkSheet = XLSX.utils.json_to_sheet(json);\r\n    // console.log('worksheet',worksheet);\r\n    const workbook: XLSX.WorkBook = { Sheets: { 'data': worksheet }, SheetNames: ['data'] };\r\n    const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\r\n    // const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' });\r\n    this.saveAsExcelFile(excelBuffer, excelFileName);\r\n  }\r\n\r\n  private saveAsExcelFile(buffer: any, fileName: string): void {\r\n    const data: Blob = new Blob([buffer], {\r\n      type: EXCEL_TYPE\r\n    });\r\n   // FileSaver.saveAs(data, fileName + '_export_' + new Date().getDate() +'-'+(new Date().getMonth()+1)+'-'+new Date().getFullYear()+EXCEL_EXTENSION);\r\n    // FileSaver.saveAs(data, fileName + '_export');\r\n    FileSaver.saveAs(data, fileName+EXCEL_EXTENSION);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment.prod';\r\n\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { SecurityDto } from 'src/app/views/auth/login/login.component';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SecurityPolicyService {\r\nAPI_URL=environment.MEDIAN_URL;\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  saveDataSecurity(obj): Observable<any> {\r\n    console.log(obj);\r\n    return this.httpClient.post<any>(`${this.API_URL}/securityPolicy/save`, obj)\r\n  }\r\n  private securityDetailsEdit = new BehaviorSubject<any>({\r\n    authStatus: '',\r\nauthorizedBy: '',\r\nauthorizedTime: '',\r\ncreatedBy: '',\r\ncreatedDate: '',\r\nisActive: '',\r\nmaxInvLogins: '',\r\nmaxPswdLength: '',\r\nminPswdLength: '',\r\npasswordGenerationType:'',\r\nmodifiedBy: '',\r\nmodifiedTime: '',\r\nnotifyPasswordExpiryInDays: '',\r\npswdComplexLcase: '',\r\npswdComplexNum: '',\r\npswdComplexSplc: '',\r\npswdComplexUcase: '',\r\npswdExpiry: '',\r\npswdReuseAft: '',\r\nrecordStatus: '',\r\nversion: '',\r\nfirstTimeAuth:''\r\n  })\r\n  setSecurityPolicy(data) {\r\n    this.securityDetailsEdit.next(data);\r\n  }\r\n  getsecurityDetailsEdit() {\r\n    return this.securityDetailsEdit.asObservable();\r\n  }\r\n  fetchSecurityPolicyService() {\r\n    return this.httpClient.get<SecurityDto>(`${this.API_URL}/securityPolicy/fetch`);\r\n  }\r\n \r\n  getSecurityPolicyForAuth() {\r\n    return this.httpClient.get<any[]>(`${this.API_URL}/authorization/getSecurityPolicy`);\r\n  }\r\n  getMonitorData() {\r\n    return this.httpClient.get<any>(`${this.API_URL}/excelDataForProcessScreeen/getMonitorData`);\r\n  }\r\n  // fetchSecurityPolicyService() {\r\n  //   return this.httpClient.get<any>(`${API_URL}/securityPolicy/fetch`);\r\n  // }\r\n    changePassword(passwordDTO: object) {\r\n    return this.httpClient.post<boolean>(`${this.API_URL}/user/changePassword`, passwordDTO);\r\n  }\r\n  authSecurity(operation,obj){\r\n    return this.httpClient.put(`${this.API_URL}/securityPolicy/${operation}`,obj)\r\n  }\r\n getAllSecurityPolicy(pageNo,pageSize,sortBy){\r\n    return this.httpClient.get<any>(`${this.API_URL}/securityPolicy/getSecurityPolicies?pageNo=${0}&pageSize=${1000}&sortBy=${sortBy}`)\r\n  }\r\n  //   fetchSecurityPolicyService() {\r\n  //   return this.httpClient.get<any>(`${this.API_URL}/securityPolicy/fetch`);\r\n  // }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { User } from './users.dto';\r\nimport { AppConstants } from 'src/app/shared/config/app.constant';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport const API_URL = AppConstants.baseURL;\r\nexport const rolepermission = AppConstants.baseURL + '/rolePermission';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UsersService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n  \r\n  getRoleScreenPermission(userId: string, screenName: string, roleName: string): Observable<any> {\r\n    return this.http.get(`${rolepermission}/getRolePermission/${userId}/${screenName}/${roleName}`)\r\n\r\n  }\r\n\r\n  getUserAuditService(userId: string) {\r\n    return this.http.get<User>(`${API_URL}/users/getModifiedUser/${userId}`);\r\n  }\r\n\r\n  getUserObjModified(userId: string) {\r\n    return this.http.get<User>(`${API_URL}/users/getModifiedUser/${userId}`);\r\n  }\r\n\r\n  createUserService(user: User) {\r\n    return this.http.post<boolean>(`${API_URL}/users/createUser`, user);\r\n  }\r\n  modifyUserService(user: User) {\r\n    return this.http.post<boolean>(`${API_URL}/users/modifyUser`, user);\r\n  }\r\n  getAllUsersListService() {\r\n    return this.http.get<User[]>(`${API_URL}/users/getAllUsers`);\r\n  }\r\n  getAllRoleNameService() {\r\n    return this.http.get<string[]>(`${API_URL}/users/getAllRoleNames`);\r\n  }\r\n  getAllRoleNameServiceU() {\r\n    return this.http.get<string[]>(`${API_URL}/users/getAllRoleNamesU`);\r\n  }\r\n  getAllAuthRole() {\r\n    return this.http.get<any>(`${API_URL}/medRoles/fetchAllRolesSummary`);\r\n  }\r\n  onClickOfAuthOfUsers(authUser: User) {\r\n    return this.http.get<string[]>(`${API_URL}/users/getAllRoleNames`);\r\n\r\n  }\r\n  onClickOfOpenOfUsers() {\r\n\r\n  }\r\n\r\n  onClickOfAuthOfModifyUsers(userId: string, makerId: string) {\r\n    return this.http.get<boolean>(`${API_URL}/users/authorizeUser/${userId}/${makerId}`)\r\n  }\r\n  onClickOfCloseOfModifyUsers(userId: string, makerId: string) {\r\n    return this.http.get<boolean>(`${API_URL}/users/closeUser/${userId}/${makerId}`)\r\n  }\r\n  onClickOfReopenOfModifyUser(userId: string, makerId: string) {\r\n    return this.http.get<boolean>(`${API_URL}/users/reopenUser/${userId}/${makerId}`)\r\n  }\r\n  onClickOfDeleteOfModifyUser(userobjForDelete: any) {\r\n    return this.http.get<boolean>(`${API_URL}/users/deleteUser/${userobjForDelete}`)\r\n  }\r\n  statusChangeUser(user_id) {\r\n    return this.http.get<any>(`${API_URL}/users/statusUser/${user_id}`)\r\n  }\r\n  refreshGl() {\r\n    return this.http.get<any>(`${API_URL}/refxch`);\r\n  }\r\n}\r\n"]}