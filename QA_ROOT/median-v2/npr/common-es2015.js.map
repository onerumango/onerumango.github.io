{"version":3,"file":"common-es2015.js","mappings":"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","sources":["./src/app/shared/components/audit-log-status/audit-log-status.component.ts","./src/app/shared/components/components.module.ts","./src/app/shared/components/otp/otp.component.ts","./src/app/shared/components/otp/otp.component.html","./src/app/shared/models/audit-logs-dto-first-second.ts","./src/app/shared/models/pending-for-auth-dto.ts","./src/app/shared/models/users.ts","./src/app/shared/services/excel.service.ts","./src/app/shared/services/security-policy.service.ts","./src/app/views/users/users.service.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\n@Component({\r\n  selector: 'npr-audit-log-status',\r\n  templateUrl: './audit-log-status.component.html',\r\n  styleUrls: ['./audit-log-status.component.scss']\r\n})\r\nexport class AuditLogStatusComponent implements OnInit {\r\n  @Input('items') public auditLog: {} = {};\r\n  \r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AuditLogStatusComponent } from './audit-log-status/audit-log-status.component';\r\nimport { OtpComponent } from './otp/otp.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [AuditLogStatusComponent, OtpComponent],\r\n  imports: [\r\n     CommonModule,\r\n  ],\r\n  exports: [AuditLogStatusComponent]\r\n})\r\nexport class ComponentsModule {\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'npr-otp',\r\n  templateUrl: './otp.component.html',\r\n  styleUrls: ['./otp.component.scss']\r\n})\r\nexport class OtpComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>otp works!</p>\r\n","export class FirstAndSecondAuthAuditLogRespDTO {\r\n    inputBy: string;\r\n    inputDateTime: Date;\r\n    authorizer1: string;\r\n    authorizer1DateTime: Date;\r\n    authorizer2: string;\r\n    authorizer2DateTime: Date;\r\n}\r\n\r\nexport class DataForProcessScreen{\r\n    Source_Code: string;\r\n    Process_Code: string;\r\n    Branch_Code: any;\r\n    Batch_No: any;\r\n    Value_Date: string;\r\n    Account: string;\r\n    Account_Branch: any;\r\n    Currency: any;\r\n    Amount: any;\r\n    DrCr: any;\r\n    LcyEquivalent: any;\r\n    Exch_Rate: any;\r\n    Curr_No: any;\r\n    Addl_Text: any;\r\n    Trn_Code: any;\r\n    Period_Code: any;\r\n    Financial_Cycle: any;\r\n    Initiation_Date: string;\r\n    Upload_Date: string;\r\n    Input_By: any;\r\n    Input_Time: string;\r\n    UDF_Detail: any;\r\n    Error_Desc: any;\r\n    Validation_Error: any;\r\n    Related_Customer: any;\r\n    Related_Account: any;\r\n    Related_Reference: any;\r\n}","import { PendingForAuthDetailsDTO } from './pending-for-auth-details-dto';\r\n\r\nexport class PendingForAuthDTO {\r\n  externalSysName: string;\r\n  processName: string;\r\n  processingDate: Date;\r\n  currency: string;\r\n  fileName: string;\r\n  detailsQueryToggle: boolean;\r\n  batchNumber: string;\r\n\r\n}\r\n\r\nexport class GetDetailsQueryToggleReqDTO {\r\n  externalSysName: string;\r\n  processName: string;\r\n  currency: string;\r\n  processingDate: Date;\r\n  filename: string;\r\n  batchNumber: string;\r\n  overrides: string;\r\n}\r\n\r\nexport class DeUploadReqDTO {\r\n  pendingForAuthDTO: PendingForAuthDTO;\r\n  pendingForAuthDetailsDTOList: PendingForAuthDetailsDTO[];\r\n}\r\n\r\nexport class DeUploadRespStatusEntity {\r\n  statusMessage: string;\r\n}\r\n\r\n\r\n","export class User {\r\n  //  id: number;\r\n  modNo:string;\r\n  applications: string;\r\n  changePassword: boolean;\r\n  createdAt: Date;\r\n  creatorDtStamp: Date;\r\n  creatorId: string;\r\n  currentSignInAt: Date;\r\n  currentSignInIp: string;\r\n  email: string;\r\n  emailNotification: string;\r\n  encryptedPassword: string;\r\n  failedAttempts: number;\r\n  lastSignInAt: Date;\r\n  ldapUserId: string;\r\n  lockedAt: Date;\r\n  mobile: number;\r\n  msadUserId: string;\r\n  notificationEmails: string;\r\n  notificationMobiles: boolean;\r\n  rememberCreatedAt: Date;\r\n  resetPasswordSentAt: Date;\r\n  resetPasswordToken: string;\r\n  recordStatus: string;\r\n  signInCount: number;\r\n  smsNotification: boolean;\r\n  unlockToken: string;\r\n  updatedAt: Date;\r\n  userId: string;\r\n  userName: string;\r\n  verified: boolean;\r\n  verifierDtStamp: Date;\r\n  verifierId: string;\r\n  verifiedStatus: string;\r\n  autoAuth: boolean;\r\n  maintAllowed: boolean;\r\n  userAccessOption: string;\r\n  roleForUser: string;\r\n  versionNo: string;\r\n  updatedBy: string;\r\n  logoutTime: string;\r\n  verifiedOnce: string;\r\n  firstTimeLogin: string;\r\n  newRoleForUser: Array<any>;\r\n  statusForUser: string;\r\n  department: any;\r\n  intime: any;\r\n  outtime: any;\r\n  pwdChangeDate: Date;\r\n  passwordGenerationType:any;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\nconst EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\nconst EXCEL_EXTENSION = '.xlsx';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExcelService {\r\n  constructor() { }\r\n\r\n  public exportAsExcelFile(json: any[], excelFileName: string): void {\r\n    const worksheet: XLSX.WorkSheet = XLSX.utils.json_to_sheet(json);\r\n    // console.log('worksheet',worksheet);\r\n    const workbook: XLSX.WorkBook = { Sheets: { 'data': worksheet }, SheetNames: ['data'] };\r\n    const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\r\n    // const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' });\r\n    this.saveAsExcelFile(excelBuffer, excelFileName);\r\n  }\r\n\r\n  private saveAsExcelFile(buffer: any, fileName: string): void {\r\n    const data: Blob = new Blob([buffer], {\r\n      type: EXCEL_TYPE\r\n    });\r\n   // FileSaver.saveAs(data, fileName + '_export_' + new Date().getDate() +'-'+(new Date().getMonth()+1)+'-'+new Date().getFullYear()+EXCEL_EXTENSION);\r\n    // FileSaver.saveAs(data, fileName + '_export');\r\n    FileSaver.saveAs(data, fileName+EXCEL_EXTENSION);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment.prod';\r\n\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { SecurityDto } from 'src/app/views/auth/login/login.component';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SecurityPolicyService {\r\nAPI_URL=environment.MEDIAN_URL;\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  saveDataSecurity(obj): Observable<any> {\r\n    console.log(obj);\r\n    return this.httpClient.post<any>(`${this.API_URL}/securityPolicy/save`, obj)\r\n  }\r\n  private securityDetailsEdit = new BehaviorSubject<any>({\r\n    authStatus: '',\r\nauthorizedBy: '',\r\nauthorizedTime: '',\r\ncreatedBy: '',\r\ncreatedDate: '',\r\nisActive: '',\r\nmaxInvLogins: '',\r\nmaxPswdLength: '',\r\nminPswdLength: '',\r\npasswordGenerationType:'',\r\nmodifiedBy: '',\r\nmodifiedTime: '',\r\nnotifyPasswordExpiryInDays: '',\r\npswdComplexLcase: '',\r\npswdComplexNum: '',\r\npswdComplexSplc: '',\r\npswdComplexUcase: '',\r\npswdExpiry: '',\r\npswdReuseAft: '',\r\nrecordStatus: '',\r\nversion: '',\r\nfirstTimeAuth:''\r\n  })\r\n  setSecurityPolicy(data) {\r\n    this.securityDetailsEdit.next(data);\r\n  }\r\n  getsecurityDetailsEdit() {\r\n    return this.securityDetailsEdit.asObservable();\r\n  }\r\n  fetchSecurityPolicyService() {\r\n    return this.httpClient.get<SecurityDto>(`${this.API_URL}/securityPolicy/fetch`);\r\n  }\r\n \r\n  getSecurityPolicyForAuth() {\r\n    return this.httpClient.get<any[]>(`${this.API_URL}/authorization/getSecurityPolicy`);\r\n  }\r\n  getMonitorData() {\r\n    return this.httpClient.get<any>(`${this.API_URL}/excelDataForProcessScreeen/getMonitorData`);\r\n  }\r\n  // fetchSecurityPolicyService() {\r\n  //   return this.httpClient.get<any>(`${API_URL}/securityPolicy/fetch`);\r\n  // }\r\n    changePassword(passwordDTO: object) {\r\n    return this.httpClient.post<boolean>(`${this.API_URL}/user/changePassword`, passwordDTO);\r\n  }\r\n  authSecurity(operation,obj){\r\n    return this.httpClient.put(`${this.API_URL}/securityPolicy/${operation}`,obj)\r\n  }\r\n getAllSecurityPolicy(pageNo,pageSize,sortBy){\r\n    return this.httpClient.get<any>(`${this.API_URL}/securityPolicy/getSecurityPolicies?pageNo=${0}&pageSize=${1000}&sortBy=${sortBy}`)\r\n  }\r\n  //   fetchSecurityPolicyService() {\r\n  //   return this.httpClient.get<any>(`${this.API_URL}/securityPolicy/fetch`);\r\n  // }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { User } from './users.dto';\r\nimport { AppConstants } from 'src/app/shared/config/app.constant';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport const API_URL = AppConstants.baseURL;\r\nexport const rolepermission = AppConstants.baseURL + '/rolePermission';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UsersService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n  \r\n  getRoleScreenPermission(userId: string, screenName: string, roleName: string): Observable<any> {\r\n    return this.http.get(`${rolepermission}/getRolePermission/${userId}/${screenName}/${roleName}`)\r\n\r\n  }\r\n\r\n  getUserAuditService(userId: string) {\r\n    return this.http.get<User>(`${API_URL}/users/getModifiedUser/${userId}`);\r\n  }\r\n\r\n  getUserObjModified(userId: string) {\r\n    return this.http.get<User>(`${API_URL}/users/getModifiedUser/${userId}`);\r\n  }\r\n\r\n  createUserService(user: User) {\r\n    return this.http.post<boolean>(`${API_URL}/users/createUser`, user);\r\n  }\r\n  modifyUserService(user: User) {\r\n    return this.http.post<boolean>(`${API_URL}/users/modifyUser`, user);\r\n  }\r\n  getAllUsersListService() {\r\n    return this.http.get<User[]>(`${API_URL}/users/getAllUsers`);\r\n  }\r\n  getAllRoleNameService() {\r\n    return this.http.get<string[]>(`${API_URL}/users/getAllRoleNames`);\r\n  }\r\n  getAllRoleNameServiceU() {\r\n    return this.http.get<string[]>(`${API_URL}/users/getAllRoleNamesU`);\r\n  }\r\n  getAllAuthRole() {\r\n    return this.http.get<any>(`${API_URL}/medRoles/fetchAllRolesSummary`);\r\n  }\r\n  onClickOfAuthOfUsers(authUser: User) {\r\n    return this.http.get<string[]>(`${API_URL}/users/getAllRoleNames`);\r\n\r\n  }\r\n  onClickOfOpenOfUsers() {\r\n\r\n  }\r\n\r\n  onClickOfAuthOfModifyUsers(userId: string, makerId: string) {\r\n    return this.http.get<boolean>(`${API_URL}/users/authorizeUser/${userId}/${makerId}`)\r\n  }\r\n  onClickOfCloseOfModifyUsers(userId: string, makerId: string) {\r\n    return this.http.get<boolean>(`${API_URL}/users/closeUser/${userId}/${makerId}`)\r\n  }\r\n  onClickOfReopenOfModifyUser(userId: string, makerId: string) {\r\n    return this.http.get<boolean>(`${API_URL}/users/reopenUser/${userId}/${makerId}`)\r\n  }\r\n  onClickOfDeleteOfModifyUser(userobjForDelete: any) {\r\n    return this.http.get<boolean>(`${API_URL}/users/deleteUser/${userobjForDelete}`)\r\n  }\r\n  statusChangeUser(user_id) {\r\n    return this.http.get<any>(`${API_URL}/users/statusUser/${user_id}`)\r\n  }\r\n  refreshGl() {\r\n    return this.http.get<any>(`${API_URL}/refxch`);\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///"}