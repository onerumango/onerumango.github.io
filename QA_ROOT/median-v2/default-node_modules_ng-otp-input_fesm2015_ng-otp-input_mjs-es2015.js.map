{"version":3,"file":"default-node_modules_ng-otp-input_fesm2015_ng-otp-input_mjs-es2015.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;gBAgC+GA;;AAAAA,IAAAA,4DAuO8V;AAvO9VA,IAAAA,wDAuOqW;AAvOrWA,MAAAA,2DAuOqW;AAAA,qBAvOrWA,2DAuOqW;AAAA;AAAA;AAAA,0BAvOrWA,2DAuOqW;AAAA;AAAA,qBAvOrWA,2DAuOqW;AAAA;AAAA;AAvOrWA,MAAAA,2DAuOqW;AAAA,qBAvOrWA,2DAuOqW;AAAA;AAAA;AAAA,0BAvOrWA,2DAuOqW;AAAA;AAAA,qBAvOrWA,2DAuOqW;AAAA;AAAA;AAvOrWA,IAAAA,0DAuO8V;;;;;;mBAvO9VA;AAAAA,IAAAA,oEAuO6iB;AAvO7iBA,IAAAA,wDAuOqY;;;;;;AAvOrYA,IAAAA,4DAuOkL;AAvOlLA,IAAAA,wDAuO8V;AAvO9VA,IAAAA;AAAAA,IAAAA,0DAuOq2B;;;;mBAvOr2BA;AAAAA,IAAAA,oEAuOuL;AAvOvLA,IAAAA,oEAuOwP;AAvOxPA,IAAAA,wDAuOmT;AAvOnTA,IAAAA,uDAuOwoB;AAvOxoBA,IAAAA,wDAuOwoB,YAvOxoBA,yDAuOwoB;;;;AArQvvB,MAAMc,YAAN,CAAmB;AACH,SAALC,KAAK,CAACC,KAAD,EAAQ;AAChB,WAAO,KAAKC,KAAL,CAAWD,KAAX,EAAkB,KAAlB,CAAP;AACH;;AACc,SAARE,QAAQ,CAACF,KAAD,EAAQ;AACnB,WAAO,KAAKC,KAAL,CAAWD,KAAX,EAAkB,YAAlB,CAAP;AACH;;AACiB,SAAXG,WAAW,CAACH,KAAD,EAAQ;AACtB,WAAO,KAAKC,KAAL,CAAWD,KAAX,EAAkB,WAAlB,CAAP;AACH;;AACkB,SAAZI,YAAY,CAACJ,KAAD,EAAQ;AACvB,WAAO,KAAKC,KAAL,CAAWD,KAAX,EAAkB,kBAAlB,CAAP;AACH;;AACiB,SAAXK,WAAW,CAACL,KAAD,EAAQ;AACtB,WAAO,KAAKC,KAAL,CAAWD,KAAX,EAAkB,gBAAlB,CAAP;AACH;;AACgB,SAAVM,UAAU,CAACN,KAAD,EAAQ;AACrB,WAAO,KAAKC,KAAL,CAAWD,KAAX,EAAkB,YAAlB,CAAP,CADqB,CACmB;AAC3C;;AACW,SAALC,KAAK,CAACD,KAAD,EAAQO,IAAR,EAAc;AACtB,QAAIC,WAAW,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAlB;AACA,WAAOD,WAAW,CAACE,IAAZ,CAAiBC,CAAC,IAAIA,CAAC,KAAKX,KAAK,CAACY,GAAlC,CAAP;AACH;;AAtBc;;AAyBnB,MAAMC,QAAN,CAAe;AACXC,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACb,WAAOC,MAAM,CAACT,IAAP,CAAYQ,KAAZ,CAAP;AACH;;AAHU;AAKf;;;AAAmBF,QAAQ,CAACI,IAAT;AAAA,mBAAsGJ,QAAtG;AAAA;AACnB;;;AAAmBA,QAAQ,CAACK,KAAT,kBAD4FlC,0DAC5F;AAAA;AAAA,QAAoG6B,QAApG;AAAA;AAAA;;AACnB;AAAA,qDAF+G7B,+DAE/G,CAA4F6B,QAA5F,EAAkH,CAAC;AACvGM,IAAAA,IAAI,EAAElC,+CADiG;AAEvGmC,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,IAAI,EAAE;AADP,KAAD;AAFiG,GAAD,CAAlH;AAAA;;AAOA,MAAMC,mBAAN,CAA0B;AACtBC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAc;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAd,CAFkB,CAGlB;;AACA,SAAKC,aAAL,GAAqB,IAAIzC,uDAAJ,EAArB;AACA,SAAK0C,aAAL,GAAqB,IAAIC,KAAJ,CAAU,KAAKJ,MAAL,CAAYC,MAAtB,CAArB;AACA,SAAKI,YAAL,GAAoBC,IAAI,CAACC,MAAL,GACfC,QADe,CACN,EADM,EAEfC,SAFe,CAEL,CAFK,IAEA,IAAIC,IAAJ,GAAWC,OAAX,GAAqBH,QAArB,CAA8B,EAA9B,CAFpB;AAGH;;AACY,MAATI,SAAS,GAAG;AACZ,QAAIC,EAAJ,EAAQC,EAAR;;AACA,WAAO,CAAC,CAACD,EAAE,GAAG,KAAKb,MAAX,MAAuB,IAAvB,IAA+Ba,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACE,eAA5D,IACD,UADC,GAED,CAAC,CAACD,EAAE,GAAG,KAAKd,MAAX,MAAuB,IAAvB,IAA+Bc,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACE,gBAA5D,IACI,KADJ,GAEI,MAJV;AAKH;;AACDC,EAAAA,QAAQ,GAAG;AACP,SAAKC,OAAL,GAAe,IAAInD,qDAAJ,CAAc,EAAd,CAAf;;AACA,SAAK,IAAIoD,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKnB,MAAL,CAAYC,MAAxC,EAAgDkB,KAAK,EAArD,EAAyD;AACrD,WAAKD,OAAL,CAAaE,UAAb,CAAwB,KAAKC,cAAL,CAAoBF,KAApB,CAAxB,EAAoD,IAAInD,uDAAJ,EAApD;AACH;;AACD,SAAKkD,OAAL,CAAaI,YAAb,CAA0BC,SAA1B,CAAqCC,CAAD,IAAO;AACvC,WAAKzB,QAAL,CAAcV,SAAd,CAAwB,KAAK6B,OAAL,CAAaO,QAArC,EAA+CC,OAA/C,CAAwDxC,CAAD,IAAO;AAC1D,YAAIyC,GAAG,GAAG,KAAKT,OAAL,CAAaO,QAAb,CAAsBvC,CAAtB,EAAyBI,KAAnC;;AACA,YAAIqC,GAAG,IAAIA,GAAG,CAAC1B,MAAJ,GAAa,CAAxB,EAA2B;AACvB,cAAI0B,GAAG,CAAC1B,MAAJ,IAAc,KAAKD,MAAL,CAAYC,MAA9B,EAAsC;AAClC,iBAAK2B,QAAL,CAAcD,GAAd;AACH,WAFD,MAGK;AACD,iBAAKE,YAAL;AACH;AACJ;AACJ,OAVD;AAWH,KAZD;AAaH;;AACDC,EAAAA,eAAe,GAAG;AACd,QAAI,CAAC,KAAK9B,MAAL,CAAY+B,gBAAjB,EAAmC;AAC/B,YAAMC,aAAa,GAAGC,QAAQ,CAACC,cAAT,CAAyB,KAAI,KAAK7B,YAAa,EAA/C,CAAtB;;AACA,UAAI2B,aAAJ,EAAmB;AACf,cAAMG,GAAG,GAAGH,aAAa,CAACI,sBAAd,CAAqC,WAArC,EAAkD,CAAlD,CAAZ;;AACA,YAAID,GAAG,IAAIA,GAAG,CAACE,KAAf,EAAsB;AAClBF,UAAAA,GAAG,CAACE,KAAJ;AACH;AACJ;AACJ;AACJ;;AACDhB,EAAAA,cAAc,CAACiB,GAAD,EAAM;AAChB,WAAQ,QAAOA,GAAI,EAAnB;AACH;;AACDC,EAAAA,SAAS,CAACC,MAAD,EAASC,QAAT,EAAmB;AACxB,UAAMC,WAAW,GAAG,KAAKC,QAAL,CAAcF,QAAQ,GAAG,CAAzB,CAApB;AACA,UAAMG,cAAc,GAAG,KAAKD,QAAL,CAAcF,QAAd,CAAvB;;AACA,QAAIpE,YAAY,CAACQ,UAAb,CAAwB2D,MAAxB,CAAJ,EAAqC;AACjCA,MAAAA,MAAM,CAACK,cAAP;AACA,aAAO,KAAP;AACH;;AACD,QAAIxE,YAAY,CAACK,WAAb,CAAyB8D,MAAzB,CAAJ,EAAsC;AAClC,UAAI,CAACA,MAAM,CAACM,MAAP,CAAcxD,KAAnB,EAA0B;AACtB,aAAKyD,UAAL,CAAgBL,WAAhB,EAA6BD,QAAQ,GAAG,CAAxC;AACA,aAAKO,WAAL,CAAiBN,WAAjB;AACH,OAHD,MAIK;AACD,aAAKK,UAAL,CAAgBH,cAAhB,EAAgCH,QAAhC;AACH;;AACD,WAAKZ,YAAL;AACA;AACH;AACJ;;AACDoB,EAAAA,OAAO,CAACT,MAAD,EAAS;AACZ,QAAIU,MAAM,GAAG,KAAKC,UAAL,GAAmB,GAAE,KAAKA,UAAW,GAAEX,MAAM,CAACM,MAAP,CAAcxD,KAAM,EAA3D,GAA+DkD,MAAM,CAACM,MAAP,CAAcxD,KAA1F;;AACA,QAAI,KAAKU,MAAL,CAAYgB,gBAAZ,IAAgC,CAAC,KAAKoC,cAAL,CAAoBF,MAApB,CAArC,EAAkE;AAC9DV,MAAAA,MAAM,CAACM,MAAP,CAAcxD,KAAd,GAAsB,EAAtB;AACAkD,MAAAA,MAAM,CAACa,eAAP;AACAb,MAAAA,MAAM,CAACK,cAAP;AACA;AACH;AACJ;;AACDS,EAAAA,OAAO,CAACd,MAAD,EAASC,QAAT,EAAmB;AACtB,QAAIpE,YAAY,CAACC,KAAb,CAAmBkE,MAAnB,CAAJ,EAAgC;AAC5BC,MAAAA,QAAQ,IAAI,CAAZ;AACH;;AACD,UAAMc,WAAW,GAAG,KAAKZ,QAAL,CAAcF,QAAQ,GAAG,CAAzB,CAApB;AACA,UAAMC,WAAW,GAAG,KAAKC,QAAL,CAAcF,QAAQ,GAAG,CAAzB,CAApB;AACA,UAAMG,cAAc,GAAG,KAAKD,QAAL,CAAcF,QAAd,CAAvB;;AACA,QAAIpE,YAAY,CAACM,YAAb,CAA0B6D,MAA1B,CAAJ,EAAuC;AACnCA,MAAAA,MAAM,CAACK,cAAP;AACA,WAAKG,WAAL,CAAiBO,WAAjB;AACA;AACH;;AACD,QAAIlF,YAAY,CAACO,WAAb,CAAyB4D,MAAzB,CAAJ,EAAsC;AAClCA,MAAAA,MAAM,CAACK,cAAP;AACA,WAAKG,WAAL,CAAiBN,WAAjB;AACA;AACH;;AACD,QAAIrE,YAAY,CAACI,QAAb,CAAsB+D,MAAtB,CAAJ,EAAmC;AAC/B,UAAI,CAACA,MAAM,CAACM,MAAP,CAAcxD,KAAnB,EAA0B;AACtB,aAAKyD,UAAL,CAAgBL,WAAhB,EAA6BD,QAAQ,GAAG,CAAxC;AACA,aAAKO,WAAL,CAAiBN,WAAjB;AACH,OAHD,MAIK;AACD,aAAKK,UAAL,CAAgBH,cAAhB,EAAgCH,QAAhC;AACH;;AACD,WAAKZ,YAAL;AACA;AACH;;AACD,QAAI,CAACW,MAAM,CAACM,MAAP,CAAcxD,KAAnB,EAA0B;AACtB;AACH;;AACD,QAAI,KAAKkE,cAAL,CAAoBhB,MAApB,CAAJ,EAAiC;AAC7B,WAAKQ,WAAL,CAAiBO,WAAjB;AACH;;AACD,SAAK1B,YAAL;AACH;;AACDuB,EAAAA,cAAc,CAACzB,GAAD,EAAM;AAChB,WAAOA,GAAG,IAAI,cAAc8B,IAAd,CAAmB9B,GAAnB,CAAd;AACH;;AACDgB,EAAAA,QAAQ,CAACL,GAAD,EAAM;AACV,WAAQ,OAAMA,GAAI,IAAG,KAAKjC,YAAa,EAAvC;AACH;;AACD0C,EAAAA,UAAU,CAACW,KAAD,EAAQjB,QAAR,EAAkB;AACxB,QAAI5B,EAAJ;;AACA,QAAI8C,QAAQ,GAAG,KAAKtC,cAAL,CAAoBoB,QAApB,CAAf;AACA,KAAC5B,EAAE,GAAG,KAAKK,OAAL,CAAaO,QAAb,CAAsBkC,QAAtB,CAAN,MAA2C,IAA3C,IAAmD9C,EAAE,KAAK,KAAK,CAA/D,GAAmE,KAAK,CAAxE,GAA4EA,EAAE,CAACe,QAAH,CAAY,IAAZ,CAA5E;AACA,UAAMO,GAAG,GAAGF,QAAQ,CAACC,cAAT,CAAwBwB,KAAxB,CAAZ;;AACA,QAAIvB,GAAG,IAAIA,GAAG,YAAYyB,gBAA1B,EAA4C;AACxCzB,MAAAA,GAAG,CAAC7C,KAAJ,GAAY,IAAZ;AACH;AACJ;;AACD0D,EAAAA,WAAW,CAACU,KAAD,EAAQ;AACf,SAAKG,OAAL,CAAaH,KAAb;AACA,UAAMvB,GAAG,GAAGF,QAAQ,CAACC,cAAT,CAAwBwB,KAAxB,CAAZ;;AACA,QAAIvB,GAAG,IAAIA,GAAG,CAAC2B,iBAAf,EAAkC;AAC9BC,MAAAA,UAAU,CAAC,MAAM;AACb5B,QAAAA,GAAG,CAAC2B,iBAAJ,CAAsB,CAAtB,EAAyB,CAAzB;AACH,OAFS,EAEP,CAFO,CAAV;AAGH;AACJ;;AACDN,EAAAA,cAAc,CAACjF,KAAD,EAAQ;AAClB,UAAMyF,GAAG,GAAGzF,KAAK,CAACY,GAAlB;AACA,UAAM8E,QAAQ,GAAG,4BAA4BR,IAA5B,CAAiCS,SAAS,CAACC,SAA3C,CAAjB;AACA,WAAQF,QAAQ,IACZ,gBAAgBR,IAAhB,CAAqBO,GAArB,CADJ;AAEH;;AACDH,EAAAA,OAAO,CAACH,KAAD,EAAQ;AACX,UAAMvB,GAAG,GAAGF,QAAQ,CAACC,cAAT,CAAwBwB,KAAxB,CAAZ;;AACA,QAAIvB,GAAJ,EAAS;AACLA,MAAAA,GAAG,CAACE,KAAJ;AACH;AACJ,GAvJqB,CAwJtB;;;AACAT,EAAAA,QAAQ,CAACtC,KAAD,EAAQ;AACZ,QAAI,KAAKU,MAAL,CAAYgB,gBAAZ,IAAgCoD,KAAK,CAAC9E,KAAD,CAAzC,EAAkD;AAC9C;AACH;;AACD,SAAK4B,OAAL,CAAamD,KAAb;;AACA,QAAI,CAAC/E,KAAL,EAAY;AACR,WAAKuC,YAAL;AACA;AACH;;AACDvC,IAAAA,KAAK,GAAGA,KAAK,CAACkB,QAAN,GAAiB8D,OAAjB,CAAyB,KAAzB,EAAgC,EAAhC,CAAR,CATY,CASiC;;AAC7ClE,IAAAA,KAAK,CAACmE,IAAN,CAAWjF,KAAX,EAAkBoC,OAAlB,CAA0B,CAAC8C,CAAD,EAAIlC,GAAJ,KAAY;AAClC,UAAI,KAAKpB,OAAL,CAAauD,GAAb,CAAiB,KAAKpD,cAAL,CAAoBiB,GAApB,CAAjB,CAAJ,EAAgD;AAC5C,aAAKpB,OAAL,CAAauD,GAAb,CAAiB,KAAKpD,cAAL,CAAoBiB,GAApB,CAAjB,EAA2CV,QAA3C,CAAoD4C,CAApD;AACH;AACJ,KAJD;;AAKA,QAAI,CAAC,KAAKxE,MAAL,CAAY+B,gBAAjB,EAAmC;AAC/B,YAAMC,aAAa,GAAGC,QAAQ,CAACC,cAAT,CAAyB,KAAI,KAAK7B,YAAa,EAA/C,CAAtB;AACA,UAAIqE,qBAAqB,GAAGpF,KAAK,CAACW,MAAN,GAAe,KAAKD,MAAL,CAAYC,MAA3B,GAAoCX,KAAK,CAACW,MAA1C,GAAoD,KAAKD,MAAL,CAAYC,MAAZ,GAAqB,CAArG;AACA,UAAIkC,GAAG,GAAGH,aAAa,CAACI,sBAAd,CAAqC,WAArC,EAAkDsC,qBAAlD,CAAV;;AACA,UAAIvC,GAAG,IAAIA,GAAG,CAACE,KAAf,EAAsB;AAClBF,QAAAA,GAAG,CAACE,KAAJ;AACH;AACJ;;AACD,SAAKR,YAAL;AACH;;AACDA,EAAAA,YAAY,GAAG;AACX,QAAIhB,EAAJ;;AACA,QAAIc,GAAG,GAAG,EAAV;AACA,SAAK5B,QAAL,CAAcV,SAAd,CAAwB,KAAK6B,OAAL,CAAaO,QAArC,EAA+CC,OAA/C,CAAuDxC,CAAC,IAAI;AACxD,UAAI,KAAKgC,OAAL,CAAaO,QAAb,CAAsBvC,CAAtB,EAAyBI,KAA7B,EAAoC;AAChC,YAAIqF,OAAO,GAAG,KAAKzD,OAAL,CAAaO,QAAb,CAAsBvC,CAAtB,EAAyBI,KAAvC;AACA,YAAIsF,cAAc,GAAGD,OAAO,CAAC1E,MAAR,GAAiB,CAAtC;AACA,YAAI4E,sBAAsB,GAAG,CAAC,KAAK7E,MAAL,CAAYgB,gBAAb,IAAiC,KAAKhB,MAAL,CAAY8E,UAA7C,KAA4D,KAAK9E,MAAL,CAAY8E,UAAZ,CAAuBC,iBAAvB,MAA8C,OAA9C,IAAyD,KAAK/E,MAAL,CAAY8E,UAAZ,CAAuBC,iBAAvB,MAA8C,OAAnK,CAA7B;AACAJ,QAAAA,OAAO,GAAGA,OAAO,CAAC,CAAD,CAAjB;AACA,YAAIK,cAAc,GAAGH,sBAAsB,GAAG,KAAK7E,MAAL,CAAY8E,UAAZ,CAAuBC,iBAAvB,MAA8C,OAA9C,GAAwDJ,OAAO,CAACM,WAAR,EAAxD,GAAgFN,OAAO,CAACO,WAAR,EAAnF,GAA2GP,OAAtJ;;AACA,YAAIE,sBAAsB,IAAIG,cAAc,IAAIL,OAAhD,EAAyD;AACrDE,UAAAA,sBAAsB,GAAG,KAAzB;AACH,SAFD,MAGK;AACDF,UAAAA,OAAO,GAAGK,cAAV;AACH;;AACDrD,QAAAA,GAAG,IAAIgD,OAAP;;AACA,YAAIC,cAAc,IAAIC,sBAAtB,EAA8C;AAC1C,eAAK3D,OAAL,CAAaO,QAAb,CAAsBvC,CAAtB,EAAyB0C,QAAzB,CAAkC+C,OAAlC;AACH;AACJ;AACJ,KAlBD;;AAmBA,QAAI,CAAC9D,EAAE,GAAG,KAAKsE,QAAX,MAAyB,IAAzB,IAAiCtE,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACe,QAAjE,EAA2E;AACvE,WAAKuD,QAAL,CAAcvD,QAAd,CAAuBD,GAAvB;AACH;;AACD,SAAKzB,aAAL,CAAmBkF,IAAnB,CAAwBzD,GAAxB;AACA,SAAKwB,UAAL,GAAkBxB,GAAlB;AACH;;AACD0D,EAAAA,WAAW,CAACC,CAAD,EAAI;AACX;AACA,QAAIC,aAAa,GAAGD,CAAC,CAACC,aAAF,IAAmBC,MAAM,CAAC,eAAD,CAA7C;;AACA,QAAID,aAAJ,EAAmB;AACf,UAAIE,UAAU,GAAGF,aAAa,CAACG,OAAd,CAAsB,MAAtB,CAAjB;AACH,KALU,CAMX;;;AACAJ,IAAAA,CAAC,CAACjC,eAAF;AACAiC,IAAAA,CAAC,CAACzC,cAAF;;AACA,QAAI,CAAC4C,UAAD,IAAgB,KAAKzF,MAAL,CAAYgB,gBAAZ,IAAgC,CAAC,KAAKoC,cAAL,CAAoBqC,UAApB,CAArD,EAAuF;AACnF;AACH;;AACD,SAAK7D,QAAL,CAAc6D,UAAd;AACH;;AA3NqB;AA6N1B;;;AAAmB5F,mBAAmB,CAACL,IAApB;AAAA,mBAAiHK,mBAAjH,EAtO4FtC,+DAsO5F,CAAsJ6B,QAAtJ;AAAA;AACnB;;;AAAmBS,mBAAmB,CAAC8F,IAApB,kBAvO4FpI,+DAuO5F;AAAA,QAAqGsC,mBAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAvO4FtC,MAAAA,wDAuOkL,uDAA9Q;AAAA;;AAAA;AAvO4FA,MAAAA,wDAuOmR,2DAA/W;AAAA;AAAA;AAAA,eAA80CY,iDAA90C,EAA+5CA,oDAA/5C,EAAi+CA,oDAAj+C,EAA2kDL,gEAA3kD,EAAw0DA,4DAAx0D,EAA88DA,2DAA98D,EAAmiEA,gEAAniE;AAAA,UAA6sEsB,QAA7sE;AAAA;AAAA;;AACnB;AAAA,qDAxO+G7B,+DAwO/G,CAA4FsC,mBAA5F,EAA6H,CAAC;AAClHH,IAAAA,IAAI,EAAEhC,oDAD4G;AAElHiC,IAAAA,IAAI,EAAE,CAAC;AAAEwG,MAAAA,QAAQ,EAAE,cAAZ;AAA4BC,MAAAA,QAAQ,EAAE,2rBAAtC;AAAmuBC,MAAAA,MAAM,EAAE,CAAC,mWAAD;AAA3uB,KAAD;AAF4G,GAAD,CAA7H,EAG4B,YAAY;AAAE,WAAO,CAAC;AAAE3G,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAP;AAA8B,GAHxE,EAG0F;AAAEY,IAAAA,MAAM,EAAE,CAAC;AACrFN,MAAAA,IAAI,EAAE/B,gDAAKA;AAD0E,KAAD,CAAV;AAE1EuC,IAAAA,aAAa,EAAE,CAAC;AAChBR,MAAAA,IAAI,EAAE9B,iDAAMA;AADI,KAAD,CAF2D;AAI1EuH,IAAAA,QAAQ,EAAE,CAAC;AACXzF,MAAAA,IAAI,EAAE/B,gDAAKA;AADA,KAAD;AAJgE,GAH1F;AAAA;;AAWA,MAAM2I,gBAAN,CAAuB;AAEvB;;;AAAmBA,gBAAgB,CAAC9G,IAAjB;AAAA,mBAA8G8G,gBAA9G;AAAA;AACnB;;;AAAmBA,gBAAgB,CAACC,IAAjB,kBAtP4FhJ,8DAsP5F;AAAA,QAA+G+I;AAA/G;AAGnB;;AAAmBA,gBAAgB,CAACE,IAAjB,kBAzP4FjJ,8DAyP5F;AAAA,aAA4I,CAAC6B,QAAD,CAA5I;AAAA,YAAkK,CACzKhB,yDADyK,EAEzKH,uDAFyK,EAGzKC,+DAHyK,CAAlK;AAAA;;AAKnB;AAAA,qDA9P+GX,+DA8P/G,CAA4F+I,gBAA5F,EAA0H,CAAC;AAC/G5G,IAAAA,IAAI,EAAE7B,mDADyG;AAE/G8B,IAAAA,IAAI,EAAE,CAAC;AACC8G,MAAAA,OAAO,EAAE,CACLrI,yDADK,EAELH,uDAFK,EAGLC,+DAHK,CADV;AAMCwI,MAAAA,YAAY,EAAE,CAAC7G,mBAAD,EAAsBT,QAAtB,CANf;AAOCuH,MAAAA,OAAO,EAAE,CAAC9G,mBAAD,CAPV;AAQC+G,MAAAA,SAAS,EAAE,CAACxH,QAAD;AARZ,KAAD;AAFyG,GAAD,CAA1H;AAAA;;AAcA,MAAMyH,MAAN,CAAa;AAGb;AACA;AACA;;AAEA;AACA;AACA","sources":["./node_modules/ng-otp-input/fesm2015/ng-otp-input.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Pipe, EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass KeyboardUtil {\r\n    static ifTab(event) {\r\n        return this.ifKey(event, 'Tab');\r\n    }\r\n    static ifDelete(event) {\r\n        return this.ifKey(event, 'Delete;Del');\r\n    }\r\n    static ifBackspace(event) {\r\n        return this.ifKey(event, 'Backspace');\r\n    }\r\n    static ifRightArrow(event) {\r\n        return this.ifKey(event, 'ArrowRight;Right');\r\n    }\r\n    static ifLeftArrow(event) {\r\n        return this.ifKey(event, 'ArrowLeft;Left');\r\n    }\r\n    static ifSpacebar(event) {\r\n        return this.ifKey(event, 'Spacebar; '); //don't remove the space after ; as this will check for space key\r\n    }\r\n    static ifKey(event, keys) {\r\n        let keysToCheck = keys.split(';');\r\n        return keysToCheck.some(k => k === event.key);\r\n    }\r\n}\n\nclass KeysPipe {\r\n    transform(value) {\r\n        return Object.keys(value);\r\n    }\r\n}\r\n/** @nocollapse */ KeysPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: KeysPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\r\n/** @nocollapse */ KeysPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: KeysPipe, name: \"keys\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: KeysPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'keys'\r\n                }]\r\n        }] });\n\nclass NgOtpInputComponent {\r\n    constructor(keysPipe) {\r\n        this.keysPipe = keysPipe;\r\n        this.config = { length: 4 };\r\n        // tslint:disable-next-line: no-output-on-prefix\r\n        this.onInputChange = new EventEmitter();\r\n        this.inputControls = new Array(this.config.length);\r\n        this.componentKey = Math.random()\r\n            .toString(36)\r\n            .substring(2) + new Date().getTime().toString(36);\r\n    }\r\n    get inputType() {\r\n        var _a, _b;\r\n        return ((_a = this.config) === null || _a === void 0 ? void 0 : _a.isPasswordInput)\r\n            ? 'password'\r\n            : ((_b = this.config) === null || _b === void 0 ? void 0 : _b.allowNumbersOnly)\r\n                ? 'tel'\r\n                : 'text';\r\n    }\r\n    ngOnInit() {\r\n        this.otpForm = new FormGroup({});\r\n        for (let index = 0; index < this.config.length; index++) {\r\n            this.otpForm.addControl(this.getControlName(index), new FormControl());\r\n        }\r\n        this.otpForm.valueChanges.subscribe((v) => {\r\n            this.keysPipe.transform(this.otpForm.controls).forEach((k) => {\r\n                var val = this.otpForm.controls[k].value;\r\n                if (val && val.length > 1) {\r\n                    if (val.length >= this.config.length) {\r\n                        this.setValue(val);\r\n                    }\r\n                    else {\r\n                        this.rebuildValue();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ngAfterViewInit() {\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            if (containerItem) {\r\n                const ele = containerItem.getElementsByClassName('otp-input')[0];\r\n                if (ele && ele.focus) {\r\n                    ele.focus();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getControlName(idx) {\r\n        return `ctrl_${idx}`;\r\n    }\r\n    onKeyDown($event, inputIdx) {\r\n        const prevInputId = this.getBoxId(inputIdx - 1);\r\n        const currentInputId = this.getBoxId(inputIdx);\r\n        if (KeyboardUtil.ifSpacebar($event)) {\r\n            $event.preventDefault();\r\n            return false;\r\n        }\r\n        if (KeyboardUtil.ifBackspace($event)) {\r\n            if (!$event.target.value) {\r\n                this.clearInput(prevInputId, inputIdx - 1);\r\n                this.setSelected(prevInputId);\r\n            }\r\n            else {\r\n                this.clearInput(currentInputId, inputIdx);\r\n            }\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n    }\r\n    onInput($event) {\r\n        let newVal = this.currentVal ? `${this.currentVal}${$event.target.value}` : $event.target.value;\r\n        if (this.config.allowNumbersOnly && !this.validateNumber(newVal)) {\r\n            $event.target.value = '';\r\n            $event.stopPropagation();\r\n            $event.preventDefault();\r\n            return;\r\n        }\r\n    }\r\n    onKeyUp($event, inputIdx) {\r\n        if (KeyboardUtil.ifTab($event)) {\r\n            inputIdx -= 1;\r\n        }\r\n        const nextInputId = this.getBoxId(inputIdx + 1);\r\n        const prevInputId = this.getBoxId(inputIdx - 1);\r\n        const currentInputId = this.getBoxId(inputIdx);\r\n        if (KeyboardUtil.ifRightArrow($event)) {\r\n            $event.preventDefault();\r\n            this.setSelected(nextInputId);\r\n            return;\r\n        }\r\n        if (KeyboardUtil.ifLeftArrow($event)) {\r\n            $event.preventDefault();\r\n            this.setSelected(prevInputId);\r\n            return;\r\n        }\r\n        if (KeyboardUtil.ifDelete($event)) {\r\n            if (!$event.target.value) {\r\n                this.clearInput(prevInputId, inputIdx - 1);\r\n                this.setSelected(prevInputId);\r\n            }\r\n            else {\r\n                this.clearInput(currentInputId, inputIdx);\r\n            }\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        if (!$event.target.value) {\r\n            return;\r\n        }\r\n        if (this.ifValidKeyCode($event)) {\r\n            this.setSelected(nextInputId);\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    validateNumber(val) {\r\n        return val && /^\\d*\\.?\\d*$/.test(val);\r\n    }\r\n    getBoxId(idx) {\r\n        return `otp_${idx}_${this.componentKey}`;\r\n    }\r\n    clearInput(eleId, inputIdx) {\r\n        var _a;\r\n        let ctrlName = this.getControlName(inputIdx);\r\n        (_a = this.otpForm.controls[ctrlName]) === null || _a === void 0 ? void 0 : _a.setValue(null);\r\n        const ele = document.getElementById(eleId);\r\n        if (ele && ele instanceof HTMLInputElement) {\r\n            ele.value = null;\r\n        }\r\n    }\r\n    setSelected(eleId) {\r\n        this.focusTo(eleId);\r\n        const ele = document.getElementById(eleId);\r\n        if (ele && ele.setSelectionRange) {\r\n            setTimeout(() => {\r\n                ele.setSelectionRange(0, 1);\r\n            }, 0);\r\n        }\r\n    }\r\n    ifValidKeyCode(event) {\r\n        const inp = event.key;\r\n        const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n        return (isMobile ||\r\n            /[a-zA-Z0-9-_]/.test(inp));\r\n    }\r\n    focusTo(eleId) {\r\n        const ele = document.getElementById(eleId);\r\n        if (ele) {\r\n            ele.focus();\r\n        }\r\n    }\r\n    // method to set component value\r\n    setValue(value) {\r\n        if (this.config.allowNumbersOnly && isNaN(value)) {\r\n            return;\r\n        }\r\n        this.otpForm.reset();\r\n        if (!value) {\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        value = value.toString().replace(/\\s/g, ''); // remove whitespace\r\n        Array.from(value).forEach((c, idx) => {\r\n            if (this.otpForm.get(this.getControlName(idx))) {\r\n                this.otpForm.get(this.getControlName(idx)).setValue(c);\r\n            }\r\n        });\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            var indexOfElementToFocus = value.length < this.config.length ? value.length : (this.config.length - 1);\r\n            let ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];\r\n            if (ele && ele.focus) {\r\n                ele.focus();\r\n            }\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    rebuildValue() {\r\n        var _a;\r\n        let val = '';\r\n        this.keysPipe.transform(this.otpForm.controls).forEach(k => {\r\n            if (this.otpForm.controls[k].value) {\r\n                let ctrlVal = this.otpForm.controls[k].value;\r\n                let isLengthExceed = ctrlVal.length > 1;\r\n                let isCaseTransformEnabled = !this.config.allowNumbersOnly && this.config.letterCase && (this.config.letterCase.toLocaleLowerCase() == 'upper' || this.config.letterCase.toLocaleLowerCase() == 'lower');\r\n                ctrlVal = ctrlVal[0];\r\n                let transformedVal = isCaseTransformEnabled ? this.config.letterCase.toLocaleLowerCase() == 'upper' ? ctrlVal.toUpperCase() : ctrlVal.toLowerCase() : ctrlVal;\r\n                if (isCaseTransformEnabled && transformedVal == ctrlVal) {\r\n                    isCaseTransformEnabled = false;\r\n                }\r\n                else {\r\n                    ctrlVal = transformedVal;\r\n                }\r\n                val += ctrlVal;\r\n                if (isLengthExceed || isCaseTransformEnabled) {\r\n                    this.otpForm.controls[k].setValue(ctrlVal);\r\n                }\r\n            }\r\n        });\r\n        if ((_a = this.formCtrl) === null || _a === void 0 ? void 0 : _a.setValue) {\r\n            this.formCtrl.setValue(val);\r\n        }\r\n        this.onInputChange.emit(val);\r\n        this.currentVal = val;\r\n    }\r\n    handlePaste(e) {\r\n        // Get pasted data via clipboard API\r\n        let clipboardData = e.clipboardData || window['clipboardData'];\r\n        if (clipboardData) {\r\n            var pastedData = clipboardData.getData('Text');\r\n        }\r\n        // Stop data actually being pasted into div\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        if (!pastedData || (this.config.allowNumbersOnly && !this.validateNumber(pastedData))) {\r\n            return;\r\n        }\r\n        this.setValue(pastedData);\r\n    }\r\n}\r\n/** @nocollapse */ NgOtpInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputComponent, deps: [{ token: KeysPipe }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgOtpInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: NgOtpInputComponent, selector: \"ng-otp-input\", inputs: { config: \"config\", formCtrl: \"formCtrl\" }, outputs: { onInputChange: \"onInputChange\" }, ngImport: i0, template: \"<div class=\\\"ng-otp-input-wrapper wrapper {{config.containerClass}}\\\" id=\\\"c_{{componentKey}}\\\" *ngIf=\\\"otpForm?.controls\\\"\\r\\n  [ngStyle]=\\\"config.containerStyles\\\">\\r\\n  <input (paste)=\\\"handlePaste($event)\\\" [pattern]=\\\"config.allowNumbersOnly ? '\\\\\\\\d*' : ''\\\" [type]=\\\"inputType\\\"  [placeholder]=\\\"config?.placeholder || ''\\\"\\r\\n    [ngStyle]=\\\"config.inputStyles\\\" \\r\\n    class=\\\"otp-input {{config.inputClass}}\\\" autocomplete=\\\"one-time-code\\\" *ngFor=\\\"let item of otpForm?.controls | keys;let i=index\\\"\\r\\n    [formControl]=\\\"otpForm.controls[item]\\\" #inp [id]=\\\"getBoxId(i)\\\" \\r\\n    (keyup)=\\\"onKeyUp($event,i)\\\" (input)=\\\"onInput($event)\\\" (keydown)=\\\"onKeyDown($event,i)\\\" >\\r\\n</div>\", styles: [\".otp-input{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.ng-otp-input-wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input{width:30px;font-size:18px;height:30px}}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i3.PatternValidator, selector: \"[pattern][formControlName],[pattern][formControl],[pattern][ngModel]\", inputs: [\"pattern\"] }, { type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i3.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }], pipes: { \"keys\": KeysPipe } });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ng-otp-input', template: \"<div class=\\\"ng-otp-input-wrapper wrapper {{config.containerClass}}\\\" id=\\\"c_{{componentKey}}\\\" *ngIf=\\\"otpForm?.controls\\\"\\r\\n  [ngStyle]=\\\"config.containerStyles\\\">\\r\\n  <input (paste)=\\\"handlePaste($event)\\\" [pattern]=\\\"config.allowNumbersOnly ? '\\\\\\\\d*' : ''\\\" [type]=\\\"inputType\\\"  [placeholder]=\\\"config?.placeholder || ''\\\"\\r\\n    [ngStyle]=\\\"config.inputStyles\\\" \\r\\n    class=\\\"otp-input {{config.inputClass}}\\\" autocomplete=\\\"one-time-code\\\" *ngFor=\\\"let item of otpForm?.controls | keys;let i=index\\\"\\r\\n    [formControl]=\\\"otpForm.controls[item]\\\" #inp [id]=\\\"getBoxId(i)\\\" \\r\\n    (keyup)=\\\"onKeyUp($event,i)\\\" (input)=\\\"onInput($event)\\\" (keydown)=\\\"onKeyDown($event,i)\\\" >\\r\\n</div>\", styles: [\".otp-input{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.ng-otp-input-wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input{width:30px;font-size:18px;height:30px}}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: KeysPipe }]; }, propDecorators: { config: [{\r\n                type: Input\r\n            }], onInputChange: [{\r\n                type: Output\r\n            }], formCtrl: [{\r\n                type: Input\r\n            }] } });\n\nclass NgOtpInputModule {\r\n}\r\n/** @nocollapse */ NgOtpInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgOtpInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputModule, declarations: [NgOtpInputComponent, KeysPipe], imports: [CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule], exports: [NgOtpInputComponent] });\r\n/** @nocollapse */ NgOtpInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputModule, providers: [KeysPipe], imports: [[\r\n            CommonModule,\r\n            FormsModule,\r\n            ReactiveFormsModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: NgOtpInputModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule,\r\n                        FormsModule,\r\n                        ReactiveFormsModule\r\n                    ],\r\n                    declarations: [NgOtpInputComponent, KeysPipe],\r\n                    exports: [NgOtpInputComponent],\r\n                    providers: [KeysPipe]\r\n                }]\r\n        }] });\n\nclass Config {\r\n}\n\n/*\r\n * Public API Surface of ng-otp-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgOtpInputComponent, Config as NgOtpInputConfig, NgOtpInputModule };\n"],"names":["i0","Pipe","EventEmitter","Component","Input","Output","NgModule","i3","FormGroup","FormControl","FormsModule","ReactiveFormsModule","i2","CommonModule","KeyboardUtil","ifTab","event","ifKey","ifDelete","ifBackspace","ifRightArrow","ifLeftArrow","ifSpacebar","keys","keysToCheck","split","some","k","key","KeysPipe","transform","value","Object","ɵfac","ɵpipe","type","args","name","NgOtpInputComponent","constructor","keysPipe","config","length","onInputChange","inputControls","Array","componentKey","Math","random","toString","substring","Date","getTime","inputType","_a","_b","isPasswordInput","allowNumbersOnly","ngOnInit","otpForm","index","addControl","getControlName","valueChanges","subscribe","v","controls","forEach","val","setValue","rebuildValue","ngAfterViewInit","disableAutoFocus","containerItem","document","getElementById","ele","getElementsByClassName","focus","idx","onKeyDown","$event","inputIdx","prevInputId","getBoxId","currentInputId","preventDefault","target","clearInput","setSelected","onInput","newVal","currentVal","validateNumber","stopPropagation","onKeyUp","nextInputId","ifValidKeyCode","test","eleId","ctrlName","HTMLInputElement","focusTo","setSelectionRange","setTimeout","inp","isMobile","navigator","userAgent","isNaN","reset","replace","from","c","get","indexOfElementToFocus","ctrlVal","isLengthExceed","isCaseTransformEnabled","letterCase","toLocaleLowerCase","transformedVal","toUpperCase","toLowerCase","formCtrl","emit","handlePaste","e","clipboardData","window","pastedData","getData","ɵcmp","NgIf","NgStyle","NgForOf","DefaultValueAccessor","PatternValidator","NgControlStatus","FormControlDirective","selector","template","styles","NgOtpInputModule","ɵmod","ɵinj","imports","declarations","exports","providers","Config","NgOtpInputConfig"],"sourceRoot":"webpack:///"}