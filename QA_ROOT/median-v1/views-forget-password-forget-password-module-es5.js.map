{"version":3,"sources":["src/app/views/forget-password/forget-password.component.html","src/app/views/forget-password/forget-password-routing.module.ts","src/app/views/forget-password/forget-password.component.css","src/app/views/forget-password/forget-password.component.ts","src/app/views/forget-password/forget-password.module.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<mat-toolbar style=\\\"background-color: crimson;border-bottom-color: 5px solid yellow;\\\"><img src=\\\"assets/images/dtb1.png\\\"\\r\\n    alt=\\\"image\\\"></mat-toolbar>\\r\\n\\r\\n\\r\\n<div class=\\\"main-div\\\" *ngIf>\\r\\n  <div class=\\\"page-wrap height-100 black\\\">\\r\\n    <div class=\\\"session-form-hold\\\">\\r\\n      <mat-progress-bar mode=\\\"determinate\\\" class=\\\"session-progress\\\"></mat-progress-bar>\\r\\n      <mat-card>\\r\\n        <mat-card-content>\\r\\n          <div class=\\\"text-center pt-8 pb-16\\\">\\r\\n            <img width=\\\"60px\\\" src=\\\"assets/images/dtb1.png\\\" alt=\\\"\\\" class=\\\"mb-05\\\">\\r\\n            <p class=\\\"text-muted m-0\\\">New password will be sent to your email address</p>\\r\\n          </div>\\r\\n          <form #passwordReset=\\\"ngForm\\\">\\r\\n\\r\\n            <div class=\\\"pb-1\\\">\\r\\n              <mat-form-field class=\\\"full-width\\\">\\r\\n                <input matInput placeholder=\\\"User Id\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\" type=\\\"text\\\"\\r\\n                  name=\\\"username\\\" [(ngModel)]=\\\"username\\\" required [readonly]=\\\"isReadOnly\\\">\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div *ngIf=\\\"button1\\\">\\r\\n              <div class=\\\"pb-1\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <input id=\\\"otp\\\" autocomplete=\\\"off\\\" maxlength=\\\"6\\\" minlength=\\\"6\\\" matInput placeholder=\\\"Enter otp\\\"\\r\\n                    type=\\\"text\\\" name=\\\"otp\\\" [(ngModel)]=\\\"otp\\\" required>\\r\\n                </mat-form-field>\\r\\n\\r\\n              </div>\\r\\n              <div class=\\\"pb-1\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <input matInput placeholder=\\\"New password\\\" type=\\\"password\\\" password1 #password1=\\\"ngModel\\\"\\r\\n                    pattern=\\\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$\\\"\\r\\n                    [(ngModel)]=\\\"password\\\" name=\\\"password\\\" [type]=\\\"hide ? 'password' : 'text'\\\" required>\\r\\n                  <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n              <small class=\\\"form-error-msg\\\" *ngIf=\\\"password1.touched && !password1.valid\\\" style=\\\"color:blue\\\">\\r\\n                Please enter Minimum 8 characters, at least one uppercase letter, <br>one lowercase letter, one number\\r\\n                and\\r\\n                one special character </small>\\r\\n              <br>\\r\\n              <small style=\\\"color: red;\\\"> Submit Button Will be Enabled Only after entering valid password and OTP\\r\\n              </small>\\r\\n              <div class=\\\"text-center\\\">\\r\\n                <button mat-raised-button color=\\\"primary\\\" (click)=\\\"reset(passwordReset.value)\\\"\\r\\n                  [disabled]=\\\"!passwordReset.form.valid\\\" class=\\\"text-center full-width\\\">Submit</button>\\r\\n                <span fxFlex=\\\"5%\\\"></span>\\r\\n                <!-- <a mat-raised-button color=\\\"primary\\\" class=\\\"text-center full-width\\\" (click)=\\\"goHome()\\\">Home</a> -->\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n\\r\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"full-width mb-1\\\" (click)=\\\"getOtp(username)\\\"\\r\\n              *ngIf=\\\"button2\\\">Generate Otp</button>\\r\\n            <button mat-raised-button color=\\\"warn\\\" class=\\\"full-width mb-1\\\" (click)=\\\"goHome()\\\">Go to Login</button>\\r\\n          </form>\\r\\n        </mat-card-content>\\r\\n        <mat-progress-bar mode=\\\"indeterminate\\\" *ngIf='spinnerbutton'></mat-progress-bar>\\r\\n      </mat-card>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n</div>\\r\\n\\r\\n<div fxLayout=\\\"row\\\" >  \\r\\n  <div fxFlex=\\\"25%\\\">\\r\\n\\r\\n  </div>\\r\\n  <div fxFlex>\\r\\n    <br>\\r\\n    <mat-toolbar color=\\\"primary\\\" style=\\\"height:30px; font-size: small;\\\">\\r\\n        Reset Password\\r\\n        </mat-toolbar>\\r\\n    <mat-card>\\r\\n      <!-- <mat-card-title>\\r\\n        Change Password\\r\\n      </mat-card-title> -->\\r\\n      \\r\\n      <mat-card-content>\\r\\n        <form *ngIf=\\\"reactiveForm\\\" [formGroup]=\\\"reactiveForm\\\" novalidate>\\r\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n            <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n              <div class=\\\"pb-1\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <input matInput type=\\\"text\\\" [readonly]=\\\"editable\\\" placeholder=\\\"User Id\\\" #user name=\\\"userId\\\"\\r\\n                    formControlName=\\\"userId\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\r\\n                </mat-form-field>\\r\\n               \\r\\n             \\r\\n             <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput type=\\\"text\\\"  placeholder=\\\"OTP\\\" #otp name=\\\"otp\\\"\\r\\n                formControlName=\\\"otp\\\">\\r\\n            </mat-form-field>\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <input matInput type=\\\"password\\\" placeholder=\\\"New Password\\\" #newPassword name=\\\"password\\\"  [type]=\\\"hide ? 'password' : 'text'\\\"\\r\\n                    formControlName=\\\"password\\\">\\r\\n                    <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                </mat-form-field>\\r\\n                  \\r\\n                <mat-error *ngIf=\\\"reactiveForm.controls.password.errors && (reactiveForm.controls.password.touched || reactiveForm.controls.password.dirty)\\\">\\r\\n                  <small class=\\\"form-error-msg\\\" *ngIf=\\\"reactiveForm.hasError('required','password')\\\">\\r\\n                    Please enter your new password.\\r\\n                  </small>\\r\\n                  <small class=\\\"form-error-msg\\\" *ngIf=\\\"reactiveForm.hasError('pattern','password')\\\">\\r\\n                    {{errorMsg}}\\r\\n                  </small>\\r\\n                  <small class=\\\"form-error-msg\\\" *ngIf=\\\"reactiveForm.hasError('minlength','password')\\\">\\r\\n                    Password must contain Minimum {{minPass}} characters.\\r\\n                  </small>\\r\\n                  <small class=\\\"form-error-msg\\\" *ngIf=\\\"reactiveForm.hasError('maxlength','password')\\\">\\r\\n                    Password must contain Maximum {{maxPass}} characters.\\r\\n                  </small>\\r\\n                </mat-error>\\r\\n                <mat-hint>\\r\\n                  <!-- <p> {{newPassword.value}}</p> -->\\r\\n                </mat-hint>\\r\\n              </div>\\r\\n              <div class=\\\"pb-1\\\">\\r\\n                <!-- [type]=\\\"hideConfirm ? 'password' : 'text'\\\"  this added by vidya for issue id 777-->\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <input matInput type=\\\"password\\\" placeholder=\\\"Confirm Password\\\" #confirmPassword name=\\\"confirmPassword\\\"\\r\\n                    formControlName=\\\"confirmPassword\\\"    [type]=\\\"hideConfirm ? 'password' : 'text'\\\">\\r\\n                    <!-- added by vidya for issue id 777 -->\\r\\n                    <mat-icon matSuffix (click)=\\\"hideConfirm = !hideConfirm\\\">{{hideConfirm ? 'visibility_off' : 'visibility'}}</mat-icon>     \\r\\n                </mat-form-field>\\r\\n                <mat-error *ngIf=\\\"reactiveForm.controls.confirmPassword.errors && (reactiveForm.controls.confirmPassword.touched || reactiveForm.controls.confirmPassword.dirty)\\\">\\r\\n                  <small class=\\\"form-error-msg\\\" *ngIf=\\\"reactiveForm.hasError('required','confirmPassword')\\\">\\r\\n                    Please enter your new password again.\\r\\n                  </small>\\r\\n                  <small class=\\\"form-error-msg\\\" *ngIf=\\\"reactiveForm.hasError('pattern','confirmPassword')\\\">\\r\\n                    {{errorMsg}}\\r\\n                  </small>\\r\\n                  \\r\\n                  <small class=\\\"form-error-msg\\\" *ngIf=\\\"reactiveForm.hasError('minlength','confirmPassword')\\\">\\r\\n                    Confirm Password must contain Minimum {{minPass}} digits.\\r\\n                  </small>\\r\\n                  <small class=\\\"form-error-msg\\\" *ngIf=\\\"reactiveForm.hasError('maxlength','confirmPassword')\\\">\\r\\n                    Confirm Password must contain Maximum {{maxPass}} digits.\\r\\n                  </small>\\r\\n                </mat-error>\\r\\n\\r\\n                <mat-hint>\\r\\n                  <!-- <p>{{confirmPassword.value}}</p> -->\\r\\n                </mat-hint>            \\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <mat-progress-bar mode=\\\"indeterminate\\\"  *ngIf=\\\"loginProcessing\\\"></mat-progress-bar>\\r\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutGap=\\\"10px\\\" class=\\\"mt-4\\\">\\r\\n            <button  mat-raised-button color=\\\"primary\\\"  class=\\\"full-width mb-1\\\" (click)=\\\"getOtp(user.value)\\\"\\r\\n            >Generate OTP</button>\\r\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"text-center full-width\\\" \\r\\n              [disabled]=\\\"!reactiveForm.valid\\\"\\r\\n              (click)=\\\"changePassword(newPassword.value,confirmPassword.value,user.value,otp.value)\\\">\\r\\n                Submit\\r\\n            </button>\\r\\n            <button mat-raised-button color=\\\"warn\\\" type=\\\"reset\\\" \\r\\n              class=\\\"text-center full-width\\\">\\r\\n                Reset\\r\\n            </button>\\r\\n             <button mat-raised-button color=\\\"warn\\\" class=\\\"full-width mb-1\\\" (click)=\\\"goHome()\\\">Go to Login</button>\\r\\n          </div>\\r\\n        </form>\\r\\n      </mat-card-content>\\r\\n    </mat-card>\\r\\n  </div>\\r\\n  \\r\\n  <div fxFlex=\\\"25%\\\">\\r\\n\\r\\n  </div>\\r\\n</div>\"","import { Routes } from '@angular/router';\r\nimport { ForgetPasswordComponent } from './forget-password.component';\r\n\r\nexport const forgetPasswordRoutes: Routes = [\r\n  {\r\n      path:'',\r\n      component:ForgetPasswordComponent\r\n  }\r\n];\r\n","export default \"\\r\\ninput#otp {\\r\\n  letter-spacing: 10px;\\r\\n  border-radius: 2px;\\r\\n  z-index: 1;\\r\\n  text-align: center;\\r\\n}\\r\\n.main-div{\\r\\n  height: 70vh;\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n  margin-top: auto;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3MvZm9yZ2V0LXBhc3N3b3JkL2ZvcmdldC1wYXNzd29yZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtFQUNFLG9CQUFvQjtFQUNwQixrQkFBa0I7RUFDbEIsVUFBVTtFQUNWLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UsWUFBWTtFQUNaLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLGdCQUFnQjtBQUNsQiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL2ZvcmdldC1wYXNzd29yZC9mb3JnZXQtcGFzc3dvcmQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbnB1dCNvdHAge1xyXG4gIGxldHRlci1zcGFjaW5nOiAxMHB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcclxuICB6LWluZGV4OiAxO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG4ubWFpbi1kaXZ7XHJcbiAgaGVpZ2h0OiA3MHZoO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBtYXJnaW4tdG9wOiBhdXRvO1xyXG59Il19 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { LoginService } from '../login/login.service';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { Login } from 'src/app/shared/models/login';\r\nimport { User } from 'src/app/shared/models/user';\r\nimport Swal from 'sweetalert2';\r\nimport * as CryptoJS from 'crypto-js';\r\nimport { SecurityDto } from '../security-policy/security-policy/security-dto';\r\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\r\nimport { SecurityPolicyService } from '../security-policy/security-policy/security-policy.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-forget-password',\r\n  templateUrl: './forget-password.component.html',\r\n  styleUrls: ['./forget-password.component.css']\r\n})\r\nexport class ForgetPasswordComponent implements OnInit {\r\n  loginProcessing = false;\r\n  passwordReset1: any;\r\n  login = new Login();\r\n  res: any;\r\n  editable: boolean = false;\r\n  finalpattern: string;\r\n  responseMsg: any;\r\n  responseError: any;\r\n  passwordDTO: any;\r\n  passwordStatus: boolean;\r\n  msg: any;\r\n  userId: string;\r\n  lowerCase: string;\r\n  security: SecurityDto;\r\n  security1: SecurityDto;\r\n  minPass: any;\r\n  maxPass: any;\r\n  ucase: any;\r\n  lcase: any;\r\n  num: any;\r\n  splc: any;\r\n\r\n  reactiveForm: FormGroup;\r\n  passwordRegex: any;\r\n  errorMsg: any = '';\r\n  \r\n  // passwordReset1: any;\r\n  username:string;\r\n  password:string;\r\n  otp:string;\r\n\r\n  hide = true;\r\n  hideConfirm=true;\r\n  modifyUserObject = new Login();\r\n  variable: any;\r\n  user: User;\r\n  var: any;\r\n  var1: any;\r\n  // responseError: any;\r\n  isReadOnly: any;\r\n  button1: any;\r\n  spinnerbutton: boolean;\r\n  button2: any;\r\n  login1 = new Login();\r\n  \r\n  constructor(private router: Router,\r\n              private route: ActivatedRoute,\r\n              private apiService: LoginService,\r\n              private fb: FormBuilder,\r\n              private loginservice: LoginService,\r\n              private apiService1: SecurityPolicyService,\r\n              private snack: MatSnackBar) {\r\n\r\n    this.route.queryParams.subscribe(params => {\r\n      // this.modifyUserObject.id = params['id'];\r\n      this.modifyUserObject.username = params.userId;\r\n      // console.log(this.modifyUserObject.username);\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isReadOnly = false;\r\n    this.button2 = true;\r\n    this.reactiveForm = this.fb.group({\r\n      userId: new FormControl(''), // added\r\n      otp: new FormControl('', [Validators.required]),\r\n      password: new FormControl('', [Validators.required,\r\n        Validators.compose([Validators.pattern(this.passwordRegex),\r\n          Validators.maxLength(this.maxPass),\r\n          Validators.minLength(this.minPass)])]),\r\n      confirmPassword: new FormControl('', [Validators.required,\r\n        Validators.compose([Validators.pattern(this.passwordRegex),\r\n          Validators.maxLength(this.maxPass),\r\n          Validators.minLength(this.minPass)])])\r\n    });\r\n\r\n    this.userId = localStorage.getItem('userIdForChangePassword');\r\n    let a, b;\r\n    this.apiService1.fetchSecurityPolicyService().subscribe(resp => {\r\n      this.security = resp;\r\n      console.log( this.security);\r\n      this.minPass = this.security.minPswdLength;\r\n      this.maxPass = this.security.maxPswdLength;\r\n\r\n      this.buildForm(this.minPass, this.maxPass);\r\n      console.log(this.minPass, this.maxPass);\r\n      console.log(this.security);\r\n    });\r\n    this.buildForm(this.minPass ? this.minPass : a, this.maxPass ? this.maxPass : b);\r\n  }\r\n  buildForm(a, b) {\r\n    // ---------- Password Policy Implementation (BEGIN) ----------\r\n    this.apiService1.fetchSecurityPolicyService()\r\n      .subscribe(resp => {\r\n        this.security1 = resp;\r\n        this.ucase = this.security1.pswdComplexUcase;\r\n        this.lcase = this.security1.pswdComplexLcase;\r\n        this.num = this.security1.pswdComplexNum;\r\n        this.splc = this.security1.pswdComplexSplc;\r\n\r\n        if (this.security1.pswdComplexUcase) {\r\n          this.passwordRegex = '(?=[^A-Z]*[A-Z])';\r\n          this.errorMsg = ' UpperCase';\r\n        }\r\n        if (this.security1.pswdComplexLcase) {\r\n          this.passwordRegex = this.passwordRegex  + '(?=[^a-z]*[a-z])';\r\n          if (this.errorMsg != null) {\r\n            this.errorMsg = this.errorMsg + ', LowerCase';\r\n          }\r\n          else {\r\n            this.errorMsg = this.errorMsg + ' LowerCase';\r\n          }\r\n        }\r\n        if (this.security1.pswdComplexNum) {\r\n          this.passwordRegex = this.passwordRegex  + '(?=[^0-9]*[0-9])';\r\n          if (this.errorMsg != null) {\r\n            this.errorMsg = this.errorMsg + ', Number';\r\n          }\r\n          else {\r\n            this.errorMsg = this.errorMsg + ' Number';\r\n          }\r\n        }\r\n        if (this.security1.pswdComplexSplc) {\r\n          this.passwordRegex = this.passwordRegex  + '(?=[^!-@]*[!-@])';\r\n          if (this.errorMsg != null) {\r\n            this.errorMsg = this.errorMsg + ', Special Character';\r\n          }\r\n          else {\r\n            this.errorMsg = this.errorMsg + ' Special Character';\r\n          }\r\n        }\r\n\r\n        this.passwordRegex = this.passwordRegex + '.{' + this.minPass + ',' + this.maxPass + '}';\r\n        // this.passwordRegex = \"(?=[^A-Z]*[A-Z])(?=[^a-z]*[a-z])(?=[^!-@]*[!-@]).{10,15}\";\r\n        this.errorMsg = 'Password must contain atleast one ' + this.errorMsg + '.';\r\n        console.log(this.passwordRegex);\r\n        // ---------- Password Policy Implementation (END) ----------\r\n\r\n        this.reactiveForm = this.fb.group({\r\n          userId: new FormControl(''),\r\n          otp: new FormControl('', [Validators.required]),\r\n          password: new FormControl('', [Validators.required,\r\n            Validators.compose([Validators.pattern(this.passwordRegex),\r\n              Validators.maxLength(this.maxPass),\r\n              Validators.minLength(this.minPass)])]),\r\n          confirmPassword: new FormControl('', [Validators.required,\r\n            Validators.compose([Validators.pattern(this.passwordRegex),\r\n              Validators.maxLength(this.maxPass),\r\n              Validators.minLength(this.minPass)])])\r\n        });\r\n    });\r\n\r\n    console.log(this.minPass, this.maxPass);\r\n    console.log('form', this.reactiveForm);\r\n  }\r\n  reset(login: Login) {\r\n    if(!login.username){\r\n      Swal.fire('Enter User Id.');\r\n      return;\r\n    }\r\n    \r\n      var encryptedAES = CryptoJS.AES.encrypt(login.password, \"@12#90!^*NPR*g&*()$34#$\");\r\n    var USERNAME = CryptoJS.AES.encrypt(login.username, \"@12#90!^*NPR*g&*()$34#$\");  \r\n\r\n   var data=encryptedAES.toString();\r\n    var uname=USERNAME.toString();\r\n    this.login1.password=data;\r\n    this.login1.username=uname;\r\n   \r\n   this.login1.otp=this.otp;\r\n   console.log(this.login1);\r\n    this.spinnerbutton = true;\r\n    this.apiService.forgetPassword(this.login1).subscribe(res => {\r\n      this.var1 = res;\r\n      console.log(this.var1);\r\n      if (this.var1) {\r\n        this.spinnerbutton = false;\r\n        if(this.var1[0] ==='Login success.'){\r\n          Swal.fire('password Changed Successfully.');\r\n        }else{\r\n          Swal.fire(this.var1[0]);\r\n        }\r\n       \r\n        // this.router.navigate(['/dashboard']);\r\n      } else {\r\n        this.spinnerbutton = false;\r\n        // this.snack.open('Choose Other Password Unable to Reset!', 'OK', { duration: 4000 });\r\n        Swal.fire('Choose Other Password ','or otp is invalid.');\r\n      }\r\n    });\r\n\r\n  }\r\n  getOtp(username) {\r\n    this.loginProcessing=true;\r\n    if(!username){\r\n      Swal.fire('Enter User Id.');\r\n      return;\r\n    }\r\n    //var encryptedAES = CryptoJS.AES.encrypt(login.password, \"@12#90!^*NPR*g&*()$34#$\");\r\n    var USERNAME = CryptoJS.AES.encrypt(username, \"@12#90!^*NPR*g&*()$34#$\");  \r\n    //console.log(encryptedAES) ;\r\n   // var data=encryptedAES.toString();\r\n    var uname=USERNAME.toString();\r\n   console.log(uname);\r\n    // this.logindata1.password=data;\r\n    // this.logindata1.username=uname;\r\n    \r\n    this.spinnerbutton = true;\r\n    this.passwordReset1 = uname;\r\n    console.log(\"uname\",uname);\r\n    this.apiService.getOtpForReset(this.passwordReset1).subscribe(res => {\r\n      this.loginProcessing = false;\r\n      this.var = res;\r\n      if(this.var){\r\n      this.button1 = true;\r\n      this.button2 = false;\r\n      this.isReadOnly = true;\r\n      this.spinnerbutton = false;\r\n    }else{\r\n    Swal.fire('Unable to find User details.','Verify your userid.',\r\n    );\r\n    this.button1=false;\r\n      this.button2 = true;\r\n      this.isReadOnly = true;\r\n      this.spinnerbutton = false;\r\n    }}, error => {\r\n    Swal.fire('Server Error','Unable to connect server.');\r\n    });\r\n  }\r\n  goHome() {\r\n    this.router.navigate(['/login']);\r\n  }\r\n  public changePassword(newPassword: string, confirmPassword: string, userId: string,otp) {\r\n    \r\n    console.log(newPassword, confirmPassword, userId,otp);\r\n\r\n    if (newPassword != confirmPassword) {\r\n      Swal.fire('Password Not Matched.');\r\n    } else {\r\n     \r\n      this.loginProcessing=true;\r\n    let encryptedAES = CryptoJS.AES.encrypt(newPassword, '@12#90!^*NPR*g&*()$34#$');\r\n    let USERNAME = CryptoJS.AES.encrypt(userId, '@12#90!^*NPR*g&*()$34#$');\r\n\r\n    var data = encryptedAES.toString();\r\n    let uname = USERNAME.toString();\r\n    this.login.password = data;\r\n    this.login.username = uname;\r\n    this.login.otp = otp;\r\n    console.log(this.login);\r\n    this.loginservice.forgetPassword(this.login).subscribe(res => {\r\n      this.loginProcessing=false;\r\n      this.res = res;\r\n      console.log(this.res);\r\n      if (this.res) {\r\n        // this.spinnerbutton = false;\r\n        if (this.res[0] === 'Login success.') {\r\n          Swal.fire('Password Changed Successfully.');\r\n        }\r\n        if(res[0]==\"You cannot use your previous password. Please choose another password\")\r\n        {\r\n          Swal.fire(\r\n            {\r\n              title:\"You can not use your last \"+ this.security.pswdReuseAft +\" passwords. Please choose another password.\"\r\n            }\r\n          )\r\n        }\r\n        if(res[0]==\"OTP is invalid\")\r\n        {\r\n          Swal.fire(\r\n            {\r\n              title:\"Otp is invalid.\"\r\n            }\r\n          )\r\n        }\r\n        if(res[0]==\"successfull\")\r\n        {\r\n          Swal.fire(\r\n            {\r\n              title:\"Password Changed Successfully.\"\r\n            }\r\n          )\r\n        }\r\n\r\n        // } else {\r\n        //   Swal.fire(this.res[0]);\r\n        // }\r\n\r\n        // this.router.navigate(['/dashboard']);\r\n      } else {\r\n        // this.spinnerbutton = false;\r\n        // this.snack.open('Choose Other Password Unable to Reset!', 'OK', { duration: 4000 });\r\n        Swal.fire('Choose Other Password ', 'or otp is invalid.');\r\n      }\r\n    });\r\n\r\n  }\r\n}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { forgetPasswordRoutes } from './forget-password-routing.module';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ForgetPasswordComponent } from './forget-password.component';\r\nimport { ComponentsModule } from 'src/app/shared/components/components.module';\r\nimport { AngularMaterialModule } from 'src/app/shared/angular-material/angular-material.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ForgetPasswordComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    ComponentsModule,\r\n    AngularMaterialModule,\r\n    FlexLayoutModule,\r\n    PerfectScrollbarModule,\r\n    RouterModule.forChild(forgetPasswordRoutes)\r\n  ]\r\n})\r\nexport class ForgetPasswordModule { }\r\n"],"sourceRoot":"webpack:///","file":"views-forget-password-forget-password-module-es5.js"}