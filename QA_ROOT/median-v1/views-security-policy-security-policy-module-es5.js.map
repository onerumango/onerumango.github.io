{"version":3,"sources":["src/app/views/security-policy/security-policy.component.html","src/app/views/security-policy/security-policy-routing.module.ts","src/app/views/security-policy/security-policy.component.css","src/app/views/security-policy/security-policy.component.ts","src/app/views/security-policy/security-policy.module.ts","src/app/views/security-policy/security-policy/security-dto.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<mat-toolbar>Security Policy</mat-toolbar>\\r\\n  \\r\\n  <div class=\\\"navigation\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" style=\\\"margin: 50px;\\\">\\r\\n      <div fxFlex fxFlexFill></div>\\r\\n      <div fxFlex=\\\"55%\\\" fxFlexFill>\\r\\n        <mat-card class=\\\"p-0\\\">\\r\\n          <mat-card-title class=\\\"\\\">\\r\\n           \\r\\n          \\r\\n          </mat-card-title>\\r\\n          <mat-card-content>\\r\\n            <form>\\r\\n              <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n                <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"pb-1\\\">\\r\\n    \\r\\n                  <div class=\\\"pb-1\\\">\\r\\n                    <mat-form-field class=\\\"full-width\\\">\\r\\n                      <mat-label>Maximum Invalid Logins</mat-label>\\r\\n                      <input matInput type=\\\"number\\\" (ngModelChange)=\\\"invalidLogin($event, 'invalid')\\\"\\r\\n                        name=\\\"MaxLogins\\\" required \\r\\n                        onkeypress=\\\"return (event.charCode == 8 || event.charCode == 0 || event.charCode == 13) ? null : event.charCode >= 48 && event.charCode <= 57\\\"\\r\\n                        [(ngModel)]=\\\"security.maxInvLogins\\\" \\r\\n                        #MaxLogins=\\\"ngModel\\\"\\r\\n                        \\r\\n                      >\\r\\n                      <!-- <mat-error [hidden]=\\\"appName.valid || appName.pristine\\\">\\r\\n                        Please Choose Application name\\r\\n                    </mat-error> -->\\r\\n                    </mat-form-field>\\r\\n                  </div>\\r\\n    \\r\\n                  <div class=\\\"pb-1\\\">\\r\\n                      <mat-form-field class=\\\"full-width\\\">\\r\\n                          <mat-label>Maximum Password Length</mat-label>\\r\\n                          <input matInput type=\\\"number\\\" (ngModelChange)=\\\"invalidLogin($event, 'length')\\\"\\r\\n                            name=\\\"maxPasswordLength\\\" required \\r\\n                            maxlength=\\\"99\\\"\\r\\n                            onkeypress=\\\"return (event.charCode == 8 || event.charCode == 0 || event.charCode == 13) ? null : event.charCode >= 48 && event.charCode <= 57\\\"\\r\\n                            [(ngModel)]=\\\"security.maxPswdLength\\\" #max_pswd_length=\\\"ngModel\\\"\\r\\n                          >\\r\\n                        </mat-form-field>\\r\\n                  </div>\\r\\n    \\r\\n                  <div class=\\\"pb-1\\\">\\r\\n                    <mat-form-field class=\\\"full-width\\\">\\r\\n                      <mat-label>Minimun Password Length</mat-label>\\r\\n                      <input matInput type=\\\"number\\\" (ngModelChange)=\\\"invalidLogin($event, 'minlength')\\\"\\r\\n                        name=\\\"minPasswordLength\\\" required \\r\\n                        maxlength=\\\"99\\\"\\r\\n                        onkeypress=\\\"return (event.charCode == 8 || event.charCode == 0 || event.charCode == 13) ? null : event.charCode >= 48 && event.charCode <= 57\\\"\\r\\n                        [(ngModel)]=\\\"security.minPswdLength\\\" #min_pswd_length=\\\"ngModel\\\"\\r\\n                      >\\r\\n                      <mat-error [hidden]=\\\"max_pswd_length <= min_pswd_length\\\">\\r\\n                        Minimun Password Length should not be greater than Maximum Password Length.\\r\\n                    </mat-error>\\r\\n                    </mat-form-field>\\r\\n                  </div>\\r\\n                  <!-- ---------- Password Policy Implementation (BEGIN) ---------- -->\\r\\n                  <div class=\\\"pb-1\\\">\\r\\n                    <mat-form-field class=\\\"full-width\\\">\\r\\n                      <mat-label>Password Expiry (In days)</mat-label>\\r\\n                      <input matInput type=\\\"number\\\" (ngModelChange)=\\\"invalidLogin($event, 'expiry')\\\"\\r\\n                        name=\\\"passwordExpiry\\\" required \\r\\n                        onkeypress=\\\"return (event.charCode == 8 || event.charCode == 0 || event.charCode == 13) ? null : event.charCode >= 48 && event.charCode <= 57\\\"\\r\\n                        [(ngModel)]=\\\"security.pswdExpiry\\\" #PasswordExpiry=\\\"ngModel\\\"\\r\\n                      >\\r\\n                    </mat-form-field>\\r\\n                  </div>\\r\\n  \\r\\n                  <div class=\\\"pb-1\\\">\\r\\n                    <mat-form-field class=\\\"full-width\\\">\\r\\n                      <mat-label>Password Expiry Reminder (In days)</mat-label>\\r\\n                      <input matInput type=\\\"number\\\" (ngModelChange)=\\\"invalidLogin($event, 'notification')\\\"\\r\\n                        name=\\\"pwdExpiryWarning\\\" required \\r\\n                        onkeypress=\\\"return (event.charCode == 8 || event.charCode == 0 || event.charCode == 13) ? null : event.charCode >= 48 && event.charCode <= 57\\\"\\r\\n                        [(ngModel)]=\\\"security.notifyPasswordExpiryInDays\\\" #pwdExpiryWarning=\\\"ngModel\\\"\\r\\n                      >\\r\\n                    </mat-form-field>\\r\\n                  </div>\\r\\n  \\r\\n                  <div class=\\\"pb-1\\\">\\r\\n                    <mat-form-field class=\\\"full-width\\\">\\r\\n                      <mat-label>Password Reuse Limit</mat-label>\\r\\n                      <input matInput type=\\\"number\\\" (ngModelChange)=\\\"invalidLogin($event, 'reuse')\\\"\\r\\n                        name=\\\"resusePasswordAfter\\\" required \\r\\n                        onkeypress=\\\"return (event.charCode == 8 || event.charCode == 0 || event.charCode == 13) ? null : event.charCode >= 48 && event.charCode <= 57\\\"\\r\\n                        [(ngModel)]=\\\"security.pswdReuseAft\\\" #resusePasswordAfter=\\\"ngModel\\\"\\r\\n                      >\\r\\n                    </mat-form-field>\\r\\n                  </div>\\r\\n  \\r\\n                  <div class=\\\"pb-1\\\">\\r\\n                      <mat-label>Password Complexity</mat-label>\\r\\n                      <section name=\\\"pwdComplexity\\\">\\r\\n                        <mat-checkbox color=\\\"primary\\\" name=\\\"pswdComplexUcase\\\" \\r\\n                          (change)=\\\"buttonState($event)\\\"\\r\\n                          [(ngModel)]=\\\"security.pswdComplexUcase\\\" #pswdComplexUcase=\\\"ngModel\\\" \\r\\n                          class=\\\"cb-style\\\">Require atleast one Uppercase (A-Z)</mat-checkbox>\\r\\n                        <mat-checkbox color=\\\"primary\\\" name=\\\"pswdComplexLcase\\\" \\r\\n                          (change)=\\\"buttonState($event)\\\"\\r\\n                          [(ngModel)]=\\\"security.pswdComplexLcase\\\" #pswdComplexLcase=\\\"ngModel\\\" \\r\\n                          class=\\\"cb-style\\\">Require atleast one Lowercase (a-z)</mat-checkbox>\\r\\n                        <mat-checkbox color=\\\"primary\\\" name=\\\"pswdComplexNum\\\"\\r\\n                          (change)=\\\"buttonState($event)\\\"\\r\\n                          [(ngModel)]=\\\"security.pswdComplexNum\\\" #pswdComplexNum=\\\"ngModel\\\" \\r\\n                          class=\\\"cb-style\\\">Require atleast one Number (0-9)</mat-checkbox>\\r\\n                        <mat-checkbox color=\\\"primary\\\" name=\\\"pswdComplexSplc\\\" \\r\\n                          (change)=\\\"buttonState($event)\\\"\\r\\n                          [(ngModel)]=\\\"security.pswdComplexSplc\\\" #pswdComplexSplc=\\\"ngModel\\\" \\r\\n                          class=\\\"cb-style\\\">Require atleast one Special Characters (@,:;'\\\"$#%^&*!?...)</mat-checkbox>\\r\\n  \\r\\n                      \\r\\n                      </section>\\r\\n                  </div>\\r\\n                  <!-- ---------- Password Policy Implementation (END) ---------- -->\\r\\n                </div>\\r\\n              </div>\\r\\n          \\r\\n              <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutGap=\\\"10px\\\">\\r\\n                <button mat-raised-button color=\\\"primary\\\" class=\\\"text-center full-width\\\"\\r\\n                (click)=\\\"saveData()\\\" [disabled]=\\\"!enablesubmit\\\">Submit</button>\\r\\n                <button mat-raised-button color=\\\"warn\\\" type=\\\"reset\\\" class=\\\"text-center full-width\\\">Reset</button>\\r\\n                <!-- <button mat-raised-button color=\\\"warn\\\" class=\\\"text-center full-width\\\" (click)=\\\"cancelData()\\\">Reset</button> -->\\r\\n              </div>\\r\\n            </form>\\r\\n          </mat-card-content>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n      <div fxFlex fxFlexFill></div>\\r\\n    </div>\\r\\n  \\r\\n    <div fxLayout=\\\"row\\\" *ngIf>\\r\\n      <div fxFlex></div>\\r\\n      <div fxFlex=\\\"95\\\">\\r\\n        <mat-card>\\r\\n          <mat-card-title>\\r\\n    \\r\\n          </mat-card-title>\\r\\n          <mat-card-content>\\r\\n            <div fxLayout=\\\"row\\\">\\r\\n    \\r\\n              <table id=\\\"audittrail\\\">\\r\\n                <tr>\\r\\n                  <th>Status:</th>\\r\\n                  <td>\\r\\n                    <mat-chip>{{security.authStatus}}</mat-chip>\\r\\n                    <!-- <mat-form-field appearance=\\\"fill\\\">\\r\\n                      <mat-label>Status</mat-label>\\r\\n                      <input matInput type=\\\"text\\\" placeholder=\\\"\\\" #exSys>\\r\\n                      <mat-icon matSuffix>person</mat-icon>\\r\\n                    </mat-form-field> -->\\r\\n                  </td>\\r\\n                  <th>Created By:</th>\\r\\n                  <td>\\r\\n                      <mat-chip>{{security.modifiedBy}}</mat-chip>\\r\\n                  </td>\\r\\n                  <th>Authorized By:</th>\\r\\n                  <td>\\r\\n                      <mat-chip>{{security.authorizedBy}}</mat-chip>\\r\\n                  </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                  <th>Modification No:</th>\\r\\n                  <td>\\r\\n                      <mat-chip>{{security.version}}</mat-chip>\\r\\n                  </td>\\r\\n                  <th>Creation Date:</th>\\r\\n                  <td>\\r\\n                      <mat-chip>{{security.modifiedTime |  date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\\r\\n                  </td>\\r\\n                  <th>Authorization Date:</th>\\r\\n                  <td>\\r\\n                      <mat-chip>{{security.authorizedTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\\r\\n                  </td>\\r\\n                </tr>\\r\\n              </table>\\r\\n            </div>\\r\\n          </mat-card-content>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n      <div fxFlex></div>\\r\\n    </div>\\r\\n  \"","import { Routes } from '@angular/router';\r\nimport { SecurityPolicyComponent } from './security-policy.component';\r\n\r\nexport const policyRoutes: Routes = [\r\n  {\r\n      path:'',\r\n      component:SecurityPolicyComponent\r\n  }\r\n];","export default \".navigation {\\r\\n   /* height: 350px; */\\r\\n\\r\\n}\\r\\n\\r\\n#audittrail {\\r\\n    border-collapse: collapse;\\r\\n    width: 100%;\\r\\n  }\\r\\n\\r\\n#audittrail td, #audittrail th {\\r\\n    border: 1px solid #ddd;\\r\\n    padding: 8px;\\r\\n    text-align: center;\\r\\n  }\\r\\n\\r\\n.cb-style{\\r\\n   \\r\\n    vertical-align: bottom;\\r\\n    position: relative;\\r\\n    top: -1px;\\r\\n    *overflow: hidden;\\r\\n  }\\r\\n\\r\\n#audittrail tr:nth-child(even){background-color: #f2f2f2;}\\r\\n\\r\\n#audittrail th {\\r\\n    padding-top: 12px;\\r\\n    padding-bottom: 12px;\\r\\n    text-align: left;\\r\\n    background-color: #10174C;\\r\\n    color: white;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2VjdXJpdHktcG9saWN5L3NlY3VyaXR5LXBvbGljeS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0dBQ0csbUJBQW1COztBQUV0Qjs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QixXQUFXO0VBQ2I7O0FBRUE7SUFDRSxzQkFBc0I7SUFDdEIsWUFBWTtJQUNaLGtCQUFrQjtFQUNwQjs7QUFFQTs7SUFFRSxzQkFBc0I7SUFDdEIsa0JBQWtCO0lBQ2xCLFNBQVM7S0FDVCxnQkFBaUI7RUFDbkI7O0FBRUEsK0JBQStCLHlCQUF5QixDQUFDOztBQUV6RDtJQUNFLGlCQUFpQjtJQUNqQixvQkFBb0I7SUFDcEIsZ0JBQWdCO0lBQ2hCLHlCQUF5QjtJQUN6QixZQUFZO0VBQ2QiLCJmaWxlIjoic3JjL2FwcC92aWV3cy9zZWN1cml0eS1wb2xpY3kvc2VjdXJpdHktcG9saWN5LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubmF2aWdhdGlvbiB7XHJcbiAgIC8qIGhlaWdodDogMzUwcHg7ICovXHJcblxyXG59XHJcblxyXG4jYXVkaXR0cmFpbCB7XHJcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG4gIFxyXG4gICNhdWRpdHRyYWlsIHRkLCAjYXVkaXR0cmFpbCB0aCB7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xyXG4gICAgcGFkZGluZzogOHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuXHJcbiAgLmNiLXN0eWxle1xyXG4gICBcclxuICAgIHZlcnRpY2FsLWFsaWduOiBib3R0b207XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB0b3A6IC0xcHg7XHJcbiAgICAqb3ZlcmZsb3c6IGhpZGRlbjtcclxuICB9XHJcbiAgXHJcbiAgI2F1ZGl0dHJhaWwgdHI6bnRoLWNoaWxkKGV2ZW4pe2JhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7fVxyXG4gIFxyXG4gICNhdWRpdHRyYWlsIHRoIHtcclxuICAgIHBhZGRpbmctdG9wOiAxMnB4O1xyXG4gICAgcGFkZGluZy1ib3R0b206IDEycHg7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzEwMTc0QztcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICB9Il19 */\"","import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\n\r\n\r\n\r\n\r\nimport swal from 'sweetalert2';\r\nimport { SecurityDto } from './security-policy/security-dto';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { User } from 'src/app/shared/models/user';\r\nimport { SecurityPolicyService } from './security-policy/security-policy.service';\r\n\r\n@Component({\r\n  selector: 'app-security-policy',\r\n  templateUrl: './security-policy.component.html',\r\n  styleUrls: ['./security-policy.component.css']\r\n})\r\nexport class SecurityPolicyComponent implements OnInit {\r\n\r\n  constructor(private ref: SecurityPolicyService,private cdr:ChangeDetectorRef,\r\n    private toast:ToastrService) { }\r\n  security = new SecurityDto();\r\n  result = false;\r\n  response: any;\r\n  validationResponse: any;\r\n  // displayButton: boolean = true;\r\n  currentUser: any;\r\n  checkedlist:any=[];\r\n  enablesubmit:boolean=false\r\n  invalidLogin(event, type)\r\n  {\r\n    console.log('test');\r\n    console.log(event);\r\n    console.log(this.security);\r\n    let localdata:any = localStorage.getItem('securitydata');\r\n    localdata = JSON.parse(localdata);\r\n    console.log(localdata);   \r\n    this.enablesubmit=false;\r\n    if(type==\"invalid\" && this.security.maxInvLogins != localdata.maxInvLogins)\r\n   {\r\n    this.enablesubmit=true;\r\n    console.log(this.security.maxInvLogins,localdata.maxInvLogins);\r\n  }\r\n \r\n  else if(type==\"length\" && this.security.maxPswdLength != localdata.maxPswdLength)\r\n  {\r\n   this.enablesubmit=true;\r\n   console.log(this.security.maxPswdLength,localdata.maxPswdLength);\r\n\r\n\r\n }\r\n else if(type==\"minlength\" && this.security.minPswdLength != localdata.minPswdLength)\r\n  {\r\n   this.enablesubmit=true;\r\n   console.log(this.security.minPswdLength,localdata.minPswdLength);\r\n}\r\nelse if(type==\"expiry\" && this.security.pswdExpiry != localdata.pswdExpiry)\r\n{\r\n this.enablesubmit=true;\r\n console.log(this.security.pswdExpiry,localdata.pswdExpiry);\r\n}\r\nelse if(type==\"notification\" && this.security.notifyPasswordExpiryInDays != localdata.notifyPasswordExpiryInDays)\r\n{\r\n this.enablesubmit=true;\r\n console.log(this.security.notifyPasswordExpiryInDays,localdata.notifyPasswordExpiryInDays);\r\n}\r\nelse if(type==\"reuse\" && this.security.pswdReuseAft != localdata.pswdReuseAft)\r\n{\r\n this.enablesubmit=true;\r\n console.log(this.security.pswdReuseAft,localdata.pswdReuseAf);\r\n}\r\n}\r\n  // checkboxes:any;\r\n  \r\n  ngOnInit() {\r\n   this.fetchSecurityPolicyService();\r\n    // this.checkboxes = [{'name':'Require atleast one Uppercase (A-Z)', 'id':false, 'db':'pswd_complex_ucase'}, \r\n    //                       {'name':'Require atleast one Lowercase (a-z)', 'id':false, 'db':'pswd_complex_lcase'},\r\n    //                       {'name':'Require atleast one Number (0-9)', 'id':false, 'db':'pswd_complex_num'},\r\n    //                       {'name':'Require atleast one Special Characters (@,:;\\'\"$#%^&*!?...)', 'id':false, 'db':'pswd_complex_splc'}];\r\n\r\n    this.currentUser = sessionStorage.getItem('User_id');\r\n  }\r\n\r\n /* buttonState(event) {\r\n     console.log('chk', this.checkedlist,event.checked);\r\n    if(event.checked)\r\n      this.checkedlist.push('checked');\r\n    else\r\n      this.checkedlist.splice(0,1); \r\n  } */\r\n\r\n  buttonState(event) {\r\n    console.log('chk', this.checkedlist,event.checked);\r\n   if(event.checked)\r\n     this.checkedlist.push('checked');\r\n   else\r\n     this.checkedlist.splice(0,1); \r\n   console.log(this.security);\r\n   let localdata:any = localStorage.getItem('securitydata');\r\n   localdata = JSON.parse(localdata);\r\n   if(localdata.pswdComplexUcase  != this.security.pswdComplexUcase ||\r\n     localdata.pswdComplexLcase   != this.security.pswdComplexLcase ||\r\n     localdata.pswdComplexNum     != this.security.pswdComplexNum  ||\r\n     localdata.pswdComplexSplc    != this.security.pswdComplexSplc )\r\n     {\r\n      this.enablesubmit=true;\r\n     }\r\n     if(!this.checkedlist.length)\r\n    //  if(this.security.pswdComplexUcase == \"false\" &&\r\n    //    this.security.pswdComplexLcase ==\"false\" &&\r\n    //    this.security.pswdComplexNum ==\"false\" &&\r\n    //   this.security.pswdComplexSplc ==\"false\")\r\n    //   {\r\n       this.enablesubmit=false;\r\n    //   }\r\n\r\n }\r\n\r\n\r\n  saveData() {\r\n    console.log(this.security);\r\n    // this.security.entityCode = \"123\";\r\n    // if(this.security.minPswdLength > this.security.maxPswdLength) {\r\n    //   // console.log(this.security.min_pswd_length);\r\n    //   // console.log(this.security.max_pswd_length);\r\n    //   swal.fire(\"Min Password Length should not be greater than Max Password Length\");\r\n    // }\r\n    // else{\r\n      if(this.security.minPswdLength > this.security.maxPswdLength) {\r\n        console.log(this.security.minPswdLength);\r\n        console.log(this.security.maxPswdLength);\r\n        this.toast.error(`Min Password Length should not be greater than Max Password Length`, '', {\r\n          timeOut: 5000,\r\n          progressBar: true,\r\n          tapToDismiss: true,\r\n          closeButton: true,\r\n          easeTime: 300,\r\n          extendedTimeOut: 2000\r\n        });\r\n      }\r\n      else if(this.security.pswdExpiry < this.security.notifyPasswordExpiryInDays) {\r\n        this.toast.error(`Notification on password expiry days can not be greater than password expiry days`, '', {\r\n          timeOut: 5000,\r\n          progressBar: true,\r\n          tapToDismiss: true,\r\n          closeButton: true,\r\n          easeTime: 300,\r\n          extendedTimeOut: 2000\r\n        });\r\n      }\r\n      else if(this.security.minPswdLength < 4 || this.security.maxPswdLength < 4) {\r\n        this.toast.error(`Min Password length and Max Password length should not be less than 4`, '', {\r\n          timeOut: 5000,\r\n          progressBar: true,\r\n          tapToDismiss: true,\r\n          closeButton: true,\r\n          easeTime: 300,\r\n          extendedTimeOut: 2000\r\n        });\r\n      }\r\n      else{\r\n      this.security.modifiedBy = this.currentUser;\r\n      console.log(this.security);\r\n      this.ref.saveDataSecurity(this.security).subscribe(data => {\r\n        if (data == true) {\r\n          // this.response = \"Save Successful!\";\r\n          this.validationResponse = null;\r\n          this.toast.success(`Save Successful`,'',  {\r\n            timeOut: 3000,\r\n            progressBar:true,\r\n            tapToDismiss:true,\r\n            closeButton:true,\r\n            easeTime:300,\r\n            extendedTimeOut:1000\r\n          });\r\n           //added by vidya for issue id 583\r\n           this.enablesubmit=false;\r\n        //  this.getInitializedRecords();\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  cancelData() {\r\n    this.security = new SecurityDto();\r\n    console.log(this.security)\r\n  }\r\n\r\n  fetchSecurityPolicyService() {\r\n    this.ref.fetchSecurityPolicyService().subscribe(resp => {\r\n      if(resp)\r\n      this.security = resp;\r\n      if (this.security.pswdComplexUcase == \"true\") {\r\n        this.security.pswdComplexUcase = true;\r\n        this.checkedlist.push('checked')\r\n      }\r\n      if (this.security.pswdComplexUcase== \"false\") {\r\n        this.security.pswdComplexUcase = false;\r\n        \r\n      }\r\n      if (this.security.pswdComplexLcase == \"true\") {\r\n  \r\n        this.security.pswdComplexLcase = true;\r\n        this.checkedlist.push('checked')\r\n      }\r\n      if (this.security.pswdComplexLcase == \"false\") {\r\n        this.security.pswdComplexLcase = false;\r\n      }\r\n      if(this.security.pswdComplexNum==\"true\")\r\n      {\r\n        this.security.pswdComplexNum=true;\r\n        this.checkedlist.push('checked')\r\n      }\r\n      if(this.security.pswdComplexNum==\"false\")\r\n      {\r\n        this.security.pswdComplexNum=false;\r\n      }\r\n      if(this.security.pswdComplexSplc==\"true\")\r\n      {\r\n        this.security.pswdComplexSplc=true;\r\n        this.checkedlist.push('checked')\r\n      }\r\n      if(this.security.pswdComplexSplc==\"false\")\r\n      {\r\n        this.security.pswdComplexSplc=false;\r\n      }\r\n      let respdata:any = resp;\r\n      localStorage.setItem('securitydata', JSON.stringify(respdata));\r\n      console.log(this.security);\r\n\r\n      \r\n      this.cdr.markForCheck();\r\n     \r\n    });\r\n  \r\n  }\r\n \r\n\r\n  // getInitializedRecords() {\r\n  //   this.ref.getSecurityPolicyForAuth().subscribe(resp=>{console.log(resp)\r\n  //     if(resp.length>0)\r\n  //     this.security = resp[0];\r\n  //     this.cdr.markForCheck();\r\n  //   });\r\n  // }\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SecurityPolicyComponent } from './security-policy.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { policyRoutes } from './security-policy-routing.module';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\n\r\n@NgModule({\r\n  declarations: [SecurityPolicyComponent],\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    FlexLayoutModule,\r\n    RouterModule.forChild(policyRoutes)\r\n  ]\r\n})\r\nexport class SecurityPolicyModule { }\r\n","import { Timestamp } from 'rxjs/internal/operators/timestamp';\r\n\r\nexport class SecurityDto {\r\n    clientId: number;\r\n    maxInvLogins: number;\r\n    maxPswdLength:number;\r\n    minPswdLength:number;\r\n    pswdExpiry:number;\r\n    notifyPasswordExpiryInDays:number;\r\n    pswdReuseAft:number;\r\n    pswdComplexLcase:any;\r\n    pswdComplexNum:any;\r\n    pswdComplexSplc:any;\r\n    pswdComplexUcase:any;\r\n    authStatus:string;\r\n    authorizedBy:string;\r\n    authorizedTime:Date;\r\n    modifiedBy:string;\r\n    modifiedTime:Date;\r\n    pswdComplexity:string;\r\n    version:number;\r\n}\r\n"],"sourceRoot":"webpack:///","file":"views-security-policy-security-policy-module-es5.js"}