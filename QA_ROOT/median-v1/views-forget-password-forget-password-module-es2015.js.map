{"version":3,"sources":["./src/app/views/forget-password/forget-password.component.html","./src/app/views/forget-password/forget-password-routing.module.ts","./src/app/views/forget-password/forget-password.component.css","./src/app/views/forget-password/forget-password.component.ts","./src/app/views/forget-password/forget-password.module.ts"],"names":[],"mappings":"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","file":"views-forget-password-forget-password-module-es2015.js","sourcesContent":["export default \"<mat-toolbar style=\\\"background-color: crimson;border-bottom-color: 5px solid yellow;\\\"><img src=\\\"assets/images/dtb1.png\\\"\\r\\n    alt=\\\"image\\\"></mat-toolbar>\\r\\n\\r\\n\\r\\n<div class=\\\"main-div\\\" *ngIf>\\r\\n  <div class=\\\"page-wrap height-100 black\\\">\\r\\n    <div class=\\\"session-form-hold\\\">\\r\\n      <mat-progress-bar mode=\\\"determinate\\\" class=\\\"session-progress\\\"></mat-progress-bar>\\r\\n      <mat-card>\\r\\n        <mat-card-content>\\r\\n          <div class=\\\"text-center pt-8 pb-16\\\">\\r\\n            <img width=\\\"60px\\\" src=\\\"assets/images/dtb1.png\\\" alt=\\\"\\\" class=\\\"mb-05\\\">\\r\\n            <p class=\\\"text-muted m-0\\\">New password will be sent to your email address</p>\\r\\n          </div>\\r\\n          <form #passwordReset=\\\"ngForm\\\">\\r\\n\\r\\n            <div class=\\\"pb-1\\\">\\r\\n              <mat-form-field class=\\\"full-width\\\">\\r\\n                <input matInput placeholder=\\\"User Id\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\" type=\\\"text\\\"\\r\\n                  name=\\\"username\\\" [(ngModel)]=\\\"username\\\" required [readonly]=\\\"isReadOnly\\\">\\r\\n              </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div *ngIf=\\\"button1\\\">\\r\\n              <div class=\\\"pb-1\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <input id=\\\"otp\\\" autocomplete=\\\"off\\\" maxlength=\\\"6\\\" minlength=\\\"6\\\" matInput placeholder=\\\"Enter otp\\\"\\r\\n                    type=\\\"text\\\" name=\\\"otp\\\" [(ngModel)]=\\\"otp\\\" required>\\r\\n                </mat-form-field>\\r\\n\\r\\n              </div>\\r\\n              <div class=\\\"pb-1\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <input matInput placeholder=\\\"New password\\\" type=\\\"password\\\" password1 #password1=\\\"ngModel\\\"\\r\\n                    pattern=\\\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$\\\"\\r\\n                    [(ngModel)]=\\\"password\\\" name=\\\"password\\\" [type]=\\\"hide ? 'password' : 'text'\\\" required>\\r\\n                  <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                </mat-form-field>\\r\\n              </div>\\r\\n              <small class=\\\"form-error-msg\\\" *ngIf=\\\"password1.touched && !password1.valid\\\" style=\\\"color:blue\\\">\\r\\n                Please enter Minimum 8 characters, at least one uppercase letter, <br>one lowercase letter, one number\\r\\n                and\\r\\n                one special character </small>\\r\\n              <br>\\r\\n              <small style=\\\"color: red;\\\"> Submit Button Will be Enabled Only after entering valid password and OTP\\r\\n              </small>\\r\\n              <div class=\\\"text-center\\\">\\r\\n                <button mat-raised-button color=\\\"primary\\\" (click)=\\\"reset(passwordReset.value)\\\"\\r\\n                  [disabled]=\\\"!passwordReset.form.valid\\\" class=\\\"text-center full-width\\\">Submit</button>\\r\\n                <span fxFlex=\\\"5%\\\"></span>\\r\\n                <!-- <a mat-raised-button color=\\\"primary\\\" class=\\\"text-center full-width\\\" (click)=\\\"goHome()\\\">Home</a> -->\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n\\r\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"full-width mb-1\\\" (click)=\\\"getOtp(username)\\\"\\r\\n              *ngIf=\\\"button2\\\">Generate Otp</button>\\r\\n            <button mat-raised-button color=\\\"warn\\\" class=\\\"full-width mb-1\\\" (click)=\\\"goHome()\\\">Go to Login</button>\\r\\n          </form>\\r\\n        </mat-card-content>\\r\\n        <mat-progress-bar mode=\\\"indeterminate\\\" *ngIf='spinnerbutton'></mat-progress-bar>\\r\\n      </mat-card>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n</div>\\r\\n\\r\\n<div fxLayout=\\\"row\\\" >  \\r\\n  <div fxFlex=\\\"25%\\\">\\r\\n\\r\\n  </div>\\r\\n  <div fxFlex>\\r\\n    <br>\\r\\n    <mat-toolbar color=\\\"primary\\\" style=\\\"height:30px; font-size: small;\\\">\\r\\n        Reset Password\\r\\n        </mat-toolbar>\\r\\n    <mat-card>\\r\\n      <!-- <mat-card-title>\\r\\n        Change Password\\r\\n      </mat-card-title> -->\\r\\n      \\r\\n      <mat-card-content>\\r\\n        <form *ngIf=\\\"reactiveForm\\\" [formGroup]=\\\"reactiveForm\\\" novalidate>\\r\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n            <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n              <div class=\\\"pb-1\\\">\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <input matInput type=\\\"text\\\" [readonly]=\\\"editable\\\" placeholder=\\\"User Id\\\" #user name=\\\"userId\\\"\\r\\n                    formControlName=\\\"userId\\\" oninput=\\\"this.value = this.value.toUpperCase()\\\">\\r\\n                </mat-form-field>\\r\\n               \\r\\n             \\r\\n             <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput type=\\\"text\\\"  placeholder=\\\"OTP\\\" #otp name=\\\"otp\\\"\\r\\n                formControlName=\\\"otp\\\">\\r\\n            </mat-form-field>\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <input matInput type=\\\"password\\\" placeholder=\\\"New Password\\\" #newPassword name=\\\"password\\\"  [type]=\\\"hide ? 'password' : 'text'\\\"\\r\\n                    formControlName=\\\"password\\\">\\r\\n                    <mat-icon matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                </mat-form-field>\\r\\n                  \\r\\n                <mat-error *ngIf=\\\"reactiveForm.controls.password.errors && (reactiveForm.controls.password.touched || reactiveForm.controls.password.dirty)\\\">\\r\\n                  <small class=\\\"form-error-msg\\\" *ngIf=\\\"reactiveForm.hasError('required','password')\\\">\\r\\n                    Please enter your new password.\\r\\n                  </small>\\r\\n                  <small class=\\\"form-error-msg\\\" *ngIf=\\\"reactiveForm.hasError('pattern','password')\\\">\\r\\n                    {{errorMsg}}\\r\\n                  </small>\\r\\n                  <small class=\\\"form-error-msg\\\" *ngIf=\\\"reactiveForm.hasError('minlength','password')\\\">\\r\\n                    Password must contain Minimum {{minPass}} characters.\\r\\n                  </small>\\r\\n                  <small class=\\\"form-error-msg\\\" *ngIf=\\\"reactiveForm.hasError('maxlength','password')\\\">\\r\\n                    Password must contain Maximum {{maxPass}} characters.\\r\\n                  </small>\\r\\n                </mat-error>\\r\\n                <mat-hint>\\r\\n                  <!-- <p> {{newPassword.value}}</p> -->\\r\\n                </mat-hint>\\r\\n              </div>\\r\\n              <div class=\\\"pb-1\\\">\\r\\n                <!-- [type]=\\\"hideConfirm ? 'password' : 'text'\\\"  this added by vidya for issue id 777-->\\r\\n                <mat-form-field class=\\\"full-width\\\">\\r\\n                  <input matInput type=\\\"password\\\" placeholder=\\\"Confirm Password\\\" #confirmPassword name=\\\"confirmPassword\\\"\\r\\n                    formControlName=\\\"confirmPassword\\\"    [type]=\\\"hideConfirm ? 'password' : 'text'\\\">\\r\\n                    <!-- added by vidya for issue id 777 -->\\r\\n                    <mat-icon matSuffix (click)=\\\"hideConfirm = !hideConfirm\\\">{{hideConfirm ? 'visibility_off' : 'visibility'}}</mat-icon>     \\r\\n                </mat-form-field>\\r\\n                <mat-error *ngIf=\\\"reactiveForm.controls.confirmPassword.errors && (reactiveForm.controls.confirmPassword.touched || reactiveForm.controls.confirmPassword.dirty)\\\">\\r\\n                  <small class=\\\"form-error-msg\\\" *ngIf=\\\"reactiveForm.hasError('required','confirmPassword')\\\">\\r\\n                    Please enter your new password again.\\r\\n                  </small>\\r\\n                  <small class=\\\"form-error-msg\\\" *ngIf=\\\"reactiveForm.hasError('pattern','confirmPassword')\\\">\\r\\n                    {{errorMsg}}\\r\\n                  </small>\\r\\n                  \\r\\n                  <small class=\\\"form-error-msg\\\" *ngIf=\\\"reactiveForm.hasError('minlength','confirmPassword')\\\">\\r\\n                    Confirm Password must contain Minimum {{minPass}} digits.\\r\\n                  </small>\\r\\n                  <small class=\\\"form-error-msg\\\" *ngIf=\\\"reactiveForm.hasError('maxlength','confirmPassword')\\\">\\r\\n                    Confirm Password must contain Maximum {{maxPass}} digits.\\r\\n                  </small>\\r\\n                </mat-error>\\r\\n\\r\\n                <mat-hint>\\r\\n                  <!-- <p>{{confirmPassword.value}}</p> -->\\r\\n                </mat-hint>            \\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <mat-progress-bar mode=\\\"indeterminate\\\"  *ngIf=\\\"loginProcessing\\\"></mat-progress-bar>\\r\\n          <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutGap=\\\"10px\\\" class=\\\"mt-4\\\">\\r\\n            <button  mat-raised-button color=\\\"primary\\\"  class=\\\"full-width mb-1\\\" (click)=\\\"getOtp(user.value)\\\"\\r\\n            >Generate OTP</button>\\r\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"text-center full-width\\\" \\r\\n              [disabled]=\\\"!reactiveForm.valid\\\"\\r\\n              (click)=\\\"changePassword(newPassword.value,confirmPassword.value,user.value,otp.value)\\\">\\r\\n                Submit\\r\\n            </button>\\r\\n            <button mat-raised-button color=\\\"warn\\\" type=\\\"reset\\\" \\r\\n              class=\\\"text-center full-width\\\">\\r\\n                Reset\\r\\n            </button>\\r\\n             <button mat-raised-button color=\\\"warn\\\" class=\\\"full-width mb-1\\\" (click)=\\\"goHome()\\\">Go to Login</button>\\r\\n          </div>\\r\\n        </form>\\r\\n      </mat-card-content>\\r\\n    </mat-card>\\r\\n  </div>\\r\\n  \\r\\n  <div fxFlex=\\\"25%\\\">\\r\\n\\r\\n  </div>\\r\\n</div>\"","import { Routes } from '@angular/router';\r\nimport { ForgetPasswordComponent } from './forget-password.component';\r\n\r\nexport const forgetPasswordRoutes: Routes = [\r\n  {\r\n      path:'',\r\n      component:ForgetPasswordComponent\r\n  }\r\n];\r\n","export default \"\\r\\ninput#otp {\\r\\n  letter-spacing: 10px;\\r\\n  border-radius: 2px;\\r\\n  z-index: 1;\\r\\n  text-align: center;\\r\\n}\\r\\n.main-div{\\r\\n  height: 70vh;\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n  margin-top: auto;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3MvZm9yZ2V0LXBhc3N3b3JkL2ZvcmdldC1wYXNzd29yZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtFQUNFLG9CQUFvQjtFQUNwQixrQkFBa0I7RUFDbEIsVUFBVTtFQUNWLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UsWUFBWTtFQUNaLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLGdCQUFnQjtBQUNsQiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL2ZvcmdldC1wYXNzd29yZC9mb3JnZXQtcGFzc3dvcmQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbnB1dCNvdHAge1xyXG4gIGxldHRlci1zcGFjaW5nOiAxMHB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcclxuICB6LWluZGV4OiAxO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG4ubWFpbi1kaXZ7XHJcbiAgaGVpZ2h0OiA3MHZoO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBtYXJnaW4tdG9wOiBhdXRvO1xyXG59Il19 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { LoginService } from '../login/login.service';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { Login } from 'src/app/shared/models/login';\r\nimport { User } from 'src/app/shared/models/user';\r\nimport Swal from 'sweetalert2';\r\nimport * as CryptoJS from 'crypto-js';\r\nimport { SecurityDto } from '../security-policy/security-policy/security-dto';\r\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\r\nimport { SecurityPolicyService } from '../security-policy/security-policy/security-policy.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-forget-password',\r\n  templateUrl: './forget-password.component.html',\r\n  styleUrls: ['./forget-password.component.css']\r\n})\r\nexport class ForgetPasswordComponent implements OnInit {\r\n  loginProcessing = false;\r\n  passwordReset1: any;\r\n  login = new Login();\r\n  res: any;\r\n  editable: boolean = false;\r\n  finalpattern: string;\r\n  responseMsg: any;\r\n  responseError: any;\r\n  passwordDTO: any;\r\n  passwordStatus: boolean;\r\n  msg: any;\r\n  userId: string;\r\n  lowerCase: string;\r\n  security: SecurityDto;\r\n  security1: SecurityDto;\r\n  minPass: any;\r\n  maxPass: any;\r\n  ucase: any;\r\n  lcase: any;\r\n  num: any;\r\n  splc: any;\r\n\r\n  reactiveForm: FormGroup;\r\n  passwordRegex: any;\r\n  errorMsg: any = '';\r\n  \r\n  // passwordReset1: any;\r\n  username:string;\r\n  password:string;\r\n  otp:string;\r\n\r\n  hide = true;\r\n  hideConfirm=true;\r\n  modifyUserObject = new Login();\r\n  variable: any;\r\n  user: User;\r\n  var: any;\r\n  var1: any;\r\n  // responseError: any;\r\n  isReadOnly: any;\r\n  button1: any;\r\n  spinnerbutton: boolean;\r\n  button2: any;\r\n  login1 = new Login();\r\n  \r\n  constructor(private router: Router,\r\n              private route: ActivatedRoute,\r\n              private apiService: LoginService,\r\n              private fb: FormBuilder,\r\n              private loginservice: LoginService,\r\n              private apiService1: SecurityPolicyService,\r\n              private snack: MatSnackBar) {\r\n\r\n    this.route.queryParams.subscribe(params => {\r\n      // this.modifyUserObject.id = params['id'];\r\n      this.modifyUserObject.username = params.userId;\r\n      // console.log(this.modifyUserObject.username);\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isReadOnly = false;\r\n    this.button2 = true;\r\n    this.reactiveForm = this.fb.group({\r\n      userId: new FormControl(''), // added\r\n      otp: new FormControl('', [Validators.required]),\r\n      password: new FormControl('', [Validators.required,\r\n        Validators.compose([Validators.pattern(this.passwordRegex),\r\n          Validators.maxLength(this.maxPass),\r\n          Validators.minLength(this.minPass)])]),\r\n      confirmPassword: new FormControl('', [Validators.required,\r\n        Validators.compose([Validators.pattern(this.passwordRegex),\r\n          Validators.maxLength(this.maxPass),\r\n          Validators.minLength(this.minPass)])])\r\n    });\r\n\r\n    this.userId = localStorage.getItem('userIdForChangePassword');\r\n    let a, b;\r\n    this.apiService1.fetchSecurityPolicyService().subscribe(resp => {\r\n      this.security = resp;\r\n      console.log( this.security);\r\n      this.minPass = this.security.minPswdLength;\r\n      this.maxPass = this.security.maxPswdLength;\r\n\r\n      this.buildForm(this.minPass, this.maxPass);\r\n      console.log(this.minPass, this.maxPass);\r\n      console.log(this.security);\r\n    });\r\n    this.buildForm(this.minPass ? this.minPass : a, this.maxPass ? this.maxPass : b);\r\n  }\r\n  buildForm(a, b) {\r\n    // ---------- Password Policy Implementation (BEGIN) ----------\r\n    this.apiService1.fetchSecurityPolicyService()\r\n      .subscribe(resp => {\r\n        this.security1 = resp;\r\n        this.ucase = this.security1.pswdComplexUcase;\r\n        this.lcase = this.security1.pswdComplexLcase;\r\n        this.num = this.security1.pswdComplexNum;\r\n        this.splc = this.security1.pswdComplexSplc;\r\n\r\n        if (this.security1.pswdComplexUcase) {\r\n          this.passwordRegex = '(?=[^A-Z]*[A-Z])';\r\n          this.errorMsg = ' UpperCase';\r\n        }\r\n        if (this.security1.pswdComplexLcase) {\r\n          this.passwordRegex = this.passwordRegex  + '(?=[^a-z]*[a-z])';\r\n          if (this.errorMsg != null) {\r\n            this.errorMsg = this.errorMsg + ', LowerCase';\r\n          }\r\n          else {\r\n            this.errorMsg = this.errorMsg + ' LowerCase';\r\n          }\r\n        }\r\n        if (this.security1.pswdComplexNum) {\r\n          this.passwordRegex = this.passwordRegex  + '(?=[^0-9]*[0-9])';\r\n          if (this.errorMsg != null) {\r\n            this.errorMsg = this.errorMsg + ', Number';\r\n          }\r\n          else {\r\n            this.errorMsg = this.errorMsg + ' Number';\r\n          }\r\n        }\r\n        if (this.security1.pswdComplexSplc) {\r\n          this.passwordRegex = this.passwordRegex  + '(?=[^!-@]*[!-@])';\r\n          if (this.errorMsg != null) {\r\n            this.errorMsg = this.errorMsg + ', Special Character';\r\n          }\r\n          else {\r\n            this.errorMsg = this.errorMsg + ' Special Character';\r\n          }\r\n        }\r\n\r\n        this.passwordRegex = this.passwordRegex + '.{' + this.minPass + ',' + this.maxPass + '}';\r\n        // this.passwordRegex = \"(?=[^A-Z]*[A-Z])(?=[^a-z]*[a-z])(?=[^!-@]*[!-@]).{10,15}\";\r\n        this.errorMsg = 'Password must contain atleast one ' + this.errorMsg + '.';\r\n        console.log(this.passwordRegex);\r\n        // ---------- Password Policy Implementation (END) ----------\r\n\r\n        this.reactiveForm = this.fb.group({\r\n          userId: new FormControl(''),\r\n          otp: new FormControl('', [Validators.required]),\r\n          password: new FormControl('', [Validators.required,\r\n            Validators.compose([Validators.pattern(this.passwordRegex),\r\n              Validators.maxLength(this.maxPass),\r\n              Validators.minLength(this.minPass)])]),\r\n          confirmPassword: new FormControl('', [Validators.required,\r\n            Validators.compose([Validators.pattern(this.passwordRegex),\r\n              Validators.maxLength(this.maxPass),\r\n              Validators.minLength(this.minPass)])])\r\n        });\r\n    });\r\n\r\n    console.log(this.minPass, this.maxPass);\r\n    console.log('form', this.reactiveForm);\r\n  }\r\n  reset(login: Login) {\r\n    if(!login.username){\r\n      Swal.fire('Enter User Id.');\r\n      return;\r\n    }\r\n    \r\n      var encryptedAES = CryptoJS.AES.encrypt(login.password, \"@12#90!^*NPR*g&*()$34#$\");\r\n    var USERNAME = CryptoJS.AES.encrypt(login.username, \"@12#90!^*NPR*g&*()$34#$\");  \r\n\r\n   var data=encryptedAES.toString();\r\n    var uname=USERNAME.toString();\r\n    this.login1.password=data;\r\n    this.login1.username=uname;\r\n   \r\n   this.login1.otp=this.otp;\r\n   console.log(this.login1);\r\n    this.spinnerbutton = true;\r\n    this.apiService.forgetPassword(this.login1).subscribe(res => {\r\n      this.var1 = res;\r\n      console.log(this.var1);\r\n      if (this.var1) {\r\n        this.spinnerbutton = false;\r\n        if(this.var1[0] ==='Login success.'){\r\n          Swal.fire('password Changed Successfully.');\r\n        }else{\r\n          Swal.fire(this.var1[0]);\r\n        }\r\n       \r\n        // this.router.navigate(['/dashboard']);\r\n      } else {\r\n        this.spinnerbutton = false;\r\n        // this.snack.open('Choose Other Password Unable to Reset!', 'OK', { duration: 4000 });\r\n        Swal.fire('Choose Other Password ','or otp is invalid.');\r\n      }\r\n    });\r\n\r\n  }\r\n  getOtp(username) {\r\n    this.loginProcessing=true;\r\n    if(!username){\r\n      Swal.fire('Enter User Id.');\r\n      return;\r\n    }\r\n    //var encryptedAES = CryptoJS.AES.encrypt(login.password, \"@12#90!^*NPR*g&*()$34#$\");\r\n    var USERNAME = CryptoJS.AES.encrypt(username, \"@12#90!^*NPR*g&*()$34#$\");  \r\n    //console.log(encryptedAES) ;\r\n   // var data=encryptedAES.toString();\r\n    var uname=USERNAME.toString();\r\n   console.log(uname);\r\n    // this.logindata1.password=data;\r\n    // this.logindata1.username=uname;\r\n    \r\n    this.spinnerbutton = true;\r\n    this.passwordReset1 = uname;\r\n    console.log(\"uname\",uname);\r\n    this.apiService.getOtpForReset(this.passwordReset1).subscribe(res => {\r\n      this.loginProcessing = false;\r\n      this.var = res;\r\n      if(this.var){\r\n      this.button1 = true;\r\n      this.button2 = false;\r\n      this.isReadOnly = true;\r\n      this.spinnerbutton = false;\r\n    }else{\r\n    Swal.fire('Unable to find User details.','Verify your userid.',\r\n    );\r\n    this.button1=false;\r\n      this.button2 = true;\r\n      this.isReadOnly = true;\r\n      this.spinnerbutton = false;\r\n    }}, error => {\r\n    Swal.fire('Server Error','Unable to connect server.');\r\n    });\r\n  }\r\n  goHome() {\r\n    this.router.navigate(['/login']);\r\n  }\r\n  public changePassword(newPassword: string, confirmPassword: string, userId: string,otp) {\r\n    \r\n    console.log(newPassword, confirmPassword, userId,otp);\r\n\r\n    if (newPassword != confirmPassword) {\r\n      Swal.fire('Password Not Matched.');\r\n    } else {\r\n     \r\n      this.loginProcessing=true;\r\n    let encryptedAES = CryptoJS.AES.encrypt(newPassword, '@12#90!^*NPR*g&*()$34#$');\r\n    let USERNAME = CryptoJS.AES.encrypt(userId, '@12#90!^*NPR*g&*()$34#$');\r\n\r\n    var data = encryptedAES.toString();\r\n    let uname = USERNAME.toString();\r\n    this.login.password = data;\r\n    this.login.username = uname;\r\n    this.login.otp = otp;\r\n    console.log(this.login);\r\n    this.loginservice.forgetPassword(this.login).subscribe(res => {\r\n      this.loginProcessing=false;\r\n      this.res = res;\r\n      console.log(this.res);\r\n      if (this.res) {\r\n        // this.spinnerbutton = false;\r\n        if (this.res[0] === 'Login success.') {\r\n          Swal.fire('Password Changed Successfully.');\r\n        }\r\n        if(res[0]==\"You cannot use your previous password. Please choose another password\")\r\n        {\r\n          Swal.fire(\r\n            {\r\n              title:\"You can not use your last \"+ this.security.pswdReuseAft +\" passwords. Please choose another password.\"\r\n            }\r\n          )\r\n        }\r\n        if(res[0]==\"OTP is invalid\")\r\n        {\r\n          Swal.fire(\r\n            {\r\n              title:\"Otp is invalid.\"\r\n            }\r\n          )\r\n        }\r\n        if(res[0]==\"successfull\")\r\n        {\r\n          Swal.fire(\r\n            {\r\n              title:\"Password Changed Successfully.\"\r\n            }\r\n          )\r\n        }\r\n\r\n        // } else {\r\n        //   Swal.fire(this.res[0]);\r\n        // }\r\n\r\n        // this.router.navigate(['/dashboard']);\r\n      } else {\r\n        // this.spinnerbutton = false;\r\n        // this.snack.open('Choose Other Password Unable to Reset!', 'OK', { duration: 4000 });\r\n        Swal.fire('Choose Other Password ', 'or otp is invalid.');\r\n      }\r\n    });\r\n\r\n  }\r\n}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { forgetPasswordRoutes } from './forget-password-routing.module';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ForgetPasswordComponent } from './forget-password.component';\r\nimport { ComponentsModule } from 'src/app/shared/components/components.module';\r\nimport { AngularMaterialModule } from 'src/app/shared/angular-material/angular-material.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ForgetPasswordComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    ComponentsModule,\r\n    AngularMaterialModule,\r\n    FlexLayoutModule,\r\n    PerfectScrollbarModule,\r\n    RouterModule.forChild(forgetPasswordRoutes)\r\n  ]\r\n})\r\nexport class ForgetPasswordModule { }\r\n"],"sourceRoot":"webpack:///"}