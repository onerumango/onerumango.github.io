{"version":3,"file":"src_app_pages_change-password_change-password_module_ts.js","mappings":"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","sources":["./src/app/pages/change-password/change-password-routing.module.ts","./src/app/pages/change-password/change-password.module.ts","./src/app/pages/change-password/change-password.page.ts","./src/app/services/custom-validators.service.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ChangePasswordPage } from './change-password.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ChangePasswordPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ChangePasswordPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { ChangePasswordPageRoutingModule } from './change-password-routing.module';\r\n\r\nimport { ChangePasswordPage } from './change-password.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ReactiveFormsModule,\r\n    ChangePasswordPageRoutingModule\r\n  ],\r\n  declarations: [ChangePasswordPage]\r\n})\r\nexport class ChangePasswordPageModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ApiService } from 'src/app/services/api.service';\r\nimport { CustomValidatorsService } from 'src/app/services/custom-validators.service';\r\nimport { ToastController } from '@ionic/angular';\r\nimport { Location } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-change-password',\r\n  templateUrl: './change-password.page.html',\r\n  styleUrls: ['./change-password.page.scss'],\r\n})\r\nexport class ChangePasswordPage implements OnInit {\r\n  changePasswordForm: FormGroup;\r\n  currShowPassword: boolean = false;\r\n  newShowPassword: boolean = false;\r\n  reEnterShowPassword: boolean = false;\r\n  firstTimeLogin: any = 'N';\r\n  customerPhonenum: any;\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private router: Router,\r\n    private location: Location,\r\n    private api: ApiService,\r\n    public toastCtrl: ToastController\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.firstTimeLogin = localStorage.getItem('firstTimeLogin');\r\n    if (\r\n      this.firstTimeLogin == null ||\r\n      this.firstTimeLogin == undefined ||\r\n      this.firstTimeLogin == ''\r\n    ) {\r\n      this.firstTimeLogin = 'N';\r\n    }\r\n    this.customerPhonenum = localStorage.getItem('customerPhonenum');\r\n    console.log('<===> ', this.firstTimeLogin === 'Y' ? 'YES' : 'NO');\r\n    this.changePasswordForm = this.fb.group(\r\n      {\r\n        currentPassword: [\r\n          '',\r\n          this.firstTimeLogin === 'Y' ? [] : [Validators.required],\r\n        ],\r\n        newPassword: [\r\n          '',\r\n          Validators.compose([\r\n            // 1. Password Field is Required\r\n            Validators.required,\r\n            // 2. check whether the entered password has a number\r\n            CustomValidatorsService.patternValidator(/\\d/, { hasNumber: true }),\r\n\r\n            // 3. check whether the entered password has upper case letter\r\n            CustomValidatorsService.patternValidator(/[A-Z]/, {\r\n              hasCapitalCase: true,\r\n            }),\r\n            // 4. check whether the entered password has a lower-case letter\r\n            CustomValidatorsService.patternValidator(/[a-z]/, {\r\n              hasSmallCase: true,\r\n            }),\r\n            // 5. check whether the entered password has a special character\r\n            CustomValidatorsService.patternValidator(\r\n              /[ !@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/,\r\n              {\r\n                hasSpecialCharacters: true,\r\n              }\r\n            ),\r\n            // 6. Has a minimum length of 8 characters\r\n            Validators.minLength(8),\r\n          ]),\r\n        ],\r\n        newPasswordConfirmation: [\r\n          '',\r\n          Validators.compose([Validators.required]),\r\n        ],\r\n      },\r\n      {\r\n        // check whether our password and confirm password match\r\n        validator: CustomValidatorsService.passwordMatchValidator,\r\n      }\r\n    );\r\n    console.log(this.changePasswordForm.value);\r\n  }\r\n  public onPasswordToggle(showType): void {\r\n    if (showType === 'current') {\r\n      this.currShowPassword = !this.currShowPassword;\r\n    }\r\n    if (showType === 'new') {\r\n      this.newShowPassword = !this.newShowPassword;\r\n    }\r\n    if (showType === 'reenter') {\r\n      this.reEnterShowPassword = !this.reEnterShowPassword;\r\n    }\r\n  }\r\n  save() {\r\n    console.log(this.changePasswordForm.value);\r\n    if (\r\n      this.changePasswordForm.value.newPassword !==\r\n      this.changePasswordForm.value.newPasswordConfirmation\r\n    ) {\r\n      this.openToast('Password do not match');\r\n      return;\r\n    }\r\n    if (\r\n      this.changePasswordForm.value.currentPassword ===\r\n      this.changePasswordForm.value.newPassword\r\n    ) {\r\n      this.openToast('Current Password and New password can not be same');\r\n      return;\r\n    }\r\n    if (this.firstTimeLogin === 'Y') {\r\n      var obj = {\r\n        phoneNumber: this.customerPhonenum,\r\n        custPassword: this.changePasswordForm.value.newPasswordConfirmation,\r\n      };\r\n      this.api.updateCustomerPassword(obj).subscribe((data) => {\r\n        if (data.hasOwnProperty('content')) {\r\n          if (\r\n            data.content\r\n              .toString()\r\n              .includes('No record exists for given phone number')\r\n          ) {\r\n            this.openToast('No record exists for given phone number');\r\n          }\r\n        } else {\r\n          localStorage.setItem('firstTimeLogin', 'Y');\r\n          if (this.firstTimeLogin == 'Y') {\r\n            this.openToast('Created password successfully');\r\n            this.router.navigate(['/profile']);\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      this.api\r\n        .validatePassword(\r\n          localStorage.getItem('customerPhonenum'),\r\n          this.changePasswordForm.value.currentPassword\r\n        )\r\n        .subscribe(\r\n          (res) => {\r\n            console.log('validate pass -- ', res);\r\n            if (res.hasOwnProperty('message')) {\r\n              if (res.message.toString().includes('Wrong Password')) {\r\n                this.openToast('Incorrect Current Password');\r\n              } else {\r\n                var obj = {\r\n                  phoneNumber: this.customerPhonenum,\r\n                  custPassword:\r\n                    this.changePasswordForm.value.newPasswordConfirmation,\r\n                };\r\n                this.api.updateCustomerPassword(obj).subscribe(\r\n                  (data) => {\r\n                    if (data.hasOwnProperty('content')) {\r\n                      if (\r\n                        data.content\r\n                          .toString()\r\n                          .includes('No record exists for given phone number')\r\n                      ) {\r\n                        this.openToast(\r\n                          'No record exists for given phone number'\r\n                        );\r\n                      }\r\n                    } else {\r\n                      localStorage.setItem('firstTimeLogin', 'N');\r\n                      if (this.firstTimeLogin == 'Y') {\r\n                        this.openToast('Created password successfully');\r\n                        this.router.navigateByUrl('/otp');\r\n                      } else {\r\n                        this.openToast('Updated password successfully');\r\n                      }\r\n                    }\r\n                  },\r\n                  (error) => {\r\n                    console.log('Error: ', error);\r\n                    this.openToast('Unable to update password');\r\n                  }\r\n                );\r\n              }\r\n            }\r\n          },\r\n          (err) => {\r\n            console.log('Error:: ', err);\r\n            this.openToast('Something went wrong!');\r\n          }\r\n        );\r\n    }\r\n  }\r\n  async openToast(message) {\r\n    const toast = await this.toastCtrl.create({\r\n      message: `${message}`,\r\n      duration: 2500,\r\n      position: 'bottom',\r\n    });\r\n    toast.present();\r\n  }\r\n\r\n  previous() {\r\n    if (this.firstTimeLogin === 'Y') {\r\n      this.router.navigateByUrl('/login');\r\n    } else {\r\n      // this.router.navigate(['/profile']);\r\n      this.location.back();\r\n    }\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ValidationErrors, ValidatorFn, AbstractControl } from '@angular/forms';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CustomValidatorsService {\r\n\r\n  constructor() { }\r\n  static patternValidator(regex: RegExp, error: ValidationErrors): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => {\r\n      if (!control.value) {\r\n        // if control is empty return no error\r\n        return null;\r\n      }\r\n\r\n      // test the value of the control against the regexp supplied\r\n      const valid = regex.test(control.value);\r\n\r\n      // if true, return no error (no error), else return error passed in the second parameter\r\n      return valid ? null : error;\r\n    };\r\n  }\r\n\r\n  static passwordMatchValidator(control: AbstractControl) {\r\n    const password: string = control.get('newPassword').value; // get password from our password form control\r\n    const confirmPassword: string = control.get('newPasswordConfirmation').value; // get password from our confirmPassword form control\r\n    // compare is the password math\r\n    if (password !== confirmPassword) {\r\n      // if they don't match, set an error in our confirmPassword form control\r\n      control.get('newPasswordConfirmation').setErrors({ NoPassswordMatch: true });\r\n    }\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}