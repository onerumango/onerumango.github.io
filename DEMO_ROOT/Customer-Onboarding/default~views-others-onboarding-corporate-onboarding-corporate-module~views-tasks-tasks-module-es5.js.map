{"version":3,"sources":["webpack:///src/app/views/others/onboarding-corporate/contact-information/contact-information.component.ts","webpack:///src/app/views/others/onboarding-corporate/contact-information/contact-information.component.html","webpack:///src/app/views/others/onboarding-corporate/proof-of-identity/proof-of-identity.component.ts","webpack:///src/app/views/others/onboarding-corporate/proof-of-identity/proof-of-identity.component.html","webpack:///src/app/views/others/onboarding-corporate/onboarding-corporate-main/onboarding-corporate-main.component.ts","webpack:///src/app/views/others/onboarding-corporate/onboarding-corporate-main/onboarding-corporate-main.component.html","webpack:///src/app/views/others/onboarding-corporate/corporate-onboarding.service.ts","webpack:///src/app/views/others/onboarding-corporate/create-director/create-director.component.ts","webpack:///src/app/views/others/onboarding-corporate/create-director/create-director.component.html","webpack:///src/app/views/others/onboarding-corporate/onboarding-corporate-routing.module.ts","webpack:///src/app/views/others/onboarding-corporate/onboarding-corporate.module.ts","webpack:///src/app/views/others/onboarding-corporate/onborading-primary/onborading-primary.component.ts","webpack:///src/app/views/others/onboarding-corporate/onborading-primary/onborading-primary.component.html","webpack:///src/app/views/others/onboarding-corporate/other-info-corporate/other-info-corporate.component.ts","webpack:///src/app/views/others/onboarding-corporate/other-info-corporate/other-info-corporate.component.html","webpack:///src/app/views/others/onboarding-corporate/director-details/director-details.component.ts","webpack:///src/app/views/others/onboarding-corporate/director-details/director-details.component.html"],"names":["ContactInformationComponent","router","ls","formBuilder","corporateService","apiService","cdr","snack","arrayState","arrayCountry","arrayCity","addressTypeList","isAllSameDigitVal","contactFormGroup","group","corporateId","primaryEmail","required","secondaryEmail","mobileNumber","minLength","maxLength","landLine","isMailingAddressSame","corporateAddress","array","getCountryName","console","log","corporateAccountIdVal","subscribe","get","setValue","getCoropratedetails","mailAddress","addAddress","getItem","getAddressData","push","addressType","address1","pattern","address2","state","city","zipCode","country","event","inputChar","String","fromCharCode","charCode","test","preventDefault","detectChanges","markForCheck","length","controls","pop","key","getAllCountries","data","i","authStatus","countryName","index","getStateByCountryId","id","resp","getDropDownValues1","details","customerInfo","userAddress","getStateName","getCityName","patchValue","keyCode","saveOrUpdateCorporateAccountInfo","sendCorporateAccountId","open","duration","verticalPosition","horizontalPosition","next","sendDisableMatTab","setFinishFlag","finishFlag","zipIndex","count","number","target","value","_keyPress","previous","onSubmit","selector","templateUrl","styleUrls","MY_FORMATS","parse","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","ProofOfIdentityComponent","minDate","Date","validDate","maxDate","selectedOptions","selectedDocumentTypes","isDocumentOptionDisabled","includes","setDate","getDate","proofOfIdentityFormGroup","incorporationNumber","dateOfIssue","dateOfExpiry","isAnotherIdProofRequired","idProofList","getIdType","idType","idNumber","clear","addIdProof","setValidators","updateValueAndValidity","getDropDownValues","re","idTypeList","filter","val","directorFormGroup","obj","Object","keys","map","format","error","message","e","item","getDocumentList","removeAt","provide","useClass","deps","useValue","providers","OnboardingCorporateMainComponent","formService","tabIndex","disableMatTabVal","getDisableMatTab","getFinishFlag","assignValueFinish","assignValuesForTab2","assignValuesForTab3","assignValuesForTab4","assignValuesForTab5","tab1","tab2","tab3","tab4","tab5","CorporateOnboardingService","_formBuilder","http","showMessageService","corporateAccountIdRef","asObservable","disableMatTab","finishSave","noOfDirectors","setItem","post","providedIn","CreateDirectorComponent","appApiService","datepipe","fieldArray","newAttribute","arrData","directorCount","panelOpenState","profileImage","saveStatus","customerInfoList","isEdit","isDirectorSaved","isChecked","disabled","disabledToggle","prefixFlag","corporateExistingCustomer","isAllNumberZeroFlag","createDirectorFormGroup","customerId","citizenship","cifNumber","countryOfResidence","dateOfBirth","existingCustomer","firstName","gender","landlineNumber","lastName","middleName","phoneNumber","placeOfBirth","prefix","primaryCustomer","primaryEmailAdress","residenceStatus","expiryDate","custTaxInfo","toggleChanges","totalDir","getnoOfDirectors","noOfDir","getDoc","addCustTaxInfo","getResidenceDetails","valueChanges","createInititals","getIdProofData","getCustTaxInfo","taxId","countryOfIssue","countryFlaglists","currencyCode","Currency","toLowerCase","arrayResidence","status","reset","fetchByCif","custIdProofs","cif","autocomplete","closePanel","formDirective","enable","disable","showAutocomplete","inputElement","nativeElement","pipe","onSelectionCitizionship","onSelectionResidance","cifNumberForPayload","customerIdForPayload","transform","clearTimeout","timer","setTimeout","res","kycValues","kycReference","kycStatus","custStatus","err","coporateObjModel","setfinishSave","responseDatas","genderList","prefixList","k","name","undefined","names","split","initials","substring","toUpperCase","openClose","letterOnly","onChangeGender","isAllNumberZero","onboardingCorporateroutes","path","component","OnboardingCorporateRoutingModule","forChild","imports","exports","OnboardingCorporateModule","declarations","OnboradingPrimaryComponent","dialogService","route","companyNameArr","categoryArr","countryArr","profileImageExist","disableDeletebtn","onboardingPrimary","companyName","category","editCorporateScreen","localStorage","imageURL","imgUrl","queryParamMap","params","resetCorprateOnboarding","removeItem","navigateByUrl","selectedFiles","files","reader","FileReader","readAsDataURL","onload","event2","result","profilePicture","corporateStatus","corporateDetails","updateCorporateStatus","profileUpload","documentName","documentType","fileType","type","fileName","uploadData","FormData","append","JSON","stringify","uploadCorporateDocument","response","updateCorporateSatatus","document_type","getCustomerDocuments","profileId","fileUrl","docObj","corporateDocs","find","x","delCorporateCustDoc","profileChange","deleteProfileImg","OtherInfoCorporateComponent","organizationTypeList","typeOfOwnershipList","localityList","kycStatusList","otherDocumentArray","nameOfDocument","isExistingCustomer","otherInfoFormGroup","organizationType","typeOfOwnership","KycStatus","corporateRegisterAddress","addDocument","fileData","idx","documentTypeList","documentToBeUploaded","customerOnboardingSuccessDialogue","setnoOfDirectors","responseData","countryList","responses","residenceList","datas","nationalityList","DirectorDetailsComponent","items","disabledBtn","totalCust","noOfDirector","getfinishSave","disSave","forEach","element","form","parseInt","itemLength","NaN","Error","noOFDirector","accordion"],"mappings":"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","file":"default~views-others-onboarding-corporate-onboarding-corporate-module~views-tasks-tasks-module-es5.js","sourcesContent":["import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { MatTabChangeEvent } from '@angular/material/tabs';\r\nimport { FormGroup, FormBuilder, FormArray, Validators } from '@angular/forms';\r\nimport { ApiService } from 'app/shared/services/api.service';\r\nimport { CorporateOnboardingService } from '../corporate-onboarding.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { LocalStoreService } from 'app/shared/services/local-store.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-contact-information',\r\n  templateUrl: './contact-information.component.html',\r\n  styleUrls: ['./contact-information.component.scss']\r\n})\r\nexport class ContactInformationComponent implements OnInit {\r\n\r\n  contactFormGroup: FormGroup;\r\n  addressTypeVar: string;\r\n  addressList: any;\r\n  corporateId: any;\r\n  arrayState: any[] = [];\r\n  arrayCountry: string[] = [];\r\n  arrayCity: any[] = [];\r\n  addressTypeList:any=['Company','Mailing'];\r\n  isAllSameDigitVal: boolean=false;\r\n  zipIndex: number;\r\n  constructor(private router: Router,\r\n    private ls: LocalStoreService,\r\n    private formBuilder: FormBuilder,\r\n    private corporateService: CorporateOnboardingService,\r\n    private apiService: ApiService,\r\n    private cdr: ChangeDetectorRef,\r\n    private snack: MatSnackBar) {\r\n      this.contactFormGroup = formBuilder.group({\r\n        corporateId: [''],\r\n        primaryEmail: ['',[Validators.required]],\r\n        secondaryEmail: [''],\r\n        mobileNumber: ['',[Validators.minLength(10), Validators.maxLength(10)]],\r\n        landLine: ['',[Validators.maxLength,Validators.minLength]],\r\n        isMailingAddressSame: ['YES'],\r\n        corporateAddress: formBuilder.array([])\r\n      })\r\n      // this.corporateService.stepReady(this.contactFormGroup, 'three')\r\n\r\n      this.getCountryName(\"country\");\r\n  }\r\n\r\n \r\n  ngOnInit(): void {\r\n   console.log(\"testttt\")\r\n    this.corporateService.corporateAccountIdVal\r\n    .subscribe(corporateId => {\r\n      console.log('corporateId :: ', this.corporateId = corporateId);\r\n      this.contactFormGroup.get('corporateId').setValue(corporateId)\r\n    });\r\n    if(this.corporateId){\r\n      this.getCoropratedetails(this.corporateId);\r\n    }\r\n    let mailAddress:any=this.contactFormGroup.get('isMailingAddressSame');\r\n    if( mailAddress === 'YES'){\r\n      this.contactFormGroup.get('corporateAddress').get('addressType').setValue('Company')\r\n    }\r\n    \r\n    this.addAddress();\r\n  }\r\n\r\n\r\n  ngAfterViewInit(){\r\n    if(this.ls.getItem('corporateId')){      \r\n      this.getCoropratedetails(this.ls.getItem('corporateId'));\r\n    }\r\n   }\r\n\r\n  get getAddressData() {\r\n    return this.contactFormGroup.get('corporateAddress') as FormArray;\r\n  }\r\n\r\n  addAddress() {\r\n    this.getAddressData.push(this.formBuilder.group({\r\n      addressType: [''],\r\n      address1: ['',[Validators.required,Validators.pattern(\".*[a-zA-Z].*\")]],\r\n      address2: ['',[Validators.required,Validators.pattern(\".*[a-zA-Z].*\")]],\r\n      state:['',[Validators.required]],\r\n      city: ['',[Validators.required]],\r\n      zipCode: ['',[Validators.required,Validators.minLength(6), Validators.maxLength(10)]],\r\n      country: ['',[Validators.required]],\r\n    }));\r\n  }\r\n  _keyPress(event: any) {\r\n    const pattern = /[0-9]/;\r\n    let inputChar = String.fromCharCode(event.charCode);\r\n    if (!pattern.test(inputChar)) {\r\n      event.preventDefault();\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n  radioSelection(event) {\r\n    console.log('event :: ', event);\r\n    if (event === 'NO') {\r\n      console.log('inside if')\r\n      this.addAddress();\r\n      this.cdr.detectChanges();\r\n      this.cdr.markForCheck();\r\n    } else {\r\n      if ( this.getAddressData.length > 1) {\r\n        this.getAddressData.controls.pop();\r\n        this.cdr.detectChanges();\r\n        this.cdr.markForCheck();\r\n      }\r\n    }\r\n  }\r\n\r\n  getCountryName(key: string) {\r\n    this.apiService.getAllCountries().subscribe((data: any) => {\r\n     for(let i=0; i<data.length;i++){\r\n       if(data[i].authStatus==='A'){     \r\n         this.arrayCountry.push(data[i].countryName);\r\n       }\r\n     }\r\n   });\r\n }\r\n\r\n  getStateName(country, index) {\r\n    this.arrayState[index]=[];\r\n    this.arrayCity[index]=[];\r\n    this.apiService.getAllCountries().subscribe((data: any) => {\r\n      for(let i=0; i<data.length;i++){       \r\n        if(data[i].countryName == country){\r\n          this.apiService.getStateByCountryId(data[i].id).subscribe((resp: any) => {\r\n          this.arrayState[index] = resp\r\n          })\r\n          break;   \r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  \r\n  getCityName(state: any, index) {\r\n    console.log(state)\r\n    this.apiService.getDropDownValues1(\"city\",state).subscribe((data) => {\r\n      this.arrayCity[index] = data;\r\n      console.log(\"-->\", this.arrayCity)\r\n    });\r\n  }\r\n\r\n\r\n\r\n  getCoropratedetails(id){\r\n    this.apiService.getCoropratedetails(id).subscribe((details => {\r\n      console.log(details.customerInfo[0].userAddress[0]);\r\n      this.getStateName(details.customerInfo[0].userAddress[0].country,0);\r\n      this.getCityName(details.customerInfo[0].userAddress[0].state,0)\r\n      if(details){\r\n        this.contactFormGroup.patchValue(details);\r\n        this.contactFormGroup.get('corporateAddress').patchValue(details.customerInfo[0].corporateAddress)\r\n        console.log(details.customerInfo[0]);\r\n        console.log(details.customerInfo[0].corporateAddress);\r\n      }\r\n    }))\r\n    }\r\n\r\n   letterOnly(event) {\r\n    var charCode = event.keyCode;\r\n    if ((charCode > 64 && charCode < 91) || (charCode > 96 && charCode < 123) || charCode == 8)\r\n      return true;\r\n    else\r\n      return false;\r\n  }\r\n\r\n\r\n  onSubmit(contactFormGroup){\r\n    console.log('form :: ',contactFormGroup);\r\n    console.log('form :: ',contactFormGroup.isMailingAddressSame);\r\n    if(contactFormGroup.isMailingAddressSame=='NO'){\r\n      contactFormGroup.corporateAddress[0].addressType='Company';\r\n      contactFormGroup.corporateAddress[1].addressType='Mailing';\r\n    }\r\n    if(contactFormGroup.isMailingAddressSame=='YES'){\r\n      contactFormGroup.corporateAddress[0].addressType='Company';\r\n    }\r\n    console.log(contactFormGroup.corporateAddress[0].addressType)\r\n    this.corporateService.saveOrUpdateCorporateAccountInfo(contactFormGroup)\r\n    .subscribe(data=>{\r\n      console.log('data :: ', data);\r\n      if(data != null){\r\n        this.corporateService.sendCorporateAccountId(data.corporateId)\r\n        this.snack.open('Contact Information Saved' + ' !', 'OK', {\r\n          duration: 4000,\r\n          verticalPosition: 'top',\r\n          horizontalPosition: 'right'\r\n        });\r\n      }\r\n      this.next();\r\n    })\r\n  }\r\n\r\n  previous() {\r\n    this.corporateService.sendDisableMatTab({\r\n      index: 1,\r\n    });\r\n  }\r\n\r\n  next() {\r\n    this.corporateService.sendDisableMatTab({\r\n      index: 3,\r\n    });\r\n    this.corporateService.setFinishFlag({\r\n      finishFlag: false,\r\n    });\r\n  }\r\n\r\n  isAllSameDigit(event,index) {\r\n    this.zipIndex=index;\r\n    let count = 0, number = event.target.value;\r\n    if (number != '') {\r\n      for (var i = 0; i < number.length; i++) {\r\n        if (0 == number[i]) {\r\n          count++;\r\n        }\r\n      }\r\n      if (count == number.length) {\r\n        this.isAllSameDigitVal = true;\r\n      }\r\n      else {\r\n        this.isAllSameDigitVal = false;\r\n      }\r\n    } else {\r\n      this.isAllSameDigitVal = false;\r\n    }\r\n  }\r\n\r\n  \r\n}\r\n","<form [formGroup]=\"contactFormGroup\" ngNativeValidate>\r\n    <div class=\"full-width\" >\r\n        <div style=\"padding: 1rem 0;background-color:#F1F1F4\">\r\n            <div style=\"padding: 0 4.3rem\">\r\n                <mat-card style=\"border-radius: 0px;\">\r\n                    <div fxLayout=\"column\" class=\"full-width\" fxLayoutAlign=\"space-around start\">\r\n                        <div class=\"full-width\" style=\"padding: 1rem 1rem;\">\r\n                            <h2 style=\"font-size: 18px; margin-left: 10px;\">Contact Information</h2>\r\n                            <mat-divider style=\"width:70px;border-bottom: 7px solid #456EFE;left: 40px; border-radius: 30px;\">\r\n                            </mat-divider>\r\n                        </div>\r\n\r\n                    </div>\r\n<!-- \r\n                    <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n                            <div fxFlex=\"2\"></div>\r\n                            <div fxFlex=\"28\">\r\n                                <mat-label> your mailing address same as company address? </mat-label>\r\n                            </div>\r\n                            <div fxFlex=\"50\">\r\n\r\n                                <mat-radio-group formControlName=\"isMailingAddressSame\"\r\n                                    *ngFor=\"let x of ['YES','NO']; let i = index\">\r\n                                    <mat-radio-button [value]=\"x\" (change)=\"radioSelection($event.value)\"\r\n                                        [checked]=\"x == contactFormGroup.value.isMailingAddressSame\">{{x}}\r\n                                    </mat-radio-button>&nbsp;\r\n                                </mat-radio-group>\r\n                            </div>\r\n                        </div>\r\n                    </div> -->\r\n\r\n                    <div formArrayName=\"corporateAddress\">\r\n                        <div *ngFor=\"let item of contactFormGroup.get('corporateAddress')['controls']; let i = index;\"\r\n                            [formGroupName]=\"i\">\r\n                            <fieldset style=\"border-top: 1px solid lightgray;margin-left: 20px; margin-right: 20px;\">\r\n                                <legend visible=\"true\" *ngIf=\"i==0\">\r\n                                    Company Address</legend>\r\n                                <legend visible=\"true\" *ngIf=\"i==1\">\r\n                                    Mailing Address</legend>\r\n\r\n\r\n                                <div fxLayout=\"row wrap\">\r\n                                    <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n                                        <!--<div fxFlex=\"20\" class=\"form-group\">\r\n                                            <label for=\"foraddressType\" class=\"hint\">Address Type*</label>\r\n                                           <mat-form-field floatLabel=\"never\">\r\n                                                <mat-select id=\"foraddressType\" formControlName=\"addressType\">\r\n                                                    <mat-option disabled>select---</mat-option>\r\n                                                    <mat-option *ngFor=\"let addrsType of addressTypeList\"\r\n                                                        [value]=\"addrsType\">\r\n                                                        {{addrsType}}\r\n                                                    </mat-option>\r\n                                                </mat-select>\r\n                                                <mat-placeholder class=\"placeholder\">Address Type </mat-placeholder>\r\n                                            </mat-form-field>\r\n                                            <mat-error\r\n                                                *ngIf=\"item.get('addressType').touched && !item.get('addressType').valid\">\r\n                                                <small>Address Type is Required!</small>\r\n                                            </mat-error>\r\n                                        </div>-->\r\n                                        <div fxFlex=\"50\" class=\"form-group\">\r\n                                            <!-- <label for=\"forAddress1\" class=\"hint\">Address Line 1* </label> -->\r\n                                            <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                                <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                                    <mat-label>Address Line 1</mat-label>\r\n                                                <input matInput formControlName=\"address1\" id=\"forAddress1\" required>\r\n                                                <!-- <mat-placeholder class=\"placeholder\">Address Line 1 </mat-placeholder> -->\r\n                                            </mat-form-field>\r\n                                            <mat-error\r\n                                                *ngIf=\"(item.get('address1').touched && !item.get('address1').valid) || (item.get('address1').touched && item.get('address1').hasError('pattern'))\">\r\n                                                <!--Fill address line 1-->\r\n                                                <small>Enter Valid Address </small>\r\n                                            </mat-error>\r\n\r\n                                        </div>\r\n                                        <div fxFlex=\"50\" class=\"form-group\">\r\n                                            <!-- <label for=\"forAddress2\" class=\"hint\">Address Line 2*</label> -->\r\n                                            <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                                <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                                    <mat-label>Address Line 2</mat-label>\r\n                                                <input matInput formControlName=\"address2\"  id=\"forAddress2\" required>\r\n                                                <!-- <mat-placeholder class=\"placeholder\">Address Line 2 </mat-placeholder> -->\r\n                                            </mat-form-field>\r\n                                            <mat-error\r\n                                                *ngIf=\"(item.get('address2').touched && !item.get('address2').valid) || (item.get('address2').touched && item.get('address2').hasError('pattern'))\">\r\n                                                <!--Fill address line 2-->\r\n                                                <small>Enter Valid Address </small>\r\n                                            </mat-error>\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div fxLayout=\"row wrap\">\r\n                                    <div fxFlex=\"100\" fxLayoutGap=\"10px\">\r\n                                        <div fxFlex=\"25\" class=\"form-group\">\r\n                                            <!-- <label for=\"forcountry\" class=\"hint\">Country*</label> -->\r\n                                           <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                            <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                                <mat-label>Country</mat-label>\r\n                                                <mat-select id=\"forcountry\" formControlName=\"country\" (selectionChange)=\"getStateName($event.value,i)\">\r\n\r\n                                                    <!-- <mat-option disabled>select---</mat-option> -->\r\n                                                    <mat-option *ngFor=\"let country of arrayCountry\"\r\n                                                        [value]=\"country\">\r\n                                                        {{country}}\r\n                                                    </mat-option>\r\n                                                </mat-select>\r\n                                                <!-- <mat-placeholder class=\"placeholder\">Country </mat-placeholder> -->\r\n                                            </mat-form-field>\r\n                                            <mat-error\r\n                                                *ngIf=\"item.get('country').touched && !item.get('country').valid\">\r\n                                                <small>Country is Required!</small>\r\n                                            </mat-error>\r\n                                        </div>\r\n\r\n                                        <div fxFlex=\"25\" class=\"form-group\">\r\n                                            <!-- <label for=\"forstate\" class=\"hint\">State*</label> -->\r\n                                           <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                            <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                                <mat-label>State</mat-label>\r\n                                                <mat-select id=\"forstate\" formControlName=\"state\" \r\n\r\n                                                (selectionChange)=\"getCityName($event.value,i)\">\r\n                                                    <!-- <mat-option disabled>select---</mat-option> -->\r\n                                                    <mat-option *ngFor=\"let state of arrayState[i]\"\r\n                                                        [value]=\"state.stateName\">\r\n                                                        {{state.stateName}}\r\n                                                    </mat-option>\r\n                                                </mat-select>\r\n                                                <!-- <mat-placeholder class=\"placeholder\">State </mat-placeholder> -->\r\n                                            </mat-form-field>\r\n                                            <mat-error\r\n                                            *ngIf=\"item.get('state').touched && !item.get('state').valid\">\r\n                                            <small>State is Required!</small>\r\n                                        </mat-error>\r\n                                        </div>\r\n                                        <div fxFlex=\"25\" class=\"form-group\">\r\n                                            <!-- <label for=\"forCity\" class=\"hint\">City*</label> -->\r\n                                           <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                            <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                                <mat-label>City</mat-label>\r\n                                                <mat-select id=\"forCity\" formControlName=\"city\">\r\n                                                    <!-- <mat-option disabled>select---</mat-option> -->\r\n                                                    <mat-option *ngFor=\"let City of arrayCity[i]\"\r\n                                                        [value]=\"City.value1\">\r\n                                                        {{City.value1}}\r\n                                                    </mat-option>\r\n                                                </mat-select>\r\n                                                <!-- <mat-placeholder class=\"placeholder\">City </mat-placeholder> -->\r\n                                            </mat-form-field>\r\n                                            <mat-error *ngIf=\"item.get('city').touched && !item.get('city').valid\">\r\n                                                <small>City is Required!</small>\r\n                                            </mat-error>\r\n                                        </div>\r\n                                        <div fxFlex=\"25\" class=\"form-group\">\r\n                                            <!-- <label for=\"forZipCode\" class=\"hint\">Zip code*</label> -->\r\n                                            <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                                <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                                    <mat-label>Zip Code</mat-label>\r\n                                                <input minlength=\"6\" (keypress)=\"_keyPress($event)\"\r\n                                                maxlength=\"10\" matInput id=\"forZipCode\" onlyNumber formControlName=\"zipCode\"\r\n                                                (keyup)=\"isAllSameDigit($event, i)\" required>\r\n                                                <!-- <mat-placeholder class=\"placeholder\"  >Zip code </mat-placeholder> -->\r\n                                            </mat-form-field>\r\n                                            <mat-error *ngIf=\"item.get('zipCode').touched && !item.get('zipCode').valid\r\n\t\t\t\t\t\t\t\t\t                && !item.controls['zipCode'].hasError('minLength')\">\r\n\t\t\t\t\t\t\t\t                \t<small>Please enter valid Zip code</small>\r\n\t\t\t\t\t\t\t            \t</mat-error>\r\n                                            <mat-error *ngIf=\"isAllSameDigitVal && i==zipIndex\">\r\n                                                <small>Please enter valid ZipCode!</small>\r\n                                            </mat-error>\r\n                                        </div>\r\n\r\n                                       \r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n                        </div>\r\n                    </div>\r\n                    <!-- For Email Information -->\r\n                    <fieldset style=\"border-top: 1px solid lightgray;margin-left: 20px; margin-right: 20px;\">\r\n                        <legend visible=\"true\">Email</legend>\r\n                        <div fxLayout=\"row wrap\">\r\n                            <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n                                <div fxFlex=\"50\" class=\"form-group\">\r\n                                    <!-- <label for=\"forPrimaryEmail\" class=\"hint\">Primary Email*</label> -->\r\n                                    <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                        <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                            <mat-label>Primary Email</mat-label>\r\n                                        <input matInput id=\"forPrimaryEmail\" formControlName=\"primaryEmail\"                                       \r\n\t\t\t\t\t type=\"email\" pattern=\"^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$\" required>\r\n                                        <!-- <mat-placeholder class=\"placeholder\">Primary Email </mat-placeholder> -->\r\n                                    </mat-form-field>\r\n                                    <mat-error\r\n                                        *ngIf=\"contactFormGroup.get('primaryEmail').touched && !contactFormGroup.get('primaryEmail').valid\">\r\n                                        <small>Please enter correct Email id</small>\r\n                                    </mat-error>\r\n                                </div>\r\n                                <div fxFlex=\"50\" class=\"form-group\">\r\n                                    <!-- <label for=\"forSecondaryEmail\" class=\"hint\">Secondary Email</label> -->\r\n                                    <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                        <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                            <mat-label>Secondary Email</mat-label>\r\n                                        <input matInput id=\"forSecondaryEmail\" formControlName=\"secondaryEmail\"\r\n                                        type=\"email\" pattern=\"^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$\">\r\n                                        <!-- <mat-placeholder class=\"placeholder\">Secondary Email </mat-placeholder> -->\r\n                                    </mat-form-field>\r\n                                    <mat-error\r\n                                        *ngIf=\"contactFormGroup.get('secondaryEmail').touched && !contactFormGroup.get('secondaryEmail').valid\">\r\n                                        <small>Please enter correct Email id!</small>\r\n                                    </mat-error>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </fieldset>\r\n\r\n                    <fieldset style=\"border-top: 1px solid lightgray;margin-left: 20px; margin-right: 20px;\">\r\n                        <legend visible=\"true\">Contact Number</legend>\r\n                        <div fxLayout=\"row wrap\">\r\n                            <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n                                <div fxFlex=\"50\" class=\"form-group\">\r\n                                    <!-- <label for=\"forMobileNumber\" class=\"hint\">Mobile Number*</label> -->\r\n                                    <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                        <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                            <mat-label>Mobile Number</mat-label>\r\n                                        <input matInput id=\"forMobileNumber\" formControlName=\"mobileNumber\" (keypress)=\"_keyPress($event)\" maxLength=\"10\" minlength=\"10\"  onlyNumber required>\r\n                                        <!-- <mat-placeholder class=\"placeholder\">Mobile Number </mat-placeholder> -->\r\n                                    </mat-form-field>\r\n                                    <mat-error\r\n                                    *ngIf=\"contactFormGroup.get('mobileNumber').touched && !contactFormGroup.get('mobileNumber').valid &&\r\n                                     !contactFormGroup.controls['mobileNumber'].hasError('minLength')\">\r\n                                    <small>mobile Number is Required!</small>\r\n                                </mat-error>\r\n                                <mat-error *ngIf=\"contactFormGroup.controls['mobileNumber'].value == '0000000000'\">\r\n                                    <small>\r\n                                         &nbsp; &nbsp; Please Enter Correct Mobile Number\r\n                                    </small>\r\n                                    </mat-error>\r\n                                </div>\r\n                                <div fxFlex=\"50\" class=\"form-group\">\r\n                                    <!-- <label for=\"forLandLine\" class=\"hint\">Landline Number</label> -->\r\n                                    <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                        <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                            <mat-label>Landline Number</mat-label>\r\n                                        <input matInput id=\"forLandLine\" formControlName=\"landLine\" (keypress)=\"_keyPress($event)\" maxLength=\"10\" minLength=\"10\" onlyNumber>\r\n                                        <!-- <mat-placeholder class=\"placeholder\">Landline Number </mat-placeholder> -->\r\n                                    </mat-form-field>\r\n                                    <!-- <mat-error\r\n                                        *ngIf=\"contactFormGroup.get('landLine').touched && !contactFormGroup.get('landLine').valid\">\r\n                                        <small>Mobile Number is Required!</small>\r\n                                    </mat-error> -->\r\n                                    <mat-error *ngIf=\"contactFormGroup.controls['landLine'].value == '0000000000'\">\r\n                                        <small>\r\n                                            &nbsp; &nbsp; Please Enter Correct Landline Number</small>\t\r\n                                            </mat-error>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </fieldset>\r\n                </mat-card>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"button\">\r\n        <button mat-button class=\"Back\" \r\n        (click)=\"previous()\">Back</button>\r\n        <button mat-stroked-button class=\"Next\" \r\n        [disabled]=\"!contactFormGroup.get('isMailingAddressSame').valid || !contactFormGroup.valid\"\r\n        [ngClass]=\"(!contactFormGroup.valid)? 'disableNext':'enableNext'\"\r\n        (click)=\"onSubmit(contactFormGroup.value)\">Next</button>\r\n    </div>\r\n\r\n</form>\r\n","import { map } from 'rxjs/operators';\r\nimport { Validators } from '@angular/forms';\r\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { MatTabChangeEvent } from '@angular/material/tabs';\r\nimport { FormGroup, FormBuilder, FormArray } from '@angular/forms';\r\nimport { ApiService } from 'app/shared/services/api.service';\r\nimport { CorporateOnboardingService } from '../corporate-onboarding.service';\r\nimport * as moment from 'moment';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { LocalStoreService } from 'app/shared/services/local-store.service';\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\r\n\r\n\r\nexport const MY_FORMATS = {\r\n  parse: {\r\n      dateInput: 'LL'\r\n  },\r\n  display: {\r\n      dateInput: 'DD/MM/YYYY',\r\n      monthYearLabel: 'YYYY',\r\n      dateA11yLabel: 'LL',\r\n      monthYearA11yLabel: 'YYYY'\r\n  }\r\n};\r\n\r\n@Component({\r\n  selector: 'app-proof-of-identity',\r\n  templateUrl: './proof-of-identity.component.html',\r\n  styleUrls: ['./proof-of-identity.component.scss'],\r\n  providers: [\r\n    { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },\r\n    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS }\r\n  ],\r\n})\r\nexport class ProofOfIdentityComponent implements OnInit {\r\n\r\n  proofOfIdentityFormGroup: FormGroup;\r\n  corporateId: any;\r\n  minDate = new Date();\r\n  validDate= new Date();\r\n  maxDate = new Date();\r\n  idTypeList: string[];\r\n  selectedOptions: any[] = [];\r\n  selectedDocumentTypes: any[] = [];\r\n\r\n  constructor(private router: Router,\r\n    private formBuilder: FormBuilder,\r\n    private ls: LocalStoreService,\r\n    private corporateService: CorporateOnboardingService,\r\n    private cdr: ChangeDetectorRef,private snack: MatSnackBar,\r\n    private apiService: ApiService) { \r\n      this.validDate.setDate(this.validDate.getDate());\r\n      this.proofOfIdentityFormGroup = this.formBuilder.group({\r\n        corporateId: [''],\r\n        incorporationNumber: ['',[Validators.required,Validators.pattern(\"^[a-zA-Z0-9]{0,35}$\")]],\r\n        dateOfIssue:['',[Validators.required]],\r\n        dateOfExpiry:['',[Validators.required]],\r\n        isAnotherIdProofRequired:['NO'],\r\n        \r\n        idProofList:this.formBuilder.array([])\r\n      })\r\n      // this.corporateService.stepReady(this.proofOfIdentityFormGroup, 'four')\r\n    }\r\n  ngOnInit(): void {\r\n    this.corporateService.corporateAccountIdVal\r\n    .subscribe(corporateId => {\r\n      console.log('corporateId :: ', this.corporateId = corporateId);\r\n      this.proofOfIdentityFormGroup.get('corporateId').setValue(corporateId)\r\n      if(this.corporateId){\r\n        this.getCoropratedetails(this.corporateId);\r\n      }\r\n    });\r\n    this.getIdType();\r\n    // this.addDocument();\r\n  }\r\n  addIdProof() {\r\n    return this.formBuilder.group({\r\n      idType: ['',[Validators.required]],\r\n      idNumber: ['',[Validators.required]]\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(){\r\n    if(this.ls.getItem('corporateId')){      \r\n      this.getCoropratedetails(this.ls.getItem('corporateId'));\r\n    }\r\n   }\r\n\r\n  radioSelection(event) {\r\n    console.log('event :: ', event);\r\n    const controls=this.proofOfIdentityFormGroup.get('idProofList') as FormArray;\r\n    if (event === 'NO') {\r\n      controls.clear();\r\n      this.cdr.detectChanges();\r\n      this.cdr.markForCheck();\r\n    } else {\r\n      controls.push(this.addIdProof());\r\n      controls.controls[0].get('idType').setValidators(Validators.required);\r\n      controls.controls[0].get('idNumber').setValidators(Validators.required);\r\n      controls.updateValueAndValidity();\r\n      this.cdr.detectChanges();\r\n      this.cdr.markForCheck();\r\n    }\r\n  }\r\n  getIdType(){\r\n    this.apiService.getDropDownValues(\"document_name\").subscribe((re) => {\r\n      this.idTypeList = re;\r\n    });\r\n  }\r\n\r\n  changeValue2(value: any, index) {\r\n    const controls=this.proofOfIdentityFormGroup.get('idProofList') as FormArray;\r\n    if(value==\"Pan card\"){\r\n      controls.controls[index].get('idNumber').setValidators([Validators.pattern(\"(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+){6,6}$\"),Validators.required]) ;\r\n      controls.updateValueAndValidity();\r\n\r\n    }else{\r\n      controls.controls[index].get('idNumber').setValidators([Validators.required]);\r\n      controls.updateValueAndValidity();\r\n    }\r\n    if (this.selectedDocumentTypes[index]) {\r\n      this.selectedOptions = this.selectedOptions.filter(val => val !== this.selectedDocumentTypes[index])\r\n    }\r\n    this.selectedDocumentTypes[index] = value;\r\n    this.selectedOptions.push(value);\r\n  }\r\n  \r\n  isDocumentOptionDisabled = (value) => {\r\n    return this.selectedOptions.includes(value);\r\n  }\r\n\r\n  onSubmit(directorFormGroup){\r\n    console.log(\"directorFormGroup BEFORE:: \",directorFormGroup);\r\n    let obj={}\r\n    Object.keys(directorFormGroup).map(function(key, index) {\r\n        if(key === 'dateOfIssue' || key === 'dateOfExpiry'){\r\n          directorFormGroup[key]=moment(directorFormGroup[key]).format('YYYY-MM-DD');\r\n          obj[key]=directorFormGroup[key]\r\n      }else{\r\n        if(key != 'isAnotherIdProofRequired' && key != 'idProofList'){\r\n          obj[key]=directorFormGroup[key]\r\n        }\r\n      }\r\n    });\r\n    console.log(\"directorFormGroup after:: \",obj);\r\n    this.corporateService.saveOrUpdateCorporateAccountInfo(obj)\r\n    .subscribe(data=>{\r\n      console.log('data :: ', data);\r\n      if(data != null){\r\n        this.snack.open(`Proof of identity saved`+ ' !', 'OK', {\r\n          duration: 4000,\r\n          verticalPosition: 'top',\r\n          horizontalPosition: 'right'\r\n        });\r\n        this.next();\r\n        this.cdr.markForCheck();\r\n      } else {\r\n        this.snack.open('Not able to connect to server!', 'INTERNAL SERVER ERROR', {\r\n          duration: 4000,\r\n          verticalPosition: 'top',\r\n          horizontalPosition: 'right'\r\n        });\r\n      }\r\n    }, error => {\r\n        console.log('error resp :: ',error);\r\n        this.snack.open(`${error.error.message} `, 'OK', {\r\n          duration: 4000,\r\n          verticalPosition: 'top',\r\n          horizontalPosition: 'right'\r\n        });\r\n    });\r\n  }\r\n\r\n  getCoropratedetails(e){\r\n    this.apiService.getCoropratedetails(e).subscribe((details => {\r\n      console.log(details);\r\n      if(details){\r\n        this.proofOfIdentityFormGroup.patchValue(details);\r\n      }\r\n    }))\r\n    }\r\n\r\n  previous() {\r\n    this.corporateService.sendDisableMatTab({\r\n      index: 2,\r\n    });\r\n  }\r\n\r\n  next() {\r\n    this.corporateService.sendDisableMatTab({\r\n      index: 4,\r\n    });\r\n    this.corporateService.setFinishFlag({\r\n      finishFlag: false,\r\n    });\r\n  }\r\n  \r\n  deleteDocument(item, i) {\r\n    console.log('delete record :: ', item, ' index :: ', i);\r\n    this.getDocumentList.removeAt(i);\r\n  }\r\n\r\n  get getDocumentList() {\r\n    return this.proofOfIdentityFormGroup.get('idProofList') as FormArray;\r\n  }\r\n\r\n  addDocument() {\r\n    this.getDocumentList.push(this.formBuilder.group({\r\n      idType: ['',[Validators.required]],\r\n      idNumber: ['',[Validators.required]],\r\n    }));\r\n  }\r\n}\r\n","<form [formGroup]=\"proofOfIdentityFormGroup\" ngNativeValidate>\r\n\r\n\r\n    <div class=\"full-width\">\r\n        <div style=\"padding: 1rem 0;background-color:#F1F1F4\">\r\n            <div style=\"padding: 0 4.3rem\">\r\n                <mat-card style=\"border-radius: 0px;\">\r\n                    <div fxLayout=\"column\" class=\"full-width\" fxLayoutAlign=\"space-around start\">\r\n                        <div class=\"full-width\" style=\"padding: 1rem 1rem;\">\r\n                            <h2 style=\"font-size: 18px; margin-left: 10px;\">Proof Of Identity</h2>\r\n                            <mat-divider style=\"width:70px;border-bottom: 7px solid #456EFE;left: 40px; border-radius: 30px;\">\r\n                            </mat-divider>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <fieldset style=\"border-top: 1px solid lightgray;margin-left: 20px; margin-right: 20px;\">\r\n                        <legend visible=\"true\">Certificate of Incorporation Details</legend>\r\n                    </fieldset>\r\n\r\n\r\n                    <div fxLayout=\"row wrap\" class=\"top\">\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"30px\">\r\n                            <div fxFlex=\"30\" class=\"form-group\" style=\"padding-left: 22px;\">\r\n                                <!-- <label for=\"forincorporationNumber\" class=\"hint\">Incorporation Number* </label> -->\r\n                                <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                    <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                        <mat-label>Incorporation Number</mat-label>\r\n                                    <input matInput formControlName=\"incorporationNumber\" id=\"forincorporationNumber\"\r\n                                    maxLength=\"35\" minLength=\"0\" onlyNumber required>\r\n                                    <!-- <mat-placeholder class=\"placeholder\">Incorporation Number </mat-placeholder> -->\r\n                                </mat-form-field>\r\n                                <mat-error\r\n                                    *ngIf=\"proofOfIdentityFormGroup.get('incorporationNumber').touched && proofOfIdentityFormGroup.get('incorporationNumber').hasError('required')\">\r\n                                    <small>Incorporation Number is Required!</small>\r\n                                </mat-error>\r\n                                <mat-error *ngIf=\"proofOfIdentityFormGroup.get('incorporationNumber').hasError('pattern')\">\r\n                                    <small>Please Enter Valid Incorporation Number!</small>                                 \r\n                                 </mat-error>\r\n                            </div>\r\n\r\n                            <div fxFlex=\"30\" class=\"form-group\">\r\n                                <!-- <label for=\"forIddateOfIssue\" class=\"hint\">Date of Issue* </label> -->\r\n                                <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                    <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                        <mat-label>Date of Issue</mat-label>\r\n                                    <input matInput id=\"forIddateOfIssue\" [matDatepicker]=\"dateOfIssue\" [max]=\"maxDate\"\r\n                                        readonly formControlName=\"dateOfIssue\" required>\r\n                                    <!-- <mat-placeholder class=\"placeholder\">Date of Issue </mat-placeholder> -->\r\n                                    <mat-datepicker-toggle matSuffix [for]=\"dateOfIssue\"></mat-datepicker-toggle>\r\n                                    <mat-datepicker #dateOfIssue></mat-datepicker>\r\n                                </mat-form-field>\r\n                                <mat-error\r\n                                    *ngIf=\"proofOfIdentityFormGroup.get('dateOfIssue').touched && !proofOfIdentityFormGroup.get('dateOfIssue').valid\">\r\n                                    <small>Please Select Date of Issue</small>\r\n                                </mat-error>\r\n                            </div>\r\n\r\n                            <div fxFlex=\"30\" class=\"form-group\">\r\n                                <!-- <label for=\"forIddateOfExpiry\" class=\"hint\">Date of Expiry*</label> -->\r\n                                <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                    <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                        <mat-label>Date of Expiry</mat-label>\r\n                                    <input matInput id=\"forIddateOfExpiry\" [matDatepicker]=\"dateOfExpiry\" [min]=\"validDate\"\r\n                                       readonly formControlName=\"dateOfExpiry\" required>\r\n                                    <!-- <mat-placeholder class=\"placeholder\">Date of Expiry </mat-placeholder> -->\r\n\r\n                                    <mat-datepicker-toggle matSuffix [for]=\"dateOfExpiry\"></mat-datepicker-toggle>\r\n                                    <mat-datepicker #dateOfExpiry></mat-datepicker>\r\n                                </mat-form-field>\r\n                                <mat-error\r\n                                    *ngIf=\"proofOfIdentityFormGroup.get('dateOfExpiry').touched && !proofOfIdentityFormGroup.get('dateOfExpiry').valid\">\r\n                                    <small>Please Select Date of Expiry</small>\r\n                                </mat-error>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n                            <!-- <div fxFlex=\"2\"></div> -->\r\n                            <div fxFlex=\"28\">\r\n                                <mat-label style=\"padding-left: 10px;\"> Do you want add another proof of ID? </mat-label>\r\n                            </div>\r\n                            <div fxFlex=\"50\">\r\n\r\n                                <mat-radio-group formControlName=\"isAnotherIdProofRequired\"\r\n                                    *ngFor=\"let x of ['YES','NO']; let i = index\">\r\n                                    <mat-radio-button [value]=\"x\" (change)=\"radioSelection($event.value)\"\r\n                                        [checked]=\"x == proofOfIdentityFormGroup.value.isAnotherIdProofRequired\">{{x}}\r\n                                    </mat-radio-button>&nbsp;\r\n                                </mat-radio-group>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div formArrayName=\"idProofList\" *ngIf=\"proofOfIdentityFormGroup.get('isAnotherIdProofRequired').value == 'YES' \">\r\n                        <div *ngFor=\"let item of proofOfIdentityFormGroup.get('idProofList')['controls']; let i = index;\"\r\n                            [formGroupName]=\"i\">\r\n                            <fieldset  style=\"border-top: 1px solid lightgray;margin-left: 20px; margin-right: 20px;\">\r\n                                <div fxLayout=\"row wrap\" class=\"top\">\r\n                                    <div fxFlex=\"100\" fxLayoutGap=\"30px\">\r\n                                        <div fxFlex=\"30\" class=\"form-group\">\r\n                                            <!-- <label for=\"forIdType\" class=\"hint\">Id Type </label> -->\r\n                                            <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                                <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                                    <mat-label>Id Type</mat-label>\r\n                                                <mat-select formControlName=\"idType\" id=\"forIdType\"\r\n                                                (valueChange)=\"changeValue2($event, i)\">\r\n                                                    <!-- <mat-option disabled>select---</mat-option> -->\r\n                                                    <mat-option *ngFor=\"let idType of idTypeList\" \r\n                                                    [disabled] = isDocumentOptionDisabled(idType)\r\n                                                    [value]=\"idType\">\r\n                                                        {{idType}}\r\n                                                    </mat-option>\r\n                                                </mat-select>\r\n                                             <!-- <mat-placeholder class=\"placeholder\">Select Id Type* </mat-placeholder> -->\r\n                                            </mat-form-field>\r\n                                            <mat-error\r\n                                                   *ngIf=\"item.get('idType').touched && !item.get('idType').valid\">\r\n                                                  <small>Please Select Id Type</small>\r\n                                             </mat-error>\r\n                                        </div>\r\n\r\n                                        <div fxFlex=\"30\" class=\"form-group\">\r\n                                            <!-- <label for=\"forIdNumber\" class=\"hint\">Id Number </label> -->\r\n                                            <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                                <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                                    <mat-label>Id Number</mat-label>\r\n                                                <input matInput formControlName=\"idNumber\" id=\"forIdNumber\"\r\n                                                maxLength=\"12\" minLength=\"6\" >\r\n                                                <!-- <mat-placeholder class=\"placeholder\">Enter Id Number* </mat-placeholder> -->\r\n                                            </mat-form-field>\r\n                                            <mat-error\r\n                                                   *ngIf=\"!(item.get('idType').value =='Pan card') && item.get('idNumber').touched && !item.get('idNumber').valid\">\r\n                                                  <small>Please Enter Id Number</small>\r\n                                             </mat-error>\r\n                                             <mat-error  *ngIf=\"(item.get('idType').value =='Pan card') && item.get('idNumber').touched && !item.get('idNumber').valid\" ><small> Id Number should be a combination of minimum of 6 alphanumeric characters</small></mat-error>\r\n                                        </div>\r\n                                        \r\n                                        \r\n                                        <button mat-button (click)=\"deleteDocument(item,i)\">\r\n                                            <mat-icon style=\"color: tomato;\">delete_outline</mat-icon>\r\n                                        </button>\r\n\r\n                                    </div>\r\n\r\n                                \r\n                                </div>\r\n\r\n                            </fieldset>\r\n                        </div>\r\n                        <button [disabled]=\"selectedOptions.length == 3\" mat-button (click)=\"addDocument($event)\" color=\"primary\">\r\n                            <mat-icon>add</mat-icon> ADD\r\n                        </button>\r\n                    </div>\r\n\r\n                </mat-card>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"button\">\r\n        <button mat-button class=\"Back\" \r\n        (click)=\" previous()\">Back</button>\r\n        <button mat-stroked-button class=\"Next\" [disabled]=\"proofOfIdentityFormGroup.invalid\" (click)=\"onSubmit(proofOfIdentityFormGroup.value)\"\r\n            >Next</button>\r\n    </div>\r\n\r\n</form>\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { LocalStoreService } from 'app/shared/services/local-store.service';\r\nimport { ContactInformationComponent } from '../contact-information/contact-information.component';\r\nimport { CorporateOnboardingService } from '../corporate-onboarding.service';\r\nimport { DirectorDetailsComponent } from '../director-details/director-details.component';\r\nimport { OnboradingPrimaryComponent } from '../onborading-primary/onborading-primary.component';\r\nimport { OtherInfoCorporateComponent } from '../other-info-corporate/other-info-corporate.component';\r\nimport { ProofOfIdentityComponent } from '../proof-of-identity/proof-of-identity.component';\r\n\r\n@Component({\r\n  selector: 'app-onboarding-corporate-main',\r\n  templateUrl: './onboarding-corporate-main.component.html',\r\n  styleUrls: ['./onboarding-corporate-main.component.scss']\r\n})\r\nexport class OnboardingCorporateMainComponent implements OnInit {\r\n  tabIndex: Number=0;\r\n  tab1: boolean;\r\n  tab2: boolean;\r\n  tab3: boolean;\r\n  tab4: boolean;\r\n  tab5: boolean;\r\n  finishFlag: boolean=true;\r\n\r\n\r\n\r\n  constructor(\r\n    public formService: CorporateOnboardingService,\r\n    private ls: LocalStoreService,\r\n  ) {\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.formService.disableMatTabVal\r\n    .subscribe(data=>{\r\n      console.log(\"disabled :: \", data);\r\n    })\r\n    this.formService.getDisableMatTab().subscribe(resp => {\r\n      console.log(\"index\",resp.index)\r\n      this.tabIndex = resp.index;\r\n      if(this.ls.getItem('corporateTabIndex')){\r\n        this.tabIndex = this.ls.getItem('corporateTabIndex');\r\n      }else{\r\n        this.tabIndex=0;\r\n      }\r\n      this.formService.getFinishFlag().subscribe(resp=>{\r\n        console.log(\"finish flag\",resp.finishFlag);\r\n        this.assignValueFinish(resp.finishFlag)\r\n      })\r\n      if (resp.index === 0) {\r\n        this.assignValuesForTab2(this.tabIndex);\r\n      }\r\n      if (resp.index === 1) {\r\n        this.assignValuesForTab2(this.tabIndex);\r\n      }\r\n      if (resp.index === 2) {\r\n        this.assignValuesForTab3(this.tabIndex);\r\n      }\r\n      if (resp.index === 3) {\r\n        this.assignValuesForTab4(this.tabIndex);\r\n      }\r\n      if (resp.index === 4) {\r\n        this.assignValuesForTab5(this.tabIndex);\r\n      }\r\n      // TODO WITH MATTAB DISABLE CUSTOM LATER\r\n      // this.tabGroup._tabs[resp.index].disabled = true;\r\n    \r\n    })\r\n  }\r\n\r\n  assignValueFinish(finishFlag) {\r\n    this.finishFlag=finishFlag;\r\n  }\r\n\r\n  assignValuesForTab1(tabIndex) {\r\n    this.tab1 = false;\r\n  }\r\n\r\n  assignValuesForTab2(tabIndex) {\r\n    this.tab2 = false;\r\n  }\r\n\r\n  assignValuesForTab3(tabIndex) {\r\n    this.tab3 = false;\r\n  }\r\n\r\n  assignValuesForTab4(tabIndex) {\r\n    this.tab4 = false;\r\n  }\r\n\r\n  assignValuesForTab5(tabIndex) {\r\n    this.tab5 = false;\r\n  }\r\n\r\n}\r\n","<div class=\"head\">\r\n\t<h4 class=\"main-head\" style=\"color: #BFBFC1;\">Home>New Customer Onboarding | Corporate</h4>\r\n\t<h1 class=\"main-head\" style=\"padding-top: 0px;\">New Customer Onboarding | Corporate</h1>\r\n\t<div class=\"basic-container\">\r\n\t<mat-tab-group mat-align-tabs=\"start\" style=\"padding-left: 1px;\"  [(selectedIndex)]=\"tabIndex\" #tabGroup>\r\n\r\n\t\t<mat-tab [disabled]='!tab1 || finishFlag' label=\"Primary Information\">\r\n\t\t\t\t<app-onborading-primary *ngIf=\"tabIndex == 0\"></app-onborading-primary>\r\n\t\t\t</mat-tab>\r\n\t\t<mat-tab [disabled]='!tab2 || finishFlag' label=\"Director Details\">\r\n\t\t\t\t<app-director-details *ngIf=\"tabIndex == 1\"></app-director-details>\r\n\t\t\t</mat-tab>\r\n\t\t<mat-tab [disabled]='!tab3 || finishFlag' label=\"Contact Information\">\r\n\t\t\t\t<app-contact-information *ngIf=\"tabIndex == 2\"></app-contact-information>\r\n\t\t\t</mat-tab>\r\n\t\t<mat-tab [disabled]='!tab4 || finishFlag' label=\"Proof Of Identity\">\r\n\t\t\t\t<app-proof-of-identity *ngIf=\"tabIndex == 3\"></app-proof-of-identity>\r\n\t\t\t</mat-tab>\r\n\t\t<mat-tab [disabled]='!tab5 || finishFlag' label=\"Other Information\">\r\n\t\t\t\t<app-other-info-corporate *ngIf=\"tabIndex == 4\"></app-other-info-corporate>\r\n\t\t\t</mat-tab>\r\n\t\t</mat-tab-group>\r\n\t</div>\r\n</div>","import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { API_URL } from 'app/shared/services/finger-print-capture.service';\r\nimport { LocalStoreService } from 'app/shared/services/local-store.service';\r\nimport { ShowMessageService } from 'app/shared/services/showMessage/show-message.service';\r\nimport { Subject, Observable, BehaviorSubject, throwError } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CorporateOnboardingService {\r\n\r\n  // private stepOneSource: Subject<FormGroup> = new Subject();\r\n  // stepOne: Observable<FormGroup> = this.stepOneSource.asObservable();\r\n\r\n  // private stepTwoSource: Subject<FormGroup> = new Subject();\r\n  // stepTwo: Observable<FormGroup> = this.stepTwoSource.asObservable();\r\n\r\n  // private stepThreeSource: Subject<FormGroup> = new Subject();\r\n  // stepThree: Observable<FormGroup> = this.stepThreeSource.asObservable();\r\n\r\n  // private stepFourSource: Subject<FormGroup> = new Subject();\r\n  // stepFour: Observable<FormGroup> = this.stepFourSource.asObservable();\r\n\r\n  // private stepFiveSource: Subject<FormGroup> = new Subject();\r\n  // stepFive: Observable<FormGroup> = this.stepFiveSource.asObservable();\r\n\r\n  // mainForm: FormGroup = this._formBuilder.group({\r\n  //   \"companyName\": [''],\r\n  //   \"category\": [''],\r\n  //   \"country\": [''],\r\n  //   \"noOfDirector\": [''],\r\n  //   \"addressLine1\":['']\r\n  // })\r\n\r\n  constructor(\r\n    private _formBuilder: FormBuilder,\r\n    private http: HttpClient, private showMessageService: ShowMessageService,\r\n    private ls: LocalStoreService\r\n  ) {}\r\n  //   this.stepOne.subscribe(form =>\r\n  //     form.valueChanges.subscribe(val => {\r\n  //       this.mainForm.value.companyName = val.companyName\r\n  //       this.mainForm.value.category = val.category\r\n  //       this.mainForm.value.country = val.country\r\n  //     })\r\n  //   )\r\n  //   this.stepTwo.subscribe(form =>\r\n  //     form.valueChanges.subscribe(val => {\r\n  //       // console.log(val)\r\n  //       this.mainForm.value.noOfDirector = val.noOfDirector\r\n  //     })\r\n  //   )\r\n\r\n  //   this.stepThree.subscribe(form =>\r\n  //     form.valueChanges.subscribe(val => {\r\n  //       console.log(val)\r\n  //       this.mainForm.value.addressLine1 = val.addressLine1\r\n  //     })\r\n  //   )\r\n  // }\r\n\r\n  // stepReady(form: FormGroup, part) {\r\n  //   switch (part) {\r\n  //     case 'one': { this.stepOneSource.next(form) }\r\n  //     case 'two': { this.stepTwoSource.next(form) }\r\n  //     case 'three': { this.stepThreeSource.next(form) }\r\n  //     case 'four': { this.stepFourSource.next(form) }\r\n  //     case 'five': { this.stepFiveSource.next(form) }\r\n  //   }\r\n  // }\r\n\r\n \r\n\r\n  // private errorHandler = (errorResp: HttpErrorResponse) => {\r\n  //   console.error('Error : ' + errorResp.message);\r\n  //   console.error('status : ' + errorResp.status);\r\n  //   this.showMessageService.errorMessage(errorResp.status, errorResp);\r\n  //   return throwError(errorResp);\r\n  // }\r\n\r\n\r\n  private corporateAccountIdRef = new BehaviorSubject(null);\r\n  corporateAccountIdVal = this.corporateAccountIdRef.asObservable();\r\n\r\n  sendCorporateAccountId(message: any) {\r\n    this.corporateAccountIdRef.next(message);\r\n  }\r\n  getCorporateAccountId(): Observable<any> {\r\n    return this.corporateAccountIdRef.asObservable();\r\n  }\r\n\r\n  private disableMatTab = new BehaviorSubject({\r\n    index: this.ls.getItem('corporateTabIndex')? this.ls.getItem('corporateTabIndex') : ''\r\n  });\r\n  disableMatTabVal = this.disableMatTab.asObservable();\r\n\r\n  sendDisableMatTab(index: any) {\r\n    this.ls.setItem('corporateTabIndex', index.index);\r\n    this.disableMatTab.next(index);\r\n  }\r\n  getDisableMatTab(): Observable<any> {\r\n    return this.disableMatTab.asObservable();\r\n  }\r\n\r\n  private finishFlag = new BehaviorSubject<any>({\r\n    finishFlag: true\r\n  })\r\n  getFinishFlag() {\r\n    return this.finishFlag.asObservable();\r\n  }\r\n  setFinishFlag(finishFlag) {\r\n    this.finishFlag.next(finishFlag);\r\n  }\r\n\r\n  private finishSave = new BehaviorSubject<any>([]);\r\n  getfinishSave() {\r\n    return this.finishSave.asObservable();\r\n  }\r\n  setfinishSave(finishSave) {\r\n    this.finishSave.next(finishSave);\r\n  }\r\n\r\n  private noOfDirectors = new BehaviorSubject<any>([]);\r\n  getnoOfDirectors() {\r\n    return this.noOfDirectors.asObservable();\r\n  }\r\n  setnoOfDirectors(noOfDirectors) {\r\n    this.noOfDirectors.next(noOfDirectors);\r\n  }\r\n\r\n  saveOrUpdateCorporateAccountInfo(data: any) {\r\n    return this.http.post<any>(`${API_URL}/corporateCustomer/upsertDetails`, data);\r\n  }\r\n}\r\n","import { FormArray, FormBuilder, FormGroup, Validators, FormGroupDirective } from '@angular/forms';\r\nimport { ApiService } from './../../../../shared/services/api.service';\r\nimport { ChangeDetectorRef, Component, ElementRef, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { CorporateOnboardingService } from '../corporate-onboarding.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ApplicationEntryStageService } from 'app/shared/services/application-entry-stage.service';\r\nimport { MatAutocomplete, MatAutocompleteTrigger } from '@angular/material/autocomplete';\r\nimport { fromEvent } from 'rxjs';\r\nimport { debounceTime, pluck, distinctUntilChanged, filter } from 'rxjs/operators';\r\nimport { LocalStoreService } from 'app/shared/services/local-store.service';\r\nimport { AnySrvRecord } from 'dns';\r\nimport { DatePipe } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-create-director',\r\n  templateUrl: './create-director.component.html',\r\n  styleUrls: ['./create-director.component.scss'],\r\n  providers: [DatePipe]\r\n})\r\nexport class CreateDirectorComponent implements OnInit {\r\n  @ViewChild(MatAutocompleteTrigger) autocomplete: MatAutocompleteTrigger;\r\n  @ViewChild('input') inputElement: ElementRef;\r\n\r\n  fieldArray: Array<any> = [];\r\n  private newAttribute: any = {};\r\n  arrData = [];\r\n  directorCount = 1;\r\n  showHide: boolean;\r\n  showcard: any[];\r\n  deletecount: number;\r\n  showonlydirectorDetails: boolean;\r\n  NameOfDirector: string\r\n  @Input() item: any;\r\n  prefixList: any[];\r\n  genderList: string[];\r\n  residenceList: string[];\r\n  maxDate = new Date();\r\n  minDate = new Date();\r\n  cifNumberForPayload: any;\r\n  customerIdForPayload: any;\r\n\r\n  idTypeList: string[];\r\n  panelOpenState = false;\r\n  createDirectorFormGroup: FormGroup;\r\n  corporateId: any;\r\n  customerId:any;\r\n  arrayState: string[] = [] ;\r\n  arrayCountry: string[] = [];\r\n  arrayCity: string[] = [];\r\n  arrayResidence: string[];\r\n  profileImage: any = \"not_available\";\r\n  initials: any;\r\n  addressTypeList: string[];\r\n  noOfDir: any;\r\n  saveStatus: any[] = [];\r\n  showAutocomplete: boolean;\r\n  customerInfoList: any[] = [];\r\n  existingCustomer: boolean;\r\n  isEdit: boolean = false;\r\n  isDirectorSaved:boolean=false;\r\n  Currency: any;\r\n  currencyCode: any;\r\n  country: void;\r\n  // zipcode: any;\r\n  cifNumber: any;\r\n  isChecked = true;\r\n  disabled = true;\r\n  disabledToggle = true;\r\n  isAllSameDigitVal: boolean = false;\r\n  prefixFlag: boolean=false;\r\n  timer: any;\r\n  corporateExistingCustomer:boolean=false;\r\n  totalDir: any;\r\n  isAllNumberZeroFlag: boolean = false;\r\n  constructor(private router: Router,\r\n    private formBuilder: FormBuilder,\r\n    private appApiService: ApplicationEntryStageService,\r\n    private corporateService: CorporateOnboardingService,\r\n    private cdr: ChangeDetectorRef, private snack: MatSnackBar,\r\n    private apiService: ApiService,\r\n    private ls: LocalStoreService,\r\n    public datepipe: DatePipe) {\r\n    this.createDirectorFormGroup = this.formBuilder.group({\r\n      \"customerId\": this.customerId,\r\n      citizenship: [''],\r\n      cifNumber: [''],\r\n      corporateId: [''],\r\n      countryOfResidence: [''],\r\n      dateOfBirth: [''],\r\n      existingCustomer: [''],\r\n      firstName: [''],\r\n      gender: [''],\r\n      landlineNumber: ['', [Validators.minLength(10), Validators.maxLength(10)]],\r\n      lastName: [''],\r\n      middleName: [''],\r\n      phoneNumber: ['', [Validators.minLength(10), Validators.maxLength(10)]],\r\n      placeOfBirth: [''],\r\n      prefix: [''],\r\n      primaryCustomer: [false],\r\n      primaryEmailAdress: [''],\r\n      residenceStatus: [''],\r\n      \"verificationType\":\"onboarding\",\r\n      idNumber: [''],\r\n      idType: [''],\r\n      expiryDate: [''],\r\n      userAddress: formBuilder.array([]),\r\n     // custIdProofs: formBuilder.array([]),\r\n      custTaxInfo: formBuilder.array([])\r\n    })\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    console.log(\"testtt\");\r\n    this.toggleChanges(false, null)\r\n    this.totalDir= this.ls.getItem('totalCust');\r\n    console.log(\"totalDir\",this.totalDir);\r\n    \r\n    this.corporateService.corporateAccountIdVal\r\n      .subscribe(corporateId => {\r\n        this.corporateId = corporateId;\r\n        console.log('corporateId :: ', this.corporateId);\r\n        this.createDirectorFormGroup.get('corporateId').setValue(corporateId)\r\n        if(this.corporateId){\r\n          this.getCoropratedetails(this.corporateId);\r\n        }\r\n        else{\r\n          if(this.ls.getItem('corporateId')){\r\n            this.getCoropratedetails(this.ls.getItem('corporateId'));\r\n          }\r\n        }\r\n      });\r\n    this.corporateService.getnoOfDirectors().subscribe(noOfDir => {\r\n      this.noOfDir = noOfDir;\r\n      console.log('noOfDir:: ', noOfDir);\r\n      if (this.noOfDir && this.item > 1) {\r\n        this.disabled = false;\r\n        this.isChecked = false;\r\n        this.disabledToggle = false;\r\n      }\r\n    })\r\n    \r\n    this.prefixFlag=true;\r\n    this.getDoc();\r\n    this.addAddress();\r\n   // this.addIdProof();\r\n    this.addCustTaxInfo();\r\n    this.getCountryName(\"country\");\r\n    this.getStateName(\"state\");\r\n    this.getCityName(\"city\");\r\n    this.getResidenceDetails('residence');\r\n    this.createDirectorFormGroup.valueChanges\r\n      .subscribe(data => {\r\n        if (data.firstName != '') {\r\n          this.profileImage = \"available\";\r\n          this.createInititals(data.firstName);\r\n        }\r\n\r\n        if (data.lastName != '') {\r\n          // console.log('data if lastName:: ', data);\r\n          this.profileImage = \"available\";\r\n          this.createInititals(data.lastName);\r\n        }\r\n      })\r\n  }\r\n  get getAddressData() {\r\n    return this.createDirectorFormGroup.get('userAddress') as FormArray;\r\n  }\r\n\r\n  addAddress() {\r\n    this.getAddressData.push(this.formBuilder.group({\r\n      addressType: [''],\r\n      address1: [[''],[Validators.pattern(\".*[a-zA-Z].*\")]],\r\n      address2: [[''],[Validators.pattern(\".*[a-zA-Z].*\")]],\r\n      city: [''],\r\n      state: [''],\r\n      country: [''],\r\n      zipCode: ['',[Validators.required, Validators.pattern(\"^((\\\\+91-?)|0)?[0-9]{5,10}$\")]]\r\n    }));\r\n  }\r\n\r\n  get getIdProofData() {\r\n    return this.createDirectorFormGroup.get('custIdProofs') as FormArray;\r\n  }\r\n\r\n  addIdProof() {\r\n    this.getIdProofData.push(this.formBuilder.group({\r\n      idNumber: [''],\r\n      idType: [''],\r\n      expiryDate: ['']\r\n    }));\r\n  }\r\n\r\n  get getCustTaxInfo() {\r\n    return this.createDirectorFormGroup.get('custTaxInfo') as FormArray;\r\n  }\r\n\r\n  addCustTaxInfo() {\r\n    this.getCustTaxInfo.push(this.formBuilder.group({\r\n      taxId:['', [Validators.required, Validators.pattern(\"^[0-9]*$\")]],\r\n      countryOfIssue: ['']\r\n    }));\r\n  }\r\n  // getCountryName(key: string) {\r\n  //   console.log('country in contact info :: ', key);\r\n  //   this.apiService.getDropDownValues(key).subscribe((data) => {\r\n  //     this.arrayCountry = data;\r\n  //     console.log(\"country in contact info -->\", this.arrayCountry)\r\n  //   });\r\n  // }\r\n  getCountryName(key: string) {\r\n    console.log(\"ghg\")\r\n    this.apiService.getAllCountries().subscribe((data: any) => {\r\n     for(let i=0; i<data.length;i++){\r\n       if(data[i].authStatus==='A'){     \r\n         this.arrayCountry.push(data[i].countryName);\r\n       }\r\n     }\r\n   });\r\n }\r\n  onSelectionResidance(data: any) {\r\n    console.log(data);\r\n\r\n    this.apiService.countryFlaglists(data).subscribe((value) => {\r\n      console.log(value.currencyCode);\r\n      this.Currency = value.currencyCode.toLowerCase();\r\n      console.log(this.Currency);\r\n    })\r\n\r\n  }\r\n\r\n  onSelectionCitizionship(data: any) {\r\n    console.log(data);\r\n    this.apiService.countryFlaglists(data).subscribe((value) => {\r\n      console.log(value.currencyCode);\r\n      this.currencyCode = value.currencyCode.toLowerCase();\r\n      console.log(this.currencyCode);\r\n    })\r\n  }\r\n\r\n  getStateName(country) {\r\n    this.apiService.getAllCountries().subscribe((data: any) => {\r\n      for(let i=0; i<data.length;i++){       \r\n        if(data[i].countryName == country){\r\n          this.apiService.getStateByCountryId(data[i].id).subscribe((resp: any) => {\r\n          this.arrayState = resp\r\n          })\r\n          break;   \r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  getCityName(state: any) {\r\n    // console.log(state)\r\n    this.apiService.getDropDownValues1(\"city\", state).subscribe((data) => {\r\n      this.arrayCity = data;\r\n      // console.log(\"-->\", this.arrayCity)\r\n    });\r\n  }\r\n  getResidenceDetails(key: string) {\r\n    this.apiService.getDropDownValues(key).subscribe((data) => {\r\n      this.arrayResidence = data;\r\n      // console.log('arrayResidence :: ', this.arrayResidence);\r\n    });\r\n  }\r\n  _keyPress(event: any) {\r\n    const pattern = /[0-9]/;\r\n    let inputChar = String.fromCharCode(event.charCode);\r\n    if (!pattern.test(inputChar)) {\r\n      event.preventDefault();\r\n\r\n    }\r\n  }\r\n\r\n  letterOnly(event) {\r\n    var charCode = event.keyCode;\r\n    if ((charCode > 64 && charCode < 91) || (charCode > 96 && charCode < 123) || charCode == 8)\r\n      return true;\r\n    else\r\n      return false;\r\n  }\r\n\r\n\r\n  openClose(status) {\r\n    // console.log('status :: ', status);\r\n    if (status === 'OPEN') {\r\n      this.panelOpenState = true;\r\n    } else {\r\n      this.panelOpenState = false;\r\n    }\r\n  } \r\n\r\n  \r\n  getCoropratedetails(id){\r\n    console.log(id);\r\n    console.log(this.noOfDir);\r\n    console.log(this.item);\r\n    \r\n    // if(this.noOfDir)\r\n    this.apiService.getCoropratedetails(id).subscribe((details => {\r\n      console.log(details);\r\n      \r\n      this.createDirectorFormGroup.reset();\r\n      if(this.noOfDir<=this.totalDir){\r\n        for(let i=0;i<details.customerInfo.length;i++){\r\n          this.fetchByCif(details.customerInfo[i].cifNumber);\r\n        if(details){\r\n          console.log(\"jnkhk\");\r\n          \r\n          this.getStateName(details.customerInfo[i].userAddress[0].country);\r\n          this.getCityName(details.customerInfo[i].userAddress[0].state);\r\n          details.customerInfo[i].idNumber=details.customerInfo[i].custIdProofs[0].idNumber;\r\n          details.customerInfo[i].idType=details.customerInfo[i].custIdProofs[0].idType;\r\n          details.customerInfo[i].expiryDate=details.customerInfo[i].custIdProofs[0].expiryDate;\r\n          console.log(details.customerInfo[i],this.createDirectorFormGroup);\r\n          this.createDirectorFormGroup.patchValue(details.customerInfo[i]);\r\n        }\r\n        }\r\n        \r\n       }\r\n     \r\n    }))\r\n    }\r\n\r\n  displayDrop(cif) {\r\n    if (!cif) {\r\n      this.autocomplete.closePanel();\r\n    }\r\n  }\r\n\r\n  toggleChanges(event: any, formDirective: FormGroupDirective) {\r\n    this.corporateExistingCustomer=event;\r\n\r\n    console.log(event)\r\n    if (event === true) {\r\n      this.createDirectorFormGroup.get('cifNumber').enable();\r\n    }\r\n    else if (event === false) {\r\n      this.createDirectorFormGroup.get('cifNumber').disable();\r\n      this.customerId=null;\r\n    }\r\n    // if (this.createDirectorFormGroup.get('existingCustomer').value == true) {\r\n    //   this.existingCustomer=true;\r\n    //   this.createDirectorFormGroup.get('cifNumber').enable();\r\n    //   this.createDirectorFormGroup.get('cifNumber').setValidators([Validators.required]);\r\n    //   this.createDirectorFormGroup.get('cifNumber').updateValueAndValidity();\r\n    // }\r\n    // else {\r\n    //   this.createDirectorFormGroup.get('cifNumber').enable();\r\n    //   formDirective.resetForm(\r\n    //     setTimeout(() => formDirective.resetForm(), 0)\r\n    //   );\r\n    // }\r\n  }\r\n  editDirector(index) {\r\n    console.log('edit index :: ', index);\r\n    this.panelOpenState = !this.panelOpenState;\r\n\r\n  }\r\n\r\n  deleteDirector(index) {\r\n    console.log('delete index :: ', index);\r\n  }\r\n\r\n\r\n  updatedVal(e) {\r\n    if (e && e.length >= 3) {\r\n      this.showAutocomplete = true;\r\n    } else {\r\n      this.showAutocomplete = false;\r\n    }\r\n  }\r\n\r\n\r\n  ngAfterViewInit(resp) {\r\n    console.log(\"inside ngAfterViewInit::\")\r\n    if(this.inputElement){\r\n      fromEvent(this.inputElement.nativeElement, 'keyup')\r\n      .pipe(\r\n        debounceTime(500),\r\n        pluck('target', 'value'),\r\n        distinctUntilChanged(),\r\n        filter((value: string) => value.length > 1),\r\n      )\r\n      .subscribe((value:any) => {\r\n       // this.fetchByCif(value);\r\n      });\r\n    }\r\n    this.fetchByCif(resp);\r\n    \r\n  }\r\n\r\n  selectCif(data) {\r\n    this.getStateName(data.userAddress[0].country);\r\n    this.getCityName(data.userAddress[0].state);\r\n    if(data.citizenship!=null){\r\n      this.onSelectionCitizionship(data.citizenship);\r\n    }\r\n    if(data.countryOfResidence!=null){\r\n      this.onSelectionResidance(data.countryOfResidence);\r\n    }\r\n    this.customerInfoList = data.customerInfoList;\r\n    this.cifNumberForPayload = data.cifNumber;\r\n    this.customerIdForPayload=data.customerId;\r\n    delete data.cifNumber;\r\n    this.autocomplete.closePanel();\r\n    this.createDirectorFormGroup.patchValue(data);\r\n    this.createDirectorFormGroup.get('existingCustomer').setValue(true);\r\n    if(data.custIdProofs[0].expiryDate < this.datepipe.transform(new Date(), 'yyyy-MM-dd')){\r\n      this.snack.open('Kindly Enter future Valid till Date', 'OK', {\r\n        duration: 4000,\r\n        verticalPosition: 'top',\r\n        horizontalPosition: 'right'\r\n      });    }\r\n  }\r\n\r\n  fetchByCif(cifNumber) {\r\n    console.log(cifNumber?.length);\r\n    if (cifNumber?.length == 0) {\r\n      this.autocomplete.closePanel();\r\n    }\r\n    this.createDirectorFormGroup.reset({\r\n      cifNumber: this.createDirectorFormGroup.get('cifNumber').value,\r\n      existingCustomer: this.createDirectorFormGroup.get('existingCustomer').value\r\n    });\r\n    this.showAutocomplete = false;\r\n    // this.autocomplete.closePanel(); \r\n    if (cifNumber) {\r\n      clearTimeout( this.timer)\r\n     this.timer= setTimeout (() => { this.appApiService.fetchByCif(cifNumber).subscribe((res: any) => {\r\n        console.log(\"settimeout\")\r\n        console.log(\"res::\", res);\r\n        var kycValues={\r\n          kycReference:res.customerInfoList[0].kycReference,\r\n          kycStatus: res.customerInfoList[0].custStatus\r\n        }\r\n        this.ls.setItem('KycValues',kycValues);\r\n        // this.autocomplete.openPanel();\r\n        if (res) {\r\n          this.showAutocomplete = true;\r\n          this.customerInfoList = res.customerInfoList;\r\n          // this.customerInfoList[0].userAddress[0].zipcode = res.customerInfoList[0].userAddress[0].zipCode;\r\n        }  if (res?.customerInfoList.length == 1) {\r\n          // this.customerInfoList[0].userAddress[0].zipcode = res.customerInfoList[0].userAddress[0].zipCode;\r\n\r\n        }if(this.customerInfoList[0].citizenship!=null){\r\n          this.onSelectionCitizionship(this.customerInfoList[0].citizenship);\r\n\r\n        }\r\n        if(this.customerInfoList[0].countryOfResidence!=null){\r\n          this.onSelectionResidance(this.customerInfoList[0].countryOfResidence);\r\n        }\r\n        else if (res?.customerInfoList.length > 1) {\r\n          this.customerInfoList = res.customerInfoList;\r\n          // this.customerInfoList[0].userAddress[0].zipcode = res.customerInfoList[0].userAddress[0].zipCode;\r\n\r\n        }\r\n        else if (res?.customerInfoList.length == 0 || !res) {\r\n          this.snack.open('Kindly Enter Valid CifNumber to proceed', 'OK', {\r\n            duration: 4000,\r\n            verticalPosition: 'top',\r\n            horizontalPosition: 'right'\r\n          });\r\n          // this.customerInfoList = [];\r\n          // this.createDirectorFormGroup.get('cifNumber').patchValue('');\r\n        }\r\n      }, (err: any) => {\r\n        console.error(err);\r\n      })}, 1000);\r\n    }\r\n  }\r\n\r\n  addDirector(createDirectorFormGroup, item) {\r\n    this.ls.setItem('CorporateExistingCustomer',this.corporateExistingCustomer);\r\n    createDirectorFormGroup.cifNumber = this.cifNumberForPayload;\r\n    createDirectorFormGroup.customerId=this.customerIdForPayload;\r\n    createDirectorFormGroup.corporateId=this.corporateId;\r\n    //this.createDirectorFormGroup.get('primaryCustomer').setValue(true);\r\n    //createDirectorFormGroup.primaryCustomer=this.primaryCustomer;\r\n    console.log('item :: ', item);\r\n    let coporateObjModel = {\r\n      \"corporateId\": this.corporateId,\r\n      // \"companyName\": null,\r\n      // \"category\": null,\r\n      // \"country\": null,\r\n      // \"state\": null,\r\n      // \"city\": null,\r\n      \"customerInfo\": [\r\n        createDirectorFormGroup\r\n      ]\r\n    }\r\n    if (this.noOfDir > 0) {\r\n      this.saveStatus = [];\r\n      for (let i = 0; i < this.noOfDir; i++) {\r\n        this.saveStatus.push(true);\r\n      }\r\n      // console.log('saveStatus :: ', this.saveStatus);\r\n      this.corporateService.setfinishSave(this.saveStatus);\r\n    }\r\n    this.corporateService.saveOrUpdateCorporateAccountInfo(coporateObjModel)\r\n      .subscribe(data => {\r\n        console.log('data :: ', data);\r\n        if (data != null) {\r\n          console.log(\"chhecking\");\r\n          if(data.customerInfo!=null && data.customerInfo[0].cifNumber!=null){\r\n            \r\n              this.cifNumber = data.customerInfo[0].cifNumber;\r\n          \r\n          }\r\n          this.snack.open(`Director ${this.item} profile created` + ' !', 'OK', {\r\n            duration: 4000,\r\n            verticalPosition: 'top',\r\n            horizontalPosition: 'right'\r\n          });\r\n          this.cdr.markForCheck();\r\n         // if (this.noOfDir >= 1) {\r\n          if (this.noOfDir <= 1) {\r\n            this.next();\r\n          }\r\n        } else {\r\n          this.snack.open('Not able to connect to server!', 'INTERNAL SERVER ERROR', {\r\n            duration: 4000,\r\n            verticalPosition: 'top',\r\n            horizontalPosition: 'right'\r\n          });\r\n        }\r\n      }, error => {\r\n        console.log('error resp :: ', error);\r\n        this.snack.open(`${error.error.message} `, 'OK', {\r\n          duration: 4000,\r\n          verticalPosition: 'top',\r\n          horizontalPosition: 'right'\r\n        });\r\n      });\r\n      this.isDirectorSaved=true;\r\n  }\r\n\r\n  getDoc() {\r\n    this.apiService.getDropDownValues(\"gender\").subscribe((responseDatas) => {\r\n      this.genderList = responseDatas;\r\n    });\r\n    this.apiService.getDropDownValues(\"prefix\").subscribe((re) => {\r\n      this.prefixList = re;\r\n    });\r\n    this.apiService.getDropDownValues(\"document_name\").subscribe((re) => {\r\n      this.idTypeList = re;\r\n    });\r\n    this.apiService.getDropDownValues(\"address_type\").subscribe((re) => {\r\n      this.addressTypeList = re;\r\n    });\r\n  }\r\n  next() {\r\n    this.corporateService.sendDisableMatTab({\r\n      index: 2,\r\n    });\r\n    this.corporateService.setFinishFlag({\r\n      finishFlag: false,\r\n    });\r\n  }\r\n  onChangeGender(event){\r\n    let prefix = this.createDirectorFormGroup.value.prefix;\r\n    if ((prefix == \"Mr\" && event.value == \"Male\") || ((prefix==\"Ms\" || prefix==\"Mrs\") && event.value==\"Female\")) {\r\n      this.prefixFlag=true;\r\n    }  else {\r\n      this.prefixFlag=false;\r\n      this.snack.open(\"Prefix and Gender does not match!\", \"OK\", {\r\n        duration: 4000,\r\n        verticalPosition: \"top\",\r\n        horizontalPosition: \"right\",\r\n      });\r\n    }\r\n  }\r\n\r\n  omit_special_char(event) {\r\n    var k;\r\n    k = event.charCode;  //         k = event.keyCode;  (Both can be used)\r\n    return ((k > 64 && k < 91) || (k > 96 && k < 123) || k == 8 || k == 32 || (k >= 48 && k <= 57));\r\n  }\r\n\r\n  private createInititals(name): void {\r\n    if (name == null || name == undefined) {\r\n      return;\r\n    }\r\n    let names = name.split(' '),\r\n      initials = names[0].substring(0, 1).toUpperCase();\r\n\r\n    if (names.length > 1) {\r\n      initials += names[names.length - 1].substring(0, 1).toUpperCase();\r\n    }\r\n\r\n\r\n    this.initials = initials;\r\n    // console.log(\"name\", name);\r\n    // console.log(\"this.initials\", this.initials);\r\n  }\r\n\r\n  isAllSameDigit(event) {\r\n    let count = 0, number = event.target.value;\r\n    if (number != '') {\r\n      for (var i = 0; i < number.length; i++) {\r\n        if (0 == number[i]) {\r\n          count++;\r\n        }\r\n      }\r\n      if (count == number.length) {\r\n        this.isAllSameDigitVal = true;\r\n      }\r\n      else {\r\n        this.isAllSameDigitVal = false;\r\n      }\r\n    } else {\r\n      this.isAllSameDigitVal = false;\r\n    }\r\n  }\r\n  isAllNumberZero(event) {\r\n    this.cdr.detectChanges();\r\n    let count = 0, number = event.target.value;\r\n    if (number != '') {\r\n      for (var i = 0; i < number.length; i++) {\r\n        if (0 == number[i]) {\r\n          count++;\r\n        }\r\n      }\r\n      console.log('number :: ', number);\r\n      console.log('isAllSameDigitVal :: ', count, number.length)\r\n      if (count == number.length) {\r\n        console.log('if loop')\r\n        this.isAllNumberZeroFlag= true;\r\n      }\r\n      else {\r\n        this.isAllNumberZeroFlag = false;\r\n      }\r\n    } else {\r\n      this.isAllNumberZeroFlag = false;\r\n    }\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"createDirectorFormGroup\" #formDirective=\"ngForm\">\r\n\t<mat-card>\r\n\t\t<mat-expansion-panel class=\"mat-elevation-z0\" (opened)=\"openClose('OPEN')\" (closed)=\"openClose('CLOSE')\"\r\n\t\t\t[expanded]=\"panelOpenState || noOfDir == 1\">\r\n\t\t\t<mat-expansion-panel-header>\r\n\t\t\t\t<mat-panel-title *ngIf=\"panelOpenState==true\">\r\n\t\t\t\t\tCreate Director {{item}}\r\n\t\t\t\t</mat-panel-title>\r\n\t\t\t\t<mat-panel-title *ngIf=\"panelOpenState==false\">\r\n\t\t\t\t\t<mat-icon style=\"color: #24CCA7;\">check_circle</mat-icon> &nbsp; Director &nbsp; {{item}}.\r\n\t\t\t\t</mat-panel-title>\r\n\t\t\t</mat-expansion-panel-header>\r\n\t\t\t<fieldset style=\"border: 1px solid #456EFE;\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div fxLayout=\"row wrap\" style=\"margin-top: 20px;margin-left: 20px;\">\r\n\t\t\t\t\t\t<div fxFlex=\"100\">\r\n\t\t\t\t\t\t\t<div fxFlex=\"30\">\r\n\t\t\t\t\t\t\t\t<span><b>Is the applicant an existing customer?</b></span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t\t<mat-slide-toggle (change)=\"toggleChanges($event.checked,formDirective)\"\r\n\t\t\t\t\t\t\t\t\tformControlName=\"existingCustomer\">\r\n\t\t\t\t\t\t\t\t</mat-slide-toggle>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\"></div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"30\">\r\n\t\t\t\t\t\t\t\t<span><b>Is the applicant an primary customer?</b></span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\r\n\t\t\t\t\t\t\t\t<mat-slide-toggle formControlName=\"primaryCustomer\"\r\n\t\t\t\t\t\t\t\t\t[disabled]=\"disabledToggle\">\r\n\t\t\t\t\t\t\t\t</mat-slide-toggle>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div fxLayout=\"row wrap\">\r\n\t\t\t\t\t\t<div fxFlex=\"100\" style=\"margin-left: 13px\">\r\n\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<!-- <label for=\"forCifNumber\" class=\"hint\">CIF Number* </label> -->\r\n\t\t\t\t\t\t\t\t<mat-form-field *ngIf=\"createDirectorFormGroup.get('existingCustomer').value != true\"\r\n\t\t\t\t\t\t\t\tappearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t<mat-label>CIF Number*</mat-label>\r\n\t\t\t\t\t\t\t\t\t<input matInput formControlName=\"cifNumber\" (keypress)=\"_keyPress($event)\"\r\n\t\t\t\t\t\t\t\t\t\tid=\"forCifNumber\">\r\n\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">CIF Number </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t<mat-form-field *ngIf=\"createDirectorFormGroup.get('existingCustomer').value == true\"\r\n\t\t\t\t\t\t\t\tappearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t<mat-label>CIF Number</mat-label>\r\n\t\t\t\t\t\t\t\t\t<input matInput #input formControlName=\"cifNumber\" id=\"forCifNumber\"\r\n\t\t\t\t\t\t\t\t\t\t(keyup)=\"ngAfterViewInit($event.target.value)\" [matAutocomplete]=\"auto\"\r\n\t\t\t\t\t\t\t\t\t\t(ngModelChange)=\"updatedVal($event)\" required>\r\n\t\t\t\t\t\t\t\t\t<mat-autocomplete style=\"background-color: black;\" #auto=\"matAutocomplete\">\r\n\t\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of customerInfoList\" [value]=\"option?.cifNumber\"\r\n\t\t\t\t\t\t\t\t\t\t\t(click)=\"selectCif(option)\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div fxLayout=\"row wrap\" style=\"margin-top: 20px;\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div fxFlex=\" 100\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div mat-card-avatar *ngIf=\"option?.profileImage =='not_available'\" class=\"example-header-image-dropdown\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfxFlex=\"10\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h3 align=\"center\" style=\"margin-top: 5px;font-size: large;\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{option?.firstName | slice:0:1 | uppercase}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</h3>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"option?.profileImage !='not_available'\" mat-card-avatar\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfxFlex=\"10\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<img matListAvatar\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle=\"border-radius: 50%;height: 85%;margin-right: 20px;width: 90%;margin-bottom: 50px;\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\talign=\"center\" [src]=\"option?.profileImage\" alt=\"...\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div fxFlex=\"80\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h5 style=\"margin-bottom: 0px;\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{option?.firstName | uppercase}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{option?.middleName | uppercase}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{option?.lastName | uppercase}}</h5>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h6 style=\"margin-top: 0px;\">#{{option?.cifNumber}}</h6>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t\t</mat-autocomplete>\r\n\r\n\t\t\t\t\t\t\t\t\t<!-- <button type=\"button\" *ngIf=\"createDirectorFormGroup.get('cifNumber').value\" matSuffix mat-icon-button class=\"searchIcon\" >\r\n\t\t\t\t\t\t\t\t\t\t<mat-icon\r\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"font-size: xx-large;color: rgb(21, 64, 255); text-shadow: 2px 2px lightgray;\">\r\n\t\t\t\t\t\t\t\t\t\t\tsearch</mat-icon>\r\n\t\t\t\t\t\t\t\t\t</button> -->\r\n\r\n\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">CIF Number </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t\t\t\t*ngIf=\"createDirectorFormGroup.get('cifNumber').touched && !createDirectorFormGroup.get('cifNumber').valid  && createDirectorFormGroup.get('existingCustomer').value == true\">\r\n\t\t\t\t\t\t\t\t\t<small>CIF Number is Required!</small>\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<!-- <label for=\"forPrefix\" class=\"hint\">Prefix* </label> -->\r\n\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t<mat-label>Prefix</mat-label>\r\n\t\t\t\t\t\t\t\t\t<mat-select formControlName=\"prefix\" id=\"forPrefix\" required>\r\n\t\t\t\t\t\t\t\t\t\t<!-- <mat-label>Frifix</mat-label> -->\r\n\t\t\t\t\t\t\t\t\t\t<!-- <mat-option disabled>select---</mat-option> -->\r\n\t\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let prfix of prefixList\" [value]=\"prfix\">\r\n\t\t\t\t\t\t\t\t\t\t\t{{prfix}}\r\n\t\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t\t<mat-placeholder class=\"placeholder\">Prefix </mat-placeholder>\r\n\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t\t\t\t*ngIf=\"createDirectorFormGroup.get('prefix').touched && !createDirectorFormGroup.get('prefix').valid\">\r\n\t\t\t\t\t\t\t\t\t<small>Please Select Prefix!</small>\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div fxLayout=\"row wrap\">\r\n\t\t\t\t\t\t<div fxFlex=\"100\" style=\"margin-left: 13px\">\r\n\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<!-- <label for=\"forFirstName\" class=\"hint\">First Name </label> -->\r\n\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t<mat-label>First Name</mat-label>\r\n\t\t\t\t\t\t\t\t\t<input matInput formControlName=\"firstName\" id=\"forFirstName\" required\r\n\t\t\t\t\t\t\t\t\t\t(keypress)=\"letterOnly($event)\">\r\n\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">First Name </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t\t\t\t*ngIf=\"createDirectorFormGroup.get('firstName').touched && !createDirectorFormGroup.get('firstName').valid\">\r\n\t\t\t\t\t\t\t\t\t<small>First Name is Required!</small>\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<!-- <label for=\"forMiddleName\" class=\"hint\">Middle Name </label> -->\r\n\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t<mat-label>Middle Name</mat-label>\r\n\t\t\t\t\t\t\t\t\t<input matInput formControlName=\"middleName\" id=\"forMiddleName\"\r\n\t\t\t\t\t\t\t\t\t\t(keypress)=\"letterOnly($event)\">\r\n\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">Middle Name </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t\t\t\t*ngIf=\"createDirectorFormGroup.get('middleName').touched && !createDirectorFormGroup.get('middleName').valid\">\r\n\t\t\t\t\t\t\t\t\t<small>Middle Name is Required!</small>\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div fxLayout=\"row wrap\">\r\n\t\t\t\t\t\t<div fxFlex=\"100\" style=\"margin-left: 13px\">\r\n\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<!-- <label for=\"forLastName\" class=\"hint\">Last Name </label> -->\r\n\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t<mat-label>Last Name</mat-label>\r\n\t\t\t\t\t\t\t\t\t<input matInput formControlName=\"lastName\" id=\"forLastName\" required\r\n\t\t\t\t\t\t\t\t\t\t(keypress)=\"letterOnly($event)\">\r\n\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">Last Name </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t\t\t\t*ngIf=\"createDirectorFormGroup.get('lastName').touched && !createDirectorFormGroup.get('lastName').valid\">\r\n\t\t\t\t\t\t\t\t\t<small>Last Name is Required!</small>\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<!-- <label for=\"forGender\" class=\"hint\">Gender* </label> -->\r\n\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t<mat-label>Gender</mat-label>\r\n\t\t\t\t\t\t\t\t\t<mat-select formControlName=\"gender\" id=\"forGender\" required\r\n\t\t\t\t\t\t\t\t\t\t(selectionChange)=\"onChangeGender($event)\">\r\n\t\t\t\t\t\t\t\t\t\t<!-- <mat-option disabled>select---</mat-option> -->\r\n\t\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let gender of genderList\" [value]=\"gender\">\r\n\t\t\t\t\t\t\t\t\t\t\t{{gender}}\r\n\t\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t\t<mat-placeholder class=\"placeholder\">Gender </mat-placeholder>\r\n\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t\t\t\t*ngIf=\"createDirectorFormGroup.get('gender').touched && !createDirectorFormGroup.get('gender').valid\">\r\n\t\t\t\t\t\t\t\t\t<small>Please Select Gender!</small>\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\" !prefixFlag\">\r\n\t\t\t\t\t\t\t\t\t&nbsp; Prefix and Gender does not match!\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div fxLayout=\"row wrap\">\r\n\t\t\t\t\t\t<div fxFlex=\"100\" style=\"margin-left: 13px\">\r\n\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<!-- <label for=\"forDOB\" class=\"hint\">Date Of Birth </label> -->\r\n\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t<mat-label>Date Of Birth</mat-label>\r\n\t\t\t\t\t\t\t\t\t<input matInput formControlName=\"dateOfBirth\" [matDatepicker]=\"picker\"\r\n\t\t\t\t\t\t\t\t\t\t[max]=\"maxDate\" required readonly>\r\n\t\t\t\t\t\t\t\t\t<mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n\t\t\t\t\t\t\t\t\t<mat-datepicker #picker></mat-datepicker>\r\n\t\t\t\t\t\t\t\t\t<mat-placeholder class=\"placeholder\">Date Of Birth </mat-placeholder>\r\n\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t\t\t\t*ngIf=\"createDirectorFormGroup.get('dateOfBirth').touched && !createDirectorFormGroup.get('dateOfBirth').valid\">\r\n\t\t\t\t\t\t\t\t\t<small>Date Of Birth is Required!</small>\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<!-- <label for=\"forplaceOfBirth\" class=\"hint\">Birth Place* </label> -->\r\n\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t<mat-label>Birth Place</mat-label> \r\n\t\t\t\t\t\t\t\t\t<!-- <mat-select formControlName=\"placeOfBirth\" id=\"forplaceOfBirth\" required>\r\n\t\t\t\t\t\t\t\t\t\t<mat-option disabled>select---</mat-option>\r\n\t\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let placeOfBirth of arrayCountry\" [value]=\"placeOfBirth\">\r\n\t\t\t\t\t\t\t\t\t\t\t{{placeOfBirth}}\r\n\t\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t\t</mat-select>-->\r\n\t\t\t\t\t\t\t\t\t<input matInput formControlName=\"placeOfBirth\" id=\"forplaceOfBirth\" required\r\n\t\t\t\t\t\t\t\t\t\t(keypress.space)=\"letterOnly($event)\">\r\n\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">Place Of Birth </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t\t\t\t*ngIf=\"createDirectorFormGroup.get('placeOfBirth').touched && !createDirectorFormGroup.get('placeOfBirth').valid\">\r\n\t\t\t\t\t\t\t\t\t<small>Place Of Birth is Required!!</small>\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div fxLayout=\"row wrap\">\r\n\t\t\t\t\t\t<div fxFlex=\"100\" style=\"margin-left: 13px\">\r\n\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<!-- <label for=\"forResidenceStatus\" class=\"hint\"> Residence Status </label> -->\r\n\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t<mat-label>Residence Status</mat-label>\r\n\t\t\t\t\t\t\t\t\t<mat-select formControlName=\"residenceStatus\" id=\"forResidenceStatus\" required>\r\n\t\t\t\t\t\t\t\t\t\t<!-- <mat-option disabled>select---</mat-option> -->\r\n\t\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let recidence of arrayResidence\" [value]=\"recidence\">\r\n\t\t\t\t\t\t\t\t\t\t\t{{recidence}}\r\n\t\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">Residence Status </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">Residence Type </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t\t\t\t*ngIf=\"createDirectorFormGroup.get('residenceStatus').touched && !createDirectorFormGroup.get('residenceStatus').valid\">\r\n\t\t\t\t\t\t\t\t\t<!-- <small>Please Select Residence Status!</small> -->\r\n\t\t\t\t\t\t\t\t\t<small>Please Select Residence Type!</small>\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<!-- <mat-form-field> -->\r\n\t\t\t\t\t\t\t\t\t<div fxLayout=\"row wrap\">\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t<div fxFlex=\"100\">\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<mat-label>Citizenship By</mat-label>\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-select formControlName=\"citizenship\" id=\"forcitizenship\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t(selectionChange)=\"onSelectionCitizionship($event.value)\" required>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <mat-option disabled>--Select--</mat-option> -->\r\n\t\t\t\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let citizenship of arrayCountry\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t[value]=\"citizenship\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{{citizenship}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">Citizenship By</mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t<!-- </mat-form-field> -->\r\n\t\t\t\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t\t\t\t*ngIf=\"createDirectorFormGroup.get('citizenship').touched && !createDirectorFormGroup.get('citizenship').valid\">\r\n\t\t\t\t\t\t\t\t\t<small>Please Select Citizenship By!</small>\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div fxLayout=\"row wrap\">\r\n\t\t\t\t\t\t<div fxFlex=\"100\" style=\"margin-left: 13px\">\r\n\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<!-- <mat-form-field> -->\r\n\t\t\t\t\t\t\t\t\t<div fxLayout=\"row wrap\">\r\n\t\t\t\t\t\t\t\t\t\t<div fxFlex=\"100\">\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<mat-label>Country Of Residence</mat-label>\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-select formControlName=\"countryOfResidence\" id=\"forcountryOfResidence\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t(selectionChange)=\"onSelectionResidance($event.value)\" required>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<mat-option disabled>--Select--</mat-option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let countryOfResidence of arrayCountry\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t[value]=\"countryOfResidence\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{{countryOfResidence}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">Country Of Residence</mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t<!-- </mat-form-field> -->\r\n\t\t\t\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t\t\t\t*ngIf=\"createDirectorFormGroup.get('countryOfResidence').touched && !createDirectorFormGroup.get('countryOfResidence').valid\">\r\n\t\t\t\t\t\t\t\t\t<small>Please Select Country Of Residence</small>\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t<mat-label>Unique Id Number</mat-label>\r\n\t\t\t\t\t\t\t\t\t<input matInput formControlName=\"idNumber\"  (keypress)=\"_keyPress($event)\"\r\n\t\t\t\t\t\t\t\t\t\tid=\"foridNumber\" maxlength=\"15\" minLength=\"11\" required>\r\n\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">Unique Id Number </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"createDirectorFormGroup.get('idNumber').touched && !createDirectorFormGroup.get('idNumber').valid\">\r\n\t\t\t\t\t\t\t\t\t<small>Unique Id Number is Required</small>\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div fxLayout=\"row wrap\">\r\n\t\t\t\t\t\t<div fxFlex=\"100\" style=\"margin-left: 13px\">\r\n\t\t\t\t\t\t\t<div fxFlex=\"40\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t<mat-label>ID Type</mat-label>\r\n\t\t\t\t\t\t\t\t\t<mat-select formControlName=\"idType\"  id=\"forIdType\" required>\r\n\t\t\t\t\t\t\t\t\t\t<mat-option disabled>select---</mat-option>\r\n\t\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let idType of idTypeList\" [value]=\"idType\">\r\n\t\t\t\t\t\t\t\t\t\t\t{{idType}}\r\n\t\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">ID Type </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"createDirectorFormGroup.get('idType').touched && !createDirectorFormGroup.get('idType').valid\">\r\n\t\t\t\t\t\t\t\t\t<small>Please Select ID Type!</small>\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"40\" class=\"form-group\" *ngIf=\"createDirectorFormGroup.get('idType').value == 'Passport'\">\r\n\t\t\t\t\t\t\t\t<mat-form-field>\r\n\t\t\t\t\t\t\t\t\t<!-- <mat-label>Valid Till</mat-label> -->\r\n\t\t\t\t\t\t\t\t\t<input matInput id=\"forIdexpiryDate\" formControlName=\"expiryDate\"\r\n\t\t\t\t\t\t\t\t\t\t[min]=\"minDate\" [matDatepicker]=\"expiryDate\" readonly required>\r\n\t\t\t\t\t\t\t\t\t<mat-datepicker-toggle matSuffix [for]=\"expiryDate\"></mat-datepicker-toggle>\r\n\t\t\t\t\t\t\t\t\t<mat-datepicker #expiryDate></mat-datepicker>\r\n\t\t\t\t\t\t\t\t\t<mat-placeholder class=\"placeholder\">Valid Till </mat-placeholder>\r\n\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t\t\t\t*ngIf=\"createDirectorFormGroup.get('expiryDate').touched && !createDirectorFormGroup.get('expiryDate').valid\">\r\n\t\t\t\t\t\t\t\t\t<small>Please Select Valid Till!</small>\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- <div formArrayName=\"custIdProofs\">\r\n\t\t\t\t\t\t<div *ngFor=\"let item of createDirectorFormGroup.get('custIdProofs')['controls']; let i = index;\"\r\n\t\t\t\t\t\t\t[formGroupName]=\"i\">\r\n\t\t\t\t\t\t\t<div fxLayout=\"row wrap\">\r\n\t\t\t\t\t\t\t\t<div fxFlex=\"100\" fxLayoutGap=\"15px\">\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\".5\">\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"30\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t\t<!-- <label for=\"forIdType\" class=\"hint\">ID Type </label> \r\n\t\t\t\t\t\t\t\t\t\t<mat-form-field>\r\n\t\t\t\t\t\t\t\t\t\t\t<!-- <mat-label>ID Type</mat-label> \r\n\t\t\t\t\t\t\t\t\t\t\t<mat-select formControlName=\"idType\" id=\"forIdType\" required>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<mat-option disabled>select---</mat-option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let idType of idTypeList\" [value]=\"idType\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{{idType}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-placeholder class=\"placeholder\">ID Type </mat-placeholder>\r\n\t\t\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t\t\t<mat-error *ngIf=\"item.get('idType').touched && !item.get('idType').valid\">\r\n\t\t\t\t\t\t\t\t\t\t\t<small>Please Select ID Type!</small>\r\n\t\t\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"30\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t\t<!-- <label for=\"foridNumber\" class=\"hint\">Unique Id Number </label> \r\n\t\t\t\t\t\t\t\t\t\t<mat-form-field>\r\n\t\t\t\t\t\t\t\t\t\t\t<!-- <mat-label>Unique Id Number</mat-label> \r\n\t\t\t\t\t\t\t\t\t\t\t<input matInput formControlName=\"idNumber\" (keypress)=\"_keyPress($event)\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tid=\"foridNumber\" maxlength=\"15\" minLength=\"11\" required>\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-placeholder class=\"placeholder\">Unique Id Number </mat-placeholder>\r\n\t\t\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t\t\t<mat-error *ngIf=\"item.get('idNumber').touched && !item.get('idNumber').valid\">\r\n\t\t\t\t\t\t\t\t\t\t\t<small>Unique Id Number is Required</small>\r\n\t\t\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"30\" class=\"form-group\"\r\n\t\t\t\t\t\t\t\t\t\t*ngIf=\"item.get('idType').value == 'Passport' || item.get('idType').value == 'DL'\">\r\n\t\t\t\t\t\t\t\t\t\t<!-- <label for=\"forIdexpiryDate\" class=\"hint\">Valid Till </label> \r\n\t\t\t\t\t\t\t\t\t\t<mat-form-field>\r\n\t\t\t\t\t\t\t\t\t\t\t<!-- <mat-label>Valid Till</mat-label> \r\n\t\t\t\t\t\t\t\t\t\t\t<input matInput formControlName=\"expiryDate\" id=\"forIdexpiryDate\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t[min]=\"minDate\" [matDatepicker]=\"expiryDate\" readonly required>\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-datepicker-toggle matSuffix [for]=\"expiryDate\"></mat-datepicker-toggle>\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-datepicker #expiryDate></mat-datepicker>\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-placeholder class=\"placeholder\">Valid Till </mat-placeholder>\r\n\t\t\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"item.get('expiryDate').touched && !item.get('expiryDate').valid\">\r\n\t\t\t\t\t\t\t\t\t\t\t<small>Please Select Valid Till!</small>\r\n\t\t\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div> -->\r\n\t\t\t\t</div>\r\n\t\t\t\t<!-- For Address Type -->\r\n\t\t\t\t<div formArrayName=\"userAddress\">\r\n\t\t\t\t\t<div *ngFor=\"let item of createDirectorFormGroup.get('userAddress')['controls']; let i = index;\"\r\n\t\t\t\t\t\t[formGroupName]=\"i\">\r\n\t\t\t\t\t\t<fieldset style=\"border-top: 1px solid lightgray;margin-left: 20px; margin-right: 20px;\">\r\n\t\t\t\t\t\t\t<legend visible=\"true\">Communication Address</legend>\r\n\t\t\t\t\t\t\t<div fxLayout=\"row wrap\">\r\n\t\t\t\t\t\t\t\t<div fxFlex=\"100\" style=\"margin-left: 13px\">\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t\t<!-- <label for=\"foraddress1\" class=\"hint\">address 1</label> -->\r\n\t\t\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-label>Address Line 1</mat-label>\r\n\t\t\t\t\t\t\t\t\t\t\t<input matInput id=\"foraddress1\" formControlName=\"address1\" required>\r\n\t\t\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">Address Line 1 </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t\t\t<mat-error *ngIf=\"(item.get('address1').touched && !item.get('address1').valid) || (item.get('address1').touched && item.get('address1').hasError('pattern'))\">\r\n\t\t\t\t\t\t\t\t\t\t\t<small>Please Enter Valid Address Line 1</small>\r\n\t\t\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t\t<!-- <label for=\"foraddress2\" class=\"hint\">address 2</label> -->\r\n\t\t\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-label>Address Line 2</mat-label>\r\n\t\t\t\t\t\t\t\t\t\t\t<input matInput id=\"foraddress2\" formControlName=\"address2\" required>\r\n\t\t\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">Address Line 2 </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t\t\t<mat-error *ngIf=\"(item.get('address2').touched && !item.get('address2').valid) || (item.get('address2').touched && item.get('address2').hasError('pattern'))\">\r\n\t\t\t\t\t\t\t\t\t\t\t<small>Please Enter Valid Address Line 2</small>\r\n\t\t\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div fxLayout=\"row wrap\">\r\n\t\t\t\t\t\t\t\t<div fxFlex=\"100\" style=\"margin-left: 13px\">\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t\t<!-- <label for=\"forcountry\" class=\"hint\">Country </label> -->\r\n\t\t\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-label>Country</mat-label>\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-select id=\"forcountry\" formControlName=\"country\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t(selectionChange)=\"getStateName($event.value)\" required>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <mat-option disabled>select---</mat-option> -->\r\n\t\t\t\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let country of arrayCountry\" [value]=\"country\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{{country}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">Country </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t\t\t<mat-error *ngIf=\"item.get('country').touched && !item.get('country').valid\">\r\n\t\t\t\t\t\t\t\t\t\t\t<small>Please select country</small>\r\n\t\t\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t\t\t<!-- <label for=\"forstate\" class=\"hint\">State </label> -->\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<mat-label>State</mat-label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<mat-select id=\"forstate\" formControlName=\"state\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(selectionChange)=\"getCityName($event.value)\" required>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<mat-option disabled>select---</mat-option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let state of arrayState\" [value]=\"state.stateName\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{state.stateName}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">State </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-error *ngIf=\"item.get('state').touched && !item.get('state').valid\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<small>Please select state</small>\r\n\t\t\t\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div fxLayout=\"row wrap\">\r\n\t\t\t\t\t\t\t\t<div fxFlex=\"100\" style=\"margin-left: 13px\">\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t<!-- <label for=\"forCity\" class=\"hint\">City </label> -->\r\n\t\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t\t<mat-label>City</mat-label>\r\n\t\t\t\t\t\t\t\t\t\t<mat-select id=\"forCity\" formControlName=\"city\" required>\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-option disabled>select---</mat-option>\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let City of arrayCity\" [value]=\"City.value1\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t{{City.value1}}\r\n\t\t\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">City </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t\t<mat-error *ngIf=\"item.get('city').touched && !item.get('city').valid\">\r\n\t\t\t\t\t\t\t\t\t\t<small>Please select city</small>\r\n\t\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t\t<!-- <label for=\"forZipCode\" class=\"hint\">Zip Code</label> -->\r\n\t\t\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-label>Zip Code</mat-label>\r\n\t\t\t\t\t\t\t\t\t\t\t<!--<input matInput formControlName=\"zipcode\" id=\"forZipCode\" onlyNumber\r\n\t\t\t\t\t\t\t\t\t\t\tmaxlength=\"10\" minLength=\"5\" (keypress)=\"_keyPress($event)\">-->\r\n\t\t\t\t\t\t\t\t\t\t\t<input matInput formControlName=\"zipCode\" id=\"forZipCode\" onlyNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\tmaxlength=\"10\" minLength=\"5\" (keypress)=\"_keyPress($event)\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t(keyup)=\"isAllSameDigit($event)\" required>\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">Zip code </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t\t\t</mat-form-field>\r\n\r\n\t\t\t\t\t\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"item.get('zipCode').touched && item.get('zipCode').hasError('required') \">\r\n\t\t\t\t\t\t\t\t\t\t\t<small>Please enter Zip Code!(5-10 digits)</small>\r\n\t\t\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"isAllSameDigitVal || item.get('zipCode').hasError('pattern') \">\r\n\t\t\t\t\t\t\t\t\t\t\t<small>Please enter valid Zip Code!(5-10 digits)</small>\r\n\t\t\t\t\t\t\t\t\t\t</mat-error>\r\n\r\n\t\t\t\t\t\t\t\t\t\t<!-- <mat-error *ngIf=\"item.get('zipcode').hasError('pattern')\">\r\n\t\t\t\t\t\t\t\t\t\t\t<small>Please enter valid Zip Code!</small>\t\t\t\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t\t\t\t</mat-error> -->\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t</fieldset>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\r\n\r\n\r\n\t\t\t\t<!-- For Contact Information -->\r\n\t\t\t\t<fieldset style=\"border-top: 1px solid lightgray;margin-left: 20px; margin-right: 20px;\">\r\n\t\t\t\t\t<legend visible=\"true\">Contact Information</legend>\r\n\t\t\t\t\t<div fxLayout=\"row wrap\">\r\n\t\t\t\t\t\t<div fxFlex=\"100\" style=\"margin-left: 13px\">\r\n\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<!-- <label for=\"forPhoneNumber\" class=\"hint\">Mobile Number</label> -->\r\n\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t<mat-label>Mobile Number</mat-label>\r\n\t\t\t\t\t\t\t\t\t<input matInput formControlName=\"phoneNumber\" id=\"forPhoneNumber\" maxLength=\"10\"\r\n\t\t\t\t\t\t\t\t\t\tminLength=\"10\" (keypress)=\"_keyPress($event)\" (keyup)=\"isAllNumberZero($event)\" onlyNumber required>\r\n\t\t\t\t\t\t\t\t\t<mat-placeholder class=\"placeholder\">Mobile Number </mat-placeholder>\r\n\r\n\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"createDirectorFormGroup.get('phoneNumber').touched && !createDirectorFormGroup.get('phoneNumber').valid\r\n\t\t\t\t\t\t\t\t\t&& !createDirectorFormGroup.controls['phoneNumber'].hasError('minLength')\">\r\n\t\t\t\t\t\t\t\t\t<small>Enter Mobile Number(Maximum 10 digits)!</small>\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"isAllNumberZeroFlag\">\r\n                                <small>\r\n\t\t\t\t\t\t\t\t\t &nbsp; &nbsp; Please Enter Correct Mobile Number\r\n\t\t\t\t\t\t\t\t</small>\r\n                                </mat-error>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<!-- <label for=\"forlandlineNumber\" class=\"hint\">Landline Number</label> -->\r\n\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t<mat-label>Landline Number</mat-label>\r\n\t\t\t\t\t\t\t\t\t<input matInput formControlName=\"landlineNumber\" (keypress)=\"_keyPress($event)\"\r\n\t\t\t\t\t\t\t\t\t\tmaxLength=\"10\" minLength=\"10\" onlyNumber id=\"forlandlineNumber\">\r\n\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">Landline Number </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"createDirectorFormGroup.get('landlineNumber').touched \r\n\t\t\t\t\t\t\t\t\t&& !createDirectorFormGroup.get('landlineNumber').valid\r\n\t\t\t\t\t\t\t\t\t&& !createDirectorFormGroup.controls['landlineNumber'].hasError('minLength')\">\r\n\t\t\t\t\t\t\t\t\t<small>Enter Landline Number!</small>\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"createDirectorFormGroup.controls['landlineNumber'].value == '0000000000'\">\r\n\t\t\t\t\t\t\t\t<small>\r\n\t\t\t\t\t\t\t\t\t&nbsp; &nbsp; Please Enter Correct Landline Number</small>\t\r\n\t\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div fxLayout=\"row wrap\">\r\n\t\t\t\t\t\t<div fxFlex=\"100\" style=\"margin-left: 13px\">\r\n\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<!-- <label for=\"forprimaryEmailAdress\" class=\"hint\">Email Address</label> -->\r\n\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t<mat-label>Email Address</mat-label>\r\n\t\t\t\t\t\t\t\t\t<input matInput formControlName=\"primaryEmailAdress\" type=\"email\"\r\n\t\t\t\t\t\t\t\t\t\tpattern=\"^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$\" id=\"forprimaryEmailAdress\" required>\r\n\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">Email </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t\t\t\t*ngIf=\"createDirectorFormGroup.get('primaryEmailAdress').touched && !createDirectorFormGroup.get('primaryEmailAdress').valid\">\r\n\t\t\t\t\t\t\t\t\t<small>Email Address is Required!</small>\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"80\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</fieldset>\r\n\r\n\t\t\t\t<!-- For Additional Tax ID Details -->\r\n\t\t\t\t<div formArrayName=\"custTaxInfo\">\r\n\t\t\t\t\t<div *ngFor=\"let item of createDirectorFormGroup.get('custTaxInfo')['controls']; let i = index;\"\r\n\t\t\t\t\t\t[formGroupName]=\"i\">\r\n\t\t\t\t\t\t<fieldset style=\"border-top: 1px solid lightgray;margin-left: 20px; margin-right: 20px;\">\r\n\t\t\t\t\t\t\t<legend visible=\"true\">Additional Tax ID Details</legend>\r\n\t\t\t\t\t\t\t<div fxLayout=\"row wrap\">\r\n\t\t\t\t\t\t\t\t<div fxFlex=\"100\" style=\"margin-left: 13px\">\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t\t<!-- <label for=\"forTaxId\" class=\"hint\">Tax Id </label> -->\r\n\t\t\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-label>Tax Id</mat-label>\r\n\t\t\t\t\t\t\t\t\t\t\t<input matInput (keypress)=\"omit_special_char($event)\" onlyNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\tformControlName=\"taxId\" id=\"forTaxId\" maxlength=\"10\" required>\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-placeholder class=\"placeholder\">Tax Id </mat-placeholder>\r\n\t\t\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t\t\t<mat-error *ngIf=\"item.get('taxId').touched && !item.get('taxId').valid\">\r\n\t\t\t\t\t\t\t\t\t\t\t<small>Tax Id is Required with only numbers!</small>\r\n\t\t\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t\t<!-- <label for=\"forCountryOfIssue\" class=\"hint\">Country of Issue </label> -->\r\n\t\t\t\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" class=\"full-width\">\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-label>Country of Issue</mat-label>\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-select formControlName=\"countryOfIssue\" id=\"forCountryOfIssue\"\r\n\t\t\t\t\t\t\t\t\t\t\t\trequired>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <mat-option disabled>select---</mat-option> -->\r\n\t\t\t\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let countryOfIssue of arrayCountry\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t[value]=\"countryOfIssue\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{{countryOfIssue}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t\t\t\t<!-- <mat-placeholder class=\"placeholder\">Country of Issue </mat-placeholder> -->\r\n\t\t\t\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t\t\t\t<mat-error\r\n\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"item.get('countryOfIssue').touched && !item.get('countryOfIssue').valid\">\r\n\t\t\t\t\t\t\t\t\t\t\t<small>Please Select Country Of Issue!</small>\r\n\t\t\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div fxLayout=\"row wrap\">\r\n\t\t\t\t\t\t\t\t<div fxFlex=\"100\" style=\"margin-left: 13px\">\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"20\" class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t\t<button mat-raised-button color=\"primary\"\r\n\t\t\t\t\t\t\t\t\t\t\t[disabled]=\"createDirectorFormGroup.invalid || !prefixFlag || isAllNumberZeroFlag\"\r\n\t\t\t\t\t\t\t\t\t\t\t(click)=\"addDirector(createDirectorFormGroup.value,item);openClose('CLOSE')\"\r\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"background-color: rgb(77, 114, 248);\">\r\n\t\t\t\t\t\t\t\t\t\t\t<mat-icon>add</mat-icon> ADD DIRECTOR\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"60\">\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"80\" class=\"form-group\">\r\n\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div fxFlex=\"10\">\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t</fieldset>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</fieldset>\r\n\t\t</mat-expansion-panel>\r\n\r\n\r\n\t\t<!-- <mat-card class=\"showDirectorCard\" *ngIf=\"panelOpenState==false\">-->\r\n\t\t<mat-card class=\"showDirectorCard\" *ngIf=\"noOfDir!=1 && isDirectorSaved && panelOpenState==false\">\r\n\t\t\t<mat-card-header>\r\n\t\t\t\t<!--<div mat-card-avatar class=\"example-header-image\">\r\n\t\t\t\t\t<div *ngIf=\"profileImage == 'not_available'; else showAvatar\">\r\n\t\t\t\t\t\t<h4 align=\"center\" style=\"margin-top: 20px;font-size: 50px;\">\r\n\t\t\t\t\t\t\t?\r\n\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>-->\r\n\t\t\t\t<div mat-card-avatar class=\"example-header-image\">\r\n\t\t\t\t\t<div *ngIf=\"profileImage == 'not_available'; else showAvatar\">\r\n\t\t\t\t\t\t<h4 align=\"center\" style=\"margin-top: 20px;font-size: 50px;\">\r\n\t\t\t\t\t\t\t?\r\n\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<ng-template #showAvatar>\r\n\t\t\t\t\t\t<h4 align=\"center\" style=\"margin-top: 30px;font-size: 30px; color: white;\">\r\n\t\t\t\t\t\t\t{{createDirectorFormGroup.value.firstName | slice:0:1 | uppercase}}{{createDirectorFormGroup.value.lastName | slice:0:1 | uppercase}}\r\n\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t</ng-template>\r\n\t\t\t\t</div>\r\n\t\t\t\t<mat-card-title style=\"margin-top: 10px;\">{{createDirectorFormGroup.value.firstName | uppercase}}\r\n\t\t\t\t\t{{createDirectorFormGroup.value.middleName | uppercase}}\r\n\t\t\t\t\t{{createDirectorFormGroup.value.lastName | uppercase}}\r\n\t\t\t\t</mat-card-title>\r\n\t\t\t\t<mat-card-subtitle>#{{cifNumber}}</mat-card-subtitle>\r\n\t\t\t\t<mat-card-actions class=\"editAndDelete\">\r\n\t\t\t\t\t<button mat-button (click)=\"editDirector(item)\">\r\n\t\t\t\t\t\t<mat-icon>edit</mat-icon>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button mat-button (click)=\"deleteDirector(item)\">\r\n\t\t\t\t\t\t<mat-icon>delete_outline</mat-icon>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</mat-card-actions>\r\n\t\t\t</mat-card-header>\r\n\t\t\t\r\n\t\t</mat-card>\r\n\r\n\t</mat-card>\r\n</form>","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { OnboradingPrimaryComponent } from './onborading-primary/onborading-primary.component';\r\nimport { DirectorDetailsComponent } from './director-details/director-details.component';\r\nimport { ContactInformationComponent } from './contact-information/contact-information.component';\r\nimport { ProofOfIdentityComponent } from './proof-of-identity/proof-of-identity.component';\r\nimport { OnboardingCorporateMainComponent } from './onboarding-corporate-main/onboarding-corporate-main.component';\r\nimport { OtherInfoCorporateComponent } from './other-info-corporate/other-info-corporate.component';\r\nimport { CreateDirectorComponent } from './create-director/create-director.component';\r\n\r\n\r\nexport const onboardingCorporateroutes: Routes = [\r\n\r\n  {\r\n    path:'createDirector',\r\n    component:CreateDirectorComponent\r\n  },\r\n  {\r\n    path:'onborading-primary',\r\n    component:OnboradingPrimaryComponent\r\n  },\r\n  {\r\n    path:'Director-Details',\r\n    component:DirectorDetailsComponent\r\n  }, \r\n  {\r\n    path:'conatctInfo',\r\n    component:ContactInformationComponent\r\n  },\r\n  {\r\n    path:'proofOfIdentity',\r\n    component:ProofOfIdentityComponent\r\n  },\r\n  {\r\n    path:'other-info',\r\n    component:OtherInfoCorporateComponent \r\n  },\r\n  {\r\n    path:'corporate',\r\n    component:OnboardingCorporateMainComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(onboardingCorporateroutes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class OnboardingCorporateRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { OnboardingCorporateRoutingModule, onboardingCorporateroutes } from './onboarding-corporate-routing.module';\r\nimport { OnboradingPrimaryComponent } from './onborading-primary/onborading-primary.component';\r\n\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { ChartModule } from 'angular-highcharts';\r\n\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { DirectorDetailsComponent } from './director-details/director-details.component';\r\nimport { ContactInformationComponent } from './contact-information/contact-information.component';\r\nimport { ProofOfIdentityComponent } from './proof-of-identity/proof-of-identity.component';\r\nimport { OtherInfoCorporateComponent } from './other-info-corporate/other-info-corporate.component';\r\nimport { OnboardingCorporateMainComponent } from './onboarding-corporate-main/onboarding-corporate-main.component';\r\nimport { CorporateOnboardingService } from './corporate-onboarding.service';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { CreateDirectorComponent } from './create-director/create-director.component';\r\nimport { STEPPER_GLOBAL_OPTIONS } from '@angular/cdk/stepper';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [OnboradingPrimaryComponent, DirectorDetailsComponent, ContactInformationComponent, ProofOfIdentityComponent, OtherInfoCorporateComponent, \r\n    OnboardingCorporateMainComponent, CreateDirectorComponent],\r\n  imports: [\r\n    CommonModule,\r\n    OnboardingCorporateRoutingModule,\r\n    MatStepperModule,\r\n    MatAutocompleteModule,\r\n    FlexLayoutModule,\r\n    MatListModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatSliderModule,\r\n    MatInputModule ,\r\n    MatSelectModule,\r\n    MatSlideToggleModule,\r\n    MatGridListModule,\r\n    MatDatepickerModule,\r\n    MatChipsModule,\r\n    MatCheckboxModule,\r\n    MatRadioModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatInputModule,\r\n    MatProgressBarModule,\r\n    FlexLayoutModule,\r\n    ReactiveFormsModule,\r\n    MatExpansionModule,\r\n    ChartModule,\r\n  \r\n    MatSelectModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatNativeDateModule,\r\n    RouterModule.forChild(onboardingCorporateroutes)\r\n\r\n  ],\r\n  providers:[CorporateOnboardingService]\r\n})\r\nexport class OnboardingCorporateModule { }\r\n","import { Validators } from '@angular/forms';\r\nimport { ChangeDetectorRef, Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatTabChangeEvent } from '@angular/material/tabs';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ApiService } from 'app/shared/services/api.service';\r\nimport { LocalStoreService } from 'app/shared/services/local-store.service';\r\nimport { CorporateOnboardingService } from '../corporate-onboarding.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { DialogService } from 'app/shared/services/dialogs/dialog.service';\r\nimport { timingSafeEqual } from 'crypto';\r\n\r\n@Component({\r\n  selector: 'app-onborading-primary',\r\n  templateUrl: './onborading-primary.component.html',\r\n  styleUrls: ['./onborading-primary.component.scss'],\r\n})\r\nexport class OnboradingPrimaryComponent implements OnInit {\r\n  imgUrl: string | ArrayBuffer;\r\n  selectedFiles: any;\r\n  onboardingPrimary: FormGroup;\r\n\r\n  companyNameArr: string[] = ['ABC Bank', 'Yes Bank', 'No Bank'];\r\n  categoryArr: string[] = ['Privileged', 'Un Privileged'];\r\n  countryArr: any[] = [];\r\n  imageURL: any;\r\n  profilePicture: any;\r\n  profileImageExist: boolean = false;\r\n  profileId: any;\r\n  profileURL: any;\r\n  customerId: any;\r\n  corporateId: any;\r\n  editCorporateScreen: string;\r\n  isDisable: boolean;\r\n  disableDeletebtn:boolean=false;\r\n  corporateDetails: any;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private formBuilder: FormBuilder,\r\n    private dialogService: DialogService,\r\n    private corporateService: CorporateOnboardingService,\r\n    private cdr: ChangeDetectorRef,\r\n    private route: ActivatedRoute,\r\n    private snack: MatSnackBar,\r\n    private ls: LocalStoreService,\r\n    private apiService: ApiService\r\n  ) {\r\n    this.onboardingPrimary = this.formBuilder.group({\r\n      companyName: ['', [Validators.required]],\r\n      corporateId: [''],\r\n      category: ['', [Validators.required]],\r\n      country: ['', [Validators.required]],\r\n    });\r\n    // this.corporateService.stepReady(this.onboardingPrimary, 'one')\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.editCorporateScreen = localStorage.getItem('EDIT-CORPORATEID');\r\n    console.log(this.editCorporateScreen, 'Edit kyc details');\r\n    this.imageURL = 'not_available';\r\n    console.log('imageurl', this.imgUrl);\r\n    this.route.queryParamMap.subscribe((params: any) => {\r\n      this.imageURL = 'not_available';\r\n      console.log(params.get('index'));\r\n      if (params.get('index')) {\r\n        this.corporateService.sendDisableMatTab({\r\n          index: params.get('index'),\r\n        });\r\n        this.corporateService.setFinishFlag({\r\n          finishFlag: false,\r\n        });\r\n        this.resetCorprateOnboarding();\r\n        this.onboardingPrimary.reset({\r\n          companyName: '',\r\n          corporateId: '',\r\n          category: '',\r\n          country: '',\r\n        });\r\n      }\r\n    });\r\n    if (this.ls.getItem('corporateId')) {\r\n      this.getCoropratedetails(this.ls.getItem('corporateId'));\r\n    }\r\n    if (this.ls.getItem('EDIT-CORPORATEID')) {\r\n      console.log('KYC Id reference inside');\r\n      // let kycReference = this.ls.getItem('kycReference');\r\n      // this.kycReferenceId = kycReference.replace('KYC_', '');\r\n      this.getCoropratedetails(this.ls.getItem('EDIT-CORPORATEID'));\r\n    }\r\n    this.getCountryName('country');\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.ls.getItem('corporateId')) {\r\n      this.getCoropratedetails(this.ls.getItem('corporateId'));\r\n    }\r\n  }\r\n\r\n  resetCorprateOnboarding() {\r\n    this.onboardingPrimary.reset();\r\n    this.ls.removeItem('corporateId');\r\n    this.ls.removeItem('corporateTabIndex');\r\n    this.imageURL = 'not_available';\r\n  }\r\n\r\n  previous() {\r\n    // this.dialogService.openCustomerType();\r\n    this.router.navigateByUrl('/others/customerTypeDialog');\r\n  }\r\n\r\n  corporateChange(event) {\r\n    this.selectedFiles = event.target.files[0];\r\n    // Below part is used to display the selected image\r\n    let reader = new FileReader();\r\n    reader.readAsDataURL(event.target.files[0]);\r\n    reader.onload = (event2) => {\r\n      this.imgUrl = reader.result;\r\n    };\r\n  }\r\n\r\n  public profileChange(event) {\r\n    this.profilePicture = event.target.files[0];\r\n    \r\n    let reader = new FileReader();\r\n    reader.readAsDataURL(event.target.files[0]);\r\n    reader.onload = (event2) => {\r\n      // this.imgUrl = reader.result;\r\n      //  this.fun(event.target.files[0], this.profilePicture);\r\n      this.imageURL = reader.result;\r\n      this.disableDeletebtn=true;\r\n      \r\n      // this.profileImageExist = true;\r\n    };\r\n    event.target.value = '';\r\n  }\r\n\r\n  // check(onboardingPrimary){\r\n  //   console.log(\"Before check!\");\r\n  //  console.log(this.onboardingPrimary.controls.countryArr);\r\n\r\n  //   if (this.countryArr == []  || this.categoryArr == [] || this.companyNameArr == []){\r\n  //     console.log(\"Aftercheck1\")\r\n\r\n  //     // var  cssColor =  document.querySelectorAll(\"#cssColor\");\r\n  //     // console.log(cssColor)\r\n  //     // for (let element of cssColor) {\r\n  //       // element.style.color = \"red\"\r\n  //     // }\r\n\r\n  //     document.getElementById(\"cssColor\").style.color = \"red\";\r\n  //   }\r\n  // }\r\n\r\n  getCoropratedetails(e) {\r\n    this.corporateId=e;\r\n    this.apiService.getCoropratedetails(e).subscribe((details) => {\r\n      console.log(details);\r\n      if(details){\r\n        this.ls.setItem('totalCust',details.customerInfo.length)\r\n      }\r\n      if (details.corporateStatus === 'APPROVED') {\r\n        this.onboardingPrimary.patchValue(details);\r\n        this.imageURL = details.profileImage;\r\n        this.imageURL != \"not_available\"? this.disableDeletebtn=true:false;\r\n        this.corporateDetails=details;\r\n        this.ls.removeItem('EDIT-CORPORATEID');\r\n      }\r\n      // if (details) {\r\n\r\n      // }\r\n      // else if (\r\n      //   details.corporateStatus === null ||\r\n      //   details.corporateStatus === ''\r\n      // ) {\r\n      //   this.snack.open('Please Enter Approved Corporate Id Number', 'Ok', {\r\n      //     duration: 4000,\r\n      //     verticalPosition: 'top',\r\n      //     horizontalPosition: 'right',\r\n      //   });\r\n      // }\r\n      else {\r\n        this.snack.open('Please Enter Approved Corporate Id Number', 'Ok', {\r\n          duration: 4000,\r\n          verticalPosition: 'top',\r\n          horizontalPosition: 'right',\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  onSubmit(onboardingPrimary) {\r\n    console.log('onboardingPrimary :: ', onboardingPrimary);\r\n\r\n    this.corporateService\r\n      .saveOrUpdateCorporateAccountInfo(onboardingPrimary)\r\n      .subscribe((data) => {\r\n        console.log('data :: ', data);\r\n        this.corporateId=data.corporateId;\r\n        if (data != null) {\r\n          this.ls.setItem('corporateId', data.corporateId);\r\n          this.corporateService.sendCorporateAccountId(data.corporateId);\r\n          this.snack.open('Basic Information Saved' + ' !', 'OK', {\r\n            duration: 4000,\r\n            verticalPosition: 'top',\r\n            horizontalPosition: 'right',\r\n          });\r\n          this.cdr.markForCheck();\r\n          this.updateCorporateStatus(data.corporateId);\r\n          if (this.profilePicture) {\r\n            let profileUpload: any = {};\r\n            profileUpload.documentName = 'Profile';\r\n            profileUpload.documentType = 1;\r\n            profileUpload.fileType = this.profilePicture?.type;\r\n            profileUpload.fileName = this.profilePicture?.name;\r\n            profileUpload.corporateId = data.corporateId;\r\n            console.log(profileUpload);\r\n            const uploadData = new FormData();\r\n            uploadData.append('data', JSON.stringify(profileUpload));\r\n            uploadData.append('file', this.profilePicture);\r\n            this.apiService.uploadCorporateDocument(uploadData).subscribe(\r\n              (response) => {},\r\n              (err) => {\r\n                console.log('error', err);\r\n              }\r\n            );\r\n          }\r\n          this.next();\r\n        } else {\r\n          this.snack.open(\r\n            'Not able to connect to server!',\r\n            'INTERNAL SERVER ERROR',\r\n            {\r\n              duration: 4000,\r\n              verticalPosition: 'top',\r\n              horizontalPosition: 'right',\r\n            }\r\n          );\r\n        }\r\n\r\n        (error) => {\r\n          console.log('error resp :: ', error);\r\n          this.snack.open(`${error.error.message} `, 'OK', {\r\n            duration: 4000,\r\n            verticalPosition: 'top',\r\n            horizontalPosition: 'right',\r\n          });\r\n        };\r\n      });\r\n  }\r\n\r\n  updateCorporateStatus(corporateId) {\r\n    console.log('corporateId :: ', corporateId);\r\n    this.apiService\r\n      .updateCorporateSatatus(corporateId, 'UNDER_PROCESS')\r\n      .subscribe((data) => {\r\n        console.log('update response :: ', data);\r\n      });\r\n  }\r\n  getProfileImage(customerId: any, document_type: number) {\r\n    this.apiService\r\n      .getCustomerDocuments(customerId, document_type)\r\n      .subscribe((data) => {\r\n        console.log('data ::', data);\r\n        if (data.length > 0) {\r\n          this.profileId = data[0].id;\r\n          this.imageURL = data[0].fileUrl;\r\n        }\r\n      });\r\n  }\r\n\r\n  deleteProfileImg() {\r\n    this.imageURL = 'not_available';\r\n    var docObj=this.corporateDetails.corporateDocs.find(x=>  x.documentName==\"Profile\");\r\n    this.apiService\r\n      .delCorporateCustDoc(this.corporateId, 'Profile',docObj.id)\r\n      .subscribe((data) => \r\n      {\r\n        this.snack.open('Profile Image Deleted Successfully', 'OK', {\r\n          duration: 4000,\r\n          verticalPosition: 'top',\r\n          horizontalPosition: 'right',\r\n        });\r\n      });\r\n      this.disableDeletebtn=false;\r\n  }\r\n\r\n  next() {\r\n    this.corporateService.sendDisableMatTab({\r\n      index: 1,\r\n    });\r\n    this.corporateService.setFinishFlag({\r\n      finishFlag: false,\r\n    });\r\n  }\r\n\r\n  getCountryName(key: string) {\r\n    this.apiService.getAllCountries().subscribe((data: any) => {\r\n     for(let i=0; i<data.length;i++){\r\n       if(data[i].authStatus==='A'){     \r\n         this.countryArr.push(data[i].countryName);\r\n       }\r\n     }\r\n   });\r\n }\r\n}\r\n","<form [formGroup]=\"onboardingPrimary\" ngNativeValidate>\r\n    <div class=\"full-width\" >\r\n        <div style=\"padding: 1rem 0; background-color:#F1F1F4\">\r\n            <div style=\"padding: 0 4.3rem\">\r\n                <mat-card style=\"border-radius: 0px;\">\r\n                    <div class=\"full-width\" style=\"padding: 1rem 1rem;\" >\r\n                        <h2 style=\"font-size: 18px;\">Primary Information</h2>\r\n                        <mat-divider style=\"width:70px;border-bottom: 7px solid #456EFE;left: 30px; border-radius: 30px;\">\r\n                        </mat-divider>\r\n                    </div>\r\n                    <mat-card-content fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"10px\" >\r\n                        <!-- <div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"10px\"> -->\r\n                        <div fxFlex=\"20%\" fxFlex.xs=\"100%\" class=\"full-width\">\r\n                            <div fxLayout=\"column\" class=\"full-width\" fxLayoutAlign=\"space-around center\">\r\n                                <div>\r\n                                    <div>\r\n                                        <button mat-icon-button style=\"float: right;padding-top: 8px;\r\n                                         padding-left: 30px; cursor: pointer;\" >\r\n                                          <input type=\"file\" #profileFile input type=\"file\" \r\n                                          (change)=\"profileChange($event)\" \r\n                                           accept=\"image/png, image/gif, image/jpg, image/jpeg\" class=\"inputStyle\">\r\n                                   \r\n                                           <mat-icon  color=\"primary\">edit</mat-icon>\r\n                                        </button>\r\n                                    </div>\r\n                                    <ng-container *ngIf=\"imageURL == 'not_available'; else showAvatar\">\r\n                                        <img class=\"formImg\" [src]=\"'assets/images/type2.png'\" alt=\"\">\r\n                                    </ng-container>\r\n                                    <ng-template #showAvatar>\r\n                                        <img class=\"formImg\" [src]=\"imageURL\" alt=\"\">\r\n                                    </ng-template>\r\n                                </div>\r\n                        \r\n                                <div class=\"ml-87\">\r\n                                    <!-- <mat-icon *ngIf=\"disableDeletebtn\" style=\"margin-left: 400%;cursor: pointer;color: red;\"(click)=\"deleteProfileImg()\"\r\n                                                >delete</mat-icon> -->\r\n                                                <button mat-icon-button  color=\"warn\" \r\n                                                        [disabled]=\"!disableDeletebtn\" (click)=\"deleteProfileImg()\" >\r\n                                                        <mat-icon >delete</mat-icon>\r\n                                                </button>\r\n                                </div>\r\n                                <!-- <div style=\"padding: 1rem 0;\">\r\n                                    <div\r\n                                        style=\"text-decoration: underline;text-align: center;color: #2680EB;position: relative;height: 30px;line-height: 30px;cursor: pointer;padding-right: 2px;\">\r\n                                        Corporate\r\n                                        <input type=\"file\" input type=\"file\" (change)=\"profileChange($event)\"\r\n                                            accept=\"image/png, image/gif, image/jpg, image/jpeg\"\r\n                                            style=\"opacity: 0.0;top: 0;left: 0;bottom: 0;right: 0;position: absolute;width:100%;height: 100%;text-align: center;cursor: pointer;\">\r\n                                    </div>\r\n                                </div> -->\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div fxFlex=\"5%\">\r\n\r\n                        </div>\r\n\r\n                        <div fxFlex=\"70%\" fxLayoutGap=\"10px\">\r\n                            <div fxLayout=\"row\" fxLayoutGap=\"100px\">\r\n\r\n                                <!-- <div class=\"flex-grow-1\" id=\"fech\">\r\n                                    <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                                      <div>\r\n                                        <mat-hint>CIF Number</mat-hint>\r\n                                        <mat-card type=\"input\" class=\"widthCard inputMatcard\">\r\n                                          <input matInput formControlName=\"cifNumber\" class=\"alignment\" type=\"number\" min=\"0\"\r\n                                            oninput=\"validity.valid||(value='');\" name=\"cifNumber\" value=\"cifNumber\">\r\n                                        </mat-card>\r\n                                      </div>\r\n                      \r\n                                    </div>\r\n                                    <div class=\"flex-grow-1\" class=\"fechButtonDiv\">\r\n                                      <p class=\"fetchButton\" (click)=\"autofillDetails()\">Fetch</p>\r\n                                    </div>\r\n                                  </div> -->\r\n\r\n                                  <div fxFlex=\"40%\" id=\"fech\" class=\"form-group\" style=\"padding-left: 13px;\">\r\n                                      <table>\r\n                                          <tr>\r\n                                              <td>\r\n                                                <div>\r\n                                                    <!-- <app-create-director \r\n                                                   [CoroprationData]=\"CoroprationData\" >\r\n                                                 </app-create-director> -->\r\n\r\n                                                    <!-- <label for=\"forcorporateId\" class=\"hint\">Corporate Id </label>\r\n                                                    <mat-form-field class=\"full-width\" floatLabel=\"never\">\r\n                                                          <input matInput name=\"corporateId\" formControlName=\"corporateId\" placeholder=\"Corporate Id\" />\r\n                                                      </mat-form-field> -->\r\n                                                      <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                                        <mat-label>Corporate Id</mat-label>\r\n                                                        <input matInput name=\"corporateId\" placeholder=\"Corporate Id\" formControlName=\"corporateId\"/>\r\n                                                        </mat-form-field>\r\n                                                      <!-- <mat-error\r\n                                                          *ngIf=\"onboardingPrimary.get('corporateId').touched && !onboardingPrimary.get('corporateId').valid\">\r\n                                                         <small> Corporate Id is Required!</small> \r\n                                                      </mat-error> -->\r\n                                                  </div>\r\n                                              </td>\r\n                                              <div style=\"margin-top: 25px;\">\r\n                                                <td>\r\n                                                    <div class=\"fechButtonDiv float-end\">\r\n                                                        <p class=\"fetchButton\" (click)=\"getCoropratedetails(onboardingPrimary.get('corporateId').value)\">Fetch</p>\r\n                                                      </div>\r\n                                                  </td>\r\n                                                  <td>\r\n                                                    <div class=\"fechButtonDiv float-end\">\r\n                                                        <p class=\"fetchButton\" (click)=\"resetCorprateOnboarding()\">Reset</p>\r\n                                                      </div>\r\n                                                  </td>\r\n                                              </div>\r\n                                          </tr>\r\n                                      </table>\r\n                                </div>\r\n\r\n                                <div fxFlex=\"40%\" class=\"form-group\">\r\n                                    <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                    <mat-label for=\"forCompanyName\" class=\"hint\">Company Name* </mat-label>\r\n                                    <!-- <mat-card> -->\r\n                                        <input matInput name=\"companyName\" formControlName=\"companyName\"   placeholder=\"Company Name\" />\r\n                                    <!-- </mat-card> -->\r\n                                    <mat-error\r\n                                        *ngIf=\"onboardingPrimary.get('companyName').touched && !onboardingPrimary.get('companyName').valid\">\r\n                                       <small> Company Name is Required!</small> \r\n                                    </mat-error>\r\n                                    </mat-form-field>\r\n                                </div>\r\n                            </div>\r\n                            <div fxLayout=\"row\" fxLayoutGap=\"100px\">\r\n                                <div fxFlex=\"40%\" class=\"form-group\">\r\n                                    <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                    <mat-label for=\"forCategory\" class=\"hint\">Category</mat-label>\r\n                                  <!-- <mat-card class=\"catagory\" [ngClass]=\"{'error':  !onboardingPrimary.get('category').valid  && onboardingPrimary.get('category').touched }\"> -->\r\n                                        <mat-select formControlName=\"category\" id=\"forCategory\" required >\r\n                                            <!-- <mat-option value=\"\">Select Category</mat-option> -->\r\n                                            <mat-option *ngFor=\"let category of categoryArr\" [value]=\"category\">\r\n                                                {{category}}\r\n                                            </mat-option>\r\n                                        </mat-select>\r\n                                        <!-- <mat-placeholder class=\"placeholder\" >Select Category </mat-placeholder> -->\r\n                                  <!-- </mat-card> -->\r\n                                    <mat-error\r\n                                        *ngIf=\"onboardingPrimary.get('category').touched && !onboardingPrimary.get('category').valid\">\r\n                                        <small>Please select Category!</small> \r\n                                    </mat-error>\r\n                                    </mat-form-field>\r\n                                </div>\r\n                            \r\n                            \r\n                                <div fxFlex=\"40%\" class=\"form-group\">\r\n                                    <mat-form-field appearance=\"outline\" class=\"full-width\" floatLabel=\"never\" \r\n                                    [ngClass]=\"{'error': onboardingPrimary.get('country').touched && !onboardingPrimary.get('country').valid}\">\r\n                                    <mat-label for=\"forCountry\" class=\"hint\">Country</mat-label>\r\n                                  <!-- <mat-card floatLabel=\"never\" [ngClass]=\"{'error': onboardingPrimary.get('country').touched && !onboardingPrimary.get('country').valid}\"> -->\r\n                                        <mat-select formControlName=\"country\" id=\"forCountry\" required>\r\n                                            <!-- <mat-option value=\"\">Select Country</mat-option> -->\r\n                                            <mat-option *ngFor=\"let country of countryArr\" [value]=\"country\">\r\n                                                {{country}}\r\n                                            </mat-option>\r\n                                        </mat-select>\r\n                                        <!-- <mat-placeholder class=\"placeholder\" >Select Country </mat-placeholder> -->\r\n                                  <!-- </mat-card> -->\r\n                                  <!-- <mat-placeholder class=\"placeholder\" >Select Country </mat-placeholder> -->\r\n                                    <mat-error\r\n                                    *ngIf=\"onboardingPrimary.get('country').touched && !onboardingPrimary.get('country').valid\">\r\n                                    <small>Please select Country!</small> \r\n                                </mat-error>\r\n                                    </mat-form-field>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </mat-card-content>\r\n\r\n                </mat-card>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"button\">\r\n        <button mat-button class=\"Back\" (click)=\"previous()\" >Back</button>\r\n        <button mat-stroked-button class=\"Next\" [disabled]=\"onboardingPrimary.invalid\"\r\n        (click)=\"onSubmit(onboardingPrimary.value)\"  >Next</button>\r\n        \r\n    </div>\r\n</form>","import { FormArray, FormGroup, Validators } from '@angular/forms';\r\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { MatTabChangeEvent } from '@angular/material/tabs';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ApiService } from 'app/shared/services/api.service';\r\nimport { CorporateOnboardingService } from '../corporate-onboarding.service';\r\nimport * as moment from 'moment';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { DialogService } from 'app/shared/services/dialogs/dialog.service';\r\nimport { LocalStoreService } from 'app/shared/services/local-store.service';\r\n\r\n@Component({\r\n  selector: 'app-other-info-corporate',\r\n  templateUrl: './other-info-corporate.component.html',\r\n  styleUrls: ['./other-info-corporate.component.scss']\r\n})\r\nexport class OtherInfoCorporateComponent implements OnInit {\r\n  otherInfoFormGroup: FormGroup;\r\n\r\n  documentTypeList: string[];\r\n  idTypeList: string[];\r\n\r\n  countryList: string[];\r\n  genderList: string[];\r\n  residenceList: string[];\r\n  nationalityList: string[];\r\n  organizationTypeList: any = ['Public', 'Private'];\r\n  typeOfOwnershipList: any = ['Independent', 'Dependent'];\r\n  addressTypeList: any = ['Registration'];\r\n  localityList: any = ['Bangalore', 'Mangalore'];\r\n  kycStatusList: any = ['APPROVED', 'BACKLOG', 'INITIATED', 'REJECTED'];\r\n  corporateId: any;\r\n  arrayCountry: string[];\r\n  arrayState: string[];\r\n  arrayCity: string[];\r\n  otherDocumentArray: any[] = [];\r\n  selectedDocumentTypes: any[] = [];\r\n  selectedOptions: any[] = [];\r\n  isAllSameDigitVal: boolean=false;\r\n  profilePicture: any;\r\n  profileURL: string | ArrayBuffer;\r\n  nameOfDocument:  any[] = [];\r\n  isExistingCustomer:boolean=false;\r\n  constructor(private router: Router,\r\n    private formBuilder: FormBuilder,\r\n    private dialogService: DialogService,\r\n    private corporateService: CorporateOnboardingService,\r\n    private cdr: ChangeDetectorRef, private snack: MatSnackBar,\r\n    private ls: LocalStoreService,\r\n    \r\n    private apiService: ApiService) {\r\n    this.otherInfoFormGroup = this.formBuilder.group({\r\n      corporateId: [''],\r\n      organizationType: [''],\r\n      typeOfOwnership: [''],\r\n      kycReference: [''],\r\n      KycStatus: [''],\r\n      corporateRegisterAddress: formBuilder.array([]),\r\n      corporateDocs: formBuilder.array([])\r\n    })\r\n    // this.corporateService.stepReady(this.otherInfoFormGroup, 'five')\r\n    this.addAddress();\r\n    this.getCountryName(\"country\");\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.isExistingCustomer=this.ls.getItem('CorporateExistingCustomer')\r\n    this.corporateService.corporateAccountIdVal\r\n      .subscribe(corporateId => {\r\n        this.corporateId = corporateId;\r\n        console.log('corporateId :: ', this.corporateId);\r\n        this.otherInfoFormGroup.get('corporateId').setValue(corporateId)\r\n        if(this.corporateId){\r\n          this.getCoropratedetails(this.corporateId);\r\n        }\r\n      });\r\n    this.getDoc();\r\n    this.addDocument();\r\n    if(this.isExistingCustomer===true){\r\n        var kycValues=this.ls.getItem('KycValues')\r\n        this.otherInfoFormGroup.get('KycStatus').setValue(kycValues.kycStatus);\r\n        this.otherInfoFormGroup.get('kycReference').setValue(kycValues.kycReference);\r\n    }\r\n  }\r\n\r\n\r\n  get getDocumentList() {\r\n    return this.otherInfoFormGroup.get('corporateDocs') as FormArray;\r\n  }\r\n\r\n  addDocument() {\r\n    this.getDocumentList.push(this.formBuilder.group({\r\n      documentType: [''],\r\n      documentName: ['', [Validators.required]],\r\n      fileData: ['']\r\n    }));\r\n  }\r\n\r\n  get getAddressData() {\r\n    return this.otherInfoFormGroup.get('corporateRegisterAddress') as FormArray;\r\n  }\r\n\r\n  addAddress() {\r\n    this.getAddressData.push(this.formBuilder.group({\r\n      addressType: [''],\r\n      address1: ['', [Validators.required]],\r\n      address2: ['', [Validators.required]],\r\n      city: [''],\r\n      state: [''],\r\n      country: [''],\r\n      zipCode: ['', [Validators.required,Validators.minLength(6), Validators.maxLength(10)]],\r\n    }));\r\n  }\r\n\r\n  _keyPress(event: any) {\r\n    const pattern = /[0-9]/;\r\n    let inputChar = String.fromCharCode(event.charCode);\r\n    if (!pattern.test(inputChar)) {\r\n      event.preventDefault();\r\n\r\n    }\r\n  }\r\n\r\n  deleteDocument(item, i) {\r\n    console.log('delete record :: ', item, ' index :: ', i);\r\n    this.getDocumentList.removeAt(i);\r\n  }\r\n\r\n  getCountryName(key: string) {\r\n    this.apiService.getAllCountries().subscribe((data: any) => {\r\n     for(let i=0; i<data.length;i++){\r\n       if(data[i].authStatus==='A'){     \r\n         this.arrayCountry.push(data[i].countryName);\r\n       }\r\n     }\r\n   });\r\n }\r\n\r\n getStateName(country) {\r\n  this.apiService.getAllCountries().subscribe((data: any) => {\r\n    for(let i=0; i<data.length;i++){       \r\n      if(data[i].countryName == country){\r\n        this.apiService.getStateByCountryId(data[i].id).subscribe((resp: any) => {\r\n        this.arrayState = resp\r\n        })\r\n        break;   \r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n\r\n  getCityName(state: any) {\r\n    console.log(state)\r\n    this.apiService.getDropDownValues1(\"city\", state).subscribe((data) => {\r\n      this.arrayCity = data;\r\n      console.log(\"-->\", this.arrayCity)\r\n    });\r\n  }\r\n\r\n  onOtherDocSelect(files: FileList, idx: any, fileName: String) {\r\n    console.log(\"Filelisttt\", files);\r\n    console.log(\"cheeck::\",this.otherInfoFormGroup)\r\n    this.otherDocumentArray.push(files.item(0));\r\n    this.otherInfoFormGroup.get('corporateDocs')['controls'][idx].controls.documentName.setValue(fileName);\r\n\r\n    let reader = new FileReader();\r\n    reader.readAsDataURL(files.item(0));\r\n    reader.onload = (event2) => {\r\n      console.log(\"doc upload check\");\r\n      console.log(\"jaskd\", this.otherInfoFormGroup.get('corporateDocs')['controls'][idx].controls.fileData)\r\n\r\n      this.otherInfoFormGroup.get('corporateDocs')['controls'][idx].controls.fileData.setValue(reader.result);\r\n    };\r\n\r\n  }\r\n  // public profileChange(event) {\r\n  //   console.log(\"profile\", event);\r\n  //   this.profilePicture = event.target.files[0];\r\n  //   let reader = new FileReader();\r\n  //   reader.readAsDataURL(event.target.files[0]);\r\n  //   reader.onload = (event2) => {\r\n  //     // this.imgUrl = reader.result;\r\n  //     //this.fun(event.target.files[0], this.profilePicture);\r\n  //     // this.imageURL = reader.result;\r\n  //     // console.log(\"Profile Test:: \",this.imageURL)\r\n  //     this.profileURL = reader.result;\r\n  //     console.log(\"Profile Image Test:: \", reader.result)\r\n  //   };\r\n  // }\r\n\r\n  getCoropratedetails(e){\r\n    this.apiService.getCoropratedetails(e).subscribe((details => {\r\n      console.log(details.corporateDocs.length);\r\n      this.nameOfDocument=details.corporateDocs\r\n      \r\n      for(let i=0;i<details.corporateDocs.length;i++){\r\n       if(details.corporateDocs.length>1 && details.corporateDocs[i].documentName !==\"profile\" ){\r\n        \r\n          this.otherInfoFormGroup.patchValue(details); \r\n          this.otherInfoFormGroup.controls.corporateDocs['controls'][i].controls.documentType.setValue(this.documentTypeList[i+1]);\r\n          this.otherInfoFormGroup.controls.corporateDocs['controls'][i].controls.fileData.setValue(details.corporateDocs[i+1].fileUrl); \r\n   \r\n        }\r\n       \r\n       \r\n       \r\n      }\r\n    \r\n      this.getStateName(details.corporateAddress[0].country)\r\n      this.getCityName(details.corporateAddress[0].state)\r\n    }))\r\n    }\r\n\r\n  onSubmit(otherInfoFormGroup) {\r\n    console.log(\"otherInfoFormGroup BEFORE:: \", otherInfoFormGroup);\r\n    let obj = {}\r\n    Object.keys(otherInfoFormGroup).map(function (key, index) {\r\n      if (key != 'corporateDocs') {\r\n        obj[key] = otherInfoFormGroup[key]\r\n      }\r\n    });\r\n    console.log('doc legth :: ', this.otherDocumentArray)\r\n    console.log(\"otherInfoFormGroup after:: \", obj);\r\n\r\n    this.corporateService.saveOrUpdateCorporateAccountInfo(obj)\r\n      .subscribe(data => {\r\n        console.log('data :: ', data);\r\n        if (data != null) {\r\n          for (let i = 0; i < this.otherInfoFormGroup.get('corporateDocs').value.length; i++) {\r\n            if (this.otherDocumentArray.length > 0) {\r\n              let documentToBeUploaded: any = {};\r\n              documentToBeUploaded.documentName = this.otherInfoFormGroup.get('corporateDocs').value[i].documentType;\r\n              documentToBeUploaded.documentType = 2;\r\n              documentToBeUploaded.fileType = this.otherDocumentArray[i].type;\r\n              documentToBeUploaded.fileName = this.otherDocumentArray[i].name;\r\n              documentToBeUploaded.corporateId = data.corporateId;\r\n              documentToBeUploaded.id = this.otherDocumentArray[i].id;\r\n              const uploadData = new FormData();\r\n              uploadData.append('data', JSON.stringify(documentToBeUploaded));\r\n              uploadData.append('file', this.otherDocumentArray[i]);\r\n              this.apiService.uploadCorporateDocument(uploadData).subscribe((resp) => {\r\n                console.log(resp);\r\n              });\r\n            }\r\n          }\r\n          this.updateCorporateStatus(data.corporateId);\r\n          this.dialogService.customerOnboardingSuccessDialogue('CORPORATE', this.corporateId);\r\n          this.otherInfoFormGroup.reset();\r\n          this.ls.removeItem('corporateId');\r\n          this.ls.removeItem('corporateTabIndex');\r\n          this.corporateService.setnoOfDirectors(null);\r\n          // this.snack.open(`Other information saved`+ ' !', 'OK', {\r\n          //   duration: 4000,\r\n          //   verticalPosition: 'top',\r\n          //   horizontalPosition: 'right'\r\n          // });\r\n          this.cdr.markForCheck();\r\n          \r\n        } else {\r\n          this.snack.open('Not able to connect to server!', 'INTERNAL SERVER ERROR', {\r\n            duration: 4000,\r\n            verticalPosition: 'top',\r\n            horizontalPosition: 'right'\r\n          });\r\n        }\r\n      }, error => {\r\n        console.log('error resp :: ', error);\r\n        this.snack.open(`${error.error.message} `, 'OK', {\r\n          duration: 4000,\r\n          verticalPosition: 'top',\r\n          horizontalPosition: 'right'\r\n        });\r\n      });\r\n  }\r\n\r\n  previous() {\r\n    this.corporateService.sendDisableMatTab({\r\n      index: 3,\r\n    });\r\n  }\r\n\r\n  next() {\r\n    // this.corporateService.sendDisableMatTab({\r\n    //   index: 4,\r\n    // });\r\n    this.corporateService.setFinishFlag({\r\n      finishFlag: true,\r\n    });\r\n  }\r\n  updateCorporateStatus(corporateId) {\r\n    console.log('corporateId :: ', corporateId);\r\n    this.apiService.updateCorporateSatatus(corporateId, 'INITIATED')\r\n      .subscribe(data => {\r\n        console.log('update response :: ', data)\r\n      })\r\n  }\r\n\r\n\r\n\r\n  getDoc() {\r\n    this.apiService.getDropDownValues(\"document_type\").subscribe((data) => {\r\n      this.documentTypeList = data;\r\n    });\r\n    this.apiService.getDropDownValues(\"document_name\").subscribe((resp) => {\r\n      this.idTypeList = resp;\r\n    });\r\n    this.apiService.getDropDownValues(\"country\").subscribe((responseData) => {\r\n      this.countryList = responseData;\r\n    });\r\n    this.apiService.getDropDownValues(\"gender\").subscribe((responseDatas) => {\r\n      this.genderList = responseDatas;\r\n    });\r\n    this.apiService.getDropDownValues(\"residence\").subscribe((responses) => {\r\n      this.residenceList = responses;\r\n    });\r\n    this.apiService.getDropDownValues(\"nationality\").subscribe((datas) => {\r\n      this.nationalityList = datas;\r\n    });\r\n  }\r\n\r\n  isDocumentOptionDisabled = (value) => {\r\n    return this.selectedOptions.includes(value);\r\n  }\r\n\r\n  changeValue(value: any, index) {\r\n\r\n    console.log(index);\r\n    if (this.selectedDocumentTypes[index]) {\r\n      this.selectedOptions = this.selectedOptions.filter(val => val !== this.selectedDocumentTypes[index])\r\n    }\r\n    this.selectedDocumentTypes[index] = value;\r\n\r\n    console.log(value)\r\n    this.selectedOptions.push(value);\r\n    // this.arrayDocumentType = this.arrayDocumentType.filter(document => document !== value);\r\n  }\r\n\r\n  isAllSameDigit(event) {\r\n    let count = 0, number = event.target.value;\r\n    if (number != '') {\r\n      for (var i = 0; i < number.length; i++) {\r\n        if (0 == number[i]) {\r\n          count++;\r\n        }\r\n      }\r\n      if (count == number.length) {\r\n        this.isAllSameDigitVal = true;\r\n      }\r\n      else {\r\n        this.isAllSameDigitVal = false;\r\n      }\r\n    }else {\r\n      this.isAllSameDigitVal = false;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","<form [formGroup]=\"otherInfoFormGroup\" ngNativeValidate>\r\n    <div class=\"full-width\">\r\n        <div style=\"padding: 1rem 0;background-color:#F1F1F4\">\r\n            <div style=\"padding: 0 4.3rem\">\r\n                <mat-card style=\"border-radius: 0px;\">\r\n                    <div fxLayout=\"column\" class=\"full-width\" fxLayoutAlign=\"space-around start\">\r\n                        <div class=\"full-width\" style=\"padding: 1rem 1rem;\">\r\n                            <h2 style=\"font-size: 18px;\">Other Information</h2>\r\n                            <mat-divider style=\"width:70px;border-bottom: 7px solid #456EFE;left: 30px; border-radius: 30px;\">\r\n                            </mat-divider>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n                    <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n                            <div fxFlex=\"50\">\r\n                                <fieldset\r\n                                    style=\"border-top: 1px solid lightgray;margin-left: 20px; margin-right: 20px;\">\r\n                                    <legend visible=\"true\">Organization Information</legend>\r\n                                    <div fxLayout=\"row wrap\">\r\n                                        <div fxFlex=\"100\" fxLayoutGap=\"20px\" class=\"padding\">\r\n\r\n                                            <div fxFlex=\"50\" class=\"form-group\">\r\n\r\n                                                <!-- <label for=\"forOrganizationType\" class=\"hint\">Organization Type*</label> -->\r\n                                                <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                                    <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                                        <mat-label>Organization Type</mat-label>\r\n\r\n                                                    <mat-select id=\"forOrganizationType\"\r\n                                                        formControlName=\"organizationType\" required>\r\n                                                        <!-- <mat-option disabled>select---</mat-option> -->\r\n                                                        <mat-option *ngFor=\"let orgType of organizationTypeList\"\r\n                                                            [value]=\"orgType\">\r\n                                                            {{orgType}}\r\n                                                        </mat-option>\r\n                                                    </mat-select>\r\n                                                    <!-- <mat-placeholder class=\"placeholder\">Organization Type\r\n                                                    </mat-placeholder> -->\r\n                                                </mat-form-field>\r\n                                                <mat-error\r\n                                                    *ngIf=\"otherInfoFormGroup.get('organizationType').touched && !otherInfoFormGroup.get('organizationType').valid\">\r\n                                                    <small>OrganizationType is Required!</small>\r\n                                                </mat-error>\r\n                                            </div>\r\n                                            <div fxFlex=\"50\" class=\"form-group\">\r\n                                                <!-- <label for=\"forTypeOfOwnership\" class=\"hint\">Type Of Ownership*</label> -->\r\n                                                <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                                    <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                                        <mat-label>Type Of Ownership</mat-label>\r\n                                                    <mat-select id=\"forTypeOfOwnership\"\r\n                                                        formControlName=\"typeOfOwnership\" required>\r\n                                                        <!-- <mat-option disabled>select---</mat-option> -->\r\n                                                        <mat-option *ngFor=\"let typeOfOwnership of typeOfOwnershipList\"\r\n                                                            [value]=\"typeOfOwnership\">\r\n                                                            {{typeOfOwnership}}\r\n                                                        </mat-option>\r\n                                                    </mat-select>\r\n                                                    <!-- <mat-placeholder class=\"placeholder\">Type Of Ownership\r\n                                                    </mat-placeholder> -->\r\n                                                </mat-form-field>\r\n                                                <mat-error\r\n                                                    *ngIf=\"otherInfoFormGroup.get('typeOfOwnership').touched && !otherInfoFormGroup.get('typeOfOwnership').valid\">\r\n                                                    <small>Type Of Ownership is Required!</small>\r\n                                                </mat-error>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                </fieldset>\r\n                            </div>\r\n                            <div fxFlex=\"50\">\r\n                                <fieldset\r\n                                    style=\"border-top: 1px solid lightgray;margin-left: 20px; margin-right: 20px;\">\r\n                                    <legend visible=\"true\">KYC Information</legend>\r\n                                    <div fxLayout=\"row wrap\">\r\n                                        <div fxFlex=\"100\" fxLayoutGap=\"20px\" class=\"padding\">\r\n                                            <div fxFlex=\"50\" class=\"form-group\">\r\n\r\n                                                <!-- <label for=\"forkycStatus\" class=\"hint\">KYC Status</label> -->\r\n                                                <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                                    <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                                        <mat-label>KYC Status</mat-label>\r\n                                                    <input *ngIf=\"isExistingCustomer\" matInput id=\"forkycStatus\" readonly \r\n                                                           formControlName=\"KycStatus\"/>\r\n                                                    <mat-select *ngIf=\"!isExistingCustomer\" id=\"forkycStatus\" formControlName=\"KycStatus\">\r\n\r\n                                                        <!-- <mat-option disabled>select---</mat-option> -->\r\n                                                        <mat-option *ngFor=\"let kycStat of kycStatusList\"\r\n                                                            [value]=\"kycStat\">\r\n                                                            {{kycStat}}\r\n                                                        </mat-option>\r\n                                                    </mat-select>\r\n                                                    <!-- <mat-placeholder class=\"placeholder\">KYC Status </mat-placeholder> -->\r\n                                                </mat-form-field>\r\n                                                <!-- <mat-error *ngIf=\"otherInfoFormGroup.controls['KycStatus'] && otherInfoFormGroup.controls['KycStatus'].touched && !otherInfoFormGroup.controls['KycStatus'].valid\">\r\n                                                    \r\n                                                    <small>KYC Status is Required!</small>\r\n                                                </mat-error> -->\r\n                                            </div>\r\n                                            <div fxFlex=\"50\" class=\"form-group\">\r\n\r\n                                                <!-- <label for=\"forkycReference\" class=\"hint\">KYC Reference</label> -->\r\n                                                <!-- <mat-form-field floatLabel=\"never\"> -->\r\n                                                    <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                                        <mat-label>KYC Reference</mat-label>\r\n\r\n\r\n                                                    <input matInput [readonly]=\"isExistingCustomer\" id=\"forkycReference\" formControlName=\"kycReference\" >\r\n                                                    <!-- <mat-placeholder class=\"placeholder\">KYC Reference\r\n                                                    </mat-placeholder> -->\r\n                                                </mat-form-field>\r\n                                                <!-- <mat-error\r\n                                                    *ngIf=\"otherInfoFormGroup.get('kycReference').touched && !otherInfoFormGroup.get('kycReference').valid\">\r\n                                                    <small>KYC Reference is Required!</small>\r\n                                                </mat-error> -->\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </fieldset>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- <div formArrayName=\"corporateAddress\">\r\n                        <div *ngFor=\"let item of otherInfoFormGroup.get('corporateAddress')['controls']; let i = index;\"\r\n                            [formGroupName]=\"i\">\r\n                            <fieldset style=\"border-top: 1px solid lightgray;margin-left: 20px; margin-right: 20px;\">\r\n                                <legend visible=\"true\">Registration Address</legend>\r\n                                <div fxLayout=\"row wrap\">\r\n                                    <div fxFlex=\"100\" fxLayoutGap=\"50px\" class=\"padding\">\r\n\r\n                                        <div fxFlex=\"20\" class=\"form-group\">\r\n\r\n                                            <label for=\"foraddressType\" class=\"hint\">Address Type*</label>\r\n                                            <mat-form-field floatLabel=\"never\">\r\n\r\n                                                <mat-select id=\"foraddressType\" formControlName=\"addressType\" required>\r\n                                                    <mat-option disabled>select---</mat-option>\r\n                                                    <mat-option *ngFor=\"let addrsType of addressTypeList\"\r\n                                                        [value]=\"addrsType\">\r\n                                                        {{addrsType}}\r\n                                                    </mat-option>\r\n                                                </mat-select>\r\n                                                <mat-placeholder class=\"placeholder\">Address Type </mat-placeholder>\r\n                                            </mat-form-field>\r\n                                            <mat-error\r\n                                                *ngIf=\"item.get('addressType').touched && !item.get('addressType').valid\">\r\n                                                <small>AddressType is Required!</small>\r\n                                            </mat-error>\r\n                                        </div>\r\n                                        <div fxFlex=\"40\" class=\"form-group\">\r\n\r\n                                            <label for=\"foraddress1\" class=\"hint\">Address Line 1*</label>\r\n                                            <mat-form-field floatLabel=\"never\">\r\n\r\n                                                <input matInput id=\"foraddress1\" formControlName=\"address1\">\r\n                                                <mat-placeholder class=\"placeholder\">Address Line 1 </mat-placeholder>\r\n                                            </mat-form-field>\r\n\r\n                                            <mat-error\r\n                                                *ngIf=\"item.get('address1').touched && !item.get('address1').valid\">\r\n                                                <small>Address Line 1 is Required!</small>\r\n                                            </mat-error>\r\n                                        </div>\r\n\r\n                                        <div fxFlex=\"40\" class=\"form-group\">\r\n\r\n                                            <label for=\"foraddress2\" class=\"hint\">Address Line 2*</label>\r\n                                            <mat-form-field floatLabel=\"never\">\r\n\r\n                                                <input matInput id=\"foraddress2\" formControlName=\"address2\">\r\n                                                <mat-placeholder class=\"placeholder\">Address Line 2 </mat-placeholder>\r\n                                            </mat-form-field>\r\n                                            <mat-error\r\n                                                *ngIf=\"item.get('address2').touched && !item.get('address2').valid\">\r\n                                                <small>Address Line 2 is Required!</small>\r\n                                            </mat-error>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                                <div fxLayout=\"row wrap\">\r\n                                    <div fxFlex=\"100\" fxLayoutGap=\"20px\" class=\"padding\">\r\n\r\n                                        <div fxFlex=\"25\" class=\"form-group\">\r\n                                            <label for=\"forcountry\" class=\"hint\">Country*</label>\r\n                                            <mat-form-field floatLabel=\"never\">\r\n                                                <mat-select id=\"forcountry\" formControlName=\"country\"\r\n                                                    (selectionChange)=\"getStateName($event.value)\"\r\n                                                     required>\r\n                                                    <mat-option disabled>select---</mat-option>\r\n                                                    <mat-option *ngFor=\"let country of arrayCountry\" [value]=\"country\">\r\n                                                        {{country}}\r\n                                                    </mat-option>\r\n                                                </mat-select>\r\n                                                <mat-placeholder class=\"placeholder\">Country </mat-placeholder>\r\n                                            </mat-form-field>\r\n\r\n                                            <mat-error\r\n                                                *ngIf=\"item.get('country').touched && !item.get('country').valid\">\r\n                                                <small>Country is Required!</small>\r\n                                            </mat-error>\r\n\r\n                                        </div>\r\n\r\n                                        <div fxFlex=\"25\" class=\"form-group\">\r\n                                            <label for=\"forstate\" class=\"hint\">State* </label>\r\n                                            <mat-form-field floatLabel=\"never\">\r\n                                                <mat-select id=\"forstate\" formControlName=\"state\"\r\n                                                    (selectionChange)=\"getCityName($event.value)\" required>\r\n                                                    <mat-option disabled>select---</mat-option>\r\n                                                    <mat-option *ngFor=\"let state of arrayState\" [value]=\"state.value1\">\r\n                                                        {{state.value1}}\r\n                                                    </mat-option>\r\n                                                </mat-select>\r\n                                                <mat-placeholder class=\"placeholder\">State </mat-placeholder>\r\n                                            </mat-form-field>\r\n                                            <mat-error *ngIf=\"item.get('state').touched && !item.get('state').valid\">\r\n                                                <small>State is Required!</small>\r\n                                            </mat-error>\r\n                                        </div>\r\n\r\n                                        <div fxFlex=\"25\" class=\"form-group\">\r\n                                            <label for=\"forCity\" class=\"hint\">City* </label>\r\n                                            <mat-form-field floatLabel=\"never\">\r\n                                                <mat-select id=\"forCity\" formControlName=\"city\" required>\r\n                                                    <mat-option disabled>select---</mat-option>\r\n                                                    <mat-option *ngFor=\"let city of arrayCity\" [value]=\"city.value1\">\r\n                                                        {{city.value1}}\r\n                                                    </mat-option>\r\n                                                </mat-select>\r\n                                                <mat-placeholder class=\"placeholder\">City </mat-placeholder>\r\n                                            </mat-form-field>\r\n                                            <mat-error *ngIf=\"item.get('city').touched && !item.get('city').valid\">\r\n                                                <small>City is Required!</small>\r\n                                            </mat-error>\r\n                                        </div>\r\n                                        <div fxFlex=\"25\" class=\"form-group\">\r\n\r\n                                            <label for=\"forzipCode\" class=\"hint\">Zipcode*</label>\r\n                                            <mat-form-field floatLabel=\"never\">\r\n\r\n                                                <input matInput id=\"forzipCode\"minlength=\"6\" maxlength=\"10\"\r\n                                                 formControlName=\"zipCode\" (keyup)=\"isAllSameDigit($event)\" (keypress)=\"_keyPress($event)\" >\r\n                                                <mat-placeholder class=\"placeholder\" >ZipCode </mat-placeholder>\r\n                                            </mat-form-field>\r\n                                            <mat-error\r\n                                                *ngIf=\"item.get('zipCode').touched && !item.get('zipCode').valid\">\r\n                                                <small>Please enter Zip Code!</small>\r\n                                            </mat-error>\r\n                                            \r\n                                         \r\n                                            <mat-error *ngIf=\"isAllSameDigitVal\">\r\n                                                <small>Please enter valid ZipCode!</small>\r\n                                            </mat-error>\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n                        </div>\r\n                    </div> -->\r\n\r\n                    <div formArrayName=\"corporateDocs\">\r\n                        <div *ngFor=\"let item of otherInfoFormGroup.get('corporateDocs')['controls']; let i = index;\"\r\n                            [formGroupName]=\"i\">\r\n\r\n                            <!-- style=\"border-top: 1px solid lightgray;margin-left: 20px; margin-right: 20px;\" -->\r\n                            <fieldset [ngClass]=\"i == 0 ? 'fieldSetZeroIndex' : 'fieldSetNextIndex'\">\r\n                                <legend visible=\"true\" *ngIf='i==0'>Document Upload</legend>\r\n                                <div fxLayout=\"row wrap\">\r\n                                    <div fxFlex=\"100\" fxLayoutGap=\"20px\" class=\"padding\">\r\n                                        <div fxFlex=\"30\" class=\"form-group\">\r\n                                            <!-- <label for=\"forDocumentType\" class=\"hint\">Document Type*</label>\r\n                                            <mat-form-field floatLabel=\"never\"> -->\r\n                                                <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n                                                    <mat-label>Document Type</mat-label>\r\n                                                <mat-select id=\"forDocumentType\" formControlName=\"documentType\" required\r\n                                                    (valueChange)=\"changeValue($event, i)\">\r\n                                                    <mat-option disabled>select---</mat-option>\r\n                                                    <mat-option *ngFor=\"let docType of documentTypeList\"\r\n                                                        [disabled]=isDocumentOptionDisabled(docType) [value]=\"docType\">\r\n                                                        {{docType}}\r\n                                                    </mat-option>\r\n                                                </mat-select>\r\n                                                <!-- <mat-placeholder class=\"placeholder\">Document Type </mat-placeholder> -->\r\n                                            </mat-form-field>\r\n                                            <mat-error\r\n                                                *ngIf=\"item.get('documentType').touched && !item.get('documentType').valid\">\r\n                                                <small>Document Type is Required!</small>\r\n                                            </mat-error>\r\n\r\n                                        </div>\r\n                                        <!-- <div fxFlex=\"30\" class=\"form-group\">\r\n\r\n                                            <label for=\"fordocumentName\" class=\"hint\">Document Name</label>\r\n                                            <mat-form-field floatLabel=\"never\">\r\n\r\n                                                <input matInput id=\"fordocumentName\" formControlName=\"documentName\">\r\n                                                <mat-placeholder class=\"placeholder\">Document Name </mat-placeholder>\r\n                                            </mat-form-field>\r\n                                            <mat-error\r\n                                                *ngIf=\"item.get('documentName').touched && !item.get('documentName').valid\">\r\n                                                <small>Document Name is Required!</small>\r\n                                            </mat-error>\r\n                                        </div> -->\r\n                                        <div class=\"pt20\" fxFlex=\"10%\" fxFlex.xs=\"100%\">\r\n                                            <img height=\"80px\" width=\"85px\" [src]=\"item.controls['fileData'].value\">  \r\n                                            <!-- <img height=\"80px\" width=\"85px\" [src]=\"fileUrl1\">  -->\r\n                                       </div>\r\n                               \r\n                                        <div fxFlex=\"30\" fxLayoutGap=\"5px\"\r\n                                            style=\"display: flex;margin-top: 20px;align-content: center;\">\r\n                                            <input style=\"display: none;margin-top: 20px;\" class=\"default-background\"\r\n                                                type=\"file\" name=\"fileData\" #fileData formControlName=\"fileData\"\r\n                                                (change)=\"onOtherDocSelect($event.target.files, i, fileData.files[0].name)\">\r\n                                            <button mat-button style=\"text-decoration: underline; color:#456EFE;\"\r\n                                                (click)=\"fileData.click()\" [routerLink]=\"\">Browse</button>\r\n                                            <button mat-button (click)=\"deleteDocument(item,i)\">\r\n                                                <mat-icon style=\"color: tomato;\">delete_outline</mat-icon>\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n                        </div>\r\n                        <div fxLayout=\"row wrap\">\r\n                            <div fxFlex=\"100\" fxLayoutGap=\"1px\">\r\n                                <div fxFlex=\"1\"></div>\r\n                                <div fxFlex=\"20\">\r\n                                    <button mat-button (click)=\"addDocument()\" color=\"primary\">\r\n                                        <mat-icon>add</mat-icon> ADD DOCUMENT\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </mat-card>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"button\">\r\n        <button mat-button class=\"Back\" (click)=\"previous()\">Back</button>\r\n        <button mat-stroked-button class=\"Next\" \r\n        [disabled]=\"otherInfoFormGroup.get('organizationType').invalid || \r\n            otherInfoFormGroup.get('typeOfOwnership').invalid || \r\n            otherInfoFormGroup.get('corporateDocs').invalid\"\r\n        (click)=\"onSubmit(otherInfoFormGroup.value)\">Finish</button>\r\n    </div>\r\n</form>","import { Component, OnInit, DoCheck, ChangeDetectorRef, AfterContentChecked, AfterViewChecked, AfterContentInit, ViewChild } from '@angular/core';\r\nimport { MatTabChangeEvent } from '@angular/material/tabs';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\r\nimport { MatAccordion } from '@angular/material/expansion';\r\nimport { ApiService } from 'app/shared/services/api.service';\r\nimport { CorporateOnboardingService } from '../corporate-onboarding.service';\r\nimport { LocalStoreService } from 'app/shared/services/local-store.service';\r\n\r\n@Component({\r\n  selector: 'app-director-details',\r\n  templateUrl: './director-details.component.html',\r\n  styleUrls: ['./director-details.component.scss']\r\n})\r\nexport class DirectorDetailsComponent implements OnInit, AfterViewChecked {\r\n  items: any[] = [1];\r\n  directorCount: number = 1;\r\n  @ViewChild(MatAccordion) accordion: MatAccordion;\r\n  number: number;\r\n  directorFormGroup: FormGroup;\r\n  disabledBtn:boolean=true;\r\n  totalCust: any;\r\n  constructor(private router: Router,\r\n    private formBuilder: FormBuilder,\r\n    private corporateService: CorporateOnboardingService,\r\n    private cdr: ChangeDetectorRef,\r\n    private ls: LocalStoreService,\r\n    private apiService: ApiService) { \r\n      this.directorFormGroup = this.formBuilder.group({\r\n        \"noOfDirector\": [1]\r\n      })\r\n      // this.corporateService.stepReady(this.directorFormGroup, 'two')\r\n    }\r\n\r\n\r\n  ngOnInit(): void {\r\n    console.log(\"testtt\");\r\n    console.log('items :: ', this.items.length);\r\n    this.totalCust= this.ls.getItem('totalCust');\r\n    console.log(this.totalCust);\r\n    console.log(this.items);\r\n    if(this.totalCust!=null && this.totalCust<1){\r\n      this.items.push(this.totalCust)\r\n    }\r\n    console.log(this.items);\r\n    \r\n    this.corporateService.setnoOfDirectors(this.directorFormGroup.get('noOfDirector').value);\r\n    this.directorFormGroup.valueChanges.subscribe(data=>{\r\n      console.log('data : ',data);\r\n      this.corporateService.setnoOfDirectors(data.noOfDirector);\r\n    })\r\n    this.corporateService.getfinishSave().subscribe(disSave=>{\r\n      // console.log('disSave :: ',disSave);\r\n      if(this.totalCust!=null){\r\n        this.directorFormGroup.get('noOfDirector').setValue(this.totalCust);\r\n\r\n      }\r\n      let count=0;\r\n      if(disSave.length>0){\r\n        disSave.forEach((element,key) => {\r\n          // console.log('ele :: ',element, ' key :: ',key);\r\n          if(element == true){\r\n            count++;\r\n          }\r\n        });\r\n        if(count == disSave.length){\r\n          this.disabledBtn=false;\r\n        }else{\r\n          this.disabledBtn=true;\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  onBack(form){\r\n    console.log('form :: ',form);\r\n  }\r\n\r\n  onSubmit(directorFormGroup){\r\n    console.log(\"directorFormGroup :: \",directorFormGroup);\r\n    this.next();\r\n  }\r\n\r\n  previous() {\r\n    // this.documentForm.reset();\r\n    this.corporateService.sendDisableMatTab({\r\n      index: 0,\r\n    });\r\n  }\r\n\r\n  next() {\r\n    this.corporateService.sendDisableMatTab({\r\n      index: 2,\r\n    });\r\n    this.corporateService.setFinishFlag({\r\n      finishFlag: false,\r\n    });\r\n  }\r\n  _keyPress(event: any) {\r\n    // console.log(\"key\",event);\r\n    const pattern = /[0-9]/;\r\n    let inputChar = String.fromCharCode(event.charCode);\r\n    if (!pattern.test(inputChar)) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  noOFDirector(event:any){\r\n    if(event.target.value.length === 0 && event.key == \"0\"){\r\n      event.preventDefault();\r\n   }\r\n  }\r\n//   noOfDirector(event) {\r\n//     let value = event.target.value;\r\n//     if (value != '' && value != null && value != undefined && value != ' ' && value != \" \") {\r\n//       console.log(parseInt(value));\r\n//       this.number = parseInt(value);\r\n// console.log(\"number\",this.number);\r\n//       if (this.number != NaN && this.number == 1) {\r\n//         console.log(\"1st\");\r\n//         if (this.items.length > this.number) {\r\n//           // this.items.pop();\r\n//           for (let index = this.number; index <=this.items.length; index++) {\r\n//             this.items.pop();\r\n//             }\r\n//         }\r\n//       }\r\n    \r\n//       if (this.number != NaN && this.number > 1) {\r\n//         console.log(\"2nd\");\r\n//         if (this.number > this.items.length) {\r\n//           for (let i = this.items.length + 1; i <= this.number; i++) {\r\n//             this.items.push(i);\r\n//           }\r\n//         }\r\n//         // else {\r\n//         //   for (let i = this.items.length - 1; i >= this.number; i--) {\r\n//         //     this.removeSign(i);\r\n//         //   }\r\n//         // }\r\n//         if (this.number < this.items.length) {\r\n//           console.log(\"3rd\");\r\n//           for (let index = this.number; index <=this.items.length; index++) {\r\n//             this.items.pop();\r\n//           }\r\n//         }\r\n//         this.cdr.detectChanges();\r\n//         this.cdr.markForCheck();\r\n//       }\r\n//     }\r\n//   }\r\n\r\nnoOfDirector(event) {\r\n  let value = event.target.value;\r\n  if (value != '' && value != null && value != undefined && value != ' ' && value != \" \") {\r\n    console.log(parseInt(value));\r\n    this.number = parseInt(value);\r\n    let itemLength = this.items.length;\r\n    if (this.number != NaN && this.number == 1) {\r\n      if (this.items.length > this.number) {\r\n        for (let index = this.number; index <itemLength; index++) {\r\n          this.items.pop();\r\n          }\r\n      }\r\n    }\r\n  \r\n    if (this.number != NaN && this.number > 1) {\r\n      if (this.number > this.items.length) {\r\n        for (let i = this.items.length + 1; i <= this.number; i++) {\r\n          this.items.push(i);\r\n        }\r\n      }\r\n      if (this.number < this.items.length) {\r\n        for (let index = this.number; index <itemLength; index++) {\r\n          this.items.pop();\r\n        }\r\n      }\r\n      this.cdr.detectChanges();\r\n      this.cdr.markForCheck();\r\n    }\r\n  }\r\n}\r\n\r\n  removeSign(i: number) {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n  ngAfterViewChecked() {\r\n\r\n  }\r\n\r\n}\r\n","\r\n\r\n<Form [formGroup]=\"directorFormGroup\" ngNativeValidate>\r\n    <div class=\"full-width\">\r\n        <div style=\"padding: 1rem 0; background-color: #F1F1F4;\">\r\n            <div style=\"padding: 0 4.3rem\">\r\n                <mat-card style=\"border-radius: 0px;\">\r\n                    <div fxLayout=\"column\" class=\"full-width\" fxLayoutAlign=\"space-around start\">\r\n                        <div class=\"full-width\" style=\"padding: 1rem 1rem;\">\r\n                            <h2 style=\"font-size: 18px;\">Director Details</h2>\r\n                            <mat-divider style=\"width:70px;border-bottom: 7px solid #456EFE;left: 30px; border-radius: 30px;\">\r\n                            </mat-divider>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div fxLayout=\"row wrap\" class=\"top\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"40\">\r\n                                <!-- <mat-label class=\"hint\">Number of Directors</mat-label><br> -->\r\n                                <!-- <mat-form-field class=\"noOfDirectors\" floatLabel=\"never\"> -->\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Number of Directors</mat-label>\r\n                                    <input formControlName=\"noOfDirector\" (keypress)=_keyPress($event) matInput id=\"forNoOfDirectors\"\r\n                                        placeholder=\"Enter no of directors\" (keydown)=\"noOFDirector($event)\" (keyup)=\"noOfDirector($event)\">\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <fieldset>\r\n                        <legend visible=\"true\">Details Of the Director</legend>\r\n                    </fieldset>\r\n                        \r\n                    <div class=\"top\">\r\n                        <mat-accordion class=\"custom-accordion\">\r\n                            <app-create-director *ngFor=\"let item of items\" [item]=\"item\">\r\n                            </app-create-director>\r\n                        </mat-accordion>\r\n                    </div>\r\n                </mat-card>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"button\">\r\n        <!-- -->\r\n        <button mat-button class=\"Back\" (click)=\" previous()\" >Back</button>\r\n        <button mat-stroked-button class=\"Next\"\r\n        (click)=\"onSubmit(directorFormGroup.value)\" [disabled]=\"disabledBtn\"  >Next</button>\r\n    </div>\r\n</Form>"]}