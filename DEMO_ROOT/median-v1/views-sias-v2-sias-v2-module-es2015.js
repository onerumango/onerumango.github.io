(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["views-sias-v2-sias-v2-module"],{

/***/ "./node_modules/ip-address/dist/esm/ip-address.js":
/*!********************************************************!*\
  !*** ./node_modules/ip-address/dist/esm/ip-address.js ***!
  \********************************************************/
/*! exports provided: Address4, Address6, AddressError, v6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v6", function() { return v6; });
/* harmony import */ var _lib_ipv4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/ipv4 */ "./node_modules/ip-address/dist/esm/lib/ipv4.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Address4", function() { return _lib_ipv4__WEBPACK_IMPORTED_MODULE_0__["Address4"]; });

/* harmony import */ var _lib_ipv6__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/ipv6 */ "./node_modules/ip-address/dist/esm/lib/ipv6.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Address6", function() { return _lib_ipv6__WEBPACK_IMPORTED_MODULE_1__["Address6"]; });

/* harmony import */ var _lib_address_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/address-error */ "./node_modules/ip-address/dist/esm/lib/address-error.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AddressError", function() { return _lib_address_error__WEBPACK_IMPORTED_MODULE_2__["AddressError"]; });

/* harmony import */ var _lib_v6_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/v6/helpers */ "./node_modules/ip-address/dist/esm/lib/v6/helpers.js");







const v6 = { helpers: _lib_v6_helpers__WEBPACK_IMPORTED_MODULE_3__ };
//# sourceMappingURL=ip-address.js.map

/***/ }),

/***/ "./node_modules/ip-address/dist/esm/lib/address-error.js":
/*!***************************************************************!*\
  !*** ./node_modules/ip-address/dist/esm/lib/address-error.js ***!
  \***************************************************************/
/*! exports provided: AddressError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddressError", function() { return AddressError; });
class AddressError extends Error {
    constructor(message, parseMessage) {
        super(message);
        this.name = 'AddressError';
        if (parseMessage !== null) {
            this.parseMessage = parseMessage;
        }
    }
}
//# sourceMappingURL=address-error.js.map

/***/ }),

/***/ "./node_modules/ip-address/dist/esm/lib/common.js":
/*!********************************************************!*\
  !*** ./node_modules/ip-address/dist/esm/lib/common.js ***!
  \********************************************************/
/*! exports provided: isInSubnet, isCorrect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInSubnet", function() { return isInSubnet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isCorrect", function() { return isCorrect; });
function isInSubnet(address) {
    if (this.subnetMask < address.subnetMask) {
        return false;
    }
    if (this.mask(address.subnetMask) === address.mask()) {
        return true;
    }
    return false;
}
function isCorrect(defaultBits) {
    return function () {
        if (this.addressMinusSuffix !== this.correctForm()) {
            return false;
        }
        if (this.subnetMask === defaultBits && !this.parsedSubnet) {
            return true;
        }
        return this.parsedSubnet === String(this.subnetMask);
    };
}
//# sourceMappingURL=common.js.map

/***/ }),

/***/ "./node_modules/ip-address/dist/esm/lib/ipv4.js":
/*!******************************************************!*\
  !*** ./node_modules/ip-address/dist/esm/lib/ipv4.js ***!
  \******************************************************/
/*! exports provided: Address4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Address4", function() { return Address4; });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ "./node_modules/ip-address/dist/esm/lib/common.js");
/* harmony import */ var _v4_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v4/constants */ "./node_modules/ip-address/dist/esm/lib/v4/constants.js");
/* harmony import */ var _address_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./address-error */ "./node_modules/ip-address/dist/esm/lib/address-error.js");
/* harmony import */ var jsbn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jsbn */ "./node_modules/ip-address/node_modules/jsbn/index.js");
/* harmony import */ var jsbn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jsbn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var sprintf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! sprintf-js */ "./node_modules/ip-address/node_modules/sprintf-js/src/sprintf.js");
/* harmony import */ var sprintf_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(sprintf_js__WEBPACK_IMPORTED_MODULE_4__);
/* eslint-disable no-param-reassign */





/**
 * Represents an IPv4 address
 * @class Address4
 * @param {string} address - An IPv4 address string
 */
class Address4 {
    constructor(address) {
        this.groups = _v4_constants__WEBPACK_IMPORTED_MODULE_1__["GROUPS"];
        this.parsedAddress = [];
        this.parsedSubnet = '';
        this.subnet = '/32';
        this.subnetMask = 32;
        this.v4 = true;
        /**
         * Returns true if the address is correct, false otherwise
         * @memberof Address4
         * @instance
         * @returns {Boolean}
         */
        this.isCorrect = _common__WEBPACK_IMPORTED_MODULE_0__["isCorrect"](_v4_constants__WEBPACK_IMPORTED_MODULE_1__["BITS"]);
        /**
         * Returns true if the given address is in the subnet of the current address
         * @memberof Address4
         * @instance
         * @returns {boolean}
         */
        this.isInSubnet = _common__WEBPACK_IMPORTED_MODULE_0__["isInSubnet"];
        this.address = address;
        const subnet = _v4_constants__WEBPACK_IMPORTED_MODULE_1__["RE_SUBNET_STRING"].exec(address);
        if (subnet) {
            this.parsedSubnet = subnet[0].replace('/', '');
            this.subnetMask = parseInt(this.parsedSubnet, 10);
            this.subnet = `/${this.subnetMask}`;
            if (this.subnetMask < 0 || this.subnetMask > _v4_constants__WEBPACK_IMPORTED_MODULE_1__["BITS"]) {
                throw new _address_error__WEBPACK_IMPORTED_MODULE_2__["AddressError"]('Invalid subnet mask.');
            }
            address = address.replace(_v4_constants__WEBPACK_IMPORTED_MODULE_1__["RE_SUBNET_STRING"], '');
        }
        this.addressMinusSuffix = address;
        this.parsedAddress = this.parse(address);
    }
    static isValid(address) {
        try {
            // eslint-disable-next-line no-new
            new Address4(address);
            return true;
        }
        catch (e) {
            return false;
        }
    }
    /*
     * Parses a v4 address
     */
    parse(address) {
        const groups = address.split('.');
        if (!address.match(_v4_constants__WEBPACK_IMPORTED_MODULE_1__["RE_ADDRESS"])) {
            throw new _address_error__WEBPACK_IMPORTED_MODULE_2__["AddressError"]('Invalid IPv4 address.');
        }
        return groups;
    }
    /**
     * Returns the correct form of an address
     * @memberof Address4
     * @instance
     * @returns {String}
     */
    correctForm() {
        return this.parsedAddress.map((part) => parseInt(part, 10)).join('.');
    }
    /**
     * Converts a hex string to an IPv4 address object
     * @memberof Address4
     * @static
     * @param {string} hex - a hex string to convert
     * @returns {Address4}
     */
    static fromHex(hex) {
        const padded = hex.replace(/:/g, '').padStart(8, '0');
        const groups = [];
        let i;
        for (i = 0; i < 8; i += 2) {
            const h = padded.slice(i, i + 2);
            groups.push(parseInt(h, 16));
        }
        return new Address4(groups.join('.'));
    }
    /**
     * Converts an integer into a IPv4 address object
     * @memberof Address4
     * @static
     * @param {integer} integer - a number to convert
     * @returns {Address4}
     */
    static fromInteger(integer) {
        return Address4.fromHex(integer.toString(16));
    }
    /**
     * Return an address from in-addr.arpa form
     * @memberof Address4
     * @static
     * @param {string} arpaFormAddress - an 'in-addr.arpa' form ipv4 address
     * @returns {Adress4}
     * @example
     * var address = Address4.fromArpa(42.2.0.192.in-addr.arpa.)
     * address.correctForm(); // '192.0.2.42'
     */
    static fromArpa(arpaFormAddress) {
        // remove ending ".in-addr.arpa." or just "."
        const leader = arpaFormAddress.replace(/(\.in-addr\.arpa)?\.$/, '');
        const address = leader.split('.').reverse().join('.');
        return new Address4(address);
    }
    /**
     * Converts an IPv4 address object to a hex string
     * @memberof Address4
     * @instance
     * @returns {String}
     */
    toHex() {
        return this.parsedAddress.map((part) => Object(sprintf_js__WEBPACK_IMPORTED_MODULE_4__["sprintf"])('%02x', parseInt(part, 10))).join(':');
    }
    /**
     * Converts an IPv4 address object to an array of bytes
     * @memberof Address4
     * @instance
     * @returns {Array}
     */
    toArray() {
        return this.parsedAddress.map((part) => parseInt(part, 10));
    }
    /**
     * Converts an IPv4 address object to an IPv6 address group
     * @memberof Address4
     * @instance
     * @returns {String}
     */
    toGroup6() {
        const output = [];
        let i;
        for (i = 0; i < _v4_constants__WEBPACK_IMPORTED_MODULE_1__["GROUPS"]; i += 2) {
            const hex = Object(sprintf_js__WEBPACK_IMPORTED_MODULE_4__["sprintf"])('%02x%02x', parseInt(this.parsedAddress[i], 10), parseInt(this.parsedAddress[i + 1], 10));
            output.push(Object(sprintf_js__WEBPACK_IMPORTED_MODULE_4__["sprintf"])('%x', parseInt(hex, 16)));
        }
        return output.join(':');
    }
    /**
     * Returns the address as a BigInteger
     * @memberof Address4
     * @instance
     * @returns {BigInteger}
     */
    bigInteger() {
        return new jsbn__WEBPACK_IMPORTED_MODULE_3__["BigInteger"](this.parsedAddress.map((n) => Object(sprintf_js__WEBPACK_IMPORTED_MODULE_4__["sprintf"])('%02x', parseInt(n, 10))).join(''), 16);
    }
    /**
     * Helper function getting start address.
     * @memberof Address4
     * @instance
     * @returns {BigInteger}
     */
    _startAddress() {
        return new jsbn__WEBPACK_IMPORTED_MODULE_3__["BigInteger"](this.mask() + '0'.repeat(_v4_constants__WEBPACK_IMPORTED_MODULE_1__["BITS"] - this.subnetMask), 2);
    }
    /**
     * The first address in the range given by this address' subnet.
     * Often referred to as the Network Address.
     * @memberof Address4
     * @instance
     * @returns {Address4}
     */
    startAddress() {
        return Address4.fromBigInteger(this._startAddress());
    }
    /**
     * The first host address in the range given by this address's subnet ie
     * the first address after the Network Address
     * @memberof Address4
     * @instance
     * @returns {Address4}
     */
    startAddressExclusive() {
        const adjust = new jsbn__WEBPACK_IMPORTED_MODULE_3__["BigInteger"]('1');
        return Address4.fromBigInteger(this._startAddress().add(adjust));
    }
    /**
     * Helper function getting end address.
     * @memberof Address4
     * @instance
     * @returns {BigInteger}
     */
    _endAddress() {
        return new jsbn__WEBPACK_IMPORTED_MODULE_3__["BigInteger"](this.mask() + '1'.repeat(_v4_constants__WEBPACK_IMPORTED_MODULE_1__["BITS"] - this.subnetMask), 2);
    }
    /**
     * The last address in the range given by this address' subnet
     * Often referred to as the Broadcast
     * @memberof Address4
     * @instance
     * @returns {Address4}
     */
    endAddress() {
        return Address4.fromBigInteger(this._endAddress());
    }
    /**
     * The last host address in the range given by this address's subnet ie
     * the last address prior to the Broadcast Address
     * @memberof Address4
     * @instance
     * @returns {Address4}
     */
    endAddressExclusive() {
        const adjust = new jsbn__WEBPACK_IMPORTED_MODULE_3__["BigInteger"]('1');
        return Address4.fromBigInteger(this._endAddress().subtract(adjust));
    }
    /**
     * Converts a BigInteger to a v4 address object
     * @memberof Address4
     * @static
     * @param {BigInteger} bigInteger - a BigInteger to convert
     * @returns {Address4}
     */
    static fromBigInteger(bigInteger) {
        return Address4.fromInteger(parseInt(bigInteger.toString(), 10));
    }
    /**
     * Returns the first n bits of the address, defaulting to the
     * subnet mask
     * @memberof Address4
     * @instance
     * @returns {String}
     */
    mask(mask) {
        if (mask === undefined) {
            mask = this.subnetMask;
        }
        return this.getBitsBase2(0, mask);
    }
    /**
     * Returns the bits in the given range as a base-2 string
     * @memberof Address4
     * @instance
     * @returns {string}
     */
    getBitsBase2(start, end) {
        return this.binaryZeroPad().slice(start, end);
    }
    /**
     * Return the reversed ip6.arpa form of the address
     * @memberof Address4
     * @param {Object} options
     * @param {boolean} options.omitSuffix - omit the "in-addr.arpa" suffix
     * @instance
     * @returns {String}
     */
    reverseForm(options) {
        if (!options) {
            options = {};
        }
        const reversed = this.correctForm().split('.').reverse().join('.');
        if (options.omitSuffix) {
            return reversed;
        }
        return Object(sprintf_js__WEBPACK_IMPORTED_MODULE_4__["sprintf"])('%s.in-addr.arpa.', reversed);
    }
    /**
     * Returns true if the given address is a multicast address
     * @memberof Address4
     * @instance
     * @returns {boolean}
     */
    isMulticast() {
        return this.isInSubnet(new Address4('224.0.0.0/4'));
    }
    /**
     * Returns a zero-padded base-2 string representation of the address
     * @memberof Address4
     * @instance
     * @returns {string}
     */
    binaryZeroPad() {
        return this.bigInteger().toString(2).padStart(_v4_constants__WEBPACK_IMPORTED_MODULE_1__["BITS"], '0');
    }
    /**
     * Groups an IPv4 address for inclusion at the end of an IPv6 address
     * @returns {String}
     */
    groupForV6() {
        const segments = this.parsedAddress;
        return this.address.replace(_v4_constants__WEBPACK_IMPORTED_MODULE_1__["RE_ADDRESS"], Object(sprintf_js__WEBPACK_IMPORTED_MODULE_4__["sprintf"])('<span class="hover-group group-v4 group-6">%s</span>.<span class="hover-group group-v4 group-7">%s</span>', segments.slice(0, 2).join('.'), segments.slice(2, 4).join('.')));
    }
}
//# sourceMappingURL=ipv4.js.map

/***/ }),

/***/ "./node_modules/ip-address/dist/esm/lib/ipv6.js":
/*!******************************************************!*\
  !*** ./node_modules/ip-address/dist/esm/lib/ipv6.js ***!
  \******************************************************/
/*! exports provided: Address6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Address6", function() { return Address6; });
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common */ "./node_modules/ip-address/dist/esm/lib/common.js");
/* harmony import */ var _v4_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v4/constants */ "./node_modules/ip-address/dist/esm/lib/v4/constants.js");
/* harmony import */ var _v6_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./v6/constants */ "./node_modules/ip-address/dist/esm/lib/v6/constants.js");
/* harmony import */ var _v6_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./v6/helpers */ "./node_modules/ip-address/dist/esm/lib/v6/helpers.js");
/* harmony import */ var _ipv4__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ipv4 */ "./node_modules/ip-address/dist/esm/lib/ipv4.js");
/* harmony import */ var _v6_regular_expressions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./v6/regular-expressions */ "./node_modules/ip-address/dist/esm/lib/v6/regular-expressions.js");
/* harmony import */ var _address_error__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./address-error */ "./node_modules/ip-address/dist/esm/lib/address-error.js");
/* harmony import */ var jsbn__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! jsbn */ "./node_modules/ip-address/node_modules/jsbn/index.js");
/* harmony import */ var jsbn__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(jsbn__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var sprintf_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! sprintf-js */ "./node_modules/ip-address/node_modules/sprintf-js/src/sprintf.js");
/* harmony import */ var sprintf_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(sprintf_js__WEBPACK_IMPORTED_MODULE_8__);
/* eslint-disable prefer-destructuring */
/* eslint-disable no-param-reassign */









function assert(condition) {
    if (!condition) {
        throw new Error('Assertion failed.');
    }
}
function addCommas(number) {
    const r = /(\d+)(\d{3})/;
    while (r.test(number)) {
        number = number.replace(r, '$1,$2');
    }
    return number;
}
function spanLeadingZeroes4(n) {
    n = n.replace(/^(0{1,})([1-9]+)$/, '<span class="parse-error">$1</span>$2');
    n = n.replace(/^(0{1,})(0)$/, '<span class="parse-error">$1</span>$2');
    return n;
}
/*
 * A helper function to compact an array
 */
function compact(address, slice) {
    const s1 = [];
    const s2 = [];
    let i;
    for (i = 0; i < address.length; i++) {
        if (i < slice[0]) {
            s1.push(address[i]);
        }
        else if (i > slice[1]) {
            s2.push(address[i]);
        }
    }
    return s1.concat(['compact']).concat(s2);
}
function paddedHex(octet) {
    return Object(sprintf_js__WEBPACK_IMPORTED_MODULE_8__["sprintf"])('%04x', parseInt(octet, 16));
}
function unsignByte(b) {
    // eslint-disable-next-line no-bitwise
    return b & 0xff;
}
/**
 * Represents an IPv6 address
 * @class Address6
 * @param {string} address - An IPv6 address string
 * @param {number} [groups=8] - How many octets to parse
 * @example
 * var address = new Address6('2001::/32');
 */
class Address6 {
    constructor(address, optionalGroups) {
        this.addressMinusSuffix = '';
        this.parsedSubnet = '';
        this.subnet = '/128';
        this.subnetMask = 128;
        this.v4 = false;
        this.zone = '';
        // #region Attributes
        /**
         * Returns true if the given address is in the subnet of the current address
         * @memberof Address6
         * @instance
         * @returns {boolean}
         */
        this.isInSubnet = _common__WEBPACK_IMPORTED_MODULE_0__["isInSubnet"];
        /**
         * Returns true if the address is correct, false otherwise
         * @memberof Address6
         * @instance
         * @returns {boolean}
         */
        this.isCorrect = _common__WEBPACK_IMPORTED_MODULE_0__["isCorrect"](_v6_constants__WEBPACK_IMPORTED_MODULE_2__["BITS"]);
        if (optionalGroups === undefined) {
            this.groups = _v6_constants__WEBPACK_IMPORTED_MODULE_2__["GROUPS"];
        }
        else {
            this.groups = optionalGroups;
        }
        this.address = address;
        const subnet = _v6_constants__WEBPACK_IMPORTED_MODULE_2__["RE_SUBNET_STRING"].exec(address);
        if (subnet) {
            this.parsedSubnet = subnet[0].replace('/', '');
            this.subnetMask = parseInt(this.parsedSubnet, 10);
            this.subnet = `/${this.subnetMask}`;
            if (Number.isNaN(this.subnetMask) ||
                this.subnetMask < 0 ||
                this.subnetMask > _v6_constants__WEBPACK_IMPORTED_MODULE_2__["BITS"]) {
                throw new _address_error__WEBPACK_IMPORTED_MODULE_6__["AddressError"]('Invalid subnet mask.');
            }
            address = address.replace(_v6_constants__WEBPACK_IMPORTED_MODULE_2__["RE_SUBNET_STRING"], '');
        }
        else if (/\//.test(address)) {
            throw new _address_error__WEBPACK_IMPORTED_MODULE_6__["AddressError"]('Invalid subnet mask.');
        }
        const zone = _v6_constants__WEBPACK_IMPORTED_MODULE_2__["RE_ZONE_STRING"].exec(address);
        if (zone) {
            this.zone = zone[0];
            address = address.replace(_v6_constants__WEBPACK_IMPORTED_MODULE_2__["RE_ZONE_STRING"], '');
        }
        this.addressMinusSuffix = address;
        this.parsedAddress = this.parse(this.addressMinusSuffix);
    }
    static isValid(address) {
        try {
            // eslint-disable-next-line no-new
            new Address6(address);
            return true;
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Convert a BigInteger to a v6 address object
     * @memberof Address6
     * @static
     * @param {BigInteger} bigInteger - a BigInteger to convert
     * @returns {Address6}
     * @example
     * var bigInteger = new BigInteger('1000000000000');
     * var address = Address6.fromBigInteger(bigInteger);
     * address.correctForm(); // '::e8:d4a5:1000'
     */
    static fromBigInteger(bigInteger) {
        const hex = bigInteger.toString(16).padStart(32, '0');
        const groups = [];
        let i;
        for (i = 0; i < _v6_constants__WEBPACK_IMPORTED_MODULE_2__["GROUPS"]; i++) {
            groups.push(hex.slice(i * 4, (i + 1) * 4));
        }
        return new Address6(groups.join(':'));
    }
    /**
     * Convert a URL (with optional port number) to an address object
     * @memberof Address6
     * @static
     * @param {string} url - a URL with optional port number
     * @example
     * var addressAndPort = Address6.fromURL('http://[ffff::]:8080/foo/');
     * addressAndPort.address.correctForm(); // 'ffff::'
     * addressAndPort.port; // 8080
     */
    static fromURL(url) {
        let host;
        let port = null;
        let result;
        // If we have brackets parse them and find a port
        if (url.indexOf('[') !== -1 && url.indexOf(']:') !== -1) {
            result = _v6_constants__WEBPACK_IMPORTED_MODULE_2__["RE_URL_WITH_PORT"].exec(url);
            if (result === null) {
                return {
                    error: 'failed to parse address with port',
                    address: null,
                    port: null,
                };
            }
            host = result[1];
            port = result[2];
            // If there's a URL extract the address
        }
        else if (url.indexOf('/') !== -1) {
            // Remove the protocol prefix
            url = url.replace(/^[a-z0-9]+:\/\//, '');
            // Parse the address
            result = _v6_constants__WEBPACK_IMPORTED_MODULE_2__["RE_URL"].exec(url);
            if (result === null) {
                return {
                    error: 'failed to parse address from URL',
                    address: null,
                    port: null,
                };
            }
            host = result[1];
            // Otherwise just assign the URL to the host and let the library parse it
        }
        else {
            host = url;
        }
        // If there's a port convert it to an integer
        if (port) {
            port = parseInt(port, 10);
            // squelch out of range ports
            if (port < 0 || port > 65536) {
                port = null;
            }
        }
        else {
            // Standardize `undefined` to `null`
            port = null;
        }
        return {
            address: new Address6(host),
            port,
        };
    }
    /**
     * Create an IPv6-mapped address given an IPv4 address
     * @memberof Address6
     * @static
     * @param {string} address - An IPv4 address string
     * @returns {Address6}
     * @example
     * var address = Address6.fromAddress4('192.168.0.1');
     * address.correctForm(); // '::ffff:c0a8:1'
     * address.to4in6(); // '::ffff:192.168.0.1'
     */
    static fromAddress4(address) {
        const address4 = new _ipv4__WEBPACK_IMPORTED_MODULE_4__["Address4"](address);
        const mask6 = _v6_constants__WEBPACK_IMPORTED_MODULE_2__["BITS"] - (_v4_constants__WEBPACK_IMPORTED_MODULE_1__["BITS"] - address4.subnetMask);
        return new Address6(`::ffff:${address4.correctForm()}/${mask6}`);
    }
    /**
     * Return an address from ip6.arpa form
     * @memberof Address6
     * @static
     * @param {string} arpaFormAddress - an 'ip6.arpa' form address
     * @returns {Adress6}
     * @example
     * var address = Address6.fromArpa(e.f.f.f.3.c.2.6.f.f.f.e.6.6.8.e.1.0.6.7.9.4.e.c.0.0.0.0.1.0.0.2.ip6.arpa.)
     * address.correctForm(); // '2001:0:ce49:7601:e866:efff:62c3:fffe'
     */
    static fromArpa(arpaFormAddress) {
        // remove ending ".ip6.arpa." or just "."
        let address = arpaFormAddress.replace(/(\.ip6\.arpa)?\.$/, '');
        const semicolonAmount = 7;
        // correct ip6.arpa form with ending removed will be 63 characters
        if (address.length !== 63) {
            throw new _address_error__WEBPACK_IMPORTED_MODULE_6__["AddressError"]("Invalid 'ip6.arpa' form.");
        }
        const parts = address.split('.').reverse();
        for (let i = semicolonAmount; i > 0; i--) {
            const insertIndex = i * 4;
            parts.splice(insertIndex, 0, ':');
        }
        address = parts.join('');
        return new Address6(address);
    }
    /**
     * Return the Microsoft UNC transcription of the address
     * @memberof Address6
     * @instance
     * @returns {String} the Microsoft UNC transcription of the address
     */
    microsoftTranscription() {
        return Object(sprintf_js__WEBPACK_IMPORTED_MODULE_8__["sprintf"])('%s.ipv6-literal.net', this.correctForm().replace(/:/g, '-'));
    }
    /**
     * Return the first n bits of the address, defaulting to the subnet mask
     * @memberof Address6
     * @instance
     * @param {number} [mask=subnet] - the number of bits to mask
     * @returns {String} the first n bits of the address as a string
     */
    mask(mask = this.subnetMask) {
        return this.getBitsBase2(0, mask);
    }
    /**
     * Return the number of possible subnets of a given size in the address
     * @memberof Address6
     * @instance
     * @param {number} [size=128] - the subnet size
     * @returns {String}
     */
    // TODO: probably useful to have a numeric version of this too
    possibleSubnets(subnetSize = 128) {
        const availableBits = _v6_constants__WEBPACK_IMPORTED_MODULE_2__["BITS"] - this.subnetMask;
        const subnetBits = Math.abs(subnetSize - _v6_constants__WEBPACK_IMPORTED_MODULE_2__["BITS"]);
        const subnetPowers = availableBits - subnetBits;
        if (subnetPowers < 0) {
            return '0';
        }
        return addCommas(new jsbn__WEBPACK_IMPORTED_MODULE_7__["BigInteger"]('2', 10).pow(subnetPowers).toString(10));
    }
    /**
     * Helper function getting start address.
     * @memberof Address6
     * @instance
     * @returns {BigInteger}
     */
    _startAddress() {
        return new jsbn__WEBPACK_IMPORTED_MODULE_7__["BigInteger"](this.mask() + '0'.repeat(_v6_constants__WEBPACK_IMPORTED_MODULE_2__["BITS"] - this.subnetMask), 2);
    }
    /**
     * The first address in the range given by this address' subnet
     * Often referred to as the Network Address.
     * @memberof Address6
     * @instance
     * @returns {Address6}
     */
    startAddress() {
        return Address6.fromBigInteger(this._startAddress());
    }
    /**
     * The first host address in the range given by this address's subnet ie
     * the first address after the Network Address
     * @memberof Address6
     * @instance
     * @returns {Address6}
     */
    startAddressExclusive() {
        const adjust = new jsbn__WEBPACK_IMPORTED_MODULE_7__["BigInteger"]('1');
        return Address6.fromBigInteger(this._startAddress().add(adjust));
    }
    /**
     * Helper function getting end address.
     * @memberof Address6
     * @instance
     * @returns {BigInteger}
     */
    _endAddress() {
        return new jsbn__WEBPACK_IMPORTED_MODULE_7__["BigInteger"](this.mask() + '1'.repeat(_v6_constants__WEBPACK_IMPORTED_MODULE_2__["BITS"] - this.subnetMask), 2);
    }
    /**
     * The last address in the range given by this address' subnet
     * Often referred to as the Broadcast
     * @memberof Address6
     * @instance
     * @returns {Address6}
     */
    endAddress() {
        return Address6.fromBigInteger(this._endAddress());
    }
    /**
     * The last host address in the range given by this address's subnet ie
     * the last address prior to the Broadcast Address
     * @memberof Address6
     * @instance
     * @returns {Address6}
     */
    endAddressExclusive() {
        const adjust = new jsbn__WEBPACK_IMPORTED_MODULE_7__["BigInteger"]('1');
        return Address6.fromBigInteger(this._endAddress().subtract(adjust));
    }
    /**
     * Return the scope of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    getScope() {
        let scope = _v6_constants__WEBPACK_IMPORTED_MODULE_2__["SCOPES"][this.getBits(12, 16).intValue()];
        if (this.getType() === 'Global unicast' && scope !== 'Link local') {
            scope = 'Global';
        }
        return scope || 'Unknown';
    }
    /**
     * Return the type of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    getType() {
        for (const subnet of Object.keys(_v6_constants__WEBPACK_IMPORTED_MODULE_2__["TYPES"])) {
            if (this.isInSubnet(new Address6(subnet))) {
                return _v6_constants__WEBPACK_IMPORTED_MODULE_2__["TYPES"][subnet];
            }
        }
        return 'Global unicast';
    }
    /**
     * Return the bits in the given range as a BigInteger
     * @memberof Address6
     * @instance
     * @returns {BigInteger}
     */
    getBits(start, end) {
        return new jsbn__WEBPACK_IMPORTED_MODULE_7__["BigInteger"](this.getBitsBase2(start, end), 2);
    }
    /**
     * Return the bits in the given range as a base-2 string
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    getBitsBase2(start, end) {
        return this.binaryZeroPad().slice(start, end);
    }
    /**
     * Return the bits in the given range as a base-16 string
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    getBitsBase16(start, end) {
        const length = end - start;
        if (length % 4 !== 0) {
            throw new Error('Length of bits to retrieve must be divisible by four');
        }
        return this.getBits(start, end)
            .toString(16)
            .padStart(length / 4, '0');
    }
    /**
     * Return the bits that are set past the subnet mask length
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    getBitsPastSubnet() {
        return this.getBitsBase2(this.subnetMask, _v6_constants__WEBPACK_IMPORTED_MODULE_2__["BITS"]);
    }
    /**
     * Return the reversed ip6.arpa form of the address
     * @memberof Address6
     * @param {Object} options
     * @param {boolean} options.omitSuffix - omit the "ip6.arpa" suffix
     * @instance
     * @returns {String}
     */
    reverseForm(options) {
        if (!options) {
            options = {};
        }
        const characters = Math.floor(this.subnetMask / 4);
        const reversed = this.canonicalForm()
            .replace(/:/g, '')
            .split('')
            .slice(0, characters)
            .reverse()
            .join('.');
        if (characters > 0) {
            if (options.omitSuffix) {
                return reversed;
            }
            return Object(sprintf_js__WEBPACK_IMPORTED_MODULE_8__["sprintf"])('%s.ip6.arpa.', reversed);
        }
        if (options.omitSuffix) {
            return '';
        }
        return 'ip6.arpa.';
    }
    /**
     * Return the correct form of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    correctForm() {
        let i;
        let groups = [];
        let zeroCounter = 0;
        const zeroes = [];
        for (i = 0; i < this.parsedAddress.length; i++) {
            const value = parseInt(this.parsedAddress[i], 16);
            if (value === 0) {
                zeroCounter++;
            }
            if (value !== 0 && zeroCounter > 0) {
                if (zeroCounter > 1) {
                    zeroes.push([i - zeroCounter, i - 1]);
                }
                zeroCounter = 0;
            }
        }
        // Do we end with a string of zeroes?
        if (zeroCounter > 1) {
            zeroes.push([this.parsedAddress.length - zeroCounter, this.parsedAddress.length - 1]);
        }
        const zeroLengths = zeroes.map((n) => n[1] - n[0] + 1);
        if (zeroes.length > 0) {
            const index = zeroLengths.indexOf(Math.max(...zeroLengths));
            groups = compact(this.parsedAddress, zeroes[index]);
        }
        else {
            groups = this.parsedAddress;
        }
        for (i = 0; i < groups.length; i++) {
            if (groups[i] !== 'compact') {
                groups[i] = parseInt(groups[i], 16).toString(16);
            }
        }
        let correct = groups.join(':');
        correct = correct.replace(/^compact$/, '::');
        correct = correct.replace(/^compact|compact$/, ':');
        correct = correct.replace(/compact/, '');
        return correct;
    }
    /**
     * Return a zero-padded base-2 string representation of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     * @example
     * var address = new Address6('2001:4860:4001:803::1011');
     * address.binaryZeroPad();
     * // '0010000000000001010010000110000001000000000000010000100000000011
     * //  0000000000000000000000000000000000000000000000000001000000010001'
     */
    binaryZeroPad() {
        return this.bigInteger().toString(2).padStart(_v6_constants__WEBPACK_IMPORTED_MODULE_2__["BITS"], '0');
    }
    // TODO: Improve the semantics of this helper function
    parse4in6(address) {
        const groups = address.split(':');
        const lastGroup = groups.slice(-1)[0];
        const address4 = lastGroup.match(_v4_constants__WEBPACK_IMPORTED_MODULE_1__["RE_ADDRESS"]);
        if (address4) {
            this.parsedAddress4 = address4[0];
            this.address4 = new _ipv4__WEBPACK_IMPORTED_MODULE_4__["Address4"](this.parsedAddress4);
            for (let i = 0; i < this.address4.groups; i++) {
                if (/^0[0-9]+/.test(this.address4.parsedAddress[i])) {
                    throw new _address_error__WEBPACK_IMPORTED_MODULE_6__["AddressError"]("IPv4 addresses can't have leading zeroes.", address.replace(_v4_constants__WEBPACK_IMPORTED_MODULE_1__["RE_ADDRESS"], this.address4.parsedAddress.map(spanLeadingZeroes4).join('.')));
                }
            }
            this.v4 = true;
            groups[groups.length - 1] = this.address4.toGroup6();
            address = groups.join(':');
        }
        return address;
    }
    // TODO: Make private?
    parse(address) {
        address = this.parse4in6(address);
        const badCharacters = address.match(_v6_constants__WEBPACK_IMPORTED_MODULE_2__["RE_BAD_CHARACTERS"]);
        if (badCharacters) {
            throw new _address_error__WEBPACK_IMPORTED_MODULE_6__["AddressError"](Object(sprintf_js__WEBPACK_IMPORTED_MODULE_8__["sprintf"])('Bad character%s detected in address: %s', badCharacters.length > 1 ? 's' : '', badCharacters.join('')), address.replace(_v6_constants__WEBPACK_IMPORTED_MODULE_2__["RE_BAD_CHARACTERS"], '<span class="parse-error">$1</span>'));
        }
        const badAddress = address.match(_v6_constants__WEBPACK_IMPORTED_MODULE_2__["RE_BAD_ADDRESS"]);
        if (badAddress) {
            throw new _address_error__WEBPACK_IMPORTED_MODULE_6__["AddressError"](Object(sprintf_js__WEBPACK_IMPORTED_MODULE_8__["sprintf"])('Address failed regex: %s', badAddress.join('')), address.replace(_v6_constants__WEBPACK_IMPORTED_MODULE_2__["RE_BAD_ADDRESS"], '<span class="parse-error">$1</span>'));
        }
        let groups = [];
        const halves = address.split('::');
        if (halves.length === 2) {
            let first = halves[0].split(':');
            let last = halves[1].split(':');
            if (first.length === 1 && first[0] === '') {
                first = [];
            }
            if (last.length === 1 && last[0] === '') {
                last = [];
            }
            const remaining = this.groups - (first.length + last.length);
            if (!remaining) {
                throw new _address_error__WEBPACK_IMPORTED_MODULE_6__["AddressError"]('Error parsing groups');
            }
            this.elidedGroups = remaining;
            this.elisionBegin = first.length;
            this.elisionEnd = first.length + this.elidedGroups;
            groups = groups.concat(first);
            for (let i = 0; i < remaining; i++) {
                groups.push('0');
            }
            groups = groups.concat(last);
        }
        else if (halves.length === 1) {
            groups = address.split(':');
            this.elidedGroups = 0;
        }
        else {
            throw new _address_error__WEBPACK_IMPORTED_MODULE_6__["AddressError"]('Too many :: groups found');
        }
        groups = groups.map((group) => Object(sprintf_js__WEBPACK_IMPORTED_MODULE_8__["sprintf"])('%x', parseInt(group, 16)));
        if (groups.length !== this.groups) {
            throw new _address_error__WEBPACK_IMPORTED_MODULE_6__["AddressError"]('Incorrect number of groups found');
        }
        return groups;
    }
    /**
     * Return the canonical form of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    canonicalForm() {
        return this.parsedAddress.map(paddedHex).join(':');
    }
    /**
     * Return the decimal form of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    decimal() {
        return this.parsedAddress.map((n) => Object(sprintf_js__WEBPACK_IMPORTED_MODULE_8__["sprintf"])('%05d', parseInt(n, 16))).join(':');
    }
    /**
     * Return the address as a BigInteger
     * @memberof Address6
     * @instance
     * @returns {BigInteger}
     */
    bigInteger() {
        return new jsbn__WEBPACK_IMPORTED_MODULE_7__["BigInteger"](this.parsedAddress.map(paddedHex).join(''), 16);
    }
    /**
     * Return the last two groups of this address as an IPv4 address string
     * @memberof Address6
     * @instance
     * @returns {Address4}
     * @example
     * var address = new Address6('2001:4860:4001::1825:bf11');
     * address.to4().correctForm(); // '24.37.191.17'
     */
    to4() {
        const binary = this.binaryZeroPad().split('');
        return _ipv4__WEBPACK_IMPORTED_MODULE_4__["Address4"].fromHex(new jsbn__WEBPACK_IMPORTED_MODULE_7__["BigInteger"](binary.slice(96, 128).join(''), 2).toString(16));
    }
    /**
     * Return the v4-in-v6 form of the address
     * @memberof Address6
     * @instance
     * @returns {String}
     */
    to4in6() {
        const address4 = this.to4();
        const address6 = new Address6(this.parsedAddress.slice(0, 6).join(':'), 6);
        const correct = address6.correctForm();
        let infix = '';
        if (!/:$/.test(correct)) {
            infix = ':';
        }
        return correct + infix + address4.address;
    }
    /**
     * Return an object containing the Teredo properties of the address
     * @memberof Address6
     * @instance
     * @returns {Object}
     */
    inspectTeredo() {
        /*
        - Bits 0 to 31 are set to the Teredo prefix (normally 2001:0000::/32).
        - Bits 32 to 63 embed the primary IPv4 address of the Teredo server that
          is used.
        - Bits 64 to 79 can be used to define some flags. Currently only the
          higher order bit is used; it is set to 1 if the Teredo client is
          located behind a cone NAT, 0 otherwise. For Microsoft's Windows Vista
          and Windows Server 2008 implementations, more bits are used. In those
          implementations, the format for these 16 bits is "CRAAAAUG AAAAAAAA",
          where "C" remains the "Cone" flag. The "R" bit is reserved for future
          use. The "U" bit is for the Universal/Local flag (set to 0). The "G" bit
          is Individual/Group flag (set to 0). The A bits are set to a 12-bit
          randomly generated number chosen by the Teredo client to introduce
          additional protection for the Teredo node against IPv6-based scanning
          attacks.
        - Bits 80 to 95 contains the obfuscated UDP port number. This is the
          port number that is mapped by the NAT to the Teredo client with all
          bits inverted.
        - Bits 96 to 127 contains the obfuscated IPv4 address. This is the
          public IPv4 address of the NAT with all bits inverted.
        */
        const prefix = this.getBitsBase16(0, 32);
        const udpPort = this.getBits(80, 96).xor(new jsbn__WEBPACK_IMPORTED_MODULE_7__["BigInteger"]('ffff', 16)).toString();
        const server4 = _ipv4__WEBPACK_IMPORTED_MODULE_4__["Address4"].fromHex(this.getBitsBase16(32, 64));
        const client4 = _ipv4__WEBPACK_IMPORTED_MODULE_4__["Address4"].fromHex(this.getBits(96, 128).xor(new jsbn__WEBPACK_IMPORTED_MODULE_7__["BigInteger"]('ffffffff', 16)).toString(16));
        const flags = this.getBits(64, 80);
        const flagsBase2 = this.getBitsBase2(64, 80);
        const coneNat = flags.testBit(15);
        const reserved = flags.testBit(14);
        const groupIndividual = flags.testBit(8);
        const universalLocal = flags.testBit(9);
        const nonce = new jsbn__WEBPACK_IMPORTED_MODULE_7__["BigInteger"](flagsBase2.slice(2, 6) + flagsBase2.slice(8, 16), 2).toString(10);
        return {
            prefix: Object(sprintf_js__WEBPACK_IMPORTED_MODULE_8__["sprintf"])('%s:%s', prefix.slice(0, 4), prefix.slice(4, 8)),
            server4: server4.address,
            client4: client4.address,
            flags: flagsBase2,
            coneNat,
            microsoft: {
                reserved,
                universalLocal,
                groupIndividual,
                nonce,
            },
            udpPort,
        };
    }
    /**
     * Return an object containing the 6to4 properties of the address
     * @memberof Address6
     * @instance
     * @returns {Object}
     */
    inspect6to4() {
        /*
        - Bits 0 to 15 are set to the 6to4 prefix (2002::/16).
        - Bits 16 to 48 embed the IPv4 address of the 6to4 gateway that is used.
        */
        const prefix = this.getBitsBase16(0, 16);
        const gateway = _ipv4__WEBPACK_IMPORTED_MODULE_4__["Address4"].fromHex(this.getBitsBase16(16, 48));
        return {
            prefix: Object(sprintf_js__WEBPACK_IMPORTED_MODULE_8__["sprintf"])('%s', prefix.slice(0, 4)),
            gateway: gateway.address,
        };
    }
    /**
     * Return a v6 6to4 address from a v6 v4inv6 address
     * @memberof Address6
     * @instance
     * @returns {Address6}
     */
    to6to4() {
        if (!this.is4()) {
            return null;
        }
        const addr6to4 = [
            '2002',
            this.getBitsBase16(96, 112),
            this.getBitsBase16(112, 128),
            '',
            '/16',
        ].join(':');
        return new Address6(addr6to4);
    }
    /**
     * Return a byte array
     * @memberof Address6
     * @instance
     * @returns {Array}
     */
    toByteArray() {
        const byteArray = this.bigInteger().toByteArray();
        // work around issue where `toByteArray` returns a leading 0 element
        if (byteArray.length === 17 && byteArray[0] === 0) {
            return byteArray.slice(1);
        }
        return byteArray;
    }
    /**
     * Return an unsigned byte array
     * @memberof Address6
     * @instance
     * @returns {Array}
     */
    toUnsignedByteArray() {
        return this.toByteArray().map(unsignByte);
    }
    /**
     * Convert a byte array to an Address6 object
     * @memberof Address6
     * @static
     * @returns {Address6}
     */
    static fromByteArray(bytes) {
        return this.fromUnsignedByteArray(bytes.map(unsignByte));
    }
    /**
     * Convert an unsigned byte array to an Address6 object
     * @memberof Address6
     * @static
     * @returns {Address6}
     */
    static fromUnsignedByteArray(bytes) {
        const BYTE_MAX = new jsbn__WEBPACK_IMPORTED_MODULE_7__["BigInteger"]('256', 10);
        let result = new jsbn__WEBPACK_IMPORTED_MODULE_7__["BigInteger"]('0', 10);
        let multiplier = new jsbn__WEBPACK_IMPORTED_MODULE_7__["BigInteger"]('1', 10);
        for (let i = bytes.length - 1; i >= 0; i--) {
            result = result.add(multiplier.multiply(new jsbn__WEBPACK_IMPORTED_MODULE_7__["BigInteger"](bytes[i].toString(10), 10)));
            multiplier = multiplier.multiply(BYTE_MAX);
        }
        return Address6.fromBigInteger(result);
    }
    /**
     * Returns true if the address is in the canonical form, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */
    isCanonical() {
        return this.addressMinusSuffix === this.canonicalForm();
    }
    /**
     * Returns true if the address is a link local address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */
    isLinkLocal() {
        // Zeroes are required, i.e. we can't check isInSubnet with 'fe80::/10'
        if (this.getBitsBase2(0, 64) ===
            '1111111010000000000000000000000000000000000000000000000000000000') {
            return true;
        }
        return false;
    }
    /**
     * Returns true if the address is a multicast address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */
    isMulticast() {
        return this.getType() === 'Multicast';
    }
    /**
     * Returns true if the address is a v4-in-v6 address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */
    is4() {
        return this.v4;
    }
    /**
     * Returns true if the address is a Teredo address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */
    isTeredo() {
        return this.isInSubnet(new Address6('2001::/32'));
    }
    /**
     * Returns true if the address is a 6to4 address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */
    is6to4() {
        return this.isInSubnet(new Address6('2002::/16'));
    }
    /**
     * Returns true if the address is a loopback address, false otherwise
     * @memberof Address6
     * @instance
     * @returns {boolean}
     */
    isLoopback() {
        return this.getType() === 'Loopback';
    }
    // #endregion
    // #region HTML
    /**
     * @returns {String} the address in link form with a default port of 80
     */
    href(optionalPort) {
        if (optionalPort === undefined) {
            optionalPort = '';
        }
        else {
            optionalPort = Object(sprintf_js__WEBPACK_IMPORTED_MODULE_8__["sprintf"])(':%s', optionalPort);
        }
        return Object(sprintf_js__WEBPACK_IMPORTED_MODULE_8__["sprintf"])('http://[%s]%s/', this.correctForm(), optionalPort);
    }
    /**
     * @returns {String} a link suitable for conveying the address via a URL hash
     */
    link(options) {
        if (!options) {
            options = {};
        }
        if (options.className === undefined) {
            options.className = '';
        }
        if (options.prefix === undefined) {
            options.prefix = '/#address=';
        }
        if (options.v4 === undefined) {
            options.v4 = false;
        }
        let formFunction = this.correctForm;
        if (options.v4) {
            formFunction = this.to4in6;
        }
        if (options.className) {
            return Object(sprintf_js__WEBPACK_IMPORTED_MODULE_8__["sprintf"])('<a href="%1$s%2$s" class="%3$s">%2$s</a>', options.prefix, formFunction.call(this), options.className);
        }
        return Object(sprintf_js__WEBPACK_IMPORTED_MODULE_8__["sprintf"])('<a href="%1$s%2$s">%2$s</a>', options.prefix, formFunction.call(this));
    }
    /**
     * Groups an address
     * @returns {String}
     */
    group() {
        if (this.elidedGroups === 0) {
            // The simple case
            return _v6_helpers__WEBPACK_IMPORTED_MODULE_3__["simpleGroup"](this.address).join(':');
        }
        assert(typeof this.elidedGroups === 'number');
        assert(typeof this.elisionBegin === 'number');
        // The elided case
        const output = [];
        const [left, right] = this.address.split('::');
        if (left.length) {
            output.push(..._v6_helpers__WEBPACK_IMPORTED_MODULE_3__["simpleGroup"](left));
        }
        else {
            output.push('');
        }
        const classes = ['hover-group'];
        for (let i = this.elisionBegin; i < this.elisionBegin + this.elidedGroups; i++) {
            classes.push(Object(sprintf_js__WEBPACK_IMPORTED_MODULE_8__["sprintf"])('group-%d', i));
        }
        output.push(Object(sprintf_js__WEBPACK_IMPORTED_MODULE_8__["sprintf"])('<span class="%s"></span>', classes.join(' ')));
        if (right.length) {
            output.push(..._v6_helpers__WEBPACK_IMPORTED_MODULE_3__["simpleGroup"](right, this.elisionEnd));
        }
        else {
            output.push('');
        }
        if (this.is4()) {
            assert(this.address4 instanceof _ipv4__WEBPACK_IMPORTED_MODULE_4__["Address4"]);
            output.pop();
            output.push(this.address4.groupForV6());
        }
        return output.join(':');
    }
    // #endregion
    // #region Regular expressions
    /**
     * Generate a regular expression string that can be used to find or validate
     * all variations of this address
     * @memberof Address6
     * @instance
     * @param {boolean} substringSearch
     * @returns {string}
     */
    regularExpressionString(substringSearch = false) {
        let output = [];
        // TODO: revisit why this is necessary
        const address6 = new Address6(this.correctForm());
        if (address6.elidedGroups === 0) {
            // The simple case
            output.push(Object(_v6_regular_expressions__WEBPACK_IMPORTED_MODULE_5__["simpleRegularExpression"])(address6.parsedAddress));
        }
        else if (address6.elidedGroups === _v6_constants__WEBPACK_IMPORTED_MODULE_2__["GROUPS"]) {
            // A completely elided address
            output.push(Object(_v6_regular_expressions__WEBPACK_IMPORTED_MODULE_5__["possibleElisions"])(_v6_constants__WEBPACK_IMPORTED_MODULE_2__["GROUPS"]));
        }
        else {
            // A partially elided address
            const halves = address6.address.split('::');
            if (halves[0].length) {
                output.push(Object(_v6_regular_expressions__WEBPACK_IMPORTED_MODULE_5__["simpleRegularExpression"])(halves[0].split(':')));
            }
            assert(typeof address6.elidedGroups === 'number');
            output.push(Object(_v6_regular_expressions__WEBPACK_IMPORTED_MODULE_5__["possibleElisions"])(address6.elidedGroups, halves[0].length !== 0, halves[1].length !== 0));
            if (halves[1].length) {
                output.push(Object(_v6_regular_expressions__WEBPACK_IMPORTED_MODULE_5__["simpleRegularExpression"])(halves[1].split(':')));
            }
            output = [output.join(':')];
        }
        if (!substringSearch) {
            output = [
                '(?=^|',
                _v6_regular_expressions__WEBPACK_IMPORTED_MODULE_5__["ADDRESS_BOUNDARY"],
                '|[^\\w\\:])(',
                ...output,
                ')(?=[^\\w\\:]|',
                _v6_regular_expressions__WEBPACK_IMPORTED_MODULE_5__["ADDRESS_BOUNDARY"],
                '|$)',
            ];
        }
        return output.join('');
    }
    /**
     * Generate a regular expression that can be used to find or validate all
     * variations of this address.
     * @memberof Address6
     * @instance
     * @param {boolean} substringSearch
     * @returns {RegExp}
     */
    regularExpression(substringSearch = false) {
        return new RegExp(this.regularExpressionString(substringSearch), 'i');
    }
}
//# sourceMappingURL=ipv6.js.map

/***/ }),

/***/ "./node_modules/ip-address/dist/esm/lib/v4/constants.js":
/*!**************************************************************!*\
  !*** ./node_modules/ip-address/dist/esm/lib/v4/constants.js ***!
  \**************************************************************/
/*! exports provided: BITS, GROUPS, RE_ADDRESS, RE_SUBNET_STRING */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BITS", function() { return BITS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GROUPS", function() { return GROUPS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RE_ADDRESS", function() { return RE_ADDRESS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RE_SUBNET_STRING", function() { return RE_SUBNET_STRING; });
const BITS = 32;
const GROUPS = 4;
const RE_ADDRESS = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/g;
const RE_SUBNET_STRING = /\/\d{1,2}$/;
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/ip-address/dist/esm/lib/v6/constants.js":
/*!**************************************************************!*\
  !*** ./node_modules/ip-address/dist/esm/lib/v6/constants.js ***!
  \**************************************************************/
/*! exports provided: BITS, GROUPS, SCOPES, TYPES, RE_BAD_CHARACTERS, RE_BAD_ADDRESS, RE_SUBNET_STRING, RE_ZONE_STRING, RE_URL, RE_URL_WITH_PORT */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BITS", function() { return BITS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GROUPS", function() { return GROUPS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SCOPES", function() { return SCOPES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPES", function() { return TYPES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RE_BAD_CHARACTERS", function() { return RE_BAD_CHARACTERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RE_BAD_ADDRESS", function() { return RE_BAD_ADDRESS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RE_SUBNET_STRING", function() { return RE_SUBNET_STRING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RE_ZONE_STRING", function() { return RE_ZONE_STRING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RE_URL", function() { return RE_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RE_URL_WITH_PORT", function() { return RE_URL_WITH_PORT; });
const BITS = 128;
const GROUPS = 8;
/**
 * Represents IPv6 address scopes
 * @memberof Address6
 * @static
 */
const SCOPES = {
    0: 'Reserved',
    1: 'Interface local',
    2: 'Link local',
    4: 'Admin local',
    5: 'Site local',
    8: 'Organization local',
    14: 'Global',
    15: 'Reserved',
};
/**
 * Represents IPv6 address types
 * @memberof Address6
 * @static
 */
const TYPES = {
    'ff01::1/128': 'Multicast (All nodes on this interface)',
    'ff01::2/128': 'Multicast (All routers on this interface)',
    'ff02::1/128': 'Multicast (All nodes on this link)',
    'ff02::2/128': 'Multicast (All routers on this link)',
    'ff05::2/128': 'Multicast (All routers in this site)',
    'ff02::5/128': 'Multicast (OSPFv3 AllSPF routers)',
    'ff02::6/128': 'Multicast (OSPFv3 AllDR routers)',
    'ff02::9/128': 'Multicast (RIP routers)',
    'ff02::a/128': 'Multicast (EIGRP routers)',
    'ff02::d/128': 'Multicast (PIM routers)',
    'ff02::16/128': 'Multicast (MLDv2 reports)',
    'ff01::fb/128': 'Multicast (mDNSv6)',
    'ff02::fb/128': 'Multicast (mDNSv6)',
    'ff05::fb/128': 'Multicast (mDNSv6)',
    'ff02::1:2/128': 'Multicast (All DHCP servers and relay agents on this link)',
    'ff05::1:2/128': 'Multicast (All DHCP servers and relay agents in this site)',
    'ff02::1:3/128': 'Multicast (All DHCP servers on this link)',
    'ff05::1:3/128': 'Multicast (All DHCP servers in this site)',
    '::/128': 'Unspecified',
    '::1/128': 'Loopback',
    'ff00::/8': 'Multicast',
    'fe80::/10': 'Link-local unicast',
};
/**
 * A regular expression that matches bad characters in an IPv6 address
 * @memberof Address6
 * @static
 */
const RE_BAD_CHARACTERS = /([^0-9a-f:/%])/gi;
/**
 * A regular expression that matches an incorrect IPv6 address
 * @memberof Address6
 * @static
 */
const RE_BAD_ADDRESS = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\/$)/gi;
/**
 * A regular expression that matches an IPv6 subnet
 * @memberof Address6
 * @static
 */
const RE_SUBNET_STRING = /\/\d{1,3}(?=%|$)/;
/**
 * A regular expression that matches an IPv6 zone
 * @memberof Address6
 * @static
 */
const RE_ZONE_STRING = /%.*$/;
const RE_URL = new RegExp(/^\[{0,1}([0-9a-f:]+)\]{0,1}/);
const RE_URL_WITH_PORT = new RegExp(/\[([0-9a-f:]+)\]:([0-9]{1,5})/);
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/ip-address/dist/esm/lib/v6/helpers.js":
/*!************************************************************!*\
  !*** ./node_modules/ip-address/dist/esm/lib/v6/helpers.js ***!
  \************************************************************/
/*! exports provided: spanAllZeroes, spanAll, spanLeadingZeroes, simpleGroup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spanAllZeroes", function() { return spanAllZeroes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spanAll", function() { return spanAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spanLeadingZeroes", function() { return spanLeadingZeroes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "simpleGroup", function() { return simpleGroup; });
/* harmony import */ var sprintf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sprintf-js */ "./node_modules/ip-address/node_modules/sprintf-js/src/sprintf.js");
/* harmony import */ var sprintf_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sprintf_js__WEBPACK_IMPORTED_MODULE_0__);

/**
 * @returns {String} the string with all zeroes contained in a <span>
 */
function spanAllZeroes(s) {
    return s.replace(/(0+)/g, '<span class="zero">$1</span>');
}
/**
 * @returns {String} the string with each character contained in a <span>
 */
function spanAll(s, offset = 0) {
    const letters = s.split('');
    return letters
        .map((n, i) => Object(sprintf_js__WEBPACK_IMPORTED_MODULE_0__["sprintf"])('<span class="digit value-%s position-%d">%s</span>', n, i + offset, spanAllZeroes(n)) // XXX Use #base-2 .value-0 instead?
    )
        .join('');
}
function spanLeadingZeroesSimple(group) {
    return group.replace(/^(0+)/, '<span class="zero">$1</span>');
}
/**
 * @returns {String} the string with leading zeroes contained in a <span>
 */
function spanLeadingZeroes(address) {
    const groups = address.split(':');
    return groups.map((g) => spanLeadingZeroesSimple(g)).join(':');
}
/**
 * Groups an address
 * @returns {String} a grouped address
 */
function simpleGroup(addressString, offset = 0) {
    const groups = addressString.split(':');
    return groups.map((g, i) => {
        if (/group-v4/.test(g)) {
            return g;
        }
        return Object(sprintf_js__WEBPACK_IMPORTED_MODULE_0__["sprintf"])('<span class="hover-group group-%d">%s</span>', i + offset, spanLeadingZeroesSimple(g));
    });
}
//# sourceMappingURL=helpers.js.map

/***/ }),

/***/ "./node_modules/ip-address/dist/esm/lib/v6/regular-expressions.js":
/*!************************************************************************!*\
  !*** ./node_modules/ip-address/dist/esm/lib/v6/regular-expressions.js ***!
  \************************************************************************/
/*! exports provided: groupPossibilities, padGroup, ADDRESS_BOUNDARY, simpleRegularExpression, possibleElisions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "groupPossibilities", function() { return groupPossibilities; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "padGroup", function() { return padGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ADDRESS_BOUNDARY", function() { return ADDRESS_BOUNDARY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "simpleRegularExpression", function() { return simpleRegularExpression; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "possibleElisions", function() { return possibleElisions; });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/ip-address/dist/esm/lib/v6/constants.js");
/* harmony import */ var sprintf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sprintf-js */ "./node_modules/ip-address/node_modules/sprintf-js/src/sprintf.js");
/* harmony import */ var sprintf_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(sprintf_js__WEBPACK_IMPORTED_MODULE_1__);


function groupPossibilities(possibilities) {
    return Object(sprintf_js__WEBPACK_IMPORTED_MODULE_1__["sprintf"])('(%s)', possibilities.join('|'));
}
function padGroup(group) {
    if (group.length < 4) {
        return Object(sprintf_js__WEBPACK_IMPORTED_MODULE_1__["sprintf"])('0{0,%d}%s', 4 - group.length, group);
    }
    return group;
}
const ADDRESS_BOUNDARY = '[^A-Fa-f0-9:]';
function simpleRegularExpression(groups) {
    const zeroIndexes = [];
    groups.forEach((group, i) => {
        const groupInteger = parseInt(group, 16);
        if (groupInteger === 0) {
            zeroIndexes.push(i);
        }
    });
    // You can technically elide a single 0, this creates the regular expressions
    // to match that eventuality
    const possibilities = zeroIndexes.map((zeroIndex) => groups
        .map((group, i) => {
        if (i === zeroIndex) {
            const elision = i === 0 || i === _constants__WEBPACK_IMPORTED_MODULE_0__["GROUPS"] - 1 ? ':' : '';
            return groupPossibilities([padGroup(group), elision]);
        }
        return padGroup(group);
    })
        .join(':'));
    // The simplest case
    possibilities.push(groups.map(padGroup).join(':'));
    return groupPossibilities(possibilities);
}
function possibleElisions(elidedGroups, moreLeft, moreRight) {
    const left = moreLeft ? '' : ':';
    const right = moreRight ? '' : ':';
    const possibilities = [];
    // 1. elision of everything (::)
    if (!moreLeft && !moreRight) {
        possibilities.push('::');
    }
    // 2. complete elision of the middle
    if (moreLeft && moreRight) {
        possibilities.push('');
    }
    if ((moreRight && !moreLeft) || (!moreRight && moreLeft)) {
        // 3. complete elision of one side
        possibilities.push(':');
    }
    // 4. elision from the left side
    possibilities.push(Object(sprintf_js__WEBPACK_IMPORTED_MODULE_1__["sprintf"])('%s(:0{1,4}){1,%d}', left, elidedGroups - 1));
    // 5. elision from the right side
    possibilities.push(Object(sprintf_js__WEBPACK_IMPORTED_MODULE_1__["sprintf"])('(0{1,4}:){1,%d}%s', elidedGroups - 1, right));
    // 6. no elision
    possibilities.push(Object(sprintf_js__WEBPACK_IMPORTED_MODULE_1__["sprintf"])('(0{1,4}:){%d}0{1,4}', elidedGroups - 1));
    // 7. elision (including sloppy elision) from the middle
    for (let groups = 1; groups < elidedGroups - 1; groups++) {
        for (let position = 1; position < elidedGroups - groups; position++) {
            possibilities.push(Object(sprintf_js__WEBPACK_IMPORTED_MODULE_1__["sprintf"])('(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}', position, elidedGroups - position - groups - 1));
        }
    }
    return groupPossibilities(possibilities);
}
//# sourceMappingURL=regular-expressions.js.map

/***/ }),

/***/ "./node_modules/ip-address/node_modules/jsbn/index.js":
/*!************************************************************!*\
  !*** ./node_modules/ip-address/node_modules/jsbn/index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(function(){

    // Copyright (c) 2005  Tom Wu
    // All Rights Reserved.
    // See "LICENSE" for details.

    // Basic JavaScript BN library - subset useful for RSA encryption.

    // Bits per digit
    var dbits;

    // JavaScript engine analysis
    var canary = 0xdeadbeefcafe;
    var j_lm = ((canary&0xffffff)==0xefcafe);

    // (public) Constructor
    function BigInteger(a,b,c) {
      if(a != null)
        if("number" == typeof a) this.fromNumber(a,b,c);
        else if(b == null && "string" != typeof a) this.fromString(a,256);
        else this.fromString(a,b);
    }

    // return new, unset BigInteger
    function nbi() { return new BigInteger(null); }

    // am: Compute w_j += (x*this_i), propagate carries,
    // c is initial carry, returns final carry.
    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
    // We need to select the fastest one that works in this environment.

    // am1: use a single mult and divide to get the high bits,
    // max digit bits should be 26 because
    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
    function am1(i,x,w,j,c,n) {
      while(--n >= 0) {
        var v = x*this[i++]+w[j]+c;
        c = Math.floor(v/0x4000000);
        w[j++] = v&0x3ffffff;
      }
      return c;
    }
    // am2 avoids a big mult-and-extract completely.
    // Max digit bits should be <= 30 because we do bitwise ops
    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
    function am2(i,x,w,j,c,n) {
      var xl = x&0x7fff, xh = x>>15;
      while(--n >= 0) {
        var l = this[i]&0x7fff;
        var h = this[i++]>>15;
        var m = xh*l+h*xl;
        l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
        c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
        w[j++] = l&0x3fffffff;
      }
      return c;
    }
    // Alternately, set max digit bits to 28 since some
    // browsers slow down when dealing with 32-bit numbers.
    function am3(i,x,w,j,c,n) {
      var xl = x&0x3fff, xh = x>>14;
      while(--n >= 0) {
        var l = this[i]&0x3fff;
        var h = this[i++]>>14;
        var m = xh*l+h*xl;
        l = xl*l+((m&0x3fff)<<14)+w[j]+c;
        c = (l>>28)+(m>>14)+xh*h;
        w[j++] = l&0xfffffff;
      }
      return c;
    }
    var inBrowser = typeof navigator !== "undefined";
    if(inBrowser && j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
      BigInteger.prototype.am = am2;
      dbits = 30;
    }
    else if(inBrowser && j_lm && (navigator.appName != "Netscape")) {
      BigInteger.prototype.am = am1;
      dbits = 26;
    }
    else { // Mozilla/Netscape seems to prefer am3
      BigInteger.prototype.am = am3;
      dbits = 28;
    }

    BigInteger.prototype.DB = dbits;
    BigInteger.prototype.DM = ((1<<dbits)-1);
    BigInteger.prototype.DV = (1<<dbits);

    var BI_FP = 52;
    BigInteger.prototype.FV = Math.pow(2,BI_FP);
    BigInteger.prototype.F1 = BI_FP-dbits;
    BigInteger.prototype.F2 = 2*dbits-BI_FP;

    // Digit conversions
    var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
    var BI_RC = new Array();
    var rr,vv;
    rr = "0".charCodeAt(0);
    for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
    rr = "a".charCodeAt(0);
    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
    rr = "A".charCodeAt(0);
    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

    function int2char(n) { return BI_RM.charAt(n); }
    function intAt(s,i) {
      var c = BI_RC[s.charCodeAt(i)];
      return (c==null)?-1:c;
    }

    // (protected) copy this to r
    function bnpCopyTo(r) {
      for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
      r.t = this.t;
      r.s = this.s;
    }

    // (protected) set from integer value x, -DV <= x < DV
    function bnpFromInt(x) {
      this.t = 1;
      this.s = (x<0)?-1:0;
      if(x > 0) this[0] = x;
      else if(x < -1) this[0] = x+this.DV;
      else this.t = 0;
    }

    // return bigint initialized to value
    function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

    // (protected) set from string and radix
    function bnpFromString(s,b) {
      var k;
      if(b == 16) k = 4;
      else if(b == 8) k = 3;
      else if(b == 256) k = 8; // byte array
      else if(b == 2) k = 1;
      else if(b == 32) k = 5;
      else if(b == 4) k = 2;
      else { this.fromRadix(s,b); return; }
      this.t = 0;
      this.s = 0;
      var i = s.length, mi = false, sh = 0;
      while(--i >= 0) {
        var x = (k==8)?s[i]&0xff:intAt(s,i);
        if(x < 0) {
          if(s.charAt(i) == "-") mi = true;
          continue;
        }
        mi = false;
        if(sh == 0)
          this[this.t++] = x;
        else if(sh+k > this.DB) {
          this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
          this[this.t++] = (x>>(this.DB-sh));
        }
        else
          this[this.t-1] |= x<<sh;
        sh += k;
        if(sh >= this.DB) sh -= this.DB;
      }
      if(k == 8 && (s[0]&0x80) != 0) {
        this.s = -1;
        if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
      }
      this.clamp();
      if(mi) BigInteger.ZERO.subTo(this,this);
    }

    // (protected) clamp off excess high words
    function bnpClamp() {
      var c = this.s&this.DM;
      while(this.t > 0 && this[this.t-1] == c) --this.t;
    }

    // (public) return string representation in given radix
    function bnToString(b) {
      if(this.s < 0) return "-"+this.negate().toString(b);
      var k;
      if(b == 16) k = 4;
      else if(b == 8) k = 3;
      else if(b == 2) k = 1;
      else if(b == 32) k = 5;
      else if(b == 4) k = 2;
      else return this.toRadix(b);
      var km = (1<<k)-1, d, m = false, r = "", i = this.t;
      var p = this.DB-(i*this.DB)%k;
      if(i-- > 0) {
        if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
        while(i >= 0) {
          if(p < k) {
            d = (this[i]&((1<<p)-1))<<(k-p);
            d |= this[--i]>>(p+=this.DB-k);
          }
          else {
            d = (this[i]>>(p-=k))&km;
            if(p <= 0) { p += this.DB; --i; }
          }
          if(d > 0) m = true;
          if(m) r += int2char(d);
        }
      }
      return m?r:"0";
    }

    // (public) -this
    function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

    // (public) |this|
    function bnAbs() { return (this.s<0)?this.negate():this; }

    // (public) return + if this > a, - if this < a, 0 if equal
    function bnCompareTo(a) {
      var r = this.s-a.s;
      if(r != 0) return r;
      var i = this.t;
      r = i-a.t;
      if(r != 0) return (this.s<0)?-r:r;
      while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
      return 0;
    }

    // returns bit length of the integer x
    function nbits(x) {
      var r = 1, t;
      if((t=x>>>16) != 0) { x = t; r += 16; }
      if((t=x>>8) != 0) { x = t; r += 8; }
      if((t=x>>4) != 0) { x = t; r += 4; }
      if((t=x>>2) != 0) { x = t; r += 2; }
      if((t=x>>1) != 0) { x = t; r += 1; }
      return r;
    }

    // (public) return the number of bits in "this"
    function bnBitLength() {
      if(this.t <= 0) return 0;
      return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
    }

    // (protected) r = this << n*DB
    function bnpDLShiftTo(n,r) {
      var i;
      for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
      for(i = n-1; i >= 0; --i) r[i] = 0;
      r.t = this.t+n;
      r.s = this.s;
    }

    // (protected) r = this >> n*DB
    function bnpDRShiftTo(n,r) {
      for(var i = n; i < this.t; ++i) r[i-n] = this[i];
      r.t = Math.max(this.t-n,0);
      r.s = this.s;
    }

    // (protected) r = this << n
    function bnpLShiftTo(n,r) {
      var bs = n%this.DB;
      var cbs = this.DB-bs;
      var bm = (1<<cbs)-1;
      var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
      for(i = this.t-1; i >= 0; --i) {
        r[i+ds+1] = (this[i]>>cbs)|c;
        c = (this[i]&bm)<<bs;
      }
      for(i = ds-1; i >= 0; --i) r[i] = 0;
      r[ds] = c;
      r.t = this.t+ds+1;
      r.s = this.s;
      r.clamp();
    }

    // (protected) r = this >> n
    function bnpRShiftTo(n,r) {
      r.s = this.s;
      var ds = Math.floor(n/this.DB);
      if(ds >= this.t) { r.t = 0; return; }
      var bs = n%this.DB;
      var cbs = this.DB-bs;
      var bm = (1<<bs)-1;
      r[0] = this[ds]>>bs;
      for(var i = ds+1; i < this.t; ++i) {
        r[i-ds-1] |= (this[i]&bm)<<cbs;
        r[i-ds] = this[i]>>bs;
      }
      if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
      r.t = this.t-ds;
      r.clamp();
    }

    // (protected) r = this - a
    function bnpSubTo(a,r) {
      var i = 0, c = 0, m = Math.min(a.t,this.t);
      while(i < m) {
        c += this[i]-a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      if(a.t < this.t) {
        c -= a.s;
        while(i < this.t) {
          c += this[i];
          r[i++] = c&this.DM;
          c >>= this.DB;
        }
        c += this.s;
      }
      else {
        c += this.s;
        while(i < a.t) {
          c -= a[i];
          r[i++] = c&this.DM;
          c >>= this.DB;
        }
        c -= a.s;
      }
      r.s = (c<0)?-1:0;
      if(c < -1) r[i++] = this.DV+c;
      else if(c > 0) r[i++] = c;
      r.t = i;
      r.clamp();
    }

    // (protected) r = this * a, r != this,a (HAC 14.12)
    // "this" should be the larger one if appropriate.
    function bnpMultiplyTo(a,r) {
      var x = this.abs(), y = a.abs();
      var i = x.t;
      r.t = i+y.t;
      while(--i >= 0) r[i] = 0;
      for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
      r.s = 0;
      r.clamp();
      if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
    }

    // (protected) r = this^2, r != this (HAC 14.16)
    function bnpSquareTo(r) {
      var x = this.abs();
      var i = r.t = 2*x.t;
      while(--i >= 0) r[i] = 0;
      for(i = 0; i < x.t-1; ++i) {
        var c = x.am(i,x[i],r,2*i,0,1);
        if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
          r[i+x.t] -= x.DV;
          r[i+x.t+1] = 1;
        }
      }
      if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
      r.s = 0;
      r.clamp();
    }

    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
    // r != q, this != m.  q or r may be null.
    function bnpDivRemTo(m,q,r) {
      var pm = m.abs();
      if(pm.t <= 0) return;
      var pt = this.abs();
      if(pt.t < pm.t) {
        if(q != null) q.fromInt(0);
        if(r != null) this.copyTo(r);
        return;
      }
      if(r == null) r = nbi();
      var y = nbi(), ts = this.s, ms = m.s;
      var nsh = this.DB-nbits(pm[pm.t-1]);   // normalize modulus
      if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
      else { pm.copyTo(y); pt.copyTo(r); }
      var ys = y.t;
      var y0 = y[ys-1];
      if(y0 == 0) return;
      var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
      var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
      var i = r.t, j = i-ys, t = (q==null)?nbi():q;
      y.dlShiftTo(j,t);
      if(r.compareTo(t) >= 0) {
        r[r.t++] = 1;
        r.subTo(t,r);
      }
      BigInteger.ONE.dlShiftTo(ys,t);
      t.subTo(y,y);  // "negative" y so we can replace sub with am later
      while(y.t < ys) y[y.t++] = 0;
      while(--j >= 0) {
        // Estimate quotient digit
        var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
        if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {   // Try it out
          y.dlShiftTo(j,t);
          r.subTo(t,r);
          while(r[i] < --qd) r.subTo(t,r);
        }
      }
      if(q != null) {
        r.drShiftTo(ys,q);
        if(ts != ms) BigInteger.ZERO.subTo(q,q);
      }
      r.t = ys;
      r.clamp();
      if(nsh > 0) r.rShiftTo(nsh,r); // Denormalize remainder
      if(ts < 0) BigInteger.ZERO.subTo(r,r);
    }

    // (public) this mod a
    function bnMod(a) {
      var r = nbi();
      this.abs().divRemTo(a,null,r);
      if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
      return r;
    }

    // Modular reduction using "classic" algorithm
    function Classic(m) { this.m = m; }
    function cConvert(x) {
      if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
      else return x;
    }
    function cRevert(x) { return x; }
    function cReduce(x) { x.divRemTo(this.m,null,x); }
    function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
    function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

    Classic.prototype.convert = cConvert;
    Classic.prototype.revert = cRevert;
    Classic.prototype.reduce = cReduce;
    Classic.prototype.mulTo = cMulTo;
    Classic.prototype.sqrTo = cSqrTo;

    // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
    // justification:
    //         xy == 1 (mod m)
    //         xy =  1+km
    //   xy(2-xy) = (1+km)(1-km)
    // x[y(2-xy)] = 1-k^2m^2
    // x[y(2-xy)] == 1 (mod m^2)
    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
    // JS multiply "overflows" differently from C/C++, so care is needed here.
    function bnpInvDigit() {
      if(this.t < 1) return 0;
      var x = this[0];
      if((x&1) == 0) return 0;
      var y = x&3;       // y == 1/x mod 2^2
      y = (y*(2-(x&0xf)*y))&0xf; // y == 1/x mod 2^4
      y = (y*(2-(x&0xff)*y))&0xff;   // y == 1/x mod 2^8
      y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;    // y == 1/x mod 2^16
      // last step - calculate inverse mod DV directly;
      // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
      y = (y*(2-x*y%this.DV))%this.DV;       // y == 1/x mod 2^dbits
      // we really want the negative inverse, and -DV < y < DV
      return (y>0)?this.DV-y:-y;
    }

    // Montgomery reduction
    function Montgomery(m) {
      this.m = m;
      this.mp = m.invDigit();
      this.mpl = this.mp&0x7fff;
      this.mph = this.mp>>15;
      this.um = (1<<(m.DB-15))-1;
      this.mt2 = 2*m.t;
    }

    // xR mod m
    function montConvert(x) {
      var r = nbi();
      x.abs().dlShiftTo(this.m.t,r);
      r.divRemTo(this.m,null,r);
      if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
      return r;
    }

    // x/R mod m
    function montRevert(x) {
      var r = nbi();
      x.copyTo(r);
      this.reduce(r);
      return r;
    }

    // x = x/R mod m (HAC 14.32)
    function montReduce(x) {
      while(x.t <= this.mt2) // pad x so am has enough room later
        x[x.t++] = 0;
      for(var i = 0; i < this.m.t; ++i) {
        // faster way of calculating u0 = x[i]*mp mod DV
        var j = x[i]&0x7fff;
        var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
        // use am to combine the multiply-shift-add into one call
        j = i+this.m.t;
        x[j] += this.m.am(0,u0,x,i,0,this.m.t);
        // propagate carry
        while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
      }
      x.clamp();
      x.drShiftTo(this.m.t,x);
      if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
    }

    // r = "x^2/R mod m"; x != r
    function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

    // r = "xy/R mod m"; x,y != r
    function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

    Montgomery.prototype.convert = montConvert;
    Montgomery.prototype.revert = montRevert;
    Montgomery.prototype.reduce = montReduce;
    Montgomery.prototype.mulTo = montMulTo;
    Montgomery.prototype.sqrTo = montSqrTo;

    // (protected) true iff this is even
    function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

    // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
    function bnpExp(e,z) {
      if(e > 0xffffffff || e < 1) return BigInteger.ONE;
      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
      g.copyTo(r);
      while(--i >= 0) {
        z.sqrTo(r,r2);
        if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
        else { var t = r; r = r2; r2 = t; }
      }
      return z.revert(r);
    }

    // (public) this^e % m, 0 <= e < 2^32
    function bnModPowInt(e,m) {
      var z;
      if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
      return this.exp(e,z);
    }

    // protected
    BigInteger.prototype.copyTo = bnpCopyTo;
    BigInteger.prototype.fromInt = bnpFromInt;
    BigInteger.prototype.fromString = bnpFromString;
    BigInteger.prototype.clamp = bnpClamp;
    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
    BigInteger.prototype.drShiftTo = bnpDRShiftTo;
    BigInteger.prototype.lShiftTo = bnpLShiftTo;
    BigInteger.prototype.rShiftTo = bnpRShiftTo;
    BigInteger.prototype.subTo = bnpSubTo;
    BigInteger.prototype.multiplyTo = bnpMultiplyTo;
    BigInteger.prototype.squareTo = bnpSquareTo;
    BigInteger.prototype.divRemTo = bnpDivRemTo;
    BigInteger.prototype.invDigit = bnpInvDigit;
    BigInteger.prototype.isEven = bnpIsEven;
    BigInteger.prototype.exp = bnpExp;

    // public
    BigInteger.prototype.toString = bnToString;
    BigInteger.prototype.negate = bnNegate;
    BigInteger.prototype.abs = bnAbs;
    BigInteger.prototype.compareTo = bnCompareTo;
    BigInteger.prototype.bitLength = bnBitLength;
    BigInteger.prototype.mod = bnMod;
    BigInteger.prototype.modPowInt = bnModPowInt;

    // "constants"
    BigInteger.ZERO = nbv(0);
    BigInteger.ONE = nbv(1);

    // Copyright (c) 2005-2009  Tom Wu
    // All Rights Reserved.
    // See "LICENSE" for details.

    // Extended JavaScript BN functions, required for RSA private ops.

    // Version 1.1: new BigInteger("0", 10) returns "proper" zero
    // Version 1.2: square() API, isProbablePrime fix

    // (public)
    function bnClone() { var r = nbi(); this.copyTo(r); return r; }

    // (public) return value as integer
    function bnIntValue() {
      if(this.s < 0) {
        if(this.t == 1) return this[0]-this.DV;
        else if(this.t == 0) return -1;
      }
      else if(this.t == 1) return this[0];
      else if(this.t == 0) return 0;
      // assumes 16 < DB < 32
      return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
    }

    // (public) return value as byte
    function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }

    // (public) return value as short (assumes DB>=16)
    function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }

    // (protected) return x s.t. r^x < DV
    function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

    // (public) 0 if this == 0, 1 if this > 0
    function bnSigNum() {
      if(this.s < 0) return -1;
      else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
      else return 1;
    }

    // (protected) convert to radix string
    function bnpToRadix(b) {
      if(b == null) b = 10;
      if(this.signum() == 0 || b < 2 || b > 36) return "0";
      var cs = this.chunkSize(b);
      var a = Math.pow(b,cs);
      var d = nbv(a), y = nbi(), z = nbi(), r = "";
      this.divRemTo(d,y,z);
      while(y.signum() > 0) {
        r = (a+z.intValue()).toString(b).substr(1) + r;
        y.divRemTo(d,y,z);
      }
      return z.intValue().toString(b) + r;
    }

    // (protected) convert from radix string
    function bnpFromRadix(s,b) {
      this.fromInt(0);
      if(b == null) b = 10;
      var cs = this.chunkSize(b);
      var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
      for(var i = 0; i < s.length; ++i) {
        var x = intAt(s,i);
        if(x < 0) {
          if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
          continue;
        }
        w = b*w+x;
        if(++j >= cs) {
          this.dMultiply(d);
          this.dAddOffset(w,0);
          j = 0;
          w = 0;
        }
      }
      if(j > 0) {
        this.dMultiply(Math.pow(b,j));
        this.dAddOffset(w,0);
      }
      if(mi) BigInteger.ZERO.subTo(this,this);
    }

    // (protected) alternate constructor
    function bnpFromNumber(a,b,c) {
      if("number" == typeof b) {
        // new BigInteger(int,int,RNG)
        if(a < 2) this.fromInt(1);
        else {
          this.fromNumber(a,c);
          if(!this.testBit(a-1))    // force MSB set
            this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);
          if(this.isEven()) this.dAddOffset(1,0); // force odd
          while(!this.isProbablePrime(b)) {
            this.dAddOffset(2,0);
            if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);
          }
        }
      }
      else {
        // new BigInteger(int,RNG)
        var x = new Array(), t = a&7;
        x.length = (a>>3)+1;
        b.nextBytes(x);
        if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;
        this.fromString(x,256);
      }
    }

    // (public) convert to bigendian byte array
    function bnToByteArray() {
      var i = this.t, r = new Array();
      r[0] = this.s;
      var p = this.DB-(i*this.DB)%8, d, k = 0;
      if(i-- > 0) {
        if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)
          r[k++] = d|(this.s<<(this.DB-p));
        while(i >= 0) {
          if(p < 8) {
            d = (this[i]&((1<<p)-1))<<(8-p);
            d |= this[--i]>>(p+=this.DB-8);
          }
          else {
            d = (this[i]>>(p-=8))&0xff;
            if(p <= 0) { p += this.DB; --i; }
          }
          if((d&0x80) != 0) d |= -256;
          if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;
          if(k > 0 || d != this.s) r[k++] = d;
        }
      }
      return r;
    }

    function bnEquals(a) { return(this.compareTo(a)==0); }
    function bnMin(a) { return(this.compareTo(a)<0)?this:a; }
    function bnMax(a) { return(this.compareTo(a)>0)?this:a; }

    // (protected) r = this op a (bitwise)
    function bnpBitwiseTo(a,op,r) {
      var i, f, m = Math.min(a.t,this.t);
      for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);
      if(a.t < this.t) {
        f = a.s&this.DM;
        for(i = m; i < this.t; ++i) r[i] = op(this[i],f);
        r.t = this.t;
      }
      else {
        f = this.s&this.DM;
        for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);
        r.t = a.t;
      }
      r.s = op(this.s,a.s);
      r.clamp();
    }

    // (public) this & a
    function op_and(x,y) { return x&y; }
    function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }

    // (public) this | a
    function op_or(x,y) { return x|y; }
    function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }

    // (public) this ^ a
    function op_xor(x,y) { return x^y; }
    function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }

    // (public) this & ~a
    function op_andnot(x,y) { return x&~y; }
    function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }

    // (public) ~this
    function bnNot() {
      var r = nbi();
      for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];
      r.t = this.t;
      r.s = ~this.s;
      return r;
    }

    // (public) this << n
    function bnShiftLeft(n) {
      var r = nbi();
      if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);
      return r;
    }

    // (public) this >> n
    function bnShiftRight(n) {
      var r = nbi();
      if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);
      return r;
    }

    // return index of lowest 1-bit in x, x < 2^31
    function lbit(x) {
      if(x == 0) return -1;
      var r = 0;
      if((x&0xffff) == 0) { x >>= 16; r += 16; }
      if((x&0xff) == 0) { x >>= 8; r += 8; }
      if((x&0xf) == 0) { x >>= 4; r += 4; }
      if((x&3) == 0) { x >>= 2; r += 2; }
      if((x&1) == 0) ++r;
      return r;
    }

    // (public) returns index of lowest 1-bit (or -1 if none)
    function bnGetLowestSetBit() {
      for(var i = 0; i < this.t; ++i)
        if(this[i] != 0) return i*this.DB+lbit(this[i]);
      if(this.s < 0) return this.t*this.DB;
      return -1;
    }

    // return number of 1 bits in x
    function cbit(x) {
      var r = 0;
      while(x != 0) { x &= x-1; ++r; }
      return r;
    }

    // (public) return number of set bits
    function bnBitCount() {
      var r = 0, x = this.s&this.DM;
      for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);
      return r;
    }

    // (public) true iff nth bit is set
    function bnTestBit(n) {
      var j = Math.floor(n/this.DB);
      if(j >= this.t) return(this.s!=0);
      return((this[j]&(1<<(n%this.DB)))!=0);
    }

    // (protected) this op (1<<n)
    function bnpChangeBit(n,op) {
      var r = BigInteger.ONE.shiftLeft(n);
      this.bitwiseTo(r,op,r);
      return r;
    }

    // (public) this | (1<<n)
    function bnSetBit(n) { return this.changeBit(n,op_or); }

    // (public) this & ~(1<<n)
    function bnClearBit(n) { return this.changeBit(n,op_andnot); }

    // (public) this ^ (1<<n)
    function bnFlipBit(n) { return this.changeBit(n,op_xor); }

    // (protected) r = this + a
    function bnpAddTo(a,r) {
      var i = 0, c = 0, m = Math.min(a.t,this.t);
      while(i < m) {
        c += this[i]+a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      if(a.t < this.t) {
        c += a.s;
        while(i < this.t) {
          c += this[i];
          r[i++] = c&this.DM;
          c >>= this.DB;
        }
        c += this.s;
      }
      else {
        c += this.s;
        while(i < a.t) {
          c += a[i];
          r[i++] = c&this.DM;
          c >>= this.DB;
        }
        c += a.s;
      }
      r.s = (c<0)?-1:0;
      if(c > 0) r[i++] = c;
      else if(c < -1) r[i++] = this.DV+c;
      r.t = i;
      r.clamp();
    }

    // (public) this + a
    function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }

    // (public) this - a
    function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }

    // (public) this * a
    function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }

    // (public) this^2
    function bnSquare() { var r = nbi(); this.squareTo(r); return r; }

    // (public) this / a
    function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }

    // (public) this % a
    function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }

    // (public) [this/a,this%a]
    function bnDivideAndRemainder(a) {
      var q = nbi(), r = nbi();
      this.divRemTo(a,q,r);
      return new Array(q,r);
    }

    // (protected) this *= n, this >= 0, 1 < n < DV
    function bnpDMultiply(n) {
      this[this.t] = this.am(0,n-1,this,0,0,this.t);
      ++this.t;
      this.clamp();
    }

    // (protected) this += n << w words, this >= 0
    function bnpDAddOffset(n,w) {
      if(n == 0) return;
      while(this.t <= w) this[this.t++] = 0;
      this[w] += n;
      while(this[w] >= this.DV) {
        this[w] -= this.DV;
        if(++w >= this.t) this[this.t++] = 0;
        ++this[w];
      }
    }

    // A "null" reducer
    function NullExp() {}
    function nNop(x) { return x; }
    function nMulTo(x,y,r) { x.multiplyTo(y,r); }
    function nSqrTo(x,r) { x.squareTo(r); }

    NullExp.prototype.convert = nNop;
    NullExp.prototype.revert = nNop;
    NullExp.prototype.mulTo = nMulTo;
    NullExp.prototype.sqrTo = nSqrTo;

    // (public) this^e
    function bnPow(e) { return this.exp(e,new NullExp()); }

    // (protected) r = lower n words of "this * a", a.t <= n
    // "this" should be the larger one if appropriate.
    function bnpMultiplyLowerTo(a,n,r) {
      var i = Math.min(this.t+a.t,n);
      r.s = 0; // assumes a,this >= 0
      r.t = i;
      while(i > 0) r[--i] = 0;
      var j;
      for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);
      for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);
      r.clamp();
    }

    // (protected) r = "this * a" without lower n words, n > 0
    // "this" should be the larger one if appropriate.
    function bnpMultiplyUpperTo(a,n,r) {
      --n;
      var i = r.t = this.t+a.t-n;
      r.s = 0; // assumes a,this >= 0
      while(--i >= 0) r[i] = 0;
      for(i = Math.max(n-this.t,0); i < a.t; ++i)
        r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);
      r.clamp();
      r.drShiftTo(1,r);
    }

    // Barrett modular reduction
    function Barrett(m) {
      // setup Barrett
      this.r2 = nbi();
      this.q3 = nbi();
      BigInteger.ONE.dlShiftTo(2*m.t,this.r2);
      this.mu = this.r2.divide(m);
      this.m = m;
    }

    function barrettConvert(x) {
      if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);
      else if(x.compareTo(this.m) < 0) return x;
      else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }
    }

    function barrettRevert(x) { return x; }

    // x = x mod m (HAC 14.42)
    function barrettReduce(x) {
      x.drShiftTo(this.m.t-1,this.r2);
      if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }
      this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);
      this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);
      while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);
      x.subTo(this.r2,x);
      while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
    }

    // r = x^2 mod m; x != r
    function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

    // r = x*y mod m; x,y != r
    function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

    Barrett.prototype.convert = barrettConvert;
    Barrett.prototype.revert = barrettRevert;
    Barrett.prototype.reduce = barrettReduce;
    Barrett.prototype.mulTo = barrettMulTo;
    Barrett.prototype.sqrTo = barrettSqrTo;

    // (public) this^e % m (HAC 14.85)
    function bnModPow(e,m) {
      var i = e.bitLength(), k, r = nbv(1), z;
      if(i <= 0) return r;
      else if(i < 18) k = 1;
      else if(i < 48) k = 3;
      else if(i < 144) k = 4;
      else if(i < 768) k = 5;
      else k = 6;
      if(i < 8)
        z = new Classic(m);
      else if(m.isEven())
        z = new Barrett(m);
      else
        z = new Montgomery(m);

      // precomputation
      var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;
      g[1] = z.convert(this);
      if(k > 1) {
        var g2 = nbi();
        z.sqrTo(g[1],g2);
        while(n <= km) {
          g[n] = nbi();
          z.mulTo(g2,g[n-2],g[n]);
          n += 2;
        }
      }

      var j = e.t-1, w, is1 = true, r2 = nbi(), t;
      i = nbits(e[j])-1;
      while(j >= 0) {
        if(i >= k1) w = (e[j]>>(i-k1))&km;
        else {
          w = (e[j]&((1<<(i+1))-1))<<(k1-i);
          if(j > 0) w |= e[j-1]>>(this.DB+i-k1);
        }

        n = k;
        while((w&1) == 0) { w >>= 1; --n; }
        if((i -= n) < 0) { i += this.DB; --j; }
        if(is1) {    // ret == 1, don't bother squaring or multiplying it
          g[w].copyTo(r);
          is1 = false;
        }
        else {
          while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }
          if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }
          z.mulTo(r2,g[w],r);
        }

        while(j >= 0 && (e[j]&(1<<i)) == 0) {
          z.sqrTo(r,r2); t = r; r = r2; r2 = t;
          if(--i < 0) { i = this.DB-1; --j; }
        }
      }
      return z.revert(r);
    }

    // (public) gcd(this,a) (HAC 14.54)
    function bnGCD(a) {
      var x = (this.s<0)?this.negate():this.clone();
      var y = (a.s<0)?a.negate():a.clone();
      if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }
      var i = x.getLowestSetBit(), g = y.getLowestSetBit();
      if(g < 0) return x;
      if(i < g) g = i;
      if(g > 0) {
        x.rShiftTo(g,x);
        y.rShiftTo(g,y);
      }
      while(x.signum() > 0) {
        if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);
        if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);
        if(x.compareTo(y) >= 0) {
          x.subTo(y,x);
          x.rShiftTo(1,x);
        }
        else {
          y.subTo(x,y);
          y.rShiftTo(1,y);
        }
      }
      if(g > 0) y.lShiftTo(g,y);
      return y;
    }

    // (protected) this % n, n < 2^26
    function bnpModInt(n) {
      if(n <= 0) return 0;
      var d = this.DV%n, r = (this.s<0)?n-1:0;
      if(this.t > 0)
        if(d == 0) r = this[0]%n;
        else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;
      return r;
    }

    // (public) 1/this % m (HAC 14.61)
    function bnModInverse(m) {
      var ac = m.isEven();
      if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;
      var u = m.clone(), v = this.clone();
      var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
      while(u.signum() != 0) {
        while(u.isEven()) {
          u.rShiftTo(1,u);
          if(ac) {
            if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }
            a.rShiftTo(1,a);
          }
          else if(!b.isEven()) b.subTo(m,b);
          b.rShiftTo(1,b);
        }
        while(v.isEven()) {
          v.rShiftTo(1,v);
          if(ac) {
            if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }
            c.rShiftTo(1,c);
          }
          else if(!d.isEven()) d.subTo(m,d);
          d.rShiftTo(1,d);
        }
        if(u.compareTo(v) >= 0) {
          u.subTo(v,u);
          if(ac) a.subTo(c,a);
          b.subTo(d,b);
        }
        else {
          v.subTo(u,v);
          if(ac) c.subTo(a,c);
          d.subTo(b,d);
        }
      }
      if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
      if(d.compareTo(m) >= 0) return d.subtract(m);
      if(d.signum() < 0) d.addTo(m,d); else return d;
      if(d.signum() < 0) return d.add(m); else return d;
    }

    var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];
    var lplim = (1<<26)/lowprimes[lowprimes.length-1];

    // (public) test primality with certainty >= 1-.5^t
    function bnIsProbablePrime(t) {
      var i, x = this.abs();
      if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {
        for(i = 0; i < lowprimes.length; ++i)
          if(x[0] == lowprimes[i]) return true;
        return false;
      }
      if(x.isEven()) return false;
      i = 1;
      while(i < lowprimes.length) {
        var m = lowprimes[i], j = i+1;
        while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];
        m = x.modInt(m);
        while(i < j) if(m%lowprimes[i++] == 0) return false;
      }
      return x.millerRabin(t);
    }

    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)
    function bnpMillerRabin(t) {
      var n1 = this.subtract(BigInteger.ONE);
      var k = n1.getLowestSetBit();
      if(k <= 0) return false;
      var r = n1.shiftRight(k);
      t = (t+1)>>1;
      if(t > lowprimes.length) t = lowprimes.length;
      var a = nbi();
      for(var i = 0; i < t; ++i) {
        //Pick bases at random, instead of starting at 2
        a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);
        var y = a.modPow(r,this);
        if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
          var j = 1;
          while(j++ < k && y.compareTo(n1) != 0) {
            y = y.modPowInt(2,this);
            if(y.compareTo(BigInteger.ONE) == 0) return false;
          }
          if(y.compareTo(n1) != 0) return false;
        }
      }
      return true;
    }

    // protected
    BigInteger.prototype.chunkSize = bnpChunkSize;
    BigInteger.prototype.toRadix = bnpToRadix;
    BigInteger.prototype.fromRadix = bnpFromRadix;
    BigInteger.prototype.fromNumber = bnpFromNumber;
    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
    BigInteger.prototype.changeBit = bnpChangeBit;
    BigInteger.prototype.addTo = bnpAddTo;
    BigInteger.prototype.dMultiply = bnpDMultiply;
    BigInteger.prototype.dAddOffset = bnpDAddOffset;
    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
    BigInteger.prototype.modInt = bnpModInt;
    BigInteger.prototype.millerRabin = bnpMillerRabin;

    // public
    BigInteger.prototype.clone = bnClone;
    BigInteger.prototype.intValue = bnIntValue;
    BigInteger.prototype.byteValue = bnByteValue;
    BigInteger.prototype.shortValue = bnShortValue;
    BigInteger.prototype.signum = bnSigNum;
    BigInteger.prototype.toByteArray = bnToByteArray;
    BigInteger.prototype.equals = bnEquals;
    BigInteger.prototype.min = bnMin;
    BigInteger.prototype.max = bnMax;
    BigInteger.prototype.and = bnAnd;
    BigInteger.prototype.or = bnOr;
    BigInteger.prototype.xor = bnXor;
    BigInteger.prototype.andNot = bnAndNot;
    BigInteger.prototype.not = bnNot;
    BigInteger.prototype.shiftLeft = bnShiftLeft;
    BigInteger.prototype.shiftRight = bnShiftRight;
    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
    BigInteger.prototype.bitCount = bnBitCount;
    BigInteger.prototype.testBit = bnTestBit;
    BigInteger.prototype.setBit = bnSetBit;
    BigInteger.prototype.clearBit = bnClearBit;
    BigInteger.prototype.flipBit = bnFlipBit;
    BigInteger.prototype.add = bnAdd;
    BigInteger.prototype.subtract = bnSubtract;
    BigInteger.prototype.multiply = bnMultiply;
    BigInteger.prototype.divide = bnDivide;
    BigInteger.prototype.remainder = bnRemainder;
    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
    BigInteger.prototype.modPow = bnModPow;
    BigInteger.prototype.modInverse = bnModInverse;
    BigInteger.prototype.pow = bnPow;
    BigInteger.prototype.gcd = bnGCD;
    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;

    // JSBN-specific extension
    BigInteger.prototype.square = bnSquare;

    // Expose the Barrett function
    BigInteger.prototype.Barrett = Barrett

    // BigInteger interfaces not implemented in jsbn:

    // BigInteger(int signum, byte[] magnitude)
    // double doubleValue()
    // float floatValue()
    // int hashCode()
    // long longValue()
    // static BigInteger valueOf(long val)

    // Random number generator - requires a PRNG backend, e.g. prng4.js

    // For best results, put code like
    // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>
    // in your main HTML document.

    var rng_state;
    var rng_pool;
    var rng_pptr;

    // Mix in a 32-bit integer into the pool
    function rng_seed_int(x) {
      rng_pool[rng_pptr++] ^= x & 255;
      rng_pool[rng_pptr++] ^= (x >> 8) & 255;
      rng_pool[rng_pptr++] ^= (x >> 16) & 255;
      rng_pool[rng_pptr++] ^= (x >> 24) & 255;
      if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;
    }

    // Mix in the current time (w/milliseconds) into the pool
    function rng_seed_time() {
      rng_seed_int(new Date().getTime());
    }

    // Initialize the pool with junk if needed.
    if(rng_pool == null) {
      rng_pool = new Array();
      rng_pptr = 0;
      var t;
      if(typeof window !== "undefined" && window.crypto) {
        if (window.crypto.getRandomValues) {
          // Use webcrypto if available
          var ua = new Uint8Array(32);
          window.crypto.getRandomValues(ua);
          for(t = 0; t < 32; ++t)
            rng_pool[rng_pptr++] = ua[t];
        }
        else if(navigator.appName == "Netscape" && navigator.appVersion < "5") {
          // Extract entropy (256 bits) from NS4 RNG if available
          var z = window.crypto.random(32);
          for(t = 0; t < z.length; ++t)
            rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
        }
      }
      while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()
        t = Math.floor(65536 * Math.random());
        rng_pool[rng_pptr++] = t >>> 8;
        rng_pool[rng_pptr++] = t & 255;
      }
      rng_pptr = 0;
      rng_seed_time();
      //rng_seed_int(window.screenX);
      //rng_seed_int(window.screenY);
    }

    function rng_get_byte() {
      if(rng_state == null) {
        rng_seed_time();
        rng_state = prng_newstate();
        rng_state.init(rng_pool);
        for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)
          rng_pool[rng_pptr] = 0;
        rng_pptr = 0;
        //rng_pool = null;
      }
      // TODO: allow reseeding after first request
      return rng_state.next();
    }

    function rng_get_bytes(ba) {
      var i;
      for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();
    }

    function SecureRandom() {}

    SecureRandom.prototype.nextBytes = rng_get_bytes;

    // prng4.js - uses Arcfour as a PRNG

    function Arcfour() {
      this.i = 0;
      this.j = 0;
      this.S = new Array();
    }

    // Initialize arcfour context from key, an array of ints, each from [0..255]
    function ARC4init(key) {
      var i, j, t;
      for(i = 0; i < 256; ++i)
        this.S[i] = i;
      j = 0;
      for(i = 0; i < 256; ++i) {
        j = (j + this.S[i] + key[i % key.length]) & 255;
        t = this.S[i];
        this.S[i] = this.S[j];
        this.S[j] = t;
      }
      this.i = 0;
      this.j = 0;
    }

    function ARC4next() {
      var t;
      this.i = (this.i + 1) & 255;
      this.j = (this.j + this.S[this.i]) & 255;
      t = this.S[this.i];
      this.S[this.i] = this.S[this.j];
      this.S[this.j] = t;
      return this.S[(t + this.S[this.i]) & 255];
    }

    Arcfour.prototype.init = ARC4init;
    Arcfour.prototype.next = ARC4next;

    // Plug in your RNG constructor here
    function prng_newstate() {
      return new Arcfour();
    }

    // Pool size must be a multiple of 4 and greater than 32.
    // An array of bytes the size of the pool will be passed to init()
    var rng_psize = 256;

    if (true) {
        exports = module.exports = {
            default: BigInteger,
            BigInteger: BigInteger,
            SecureRandom: SecureRandom,
        };
    } else {}

}).call(this);


/***/ }),

/***/ "./node_modules/ip-address/node_modules/sprintf-js/src/sprintf.js":
/*!************************************************************************!*\
  !*** ./node_modules/ip-address/node_modules/sprintf-js/src/sprintf.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/* global window, exports, define */

!function() {
    'use strict'

    var re = {
        not_string: /[^s]/,
        not_bool: /[^t]/,
        not_type: /[^T]/,
        not_primitive: /[^v]/,
        number: /[diefg]/,
        numeric_arg: /[bcdiefguxX]/,
        json: /[j]/,
        not_json: /[^j]/,
        text: /^[^\x25]+/,
        modulo: /^\x25{2}/,
        placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
        key: /^([a-z_][a-z_\d]*)/i,
        key_access: /^\.([a-z_][a-z_\d]*)/i,
        index_access: /^\[(\d+)\]/,
        sign: /^[+-]/
    }

    function sprintf(key) {
        // `arguments` is not an array, but should be fine for this call
        return sprintf_format(sprintf_parse(key), arguments)
    }

    function vsprintf(fmt, argv) {
        return sprintf.apply(null, [fmt].concat(argv || []))
    }

    function sprintf_format(parse_tree, argv) {
        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign
        for (i = 0; i < tree_length; i++) {
            if (typeof parse_tree[i] === 'string') {
                output += parse_tree[i]
            }
            else if (typeof parse_tree[i] === 'object') {
                ph = parse_tree[i] // convenience purposes only
                if (ph.keys) { // keyword argument
                    arg = argv[cursor]
                    for (k = 0; k < ph.keys.length; k++) {
                        if (arg == undefined) {
                            throw new Error(sprintf('[sprintf] Cannot access property "%s" of undefined value "%s"', ph.keys[k], ph.keys[k-1]))
                        }
                        arg = arg[ph.keys[k]]
                    }
                }
                else if (ph.param_no) { // positional argument (explicit)
                    arg = argv[ph.param_no]
                }
                else { // positional argument (implicit)
                    arg = argv[cursor++]
                }

                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {
                    arg = arg()
                }

                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {
                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))
                }

                if (re.number.test(ph.type)) {
                    is_positive = arg >= 0
                }

                switch (ph.type) {
                    case 'b':
                        arg = parseInt(arg, 10).toString(2)
                        break
                    case 'c':
                        arg = String.fromCharCode(parseInt(arg, 10))
                        break
                    case 'd':
                    case 'i':
                        arg = parseInt(arg, 10)
                        break
                    case 'j':
                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)
                        break
                    case 'e':
                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()
                        break
                    case 'f':
                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)
                        break
                    case 'g':
                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)
                        break
                    case 'o':
                        arg = (parseInt(arg, 10) >>> 0).toString(8)
                        break
                    case 's':
                        arg = String(arg)
                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)
                        break
                    case 't':
                        arg = String(!!arg)
                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)
                        break
                    case 'T':
                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()
                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)
                        break
                    case 'u':
                        arg = parseInt(arg, 10) >>> 0
                        break
                    case 'v':
                        arg = arg.valueOf()
                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)
                        break
                    case 'x':
                        arg = (parseInt(arg, 10) >>> 0).toString(16)
                        break
                    case 'X':
                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()
                        break
                }
                if (re.json.test(ph.type)) {
                    output += arg
                }
                else {
                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {
                        sign = is_positive ? '+' : '-'
                        arg = arg.toString().replace(re.sign, '')
                    }
                    else {
                        sign = ''
                    }
                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '
                    pad_length = ph.width - (sign + arg).length
                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''
                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)
                }
            }
        }
        return output
    }

    var sprintf_cache = Object.create(null)

    function sprintf_parse(fmt) {
        if (sprintf_cache[fmt]) {
            return sprintf_cache[fmt]
        }

        var _fmt = fmt, match, parse_tree = [], arg_names = 0
        while (_fmt) {
            if ((match = re.text.exec(_fmt)) !== null) {
                parse_tree.push(match[0])
            }
            else if ((match = re.modulo.exec(_fmt)) !== null) {
                parse_tree.push('%')
            }
            else if ((match = re.placeholder.exec(_fmt)) !== null) {
                if (match[2]) {
                    arg_names |= 1
                    var field_list = [], replacement_field = match[2], field_match = []
                    if ((field_match = re.key.exec(replacement_field)) !== null) {
                        field_list.push(field_match[1])
                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                                field_list.push(field_match[1])
                            }
                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                                field_list.push(field_match[1])
                            }
                            else {
                                throw new SyntaxError('[sprintf] failed to parse named argument key')
                            }
                        }
                    }
                    else {
                        throw new SyntaxError('[sprintf] failed to parse named argument key')
                    }
                    match[2] = field_list
                }
                else {
                    arg_names |= 2
                }
                if (arg_names === 3) {
                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')
                }

                parse_tree.push(
                    {
                        placeholder: match[0],
                        param_no:    match[1],
                        keys:        match[2],
                        sign:        match[3],
                        pad_char:    match[4],
                        align:       match[5],
                        width:       match[6],
                        precision:   match[7],
                        type:        match[8]
                    }
                )
            }
            else {
                throw new SyntaxError('[sprintf] unexpected placeholder')
            }
            _fmt = _fmt.substring(match[0].length)
        }
        return sprintf_cache[fmt] = parse_tree
    }

    /**
     * export to either browser or node.js
     */
    /* eslint-disable quote-props */
    if (true) {
        exports['sprintf'] = sprintf
        exports['vsprintf'] = vsprintf
    }
    if (typeof window !== 'undefined') {
        window['sprintf'] = sprintf
        window['vsprintf'] = vsprintf

        if (true) {
            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
                return {
                    'sprintf': sprintf,
                    'vsprintf': vsprintf
                }
            }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
        }
    }
    /* eslint-enable quote-props */
}(); // eslint-disable-line


/***/ }),

/***/ "./node_modules/ng2-file-upload/fesm2015/ng2-file-upload.js":
/*!******************************************************************!*\
  !*** ./node_modules/ng2-file-upload/fesm2015/ng2-file-upload.js ***!
  \******************************************************************/
/*! exports provided: FileDropDirective, FileItem, FileLikeObject, FileSelectDirective, FileUploadModule, FileUploader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileDropDirective", function() { return FileDropDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileItem", function() { return FileItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileLikeObject", function() { return FileLikeObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileSelectDirective", function() { return FileSelectDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileUploadModule", function() { return FileUploadModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileUploader", function() { return FileUploader; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");



/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} node
 * @return {?}
 */
function isElement(node) {
    return !!(node && (node.nodeName || node.prop && node.attr && node.find));
}
class FileLikeObject {
    /**
     * @param {?} fileOrInput
     */
    constructor(fileOrInput) {
        this.rawFile = fileOrInput;
        /** @type {?} */
        let isInput = isElement(fileOrInput);
        /** @type {?} */
        let fakePathOrObject = isInput ? fileOrInput.value : fileOrInput;
        /** @type {?} */
        let postfix = typeof fakePathOrObject === 'string' ? 'FakePath' : 'Object';
        /** @type {?} */
        let method = '_createFrom' + postfix;
        ((/** @type {?} */ (this)))[method](fakePathOrObject);
    }
    /**
     * @param {?} path
     * @return {?}
     */
    _createFromFakePath(path) {
        this.lastModifiedDate = void 0;
        this.size = void 0;
        this.type = 'like/' + path.slice(path.lastIndexOf('.') + 1).toLowerCase();
        this.name = path.slice(path.lastIndexOf('/') + path.lastIndexOf('\\') + 2);
    }
    /**
     * @param {?} object
     * @return {?}
     */
    _createFromObject(object) {
        this.size = object.size;
        this.type = object.type;
        this.name = object.name;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileItem {
    /**
     * @param {?} uploader
     * @param {?} some
     * @param {?} options
     */
    constructor(uploader, some, options) {
        this.url = '/';
        this.headers = [];
        this.withCredentials = true;
        this.formData = [];
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = false;
        this.progress = 0;
        this.index = void 0;
        this.uploader = uploader;
        this.some = some;
        this.options = options;
        this.file = new FileLikeObject(some);
        this._file = some;
        if (uploader.options) {
            this.method = uploader.options.method || 'POST';
            this.alias = uploader.options.itemAlias || 'file';
        }
        this.url = uploader.options.url;
    }
    /**
     * @return {?}
     */
    upload() {
        try {
            this.uploader.uploadItem(this);
        }
        catch (e) {
            this.uploader._onCompleteItem(this, '', 0, {});
            this.uploader._onErrorItem(this, '', 0, {});
        }
    }
    /**
     * @return {?}
     */
    cancel() {
        this.uploader.cancelItem(this);
    }
    /**
     * @return {?}
     */
    remove() {
        this.uploader.removeFromQueue(this);
    }
    /**
     * @return {?}
     */
    onBeforeUpload() {
        return void 0;
    }
    /**
     * @param {?} form
     * @return {?}
     */
    onBuildForm(form) {
        return { form };
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    onProgress(progress) {
        return { progress };
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    onSuccess(response, status, headers) {
        return { response, status, headers };
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    onError(response, status, headers) {
        return { response, status, headers };
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    onCancel(response, status, headers) {
        return { response, status, headers };
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    onComplete(response, status, headers) {
        return { response, status, headers };
    }
    /**
     * @return {?}
     */
    _onBeforeUpload() {
        this.isReady = true;
        this.isUploading = true;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = false;
        this.progress = 0;
        this.onBeforeUpload();
    }
    /**
     * @param {?} form
     * @return {?}
     */
    _onBuildForm(form) {
        this.onBuildForm(form);
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    _onProgress(progress) {
        this.progress = progress;
        this.onProgress(progress);
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onSuccess(response, status, headers) {
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = true;
        this.isSuccess = true;
        this.isCancel = false;
        this.isError = false;
        this.progress = 100;
        this.index = void 0;
        this.onSuccess(response, status, headers);
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onError(response, status, headers) {
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = true;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = true;
        this.progress = 0;
        this.index = void 0;
        this.onError(response, status, headers);
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onCancel(response, status, headers) {
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = true;
        this.isError = false;
        this.progress = 0;
        this.index = void 0;
        this.onCancel(response, status, headers);
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onComplete(response, status, headers) {
        this.onComplete(response, status, headers);
        if (this.uploader.options.removeAfterUpload) {
            this.remove();
        }
    }
    /**
     * @return {?}
     */
    _prepareToUploading() {
        this.index = this.index || ++this.uploader._nextIndex;
        this.isReady = true;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileType {
    /**
     * @param {?} file
     * @return {?}
     */
    static getMimeClass(file) {
        /** @type {?} */
        let mimeClass = 'application';
        if (this.mime_psd.indexOf(file.type) !== -1) {
            mimeClass = 'image';
        }
        else if (file.type.match('image.*')) {
            mimeClass = 'image';
        }
        else if (file.type.match('video.*')) {
            mimeClass = 'video';
        }
        else if (file.type.match('audio.*')) {
            mimeClass = 'audio';
        }
        else if (file.type === 'application/pdf') {
            mimeClass = 'pdf';
        }
        else if (this.mime_compress.indexOf(file.type) !== -1) {
            mimeClass = 'compress';
        }
        else if (this.mime_doc.indexOf(file.type) !== -1) {
            mimeClass = 'doc';
        }
        else if (this.mime_xsl.indexOf(file.type) !== -1) {
            mimeClass = 'xls';
        }
        else if (this.mime_ppt.indexOf(file.type) !== -1) {
            mimeClass = 'ppt';
        }
        if (mimeClass === 'application') {
            mimeClass = this.fileTypeDetection(file.name);
        }
        return mimeClass;
    }
    /**
     * @param {?} inputFilename
     * @return {?}
     */
    static fileTypeDetection(inputFilename) {
        /** @type {?} */
        let types = {
            'jpg': 'image',
            'jpeg': 'image',
            'tif': 'image',
            'psd': 'image',
            'bmp': 'image',
            'png': 'image',
            'nef': 'image',
            'tiff': 'image',
            'cr2': 'image',
            'dwg': 'image',
            'cdr': 'image',
            'ai': 'image',
            'indd': 'image',
            'pin': 'image',
            'cdp': 'image',
            'skp': 'image',
            'stp': 'image',
            '3dm': 'image',
            'mp3': 'audio',
            'wav': 'audio',
            'wma': 'audio',
            'mod': 'audio',
            'm4a': 'audio',
            'compress': 'compress',
            'zip': 'compress',
            'rar': 'compress',
            '7z': 'compress',
            'lz': 'compress',
            'z01': 'compress',
            'bz2': 'compress',
            'gz': 'compress',
            'pdf': 'pdf',
            'xls': 'xls',
            'xlsx': 'xls',
            'ods': 'xls',
            'mp4': 'video',
            'avi': 'video',
            'wmv': 'video',
            'mpg': 'video',
            'mts': 'video',
            'flv': 'video',
            '3gp': 'video',
            'vob': 'video',
            'm4v': 'video',
            'mpeg': 'video',
            'm2ts': 'video',
            'mov': 'video',
            'doc': 'doc',
            'docx': 'doc',
            'eps': 'doc',
            'txt': 'doc',
            'odt': 'doc',
            'rtf': 'doc',
            'ppt': 'ppt',
            'pptx': 'ppt',
            'pps': 'ppt',
            'ppsx': 'ppt',
            'odp': 'ppt'
        };
        /** @type {?} */
        let chunks = inputFilename.split('.');
        if (chunks.length < 2) {
            return 'application';
        }
        /** @type {?} */
        let extension = chunks[chunks.length - 1].toLowerCase();
        if (types[extension] === undefined) {
            return 'application';
        }
        else {
            return types[extension];
        }
    }
}
/*  MS office  */
FileType.mime_doc = [
    'application/msword',
    'application/msword',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.template',
    'application/vnd.ms-word.document.macroEnabled.12',
    'application/vnd.ms-word.template.macroEnabled.12'
];
FileType.mime_xsl = [
    'application/vnd.ms-excel',
    'application/vnd.ms-excel',
    'application/vnd.ms-excel',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
    'application/vnd.ms-excel.sheet.macroEnabled.12',
    'application/vnd.ms-excel.template.macroEnabled.12',
    'application/vnd.ms-excel.addin.macroEnabled.12',
    'application/vnd.ms-excel.sheet.binary.macroEnabled.12'
];
FileType.mime_ppt = [
    'application/vnd.ms-powerpoint',
    'application/vnd.ms-powerpoint',
    'application/vnd.ms-powerpoint',
    'application/vnd.ms-powerpoint',
    'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    'application/vnd.openxmlformats-officedocument.presentationml.template',
    'application/vnd.openxmlformats-officedocument.presentationml.slideshow',
    'application/vnd.ms-powerpoint.addin.macroEnabled.12',
    'application/vnd.ms-powerpoint.presentation.macroEnabled.12',
    'application/vnd.ms-powerpoint.presentation.macroEnabled.12',
    'application/vnd.ms-powerpoint.slideshow.macroEnabled.12'
];
/* PSD */
FileType.mime_psd = [
    'image/photoshop',
    'image/x-photoshop',
    'image/psd',
    'application/photoshop',
    'application/psd',
    'zz-application/zz-winassoc-psd'
];
/* Compressed files */
FileType.mime_compress = [
    'application/x-gtar',
    'application/x-gcompress',
    'application/compress',
    'application/x-tar',
    'application/x-rar-compressed',
    'application/octet-stream',
    'application/x-zip-compressed',
    'application/zip-compressed',
    'application/x-7z-compressed',
    'application/gzip',
    'application/x-bzip2'
];
if (false) {}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function isFile(value) {
    return (File && value instanceof File);
}
/**
 * @record
 */
function Headers() { }
if (false) {}
/**
 * @record
 */
function FileUploaderOptions() { }
if (false) {}
class FileUploader {
    /**
     * @param {?} options
     */
    constructor(options) {
        this.isUploading = false;
        this.queue = [];
        this.progress = 0;
        this._nextIndex = 0;
        this.options = {
            autoUpload: false,
            isHTML5: true,
            filters: [],
            removeAfterUpload: false,
            disableMultipart: false,
            formatDataFunction: (/**
             * @param {?} item
             * @return {?}
             */
            (item) => item._file),
            formatDataFunctionIsAsync: false
        };
        this.setOptions(options);
        this.response = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setOptions(options) {
        this.options = Object.assign(this.options, options);
        this.authToken = this.options.authToken;
        this.authTokenHeader = this.options.authTokenHeader || 'Authorization';
        this.autoUpload = this.options.autoUpload;
        this.options.filters.unshift({ name: 'queueLimit', fn: this._queueLimitFilter });
        if (this.options.maxFileSize) {
            this.options.filters.unshift({ name: 'fileSize', fn: this._fileSizeFilter });
        }
        if (this.options.allowedFileType) {
            this.options.filters.unshift({ name: 'fileType', fn: this._fileTypeFilter });
        }
        if (this.options.allowedMimeType) {
            this.options.filters.unshift({ name: 'mimeType', fn: this._mimeTypeFilter });
        }
        for (let i = 0; i < this.queue.length; i++) {
            this.queue[i].url = this.options.url;
        }
    }
    /**
     * @param {?} files
     * @param {?=} options
     * @param {?=} filters
     * @return {?}
     */
    addToQueue(files, options, filters) {
        /** @type {?} */
        let list = [];
        for (let file of files) {
            list.push(file);
        }
        /** @type {?} */
        let arrayOfFilters = this._getFilters(filters);
        /** @type {?} */
        let count = this.queue.length;
        /** @type {?} */
        let addedFileItems = [];
        list.map((/**
         * @param {?} some
         * @return {?}
         */
        (some) => {
            if (!options) {
                options = this.options;
            }
            /** @type {?} */
            let temp = new FileLikeObject(some);
            if (this._isValidFile(temp, arrayOfFilters, options)) {
                /** @type {?} */
                let fileItem = new FileItem(this, some, options);
                addedFileItems.push(fileItem);
                this.queue.push(fileItem);
                this._onAfterAddingFile(fileItem);
            }
            else {
                /** @type {?} */
                let filter = arrayOfFilters[this._failFilterIndex];
                this._onWhenAddingFileFailed(temp, filter, options);
            }
        }));
        if (this.queue.length !== count) {
            this._onAfterAddingAll(addedFileItems);
            this.progress = this._getTotalProgress();
        }
        this._render();
        if (this.options.autoUpload) {
            this.uploadAll();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    removeFromQueue(value) {
        /** @type {?} */
        let index = this.getIndexOfItem(value);
        /** @type {?} */
        let item = this.queue[index];
        if (item.isUploading) {
            item.cancel();
        }
        this.queue.splice(index, 1);
        this.progress = this._getTotalProgress();
    }
    /**
     * @return {?}
     */
    clearQueue() {
        while (this.queue.length) {
            this.queue[0].remove();
        }
        this.progress = 0;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    uploadItem(value) {
        /** @type {?} */
        let index = this.getIndexOfItem(value);
        /** @type {?} */
        let item = this.queue[index];
        /** @type {?} */
        let transport = this.options.isHTML5 ? '_xhrTransport' : '_iframeTransport';
        item._prepareToUploading();
        if (this.isUploading) {
            return;
        }
        this.isUploading = true;
        ((/** @type {?} */ (this)))[transport](item);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    cancelItem(value) {
        /** @type {?} */
        let index = this.getIndexOfItem(value);
        /** @type {?} */
        let item = this.queue[index];
        /** @type {?} */
        let prop = this.options.isHTML5 ? item._xhr : item._form;
        if (item && item.isUploading) {
            prop.abort();
        }
    }
    /**
     * @return {?}
     */
    uploadAll() {
        /** @type {?} */
        let items = this.getNotUploadedItems().filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => !item.isUploading));
        if (!items.length) {
            return;
        }
        items.map((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item._prepareToUploading()));
        items[0].upload();
    }
    /**
     * @return {?}
     */
    cancelAll() {
        /** @type {?} */
        let items = this.getNotUploadedItems();
        items.map((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item.cancel()));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isFile(value) {
        return isFile(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isFileLikeObject(value) {
        return value instanceof FileLikeObject;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getIndexOfItem(value) {
        return typeof value === 'number' ? value : this.queue.indexOf(value);
    }
    /**
     * @return {?}
     */
    getNotUploadedItems() {
        return this.queue.filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => !item.isUploaded));
    }
    /**
     * @return {?}
     */
    getReadyItems() {
        return this.queue
            .filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => (item.isReady && !item.isUploading)))
            .sort((/**
         * @param {?} item1
         * @param {?} item2
         * @return {?}
         */
        (item1, item2) => item1.index - item2.index));
    }
    /**
     * @return {?}
     */
    destroy() {
        return void 0;
    }
    /**
     * @param {?} fileItems
     * @return {?}
     */
    onAfterAddingAll(fileItems) {
        return { fileItems };
    }
    /**
     * @param {?} fileItem
     * @param {?} form
     * @return {?}
     */
    onBuildItemForm(fileItem, form) {
        return { fileItem, form };
    }
    /**
     * @param {?} fileItem
     * @return {?}
     */
    onAfterAddingFile(fileItem) {
        return { fileItem };
    }
    /**
     * @param {?} item
     * @param {?} filter
     * @param {?} options
     * @return {?}
     */
    onWhenAddingFileFailed(item, filter, options) {
        return { item, filter, options };
    }
    /**
     * @param {?} fileItem
     * @return {?}
     */
    onBeforeUploadItem(fileItem) {
        return { fileItem };
    }
    /**
     * @param {?} fileItem
     * @param {?} progress
     * @return {?}
     */
    onProgressItem(fileItem, progress) {
        return { fileItem, progress };
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    onProgressAll(progress) {
        return { progress };
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    onSuccessItem(item, response, status, headers) {
        return { item, response, status, headers };
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    onErrorItem(item, response, status, headers) {
        return { item, response, status, headers };
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    onCancelItem(item, response, status, headers) {
        return { item, response, status, headers };
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    onCompleteItem(item, response, status, headers) {
        return { item, response, status, headers };
    }
    /**
     * @return {?}
     */
    onCompleteAll() {
        return void 0;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _mimeTypeFilter(item) {
        return !(this.options.allowedMimeType && this.options.allowedMimeType.indexOf(item.type) === -1);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _fileSizeFilter(item) {
        return !(this.options.maxFileSize && item.size > this.options.maxFileSize);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _fileTypeFilter(item) {
        return !(this.options.allowedFileType &&
            this.options.allowedFileType.indexOf(FileType.getMimeClass(item)) === -1);
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onErrorItem(item, response, status, headers) {
        item._onError(response, status, headers);
        this.onErrorItem(item, response, status, headers);
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onCompleteItem(item, response, status, headers) {
        item._onComplete(response, status, headers);
        this.onCompleteItem(item, response, status, headers);
        /** @type {?} */
        let nextItem = this.getReadyItems()[0];
        this.isUploading = false;
        if (nextItem) {
            nextItem.upload();
            return;
        }
        this.onCompleteAll();
        this.progress = this._getTotalProgress();
        this._render();
    }
    /**
     * @protected
     * @param {?} parsedHeaders
     * @return {?}
     */
    _headersGetter(parsedHeaders) {
        return (/**
         * @param {?} name
         * @return {?}
         */
        (name) => {
            if (name) {
                return parsedHeaders[name.toLowerCase()] || void 0;
            }
            return parsedHeaders;
        });
    }
    /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    _xhrTransport(item) {
        /** @type {?} */
        let that = this;
        /** @type {?} */
        let xhr = item._xhr = new XMLHttpRequest();
        /** @type {?} */
        let sendable;
        this._onBeforeUploadItem(item);
        if (typeof item._file.size !== 'number') {
            throw new TypeError('The file specified is no longer valid');
        }
        if (!this.options.disableMultipart) {
            sendable = new FormData();
            this._onBuildItemForm(item, sendable);
            /** @type {?} */
            const appendFile = (/**
             * @return {?}
             */
            () => sendable.append(item.alias, item._file, item.file.name));
            if (!this.options.parametersBeforeFiles) {
                appendFile();
            }
            // For AWS, Additional Parameters must come BEFORE Files
            if (this.options.additionalParameter !== undefined) {
                Object.keys(this.options.additionalParameter).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                (key) => {
                    /** @type {?} */
                    let paramVal = this.options.additionalParameter[key];
                    // Allow an additional parameter to include the filename
                    if (typeof paramVal === 'string' && paramVal.indexOf('{{file_name}}') >= 0) {
                        paramVal = paramVal.replace('{{file_name}}', item.file.name);
                    }
                    sendable.append(key, paramVal);
                }));
            }
            if (this.options.parametersBeforeFiles) {
                appendFile();
            }
        }
        else {
            sendable = this.options.formatDataFunction(item);
        }
        xhr.upload.onprogress = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            /** @type {?} */
            let progress = Math.round(event.lengthComputable ? event.loaded * 100 / event.total : 0);
            this._onProgressItem(item, progress);
        });
        xhr.onload = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            let headers = this._parseHeaders(xhr.getAllResponseHeaders());
            /** @type {?} */
            let response = this._transformResponse(xhr.response, headers);
            /** @type {?} */
            let gist = this._isSuccessCode(xhr.status) ? 'Success' : 'Error';
            /** @type {?} */
            let method = '_on' + gist + 'Item';
            ((/** @type {?} */ (this)))[method](item, response, xhr.status, headers);
            this._onCompleteItem(item, response, xhr.status, headers);
        });
        xhr.onerror = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            let headers = this._parseHeaders(xhr.getAllResponseHeaders());
            /** @type {?} */
            let response = this._transformResponse(xhr.response, headers);
            this._onErrorItem(item, response, xhr.status, headers);
            this._onCompleteItem(item, response, xhr.status, headers);
        });
        xhr.onabort = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            let headers = this._parseHeaders(xhr.getAllResponseHeaders());
            /** @type {?} */
            let response = this._transformResponse(xhr.response, headers);
            this._onCancelItem(item, response, xhr.status, headers);
            this._onCompleteItem(item, response, xhr.status, headers);
        });
        xhr.open(item.method, item.url, true);
        xhr.withCredentials = item.withCredentials;
        if (this.options.headers) {
            for (let header of this.options.headers) {
                xhr.setRequestHeader(header.name, header.value);
            }
        }
        if (item.headers.length) {
            for (let header of item.headers) {
                xhr.setRequestHeader(header.name, header.value);
            }
        }
        if (this.authToken) {
            xhr.setRequestHeader(this.authTokenHeader, this.authToken);
        }
        xhr.onreadystatechange = (/**
         * @return {?}
         */
        function () {
            if (xhr.readyState == XMLHttpRequest.DONE) {
                that.response.emit(xhr.responseText);
            }
        });
        if (this.options.formatDataFunctionIsAsync) {
            sendable.then((/**
             * @param {?} result
             * @return {?}
             */
            (result) => xhr.send(JSON.stringify(result))));
        }
        else {
            xhr.send(sendable);
        }
        this._render();
    }
    /**
     * @protected
     * @param {?=} value
     * @return {?}
     */
    _getTotalProgress(value = 0) {
        if (this.options.removeAfterUpload) {
            return value;
        }
        /** @type {?} */
        let notUploaded = this.getNotUploadedItems().length;
        /** @type {?} */
        let uploaded = notUploaded ? this.queue.length - notUploaded : this.queue.length;
        /** @type {?} */
        let ratio = 100 / this.queue.length;
        /** @type {?} */
        let current = value * ratio / 100;
        return Math.round(uploaded * ratio + current);
    }
    /**
     * @protected
     * @param {?} filters
     * @return {?}
     */
    _getFilters(filters) {
        if (!filters) {
            return this.options.filters;
        }
        if (Array.isArray(filters)) {
            return filters;
        }
        if (typeof filters === 'string') {
            /** @type {?} */
            let names = filters.match(/[^\s,]+/g);
            return this.options.filters
                .filter((/**
             * @param {?} filter
             * @return {?}
             */
            (filter) => names.indexOf(filter.name) !== -1));
        }
        return this.options.filters;
    }
    /**
     * @protected
     * @return {?}
     */
    _render() {
        return void 0;
    }
    /**
     * @protected
     * @return {?}
     */
    _queueLimitFilter() {
        return this.options.queueLimit === undefined || this.queue.length < this.options.queueLimit;
    }
    /**
     * @protected
     * @param {?} file
     * @param {?} filters
     * @param {?} options
     * @return {?}
     */
    _isValidFile(file, filters, options) {
        this._failFilterIndex = -1;
        return !filters.length ? true : filters.every((/**
         * @param {?} filter
         * @return {?}
         */
        (filter) => {
            this._failFilterIndex++;
            return filter.fn.call(this, file, options);
        }));
    }
    /**
     * @protected
     * @param {?} status
     * @return {?}
     */
    _isSuccessCode(status) {
        return (status >= 200 && status < 300) || status === 304;
    }
    /**
     * @protected
     * @param {?} response
     * @param {?} headers
     * @return {?}
     */
    _transformResponse(response, headers) {
        return response;
    }
    /**
     * @protected
     * @param {?} headers
     * @return {?}
     */
    _parseHeaders(headers) {
        /** @type {?} */
        let parsed = {};
        /** @type {?} */
        let key;
        /** @type {?} */
        let val;
        /** @type {?} */
        let i;
        if (!headers) {
            return parsed;
        }
        headers.split('\n').map((/**
         * @param {?} line
         * @return {?}
         */
        (line) => {
            i = line.indexOf(':');
            key = line.slice(0, i).trim().toLowerCase();
            val = line.slice(i + 1).trim();
            if (key) {
                parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
            }
        }));
        return parsed;
    }
    /**
     * @protected
     * @param {?} item
     * @param {?} filter
     * @param {?} options
     * @return {?}
     */
    _onWhenAddingFileFailed(item, filter, options) {
        this.onWhenAddingFileFailed(item, filter, options);
    }
    /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    _onAfterAddingFile(item) {
        this.onAfterAddingFile(item);
    }
    /**
     * @protected
     * @param {?} items
     * @return {?}
     */
    _onAfterAddingAll(items) {
        this.onAfterAddingAll(items);
    }
    /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    _onBeforeUploadItem(item) {
        item._onBeforeUpload();
        this.onBeforeUploadItem(item);
    }
    /**
     * @protected
     * @param {?} item
     * @param {?} form
     * @return {?}
     */
    _onBuildItemForm(item, form) {
        item._onBuildForm(form);
        this.onBuildItemForm(item, form);
    }
    /**
     * @protected
     * @param {?} item
     * @param {?} progress
     * @return {?}
     */
    _onProgressItem(item, progress) {
        /** @type {?} */
        let total = this._getTotalProgress(progress);
        this.progress = total;
        item._onProgress(progress);
        this.onProgressItem(item, progress);
        this.onProgressAll(total);
        this._render();
    }
    /**
     * @protected
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onSuccessItem(item, response, status, headers) {
        item._onSuccess(response, status, headers);
        this.onSuccessItem(item, response, status, headers);
    }
    /**
     * @protected
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onCancelItem(item, response, status, headers) {
        item._onCancel(response, status, headers);
        this.onCancelItem(item, response, status, headers);
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileSelectDirective {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.onFileSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.element = element;
    }
    /**
     * @return {?}
     */
    getOptions() {
        return this.uploader.options;
    }
    /**
     * @return {?}
     */
    getFilters() {
        return {};
    }
    /**
     * @return {?}
     */
    isEmptyAfterSelection() {
        return !!this.element.nativeElement.attributes.multiple;
    }
    /**
     * @return {?}
     */
    onChange() {
        /** @type {?} */
        let files = this.element.nativeElement.files;
        /** @type {?} */
        let options = this.getOptions();
        /** @type {?} */
        let filters = this.getFilters();
        this.uploader.addToQueue(files, options, filters);
        this.onFileSelected.emit(files);
        if (this.isEmptyAfterSelection()) {
            this.element.nativeElement.value = '';
        }
    }
}
FileSelectDirective.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: '[ng2FileSelect]' },] }
];
/** @nocollapse */
FileSelectDirective.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
];
FileSelectDirective.propDecorators = {
    uploader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    onFileSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    onChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['change',] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileDropDirective {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.fileOver = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onFileDrop = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.element = element;
    }
    /**
     * @return {?}
     */
    getOptions() {
        return this.uploader.options;
    }
    /**
     * @return {?}
     */
    getFilters() {
        return {};
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDrop(event) {
        /** @type {?} */
        let transfer = this._getTransfer(event);
        if (!transfer) {
            return;
        }
        /** @type {?} */
        let options = this.getOptions();
        /** @type {?} */
        let filters = this.getFilters();
        this._preventAndStop(event);
        this.uploader.addToQueue(transfer.files, options, filters);
        this.fileOver.emit(false);
        this.onFileDrop.emit(transfer.files);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragOver(event) {
        /** @type {?} */
        let transfer = this._getTransfer(event);
        if (!this._haveFiles(transfer.types)) {
            return;
        }
        transfer.dropEffect = 'copy';
        this._preventAndStop(event);
        this.fileOver.emit(true);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragLeave(event) {
        if (((/** @type {?} */ (this))).element) {
            if (event.currentTarget === ((/** @type {?} */ (this))).element[0]) {
                return;
            }
        }
        this._preventAndStop(event);
        this.fileOver.emit(false);
    }
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    _getTransfer(event) {
        return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer; // jQuery fix;
    }
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    _preventAndStop(event) {
        event.preventDefault();
        event.stopPropagation();
    }
    /**
     * @protected
     * @param {?} types
     * @return {?}
     */
    _haveFiles(types) {
        if (!types) {
            return false;
        }
        if (types.indexOf) {
            return types.indexOf('Files') !== -1;
        }
        else if (types.contains) {
            return types.contains('Files');
        }
        else {
            return false;
        }
    }
}
FileDropDirective.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{ selector: '[ng2FileDrop]' },] }
];
/** @nocollapse */
FileDropDirective.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
];
FileDropDirective.propDecorators = {
    uploader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    fileOver: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    onFileDrop: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    onDrop: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['drop', ['$event'],] }],
    onDragOver: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['dragover', ['$event'],] }],
    onDragLeave: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['dragleave', ['$event'],] }]
};
if (false) {}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileUploadModule {
}
FileUploadModule.decorators = [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]],
                declarations: [FileDropDirective, FileSelectDirective],
                exports: [FileDropDirective, FileSelectDirective]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */


//# sourceMappingURL=ng2-file-upload.js.map


/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/add-system-incoming-message-tcp.component.html":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/add-system-incoming-message-tcp.component.html ***!
  \****************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\" style=\"height:30px; font-size: small;\">\r\n    <span>Add System</span>\r\n</mat-toolbar>\r\n<br>\r\n   \r\n<mat-card *ngIf=\"!hideBasic\" class=\"baiscInfocard\">\r\n    <form  #basicForm=\"ngForm\">\r\n        <div fxLayoutAlign=\"center stretch\"><b>System Information</b></div>\r\n        <br>\r\n        <div fxLayout=\"row wrap\">\r\n            <div fxFlex=\"100\">\r\n\r\n                <div fxFlex=\"15\"></div>\r\n                <div fxFlex=\"30\">\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Code</mat-label>\r\n                            <input type=\"text\" matInput name=\"code\"\r\n                             #code #code=\"ngModel\" required [disabled]=\"clickedFinishButton\"\r\n                           \r\n                                [(ngModel)]=\"addSysBasic.systemCode\" \r\n                                [ngModelOptions]=\"{standalone: true}\">\r\n                            <mat-hint *ngIf=\"isSysCodeAlreadyExist? true : false\" class=\"red\">{{sysCodeError}}</mat-hint>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Type</mat-label>\r\n                            <!-- <input type=\"text\" matInput name=\"type\" #type #type=\"ngModel\" [(ngModel)]=\"createExtSys1.type\" [ngModelOptions]=\"{standalone: true}\"> -->\r\n                            <mat-select name=\"type\" #type #type=\"ngModel\" type=\"text\" required\r\n                             [(ngModel)]=\"addSysBasic.serviceType\" [disabled]=\"clickedFinishButton\"\r\n                               >\r\n                                <mat-option value=\"server\">Server</mat-option>\r\n                                <mat-option value=\"client\">Client</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>External IP</mat-label>\r\n                            <input type=\"text\" matInput \r\n                            required name=\"sourceIp\" #sourceIp #sourceIp=\"ngModel\"  (blur)=\"isValidIpv4Addr1($event)\"\r\n                            [(ngModel)]=\"addSysBasic.sourceIp\" [disabled]=\"clickedFinishButton\">\r\n                        </mat-form-field>\r\n                        <mat-error *ngIf=\"!invalidIp1\" style=\"margin-top:-10%;font-size:12px;\"> \r\n                            IP Address is not valid.\r\n                         </mat-error> \r\n                    </div>\r\n                    <div>\r\n                        \r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Median IP</mat-label>\r\n                            <input type=\"text\" matInput\r\n                             name=\"medianIp\" #medianIp #medianIp=\"ngModel\" required\r\n                                [(ngModel)]=\"addSysBasic.medianIp\"  (blur)=\"isValidIpv4Addr($event)\"  [disabled]=\"clickedFinishButton\">\r\n                        </mat-form-field>\r\n                        <mat-error *ngIf=\"!invalidIp \" style=\"margin-top:-10%;font-size:12px;\"> \r\n                           IP Address is not valid.\r\n                        </mat-error> \r\n                    </div>\r\n                </div>\r\n                <div fxFlex=\"5\"></div>\r\n                <div fxFlex=\"30\">\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Name</mat-label>\r\n                            <input type=\"text\" \r\n                            required matInput name=\"systemName\" #systemName #systemName=\"ngModel\"\r\n                                [(ngModel)]=\"addSysBasic.systemName\" [ngModelOptions]=\"{standalone: true}\" [disabled]=\"clickedFinishButton\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Message Type</mat-label>\r\n                            <mat-select disableOptionCentering [disabled]=\"clickedFinishButton\" (selectionChange)=\"onsystemMessageSelection($event.value)\" #messsageType #messsageType=\"ngModel\"\r\n                            [(ngModel)]=\"addSysBasic.messsageType\" name=\"messsageType\" type=\"text\" required\r\n                               >\r\n                                <mat-option value=\"null\">--Please select--</mat-option>\r\n                                <mat-option value=\"I\">Incoming\r\n                                </mat-option>\r\n                                <mat-option value=\"O\">Outgoing\r\n                                </mat-option>\r\n                                <mat-option value=\"A\">All</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>External Port</mat-label>\r\n                            <input type=\"text\" minlength=\"2\" maxlength=\"4\" matInput name=\"sourcePort\"\r\n                             #sourcePort #sPort=\"ngModel\" required [disabled]=\"clickedFinishButton\"\r\n                            [(ngModel)]=\"addSysBasic.sourcePort\" (keypress)=\"allowNumbersOnly($event)\">\r\n                        </mat-form-field>\r\n                        <mat-error *ngIf=\"sPort.errors?.minlength\" style=\"margin-top:-10%;font-size: 12px;\">\r\n                            External Port must be at least 2 numbers.\r\n                        </mat-error> \r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Median Port</mat-label>\r\n                            <input type=\"text\" minlength=\"2\" maxlength=\"4\" matInput name=\"medianPort\" \r\n                            #medianPort #mPort=\"ngModel\" required [disabled]=\"clickedFinishButton\"\r\n                                [(ngModel)]=\"addSysBasic.medianPort\" (keypress)=\"allowNumbersOnly($event)\">\r\n                        </mat-form-field>\r\n                        <mat-error *ngIf=\"mPort.errors?.minlength\" style=\"margin-top:-10%;font-size: 12px;\">\r\n                            Median Port must be at least 2 numbers.\r\n                        </mat-error> \r\n                    </div>\r\n                </div>\r\n                <div fxFlex=\"10\"></div>\r\n            </div>\r\n        </div>\r\n        <div fxLayout=\"row wrap\">\r\n            <div fxFlex=\"40\"></div>\r\n            <div fxLayoutAlign=\"center stretch\" fxLayoutGap=\"10px\">\r\n                <button mat-raised-button  [disabled]=\"!basicForm.valid || !invalidIp || !invalidIp1 ||addSysBasic.messsageType=='null'\"\r\n                (click)=\"onNextOfBasicInfo()\" color=\"primary\"\r\n\r\n                   >Next</button>\r\n                   <!--  -->\r\n\r\n               \r\n               \r\n                <button mat-raised-button type=\"reset\" color=\"warn\" (click)=\"onResetOfBasicInfo()\">Reset</button>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</mat-card>\r\n<div *ngIf=\"showProgressbar\">\r\n<mat-progress-bar mode=\"indeterminate\" *ngIf=\"showProgressbar\"></mat-progress-bar>\r\n<p style=\"color: red\">Fetching Record... Please wait...</p>\r\n</div>\r\n<!-- Protocol screen For Both Incoming and outgoing-->\r\n<mat-card *ngIf=\"showProtocol\" style=\"width:83%;margin-left:10%\">\r\n    <form #protocol1=\"ngForm\">\r\n        <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\">\r\n                    \r\n                        <!-- <div fxFlex=\"30\"></div> -->\r\n                    <!-- <div fxFlex=\"80\"> -->\r\n                        <h5 style=\"text-align: center\">{{msgType}} Message Configuration</h5>\r\n                    <!-- </div> -->\r\n                </div>\r\n            </div>\r\n            <div fxLayout=\"column wrap\" >\r\n                    <div fxFlex=\"100\">\r\n                            <div fxFlex=\"30\"></div>\r\n                        <div fxFlex=\"40\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                <mat-label>{{msgType}} Message Protocol</mat-label>\r\n                                <mat-select #protocolRef [(ngModel)]=\"protocolForBothIncOut.messageChannel\"\r\n                                    (selectionChange)=\"onProtocalSlection(protocolForBothIncOut.messageChannel)\"\r\n                                    name=\"messageChannel\"\r\n                                    required [disabled]=\"clickedFinishButton\"\r\n                                    (optionSelected)=\"onProtocalSlection(protocolForBothIncOut.messageChannel)\">\r\n                                    <mat-option value=\" \">--Please select--</mat-option>\r\n                                    <mat-option value=\"TCP/IP\">TCP/IP</mat-option>\r\n                                    <mat-option value=\"Https/Http\">HTTPS/HTTP\r\n                                    </mat-option>\r\n                                    <mat-option value=\"MDB\">MDB</mat-option>\r\n                                    <mat-option value=\"EJB\">EJB</mat-option>\r\n                                    <mat-option value=\"DB Connection\">DB Connection\r\n                                    </mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n            \r\n                    </div>\r\n                    <div fxFlex=\"100\">\r\n                            <div fxFlex=\"30\"></div>\r\n                        <div fxFlex=\"40\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                <mat-label>Data Type </mat-label>\r\n                                <!-- <p>Jaya1</p> -->\r\n                                <mat-select \r\n                                [(ngModel)]=\"protocolForBothIncOut.messageFormat\" name=\"messageFormat\"\r\n                                required [disabled]=\"clickedFinishButton\"\r\n                                    (selectionChange)=\"incomingDataypeSelection(protocolForBothIncOut.messageFormat)\">\r\n                                    <mat-option *ngFor=\"let data of dataType\" [value]=\"data\">{{data}}</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div fxFlex=\"100\" *ngIf=\"protocolForBothIncOut.messageChannel=='DB Connection'\">\r\n                        <div fxFlex=\"25\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>User Name</mat-label>\r\n                                        <input matInput name=\"dbUsername\"\r\n                                         #dbUsername [ngModelOptions]=\"{standalone: true}\" [disabled]=\"clickedFinishButton\"\r\n                                         [(ngModel)]=\"protocolForBothIncOut.dbUsername\">\r\n                                    </mat-form-field>\r\n                        </div>\r\n                        <div fxFlex=\"25\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>Passowrd</mat-label>\r\n                                        <input matInput name=\"dbPassword\"\r\n                                         #dbPassword type=\"password\" [ngModelOptions]=\"{standalone: true}\" [disabled]=\"clickedFinishButton\"\r\n                                         [(ngModel)]=\"protocolForBothIncOut.password\">\r\n                                         \r\n                                     </mat-form-field>\r\n                        </div>\r\n                        <div fxFlex=\"25\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>DataBase Name</mat-label>\r\n                                        <input matInput name=\"dbServiceName\" [disabled]=\"clickedFinishButton\"\r\n                                        [ngModelOptions]=\"{standalone: true}\"\r\n                                        #dbServiceName type=\"text\" \r\n                                        [(ngModel)]=\"protocolForBothIncOut.dbServiceName\">\r\n                                         \r\n                                     </mat-form-field>\r\n                        </div>\r\n                        <div fxFlex=\"25\">\r\n                                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                                        <mat-label>Connecting String</mat-label>\r\n                                        <textarea matInput [ngModelOptions]=\"{standalone: true}\"\r\n                                        [(ngModel)]=\"protocolForBothIncOut.dbConnectString\" [disabled]=\"clickedFinishButton\"\r\n                                        name=\"dbConnectString\" #dbConnectString></textarea>\r\n                                      </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div fxFlex=\"100\" fxLayoutGap=\"10px\" *ngIf=\"protocolForBothIncOut.messageChannel=='MDB'\">\r\n                            <div fxFlex=\"25\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                            <mat-label>Type of Queue</mat-label>\r\n                                          <mat-select (selectionChange)=\"onMdbQueue($event)\" [disabled]=\"clickedFinishButton\">\r\n                                              <mat-option *ngFor=\"let queue of mdbQueueInc\" [value]=\"queue\">{{queue}}</mat-option>\r\n                                          </mat-select>\r\n                                         </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngIf=\"queueType=='JMS' &&protocolForBothIncOut.messageChannel=='MDB'\">                    \r\n                                <div fxFlex=\"20\" >\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                           <mat-label>Queue Manager</mat-label>\r\n                                           <input matInput name=\"queueManager\">\r\n                                        </mat-form-field>\r\n                                    </div>\r\n                                    <div fxFlex=\"20\" >\r\n                                            <mat-form-field appearance=\"outline\"> \r\n                                               <mat-label>Queue Name</mat-label>\r\n                                               <input matInput >\r\n                                            </mat-form-field>\r\n                                        </div>\r\n                                        <div fxFlex=\"20\" >\r\n                                                <mat-form-field appearance=\"outline\">\r\n                                                   <mat-label>Channel</mat-label>\r\n                                                   <input matInput >\r\n                                                </mat-form-field>\r\n                                                \r\n                                            </div>\r\n                               \r\n                                    \r\n                               \r\n                         </div>\r\n                         <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngIf=\"queueType=='IBM' &&protocolForBothIncOut.messageChannel=='MDB'\" >\r\n                                <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                       <mat-label>Queue Manager</mat-label>\r\n                                       <input matInput name=\"queueManager\" >\r\n                                        \r\n                                    </mat-form-field>\r\n                                </div>\r\n                                <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                           <mat-label>Queue Name</mat-label>\r\n                                           <input matInput name=\"queueName\"  >\r\n                                            \r\n                                        </mat-form-field>\r\n                                    </div>         \r\n                                    <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                            <mat-form-field appearance=\"outline\">\r\n                                               <mat-label>Connecting Factory</mat-label>\r\n                                               <input matInput name=\"connectingFactory\">\r\n                                                \r\n                                            </mat-form-field>\r\n                                        </div>\r\n                               \r\n                                </div>\r\n                    <div fxFlex=\"100\" fxLayoutGap=\"20px\" >\r\n                       <div fxFlex=\"35\"></div>\r\n                        <button mat-raised-button (click)=\"onNextOfProtocol(protocolForBothIncOut)\" color=\"primary\" \r\n                        [disabled]=\"!protocol1.valid\">Next</button>\r\n                        <button mat-raised-button (click)=\"onPreviousToBasic()\" color=\"warn\">Previous</button>\r\n                        <button mat-raised-button  [disabled]=\"!protocol1.valid\"\r\n                         type=\"reset\" color=\"warn\" (click)=\"reset()\">Reset</button>\r\n                        <div fxFlex=\"10\"></div>\r\n                    </div>\r\n                    </div>\r\n                </form>\r\n                   \r\n</mat-card>\r\n<!-- OUT AND iN 3RD SCREEN -->\r\n<mat-card *ngIf=\"onlyInc\">\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"30\"></div>\r\n            <div fxFlex=\"90\">\r\n                <h5>Header and Service Details</h5>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <form #details1=\"ngForm\">\r\n    <div fxLayout=\"row wrap\" *ngIf=\"incDataType=='XML' && incProtocol=='EJB' ||incProtocol=='MDB'&& incDataType=='XML' ||incProtocol=='Https/Http' &&incDataType=='XML'\" [ngClass]=\"{'readonly-wrapper' : clickedFinishButton}\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"60\">\r\n                <input type=\"file\" id=\"chFile\" (change)=\"uploadFileXml($event)\">\r\n                <button mat-raised-button type=\"button\" class=\"btnFile\" (click)=\"chooseFile()\" [disabled]=\"clickedFinishButton\">\r\n                  <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"padding-left: 40px;\">{{fileName}}</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\" *ngIf=\"incDataType=='CSV/EXCEL'  ||incDataType=='FLATFILE'\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"60\">\r\n               <mat-form-field appearance=\"outline\">\r\n                <mat-label>Folder Name</mat-label>\r\n                <input matInput name=\"folderName\" ngModel>\r\n               </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\" *ngIf=\"incProtocol=='DB Connection' &&incDataType=='XML' ||incProtocol=='DB Connection'&& incDataType=='JSON'\" >\r\n            <div fxFlex=\"100\">\r\n                <div fxFlex=\"60\">\r\n                   <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Table Name</mat-label>\r\n                    <input matInput name=\"tableName\" ngModel>\r\n                   </mat-form-field>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div *ngIf=\"incDataType!='CSV/EXCEL' &&incDataType!='FLATFILE'\">\r\n        <div fxLayout=\"row wrap\" *ngFor=\"let iso of mdmtSystemService;let i=index\" [ngClass]=\"{'readonly-wrapper' : clickedFinishButton}\">\r\n                <div fxFlex=\"100\" fxLayoutGap=\"10px\">\r\n                        <div fxFlex=\"15\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Header</mat-label>\r\n                                    <!-- <input name=\"headerTag\" #headerTag=\"ngModel\" \r\n                                    matInput [(ngModel)]=\"iso.headerTag\"> -->\r\n                                    <!-- [hidden] = issourceSysDisabled(header.headerTag) -->\r\n                                    <mat-select name=\"headerTag\" name=\"headerTag_{{i}}\"\r\n                                     ngModel \r\n                                    #headerTag #headerTag=\"ngModel\" required\r\n                                    [(ngModel)]=\"iso.headerTag\" (valueChange)=\"changeValue2($event, i)\">\r\n                                            <mat-option *ngFor=\"let header of headerTagData\"\r\n                                           \r\n                                            [value]=\"header.headerTag\">\r\n                                            {{header.headerTag}}\r\n                                            </mat-option>\r\n                                        </mat-select> \r\n                                    <!-- <mat-select name=\"messageKey\" #messageKey=\"ngModel\" [(ngModel)]=\"iso.messageKey\"> \r\n                                        <mat-option *ngFor=\"let mkey of messageKeyIso\"\r\n                                        [value]=\"mkey\">\r\n                                        {{mkey}}\r\n                                        </mat-option>\r\n                                    </mat-select> -->\r\n                                      \r\n                                </mat-form-field>\r\n                        </div>\r\n                    <div fxFlex=\"15\" *ngIf=\"incDataType!='XML'\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>{{matLabel1}}</mat-label>\r\n                            <mat-select name=\"messageKey_{{i}}\" #messageKey=\"ngModel\" required [(ngModel)]=\"iso.messageKey\" ngModel\r\n                                (selectionChange)=\"onSelectingMessageBasis($event,i)\">\r\n                                <ng-container *ngFor=\"let mkey of isoRespData;\">\r\n                                    <mat-option [value]=\"mkey.fieldNo\" [hidden]=\"try(mkey.fieldNo,i)\">\r\n                                        {{mkey.fieldNo }}<{{mkey.fieldName}} </mat-option>\r\n                                </ng-container>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    \r\n                    <div fxFlex=\"15\" *ngIf=\"incDataType=='XML'\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                <mat-label>{{matLabel2}}</mat-label>\r\n                                 <!-- <input name=\"messageKey\" #messageKey=\"ngModel\" \r\n                                <!-- <input name=\"messageKey\" #messageKey=\"ngModel\" \r\n                                 <!-- <input name=\"messageKey\" #messageKey=\"ngModel\" \r\n                                matInput [(ngModel)]=\"iso.messageKey\">  -->\r\n                                \r\n                                <mat-select name=\"messageBasis_{{i}}\" ngModel #messageBasis #messageBasis=\"ngModel\" [(ngModel)]=\"iso.messageBasis\" required\r\n                                (selectionChange)=\"onselectingTag($event,i)\" \r\n                                (optionSelected)=\"onselectingTag($event,i)\"\r\n                                >\r\n                                      <mat-option *ngFor=\"let data of messageBasisIso\"\r\n                                      [value]=\"data\" [hidden]=\"shouldDisableTagOption(data)\">\r\n                                      {{data}}\r\n                                      </mat-option>\r\n                                  </mat-select>\r\n                                  \r\n                            </mat-form-field>\r\n                    </div> \r\n                   \r\n                    <div fxFlex=\"15\" *ngIf=\"incDataType!='XML'\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                <mat-label>{{matLabel3}}</mat-label>\r\n                                <!-- <input matInput name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"iso.dataType\"> -->\r\n                             <mat-select name=\"dataType_{{i}}\" #dataType ngModel #dataType=\"ngModel\" [(ngModel)]=\"iso.dataType\" required >\r\n                                 <mat-option *ngFor=\"let type of typeDataIso\" [value]=\"type\">{{type}}</mat-option>\r\n                                        <!-- <mat-option value=\"numeric\">\r\n                                        Numeric\r\n                                        </mat-option>\r\n                                        <mat-option value=\"alphaNumeric\">\r\n                                          Alpha  Numeric\r\n                                            </mat-option>\r\n                                            <mat-option value=\"date\">\r\n                                                Date\r\n                                                </mat-option> -->\r\n                                    </mat-select>  \r\n                            </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"15\" *ngIf=\"incDataType=='XML'\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                <mat-label>{{matLabel3}}</mat-label>\r\n                                <!-- <input matInput name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"iso.dataType\"> -->\r\n                             <mat-select name=\"dataType_{{i}}\" #dataType ngModel #dataType=\"ngModel\" \r\n                             [(ngModel)]=\"iso.dataType\" required >\r\n                                \r\n                                         <mat-option value=\"numeric\">\r\n                                        Numeric\r\n                                        </mat-option>\r\n                                        <mat-option value=\"alphaNumeric\">\r\n                                          Alpha  Numeric\r\n                                            </mat-option>\r\n                                            <mat-option value=\"date\">\r\n                                                Date\r\n                                                </mat-option> \r\n                                    </mat-select>  \r\n                            </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"15\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>{{matLabel4}}</mat-label>\r\n                                    <input name=\"headerValue{{i}}\" matInput required ngModel\r\n                                     name=\"headerValue\" #headerValue #headerValue=\"ngModel\" \r\n                                    [(ngModel)]=\"iso.headerValue\">\r\n                                    <!-- <mat-select name=\"messageBasis\" name=\"headerValue\" #headerValue #headerValue=\"ngModel\"\r\n                                    [(ngModel)]=\"iso.headerValue\">\r\n                                            <mat-option *ngFor=\"let header of headerValueIso\"\r\n                                            [value]=\"header\">\r\n                                            {{header}}\r\n                                            </mat-option>\r\n                                        </mat-select> -->   \r\n                                </mat-form-field>\r\n                        </div> \r\n                       \r\n                        <div fxFlex=\"15\">\r\n\r\n                            \r\n                                <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>{{matLabel5}}</mat-label>\r\n                                   \r\n                                        <!-- <input name=\"encryption\" matInput\r\n                                         name=\"encryption\" #encryption #encryption=\"ngModel\"\r\n                                        [(ngModel)]=\"iso.encryption\"> -->\r\n                                      \r\n                                        <mat-select name=\"encryption_{{i}}\"  #encryption \r\n                                        #encryption=\"encryption\" ngModel\r\n                                       [(ngModel)]=\"iso.encryption\" [ngModelOptions]=\"{standalone: true}\">\r\n                                       <mat-option value=\"null\">--Select--</mat-option>\r\n                                       <mat-option value=\"No Encryption\">No Encryption</mat-option>\r\n                                       <mat-option value=\"BASE64\">\r\n                                               BASE64\r\n                                               </mat-option>\r\n                                               <mat-option value=\"SHA264\">\r\n                                                       SHA264\r\n                                                       </mat-option>\r\n                                                       <mat-option value=\"SHA512\">\r\n                                                               SHA512\r\n                                                               </mat-option>\r\n                                           </mat-select> \r\n                                    </mat-form-field>\r\n                            </div> \r\n                 \r\n                    <div fxFlex=\"20\">\r\n                        <!-- <button mat-raised-button  > -->\r\n                            <mat-icon (click)=\"onDelete(i)\" color=\"warn\" style=\"cursor: pointer;margin-top: 10px\">delete</mat-icon>\r\n                        <!-- </button> -->\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n       \r\n        <div fxLayout=\"row wrap\"  [ngClass]=\"{'readonly-wrapper' : clickedFinishButton}\">\r\n                <div fxFlex=\"100\">\r\n                        <div fxFlex=\"50\">\r\n                                <!-- <button mat-mini-fab  (click)=\"add()\" color=\"primary\">\r\n                                        <mat-icon   style=\"cursor: pointer\">add</mat-icon>\r\n                                    </button> -->\r\n                                    <!-- <button > -->\r\n                                            <mat-icon   (click)=\"add()\" color=\"primary\" style=\"cursor: pointer\">add</mat-icon>\r\n                                        <!-- </button> -->\r\n                        </div>\r\n                    </div>\r\n        </div>\r\n        <br><br>\r\n            <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\" >\r\n                    <div fxFlex=\"40\"></div>\r\n                    <div fxFlex=\"60\" fxLayoutGap=\"20px\">\r\n                            <!--   -->\r\n                            <button mat-raised-button (click)=\"onFisnih()\" color=\"primary\" [disabled]=\"!details1.valid || clickedFinishButton || isSysCodeAlreadyExist \">Finish</button>\r\n                        \r\n                        <button mat-raised-button (click)=\"moveToProtocol()\" color=\"warn\" [disabled]=\"clickedFinishButton\">Previous</button>\r\n                        <button mat-raised-button (click)=\"onReset()\" color=\"primary\" [disabled]=\"clickedFinishButton\">Reset</button>\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n</mat-card>\r\n\r\n<!-- All tab for protocol selection -->\r\n<mat-card *ngIf=\"showTab\">\r\n        <mat-tab-group #tabgroup [selectedIndex]=\"selectedIndex\"\r\n        (selectedTabChange)=\"tabChanged($event)\" [ngClass]=\"{'readonly-wrapper' : clickedFinishButton}\">\r\n                <mat-tab label=\"Incoming\"  >\r\n                     <mat-card *ngIf=\"showProtocolForAllInc\">\r\n                         <form #incAllProtocol=\"ngForm\">\r\n                            <div fxLayout=\"row wrap\">\r\n                                    <div fxFlex=\"100\">\r\n                                        <div fxFlex=\"30\"></div>\r\n                                        <div fxFlex=\"90\">\r\n                                            <h5>Incoming Message Configuration</h5>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div fxLayout=\"column wrap\" >\r\n                                        <div fxFlex=\"100\">\r\n                                            <div fxFlex=\"30\"></div>\r\n                                            <div fxFlex=\"40\">\r\n                                                <mat-form-field appearance=\"outline\">\r\n                                                    <mat-label>Incoming Message Protocol</mat-label>\r\n                                                    <mat-select #protocolRef [(ngModel)]=\"protocolAllInc.messageChannel\" \r\n                                                    name=\"messageChannel\" required #msgChannel=\"ngModel\" #msgChannel\r\n                                                        (selectionChange)=\"onProtocalSlection(protocolAllInc.messageChannel)\"\r\n                                                        (optionSelected)=\"onProtocalSlection(protocolAllInc.messageChannel)\">\r\n                                                        <mat-option value=\" \">--Please select--</mat-option>\r\n                                                        <mat-option value=\"TCP/IP\">TCP/IP</mat-option>\r\n                                                        <mat-option value=\"Https/Http\">HTTPS/HTTP\r\n                                                        </mat-option>\r\n                                                        <mat-option value=\"MDB\">MDB</mat-option>\r\n                                                        <mat-option value=\"EJB\">EJB</mat-option>\r\n                                                        <mat-option value=\"DB Connection\">DB Connection\r\n                                                        </mat-option>\r\n                                                    </mat-select>\r\n                                                </mat-form-field>\r\n                                            </div>\r\n                                \r\n                                        </div>\r\n                                        <div fxFlex=\"100\">\r\n                                            <div fxFlex=\"30\"></div>\r\n                                            <div fxFlex=\"40\">\r\n                                                <mat-form-field appearance=\"outline\">\r\n                                                        <mat-label>Data Type</mat-label>\r\n                                                      \r\n                                                    <mat-select [(ngModel)]=\"protocolAllInc.messageFormat\"\r\n                                                     name=\"messageFormat\" required #msgFormat #msgFormat=\"ngModel\"\r\n                                                        (selectionChange)=\"incomingDataypeSelection(protocolAllInc.messageFormat)\">\r\n                                                        <mat-option *ngFor=\"let data of dataType\" [value]=\"data\">{{data}}</mat-option>\r\n                                                    </mat-select>\r\n                                                </mat-form-field>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div fxFlex=\"100\" *ngIf=\"protocolAllInc.messageChannel=='DB Connection'\">\r\n                                            <div fxFlex=\"25\">\r\n                                                    <mat-form-field appearance=\"outline\">\r\n                                                            <mat-label>User Name</mat-label>\r\n                                                            <input matInput name=\"dbUsername\"\r\n                                                             #dbUsername \r\n                                                             [(ngModel)]=\"protocolAllInc.dbUsername\">\r\n                                                        </mat-form-field>\r\n                                            </div>\r\n                                            <div fxFlex=\"25\">\r\n                                                    <mat-form-field appearance=\"outline\">\r\n                                                            <mat-label>Passowrd</mat-label>\r\n                                                            <input matInput name=\"dbPassword\" #dbPassword \r\n                                                            type=\"password\" [(ngModel)]=\"protocolAllInc.password\">\r\n                                                             \r\n                                                         </mat-form-field>\r\n                                            </div>\r\n                                            <div fxFlex=\"25\">\r\n                                                    <mat-form-field appearance=\"outline\">\r\n                                                            <mat-label>DataBase Name</mat-label>\r\n                                                            <input matInput name=\"dbServiceName\" \r\n                                                            #dbServiceName type=\"text\" \r\n                                                            [(ngModel)]=\"protocolAllInc.dbServiceName\">\r\n                                                             \r\n                                                         </mat-form-field>\r\n                                            </div>\r\n                                            <div fxFlex=\"25\">\r\n                                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                                                            <mat-label>Connecting String</mat-label>\r\n                                                            <textarea matInput \r\n                                                            [(ngModel)]=\"protocolAllInc.dbConnectString\" \r\n                                                            name=\"dbConnectString\" #dbConnectString></textarea>\r\n                                                          </mat-form-field>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div fxFlex=\"100\" fxLayoutGap=\"10px\" *ngIf=\"protocolAllInc.messageChannel=='MDB'\">\r\n                                                <div fxFlex=\"25\">\r\n                                                        <mat-form-field appearance=\"outline\">\r\n                                                                <mat-label>Type of Queue</mat-label>\r\n                                                              <mat-select (selectionChange)=\"onMdbQueue($event)\">\r\n                                                                  <mat-option *ngFor=\"let queue of mdbQueueInc\" [value]=\"queue\">{{queue}}</mat-option>\r\n                                                              </mat-select>\r\n                                                             </mat-form-field>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngIf=\"queueType=='JMS' &&protocolAllInc.messageChannel=='MDB'\">                    \r\n                                                    <div fxFlex=\"20\" >\r\n                                                            <mat-form-field appearance=\"outline\">\r\n                                                               <mat-label>Queue Manager</mat-label>\r\n                                                               <input matInput name=\"queueManager\" >\r\n                                                            </mat-form-field>\r\n                                                        </div>\r\n                                                        <div fxFlex=\"20\" >\r\n                                                                <mat-form-field appearance=\"outline\">\r\n                                                                   <mat-label>Queue Name</mat-label>\r\n                                                                   <input matInput >\r\n                                                                </mat-form-field>\r\n                                                            </div>\r\n                                                            <div fxFlex=\"20\" >\r\n                                                                    <mat-form-field appearance=\"outline\">\r\n                                                                       <mat-label>Channel</mat-label>\r\n                                                                       <input matInput>\r\n                                                                    </mat-form-field>\r\n                                                                    \r\n                                                                </div>\r\n                                                   \r\n                                                        \r\n                                                   \r\n                                             </div>\r\n                                             <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngIf=\"queueType=='IBM' &&protocolAllInc.messageChannel=='MDB'\" >\r\n                                                    <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                                        <mat-form-field appearance=\"outline\">\r\n                                                           <mat-label>Queue Manager</mat-label>\r\n                                                           <input matInput name=\"queueManager\" >\r\n                                                            \r\n                                                        </mat-form-field>\r\n                                                    </div>\r\n                                                    <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                                            <mat-form-field appearance=\"outline\">\r\n                                                               <mat-label>Queue Name</mat-label>\r\n                                                               <input matInput name=\"queueName\"  >\r\n                                                                \r\n                                                            </mat-form-field>\r\n                                                        </div>         \r\n                                                        <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                                                <mat-form-field appearance=\"outline\">\r\n                                                                   <mat-label>Connecting Factory</mat-label>\r\n                                                                   <input matInput name=\"connectingFactory\">\r\n                                                                    \r\n                                                                </mat-form-field>\r\n                                                            </div>\r\n                                                   \r\n                                                    </div>\r\n                                        <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n                                            <div fxFlex=\"40\"></div>\r\n                                                <button mat-raised-button (click)=\"nextToServcieFromInc(protocolAllInc)\" color=\"primary\"\r\n                                                 [disabled]=\"incAllProtocol.invalid\">Next</button>\r\n                                                <button mat-raised-button (click)=\"onPreviousToBasic()\" color=\"warn\" >Previous</button>\r\n                                            \r\n                                                <button mat-raised-button (click)=\"onResetOfProtocol(protocolAllInc)\" color=\"warn\"  [disabled]=\"incAllProtocol.invalid\">Reset</button>\r\n                                        </div>\r\n                                        </div>\r\n                                    </form>\r\n                     </mat-card>\r\n                                 <mat-card *ngIf=\"showServiceScreen\">\r\n                                        <form #incAll=\"ngForm\">  \r\n                                        <div >\r\n                                            <div fxLayout=\"row wrap\">\r\n                                                <div fxFlex=\"100\">\r\n                                                    <div fxFlex=\"30\"></div>\r\n                                                    <div fxFlex=\"90\">\r\n                                                        <h5>Header and Service Details</h5>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                                  \r\n                                                        <div fxLayout=\"row wrap\" *ngIf=\"incDataType=='XML' && incProtocol=='EJB' ||incProtocol=='MDB'&& incDataType=='XML' ||incProtocol=='Https/Http' &&incDataType=='XML'\">\r\n                                                            <div fxFlex=\"100\"  [ngClass]=\"{'readonly-wrapper' : clickedFinishButton}\">\r\n                                                                <div fxFlex=\"60\">\r\n                                                                    <input type=\"file\" id=\"chFile\" (change)=\"uploadFileXml($event)\" name=\"upload\">\r\n                                                                    <button mat-raised-button type=\"button\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                                                                      <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"padding-left: 40px;\">{{fileName}}</span>\r\n                                                                    </button>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div fxLayout=\"row wrap\" *ngIf=\"incDataType=='CSV/EXCEL'  ||incDataType=='FLATFILE'\">\r\n                                                            <div fxFlex=\"100\">\r\n                                                                <div fxFlex=\"60\">\r\n                                                                   <mat-form-field appearance=\"outline\">\r\n                                                                    <mat-label>Folder Name</mat-label>\r\n                                                                    <input matInput name=\"folderName\">\r\n                                                                   </mat-form-field>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div fxLayout=\"row wrap\" *ngIf=\"incProtocol=='DB Connection' &&incDataType=='XML' ||incProtocol=='DB Connection'&& incDataType=='JSON'\" >\r\n                                                                <div fxFlex=\"100\">\r\n                                                                    <div fxFlex=\"60\">\r\n                                                                       <mat-form-field appearance=\"outline\">\r\n                                                                        <mat-label>Table Name</mat-label>\r\n                                                                        <input matInput name=\"TableName\">\r\n                                                                       </mat-form-field>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div *ngIf=\"incDataType!='CSV/EXCEL' &&incDataType!='FLATFILE'\"  [ngClass]=\"{'readonly-wrapper' : clickedFinishButton}\">\r\n                                                            <div fxLayout=\"row wrap\" *ngFor=\"let incTcp of mdmtSystemServiceAllInc;let i=index\">\r\n                                                                    <div fxFlex=\"100\" fxLayoutGap=\"10px\">\r\n                                                                            <div fxFlex=\"15\">\r\n                                                                               \r\n                                                                                    <mat-form-field appearance=\"outline\">\r\n                                                                                        <mat-label>Header</mat-label>\r\n                                                                                        <!-- <input name=\"headerTag\" #headerTag=\"ngModel\" \r\n                                                                                        matInput [(ngModel)]=\"incTcp.headerTag\"> -->\r\n                                                                                        <!-- [hidden] = issourceSysDisabled(header.headerTag) -->\r\n                                                                                        <mat-select name=\"headerTag_{{i}}\" \r\n                                                                                        #headerTag #headerTag=\"ngModel\" required\r\n                                                                                        [(ngModel)]=\"incTcp.headerTag\" (valueChange)=\"changeValue2($event, i)\">\r\n                                                                                                <mat-option *ngFor=\"let header of headerTagData\"\r\n                                                                                               \r\n                                                                                                [value]=\"header.headerTag\">\r\n                                                                                                {{header.headerTag}}\r\n                                                                                                </mat-option>\r\n                                                                                            </mat-select>  \r\n                                                                                          \r\n                                                                                    </mat-form-field>\r\n                                                                            </div>\r\n                                                                        <div fxFlex=\"15\" *ngIf=\"incDataType!='XML'\">\r\n                                                                            <mat-form-field appearance=\"outline\">\r\n                                                                                <mat-label>{{matLabel1}}</mat-label>\r\n                                                                                <!-- (selectionChange)=\"onSelectingMessageBasis($event,i)\" -->\r\n                                                                                <mat-select name=\"messageKey_{{i}}\" #messageKey=\"ngModel\" [(ngModel)]=\"incTcp.messageKey\" required (selectionChange)=\"onSelectingMessageBasis($event,i)\"> \r\n                                                                                    <mat-option *ngFor=\"let mkey of isoRespData\"\r\n                                                                                    [value]=\"mkey.fieldNo\">\r\n                                                                                    {{mkey.fieldNo}}<{{mkey.fieldName}}\r\n                                                                                    </mat-option>\r\n                                                                                </mat-select> \r\n                                                                            </mat-form-field>\r\n                                                                        </div>\r\n                                                                       \r\n                                                                           \r\n                                                                        <div fxFlex=\"15\" *ngIf=\"incDataType=='XML'\">\r\n                                                                                <mat-form-field appearance=\"outline\">\r\n                                                                                    <mat-label>{{matLabel2}}</mat-label>\r\n                                                                                   <!-- - <input matInput name=\"messageKey\" #messageKey=\"ngModel\" -->\r\n                                                                                     <!-- [(ngModel)]=\"incTcp.messageKey\"> -->\r\n                                                                                    \r\n                                                                                        <mat-select name=\"messageBasis_{{i}}\"  #messageBasis #messageBasis=\"ngModel\"\r\n                                                                                        [(ngModel)]=\"incTcp.messageBasis\" required\r\n                                                                                        (selectionChange)=\"onselectingTag($event,i)\"\r\n                                                                                        (optionSelected)=\"onselectingTag($event,i)\"\r\n                                                                                     >\r\n                                                                                               <mat-option *ngFor=\"let data of messageBasisIso\"\r\n                                                                                               [value]=\"data\">\r\n                                                                                               {{data}}\r\n                                                                                               </mat-option>\r\n                                                                                           </mat-select>\r\n                                                                                     \r\n                                                                                </mat-form-field>\r\n                                                                        </div> \r\n                                                                        <div fxFlex=\"15\" *ngIf=\"incDataType=='XML'\">\r\n                                                                                <mat-form-field appearance=\"outline\">\r\n                                                                                    <mat-label>{{matLabel3}}</mat-label>\r\n                                                                                    <!-- <input name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"incTcp.dataType\" matInput> -->\r\n\r\n                                                                                    <mat-select name=\"dataType_{{i}}\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"incTcp.dataType\" required>\r\n                                                                                        <mat-option value=\"numeric\">\r\n                                                                                            Numeric\r\n                                                                                            </mat-option>\r\n                                                                                            <mat-option value=\"alphaNumeric\">\r\n                                                                                              Alpha  Numeric\r\n                                                                                                </mat-option>\r\n                                                                                                <mat-option value=\"date\">\r\n                                                                                                    Date\r\n                                                                                                    </mat-option>\r\n                                                                                        </mat-select>\r\n                                                                                </mat-form-field>\r\n                                                                        </div>\r\n                                                                        <div fxFlex=\"15\" *ngIf=\"incDataType!='XML'\">\r\n                                                                                <mat-form-field appearance=\"outline\">\r\n                                                                                    <mat-label>{{matLabel3}}</mat-label>\r\n                                                                                    <!-- <input name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"incTcp.dataType\" matInput> -->\r\n\r\n                                                                                    <mat-select name=\"dataType_{{i}}\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"incTcp.dataType\" required>\r\n                                                                                       <mat-option *ngFor=\"let t1 of typeDataIso\" [value]=\"t1\">{{t1}}</mat-option>\r\n                                                                                       \r\n                                                                                        </mat-select>\r\n                                                                                </mat-form-field>\r\n                                                                        </div>\r\n                                                                        <div fxFlex=\"15\">\r\n                                                                                <mat-form-field appearance=\"outline\">\r\n                                                                                        <mat-label>{{matLabel4}}</mat-label>\r\n                                                                                        <input matInput name=\"headerValue_{{i}}\"\r\n                                                                                         #headerValue=\"ngModel\" [(ngModel)]=\"incTcp.headerValue\" required>\r\n                                                                                        <!-- <mat-select name=\"messageBasis\" name=\"headerValue\" #headerValue #headerValue=\"ngModel\"\r\n                                                                                        [(ngModel)]=\"incTcp.headerValue\">\r\n                                                                                                <mat-option *ngFor=\"let header of headerValueIso\"\r\n                                                                                                [value]=\"header\">\r\n                                                                                                {{header}}\r\n                                                                                                </mat-option>\r\n                                                                                            </mat-select> -->\r\n                                                                                    </mat-form-field>\r\n                                                                            </div>\r\n                                                                           \r\n                                                                            <div fxFlex=\"15\">\r\n                                                                                    <mat-form-field appearance=\"outline\">\r\n                                                                                            <mat-label>{{matLabel5}}</mat-label>\r\n                                                                                           \r\n                                                                                            <!-- <input name=\"encryption\" matInput\r\n                                                                                             name=\"encryption\" #encryption \r\n                                                                                             #encryption=\"ngModel\"\r\n                                                                                            [(ngModel)]=\"incTcp.encryption\"> -->\r\n                                                                                           <mat-select name=\"encryption_{{i}}\" #headerValue #headerValue=\"ngModel\"\r\n                                                                                            [(ngModel)]=\"incTcp.encryption\">\r\n                                                                                            <mat-option >--Select--</mat-option>\r\n                                       <mat-option value=\"No Encryption\">No Encryption</mat-option>\r\n                                                                                                    <mat-option value=\"BASE64\">\r\n                                                                                                    BASE64\r\n                                                                                                    </mat-option>\r\n                                                                                                    <mat-option value=\"SHA264\">\r\n                                                                                                            SHA264\r\n                                                                                                            </mat-option>\r\n                                                                                                            <mat-option value=\"SHA512\">\r\n                                                                                                                    SHA512\r\n                                                                                                                    </mat-option>\r\n                                                                                                </mat-select> \r\n                                                                                        </mat-form-field>\r\n                                                                                </div> \r\n                                                                        <div fxFlex=\"20\">\r\n                                                                            <!-- <button mat-raised-button > -->\r\n                                                                                <mat-icon (click)=\"onDeleteOFAllInc(i)\" color=\"warn\"\r\n                                                                                style=\"cursor: pointer;margin-top:10px\">delete</mat-icon>\r\n                                                                            <!-- </button> -->\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div fxLayout=\"row wrap\"  [ngClass]=\"{'readonly-wrapper' : clickedFinishButton}\">\r\n                                                                    <div fxFlex=\"100\">\r\n                                                                        <div fxFlex=\"50\">\r\n                                                                                <!-- <button > -->\r\n                                                                                        <mat-icon (click)=\"addOfIncAll()\" color=\"primary\" style=\"cursor: pointer;margin-top:10px\">add</mat-icon>\r\n                                                                                    <!-- </button> -->\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                <div fxLayout=\"row wrap\">\r\n                                                                    <div fxFlex=\"100\">\r\n                                                                        <div fxFlex=\"40\"></div>\r\n                                                                        <div fxFlex=\"60\" fxLayoutGap=\"20px\">\r\n                                                                                <!-- [disabled]=\"!incAll.valid\" -->\r\n                                                                                <button mat-raised-button (click)=\"nextStep(tabgroup.selectedIndex)\" color=\"primary\" [disabled]=\"!incAll.valid\">Next</button>\r\n                                                                                <button mat-raised-button (click)=\"moveIncProtocolAll()\" color=\"warn\">Previous</button>\r\n                                                                                <button mat-raised-button (click)=\"onResetOFAllInc()\" color=\"primary\">Reset</button>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                   \r\n                                                   \r\n                                        </div>\r\n                                    </form>\r\n                                 </mat-card>\r\n                </mat-tab>\r\n                <!-- outgoing -->\r\n                <mat-tab label=\"Outgoing\"> \r\n                    <mat-card *ngIf=\"showProtocolForAllOut\">\r\n                            <form #outAll=\"ngForm\">\r\n                                <div fxLayout=\"row wrap\">\r\n                                    <div fxFlex=\"100\">\r\n                                        <div fxFlex=\"30\"></div>\r\n                                        <div fxFlex=\"90\">\r\n                                            <h5>Outgoing Message Configuration</h5>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            <div fxLayout=\"column wrap\" >\r\n                                    <div fxFlex=\"100\">\r\n                                        <div fxFlex=\"30\"></div>\r\n                                        <div fxFlex=\"40\">\r\n                                            <mat-form-field appearance=\"outline\">\r\n                                                <mat-label>Outgoing Message Protocol</mat-label>\r\n                                                <mat-select #protocolRef [(ngModel)]=\"protocolAllOut.messageChannel\" name=\"messageChannel\"\r\n                                                    (selectionChange)=\"onProtocalSlectionOutgoing(protocolAllOut.messageChannel)\" required\r\n                                                    (optionSelected)=\"onProtocalSlectionOutgoing(protocolAllOut.messageChannel)\">\r\n                                                    <mat-option value=\" \">---Please select---</mat-option>\r\n                                                    <mat-option value=\"TCP/IP\">TCP/IP</mat-option>\r\n                                                    <mat-option value=\"Https/Http\">HTTPS/HTTP\r\n                                                    </mat-option>\r\n                                                    <mat-option value=\"MDB\">MDB</mat-option>\r\n                                                    <mat-option value=\"EJB\">EJB</mat-option>\r\n                                                    <mat-option value=\"DB Connection\">DB Connection\r\n                                                    </mat-option>\r\n                                                </mat-select>\r\n                                            </mat-form-field>\r\n                                        </div>\r\n                            \r\n                                    </div>\r\n                                    <div fxFlex=\"100\">\r\n                                        <div fxFlex=\"30\"></div>\r\n                                        <div fxFlex=\"40\">\r\n                                            <mat-form-field appearance=\"outline\">\r\n                                           \r\n                                                    <mat-label>Data Type</mat-label>\r\n                                                <mat-select [(ngModel)]=\"protocolAllOut.messageFormat\" name=\"messageFormat\" required\r\n                                                    (selectionChange)=\"OutgoingDataypeSelection(protocolAllOut.messageFormat)\">\r\n                                                    <mat-option *ngFor=\"let data of dataType\" [value]=\"data\">{{data}}</mat-option>\r\n                                                </mat-select>\r\n                                            </mat-form-field>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div fxFlex=\"100\" *ngIf=\"protocolAllOut.messageChannel=='DB Connection'\">\r\n                                        <div fxFlex=\"25\">\r\n                                                <mat-form-field appearance=\"outline\">\r\n                                                        <mat-label>User Name</mat-label>\r\n                                                        <input matInput name=\"dbUsername\"\r\n                                                         #dbUsername \r\n                                                         [(ngModel)]=\"protocolAllOut.dbUsername\">\r\n                                                    </mat-form-field>\r\n                                        </div>\r\n                                        <div fxFlex=\"25\">\r\n                                                <mat-form-field appearance=\"outline\">\r\n                                                        <mat-label>Passowrd</mat-label>\r\n                                                        <input matInput name=\"dbPassword\" #dbPassword \r\n                                                        type=\"password\" [(ngModel)]=\"protocolAllOut.password\">\r\n                                                         \r\n                                                     </mat-form-field>\r\n                                        </div>\r\n                                        <div fxFlex=\"25\">\r\n                                                <mat-form-field appearance=\"outline\">\r\n                                                        <mat-label>DataBase Name</mat-label>\r\n                                                        <input matInput name=\"dbServiceName\" \r\n                                                        #dbServiceName type=\"text\" \r\n                                                        [(ngModel)]=\"protocolAllOut.dbServiceName\">\r\n                                                         \r\n                                                     </mat-form-field>\r\n                                        </div>\r\n                                        <div fxFlex=\"25\">\r\n                                                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                                                        <mat-label>Connecting String</mat-label>\r\n                                                        <textarea matInput \r\n                                                        [(ngModel)]=\"protocolAllOut.dbConnectString\" \r\n                                                        name=\"dbConnectString\" #dbConnectString></textarea>\r\n                                                      </mat-form-field>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div fxFlex=\"100\" fxLayoutGap=\"10px\" *ngIf=\"protocolAllOut.messageChannel=='MDB'\">\r\n                                            <div fxFlex=\"25\">\r\n                                                    <mat-form-field appearance=\"outline\">\r\n                                                            <mat-label>Type of Queue</mat-label>\r\n                                                          <mat-select (selectionChange)=\"onMdbQueue($event)\">\r\n                                                              <mat-option *ngFor=\"let queue of mdbQueueInc\" [value]=\"queue\">{{queue}}</mat-option>\r\n                                                          </mat-select>\r\n                                                         </mat-form-field>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngIf=\"queueType=='JMS' &&protocolAllOut.messageChannel=='MDB'\">                    \r\n                                                <div fxFlex=\"20\" >\r\n                                                        <mat-form-field appearance=\"outline\">\r\n                                                           <mat-label>Queue Manager</mat-label>\r\n                                                           <input matInput name=\"queueManager\" >\r\n                                                        </mat-form-field>\r\n                                                    </div>\r\n                                                    <div fxFlex=\"20\" >\r\n                                                            <mat-form-field appearance=\"outline\">\r\n                                                               <mat-label>Queue Name</mat-label>\r\n                                                               <input matInput >\r\n                                                            </mat-form-field>\r\n                                                        </div>\r\n                                                        <div fxFlex=\"20\" >\r\n                                                                <mat-form-field appearance=\"outline\">\r\n                                                                   <mat-label>Channel</mat-label>\r\n                                                                   <input matInput>\r\n                                                                </mat-form-field>\r\n                                                                \r\n                                                            </div>\r\n                                               \r\n                                                    \r\n                                               \r\n                                         </div>\r\n                                         <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngIf=\"queueType=='IBM' &&protocolAllOut.messageChannel=='MDB'\" >\r\n                                                <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                                    <mat-form-field appearance=\"outline\">\r\n                                                       <mat-label>Queue Manager</mat-label>\r\n                                                       <input matInput name=\"queueManager\" >\r\n                                                        \r\n                                                    </mat-form-field>\r\n                                                </div>\r\n                                                <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                                        <mat-form-field appearance=\"outline\">\r\n                                                           <mat-label>Queue Name</mat-label>\r\n                                                           <input matInput name=\"queueName\"  >\r\n                                                            \r\n                                                        </mat-form-field>\r\n                                                    </div>         \r\n                                                    <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                                            <mat-form-field appearance=\"outline\">\r\n                                                               <mat-label>Connecting Factory</mat-label>\r\n                                                               <input matInput name=\"connectingFactory\">\r\n                                                                \r\n                                                            </mat-form-field>\r\n                                                        </div>\r\n                                               \r\n                                                </div>\r\n                                    <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n                                        <div fxFlex=\"40\"></div>\r\n                                            <button mat-raised-button (click)=\"onNextOfProtocolAllOut(protocolAllOut)\" color=\"primary\" [disabled]=\"!outAll.valid\">Next</button>\r\n                                            <button mat-raised-button (click)=\"onPreviousToBasic()\" color=\"warn\">Previous</button>\r\n                                            <button mat-raised-button (click)=\"onResetOfProtocolAllOut(protocolAllOut)\" color=\"warn\" [disabled]=\"!outAll.valid\">Reset</button>\r\n                                    </div>\r\n                                    </div>\r\n                                </form>\r\n                    </mat-card>\r\n\r\n                                <mat-card *ngIf=\"showServiceScreeAllOut\">\r\n                                    <div fxLayout=\"row wrap\">\r\n                                        <div fxFlex=\"100\">\r\n                                            <div fxFlex=\"30\"></div>\r\n                                            <div fxFlex=\"90\">\r\n                                                <h5>Header and Service Details</h5>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                       <form #outAll=\"ngForm\">\r\n                                        <div >\r\n                                              \r\n                                                        <div fxLayout=\"row wrap\" *ngIf=\"OutDataType=='XML' && outProtocol=='EJB' ||outProtocol=='MDB'&& OutDataType=='XML' ||outProtocol=='Https/Http' &&OutDataType=='XML'\"  [ngClass]=\"{'readonly-wrapper' : clickedFinishButton}\">\r\n                                                            <div fxFlex=\"100\">\r\n                                                                <div fxFlex=\"60\">\r\n                                                                    <input type=\"file\" id=\"chFile\" (change)=\"uploadFileXmlOut($event)\">\r\n                                                                    <button mat-raised-button type=\"button\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                                                                      <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"padding-left: 40px;\">{{fileNameOut}}</span>\r\n                                                                    </button>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div fxLayout=\"row wrap\" *ngIf=\"incDataType=='CSV/EXCEL'  ||incDataType=='FLATFILE'\">\r\n                                                            <div fxFlex=\"100\">\r\n                                                                <div fxFlex=\"60\">\r\n                                                                   <mat-form-field appearance=\"outline\">\r\n                                                                    <mat-label>Folder Name</mat-label>\r\n                                                                    <input matInput>\r\n                                                                   </mat-form-field>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div fxLayout=\"row wrap\" *ngIf=\"incProtocol=='DB Connection' &&incDataType=='XML' ||incProtocol=='DB Connection'&& incDataType=='JSON'\" >\r\n                                                                <div fxFlex=\"100\">\r\n                                                                    <div fxFlex=\"60\">\r\n                                                                       <mat-form-field appearance=\"outline\">\r\n                                                                        <mat-label>Table Name</mat-label>\r\n                                                                        <input matInput>\r\n                                                                       </mat-form-field>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div *ngIf=\"incDataType!='CSV/EXCEL' &&incDataType!='FLATFILE'\"  [ngClass]=\"{'readonly-wrapper' : clickedFinishButton}\">\r\n                                                            <div fxLayout=\"row wrap\" *ngFor=\"let tcpOut of mdmtSystemServiceAllOut;let i=index\">\r\n                                                                    <div fxFlex=\"100\" fxLayoutGap=\"10px\">\r\n                                                                            <div fxFlex=\"15\">\r\n                                                                                    <mat-form-field appearance=\"outline\">\r\n                                                                                            <mat-label>Header</mat-label>\r\n                                                                                            <!-- <input matInput name=\"headerTag\" name=\"headerTag\"\r\n                                                                                             #headerTag #headerTag=\"ngModel\"\r\n                                                                                            [(ngModel)]=\"tcpOut.headerTag\"> -->\r\n                                                                                            <!-- [hidden] = issourceSysDisabledOut(header.headerTag) -->\r\n                                                                                            <mat-select name=\"headerTag_{{i}}\"  \r\n                                                                                            #headerTag #headerTag=\"ngModel\" required\r\n                                                                                            [(ngModel)]=\"tcpOut.headerTag\" (valueChange)=\"changeValueOut($event, i)\">\r\n                                                                                                    <mat-option *ngFor=\"let header of headerTagDataOut\"\r\n                                                                                                  \r\n                                                                                                    [value]=\"header.headerTag\">\r\n                                                                                                    {{header.headerTag}}\r\n                                                                                                    </mat-option>\r\n                                                                                                </mat-select> \r\n                                                                                        </mat-form-field>\r\n                                                                            </div>\r\n                                                                        <div fxFlex=\"15\" *ngIf=\"OutDataType!='XML'\">\r\n                                                                                <mat-form-field appearance=\"outline\">\r\n                                                                                        <mat-label>{{matLabel1}}</mat-label>\r\n                                                                                        <!-- (selectionChange)=\"onSelectingMessageBasis($event,i)\" -->\r\n                                                                                        <mat-select name=\"messageKey_{{i}}\" #messageKey=\"ngModel\"\r\n                                                                                        [(ngModel)]=\"tcpOut.messageKey\" required (selectionChange)=\"onSelectingMessageBasis($event,i)\" > \r\n                                                                                               <mat-option *ngFor=\"let mkey of isoRespData\"\r\n                                                                                               [value]=\"mkey.fieldNo\">\r\n                                                                                               {{mkey.fieldNo}}<{{mkey.fieldName}}\r\n                                                                                               </mat-option>\r\n                                                                                           </mat-select>   \r\n                                                        \r\n                                                                                    </mat-form-field>\r\n                                                                        </div>\r\n                                                                       <div fxFlex=\"15\" *ngIf=\"OutDataType=='XML'\">\r\n                                                                            <mat-form-field appearance=\"outline\" >\r\n                                                                                    <mat-label>{{matLabel2}}</mat-label>\r\n                                                                                   <!-- <input matInput  name=\"messageKey\" #messageKey=\"ngModel\"\r\n                                                                                    [(ngModel)]=\"tcpOut.messageKey\"> -->\r\n                                                                                     \r\n                                                                                        <mat-select name=\"messageBasis_{{i}}\"  required\r\n                                                                                        #messageBasis #messageBasis=\"ngModel\"\r\n                                                                                        (selectionChange)=\"onselectingTag($event,i)\"\r\n                                (optionSelected)=\"onselectingTag($event,i)\"\r\n                                                                                         [(ngModel)]=\"tcpOut.messageBasis\">\r\n                                                                                           <mat-option *ngFor=\"let data of messageBasisIso\"\r\n                                                                                           [value]=\"data\">\r\n                                                                                           {{data}}\r\n                                                                                           </mat-option>\r\n                                                                                       </mat-select>\r\n                                                                                </mat-form-field>\r\n                                                                        </div> \r\n                                                                        <div fxFlex=\"15\" *ngIf=\"OutDataType=='XML'\">\r\n                                                                                <mat-form-field appearance=\"outline\">\r\n                                                                                        <mat-label>{{matLabel3}}</mat-label>\r\n                                                                                        <!-- <input matInput name=\"dataType\" #dataType \r\n                                                                                        #dataType=\"ngModel\" [(ngModel)]=\"tcpOut.dataType\"> -->\r\n                                                                                        <mat-select name=\"dataType_{{i}}\" #dataType required\r\n                                                                                        #dataType=\"ngModel\" [(ngModel)]=\"tcpOut.dataType\">\r\n                                                                                        <mat-option value=\"numeric\">\r\n                                                                                            Numeric\r\n                                                                                            </mat-option>\r\n                                                                                            <mat-option value=\"alphaNumeric\">\r\n                                                                                              Alpha  Numeric\r\n                                                                                                </mat-option>\r\n                                                                                                <mat-option value=\"date\">\r\n                                                                                                    Date\r\n                                                                                                    </mat-option>\r\n                                                                                            </mat-select> \r\n                                                                                    </mat-form-field>\r\n                                                                        </div>\r\n                                                                        <div fxFlex=\"15\"*ngIf=\"OutDataType!='XML'\">\r\n                                                                                <mat-form-field appearance=\"outline\">\r\n                                                                                        <mat-label>{{matLabel3}}</mat-label>\r\n                                                                                        <!-- <input matInput name=\"dataType\" #dataType \r\n                                                                                        #dataType=\"ngModel\" [(ngModel)]=\"tcpOut.dataType\"> -->\r\n                                                                                        <mat-select name=\"dataType_{{i}}\" #dataType required\r\n                                                                                        #dataType=\"ngModel\" [(ngModel)]=\"tcpOut.dataType\">\r\n                                                                                        <mat-option *ngFor=\"let outtype of typeDataIso\" [value]=\"outtype\">{{outtype}}</mat-option>\r\n                                                                                            </mat-select> \r\n                                                                                    </mat-form-field>\r\n                                                                        </div>\r\n                                                                        <div fxFlex=\"15\">\r\n                                                                                <mat-form-field appearance=\"outline\">\r\n                                                                                        <mat-label>{{matLabel4}}</mat-label>\r\n                                                                                        <input matInput name=\"headerValue{{i}}\"  #headerValue #headerValue=\"ngModel\"\r\n                                                                                        [(ngModel)]=\"tcpOut.headerValue\" required>\r\n                                                                                        <!-- <mat-select name=\"messageBasis\" name=\"headerValue\" #headerValue #headerValue=\"ngModel\"\r\n                                                                                        [(ngModel)]=\"tcpOut.headerValue\">\r\n                                                                                                <mat-option *ngFor=\"let header of headerValueIso\"\r\n                                                                                                [value]=\"header\">\r\n                                                                                                {{header}}\r\n                                                                                                </mat-option>\r\n                                                                                            </mat-select> -->\r\n                                                                                    </mat-form-field>\r\n                                                                        </div>\r\n                                                                      \r\n                                                                        <div fxFlex=\"15\">\r\n                                                                                <mat-form-field appearance=\"outline\">\r\n                                                                                        <mat-label>{{matLabel5}}</mat-label>\r\n                                                                                     \r\n                                                                                        <!-- <input matInput name=\"encryption\" name=\"encryption\"\r\n                                                                                         #encryption #encryption=\"ngModel\"\r\n                                                                                        [(ngModel)]=\"tcpOut.encryption\"> -->\r\n                                                                                        <mat-select name=\"encryption_{{i}}\" #encryption\r\n                                                                                         #encryption=\"encryption\" required\r\n                                                                                        [(ngModel)]=\"tcpOut.encryption\">\r\n                                                                                        <mat-option >--Select--</mat-option>\r\n                                                                                        <mat-option value=\"No Encryption\" >No Encryption</mat-option>\r\n                                                                                        <mat-option value=\"BASE64\">\r\n                                                                                                BASE64\r\n                                                                                                </mat-option>\r\n                                                                                                <mat-option value=\"SHA264\">\r\n                                                                                                        SHA264\r\n                                                                                                        </mat-option>\r\n                                                                                                        <mat-option value=\"SHA512\">\r\n                                                                                                                SHA512\r\n                                                                                                                </mat-option>\r\n                                                                                            </mat-select> \r\n                                                                                    </mat-form-field>\r\n                                                                        </div>\r\n                                                                        <div fxFlex=\"20\">\r\n                                                                            <!-- <button mat-raised-button> -->\r\n                                                                                <mat-icon  (click)=\"onDeleteOfAllOut(i)\" color=\"warn\" style=\"cursor: pointer;margin-top:10px\">delete</mat-icon>\r\n                                                                            <!-- </button> -->\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                <div fxLayout=\"row wrap\">\r\n                                                                    <div fxFlex=\"100\">\r\n                                                                        <div fxFlex=\"50\">\r\n                                                                                <!-- <button mat-raised-button  color=\"primary\"> -->\r\n                                                                                        <mat-icon (click)=\"addOfAllOut()\" style=\"cursor: pointer;margin-top: 10px\">add</mat-icon>\r\n                                                                                    <!-- </button> -->\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                <br><br>\r\n                                                                <div fxLayout=\"row wrap\">\r\n                                                                    <div fxFlex=\"100\">\r\n                                                                        <div fxFlex=\"50\"></div>\r\n                                                                        <div fxFlex=\"60\" fxLayoutGap=\"20px\">\r\n                                                                                <!--  -->\r\n                                                                                <button mat-raised-button (click)=\"onFisnih()\" color=\"primary\" [disabled]=\"!outAll.valid ||clickedFinishButton\">Finish</button>\r\n                                                                                <button mat-raised-button (click)=\"moveToProtocolAllOut()\" color=\"warn\" [disabled]=\"afterFinish\">Previous</button>\r\n                                                                                <button mat-raised-button (click)=\"onResetOfAllOut()\" color=\"accent\" [disabled]=\"afterFinish\">Reset</button>\r\n\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                   \r\n                                                   \r\n                                        </div>\r\n                                    </form>\r\n                                 </mat-card>\r\n                </mat-tab>\r\n              \r\n              </mat-tab-group>\r\n</mat-card>\r\n <br><br>\r\n<div fxLayout=\"row\" *ngIf=\"showAuditLog\">\r\n        <!-- <div fxFlex></div> -->\r\n        <div fxFlex=\"95\">\r\n          <mat-card style=\"width: 70%;  margin-left:260px;\">\r\n            <mat-card-title>\r\n            </mat-card-title>\r\n            <mat-card-content>\r\n              <div fxLayout=\"row\">\r\n                <table id=\"customers\">\r\n                  <tr>\r\n                    <th>Record Status:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.recordStatus}}</mat-chip>\r\n                    </td>\r\n                    <th>Input By:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.creatorId}}</mat-chip>\r\n                    </td>\r\n                    <th>Verified By:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.approverId}}</mat-chip>\r\n                    </td>\r\n                    <th>Verified Once:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.approvedEver}}</mat-chip>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Modification No:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.versionNo}}</mat-chip>\r\n                    </td>\r\n                    <th>Input Date:</th>\r\n                    <td>\r\n                       <mat-chip>{{addSysRespData.createdTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n    \r\n                    </td>\r\n                    <th>Verified Date:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.approvedTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n                    </td>\r\n      \r\n                    <th>Verified Status:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.verifiedStatus}}</mat-chip>\r\n                    </td>\r\n      \r\n                  </tr>\r\n                </table>\r\n              </div>\r\n            </mat-card-content>\r\n          </mat-card>\r\n        </div>\r\n      </div>\r\n     \r\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/external-system-matenance-summary/external-system-matenance-summary.component.html":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/external-system-matenance-summary/external-system-matenance-summary.component.html ***!
  \****************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\"  style=\"height:30px; font-size: small;\">\r\n    <span>Add System</span>\r\n  </mat-toolbar>\r\n  <br />\r\n<div>\r\n        <div fxLayoutAlign=\"end stretch\" fxLayoutGap=\"10px\">\r\n                <div fxLayoutAlign=\"end stretch\">\r\n                        <button mat-raised-button routerLink=\"/sias-v2/addSystem\" color=\"primary\"\r\n                        >New </button>\r\n                </div>\r\n            <button mat-raised-button routerLink=\"/dashboard\" color=\"warn\"\r\n            >Exit</button>\r\n    </div>\r\n    </div>\r\n    <br>\r\n    <div class=\" mat-elevation-z8\">\r\n        <table mat-table [dataSource]=\"dataSource\" matSort matSortActive=\"createdTime\" matSortDirection=\"desc\">\r\n    \r\n            <!-- code Column -->\r\n            <ng-container matColumnDef=\"systemId\">\r\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Id </th>\r\n                <!-- <td mat-cell *matCellDef=\"let row\"> {{row.code}} </td> -->\r\n                <td mat-cell *matCellDef=\"let row\">\r\n                        <a routerLink=\"/sias-v2/viewOrEditSystem/{{row.systemId}}\" (click)=\"ongettingAddSystem(row)\">{{\r\n                        row.systemId\r\n                      }}</a>\r\n                      </td>\r\n            </ng-container>\r\n             <!-- name Column -->\r\n             <ng-container matColumnDef=\"code\">\r\n                <th mat-header-cell *matHeaderCellDef > System Code </th>\r\n                <td mat-cell *matCellDef=\"let row\"> {{row.systemCode}} </td>\r\n            </ng-container>\r\n    \r\n            <!-- name Column -->\r\n            <ng-container matColumnDef=\"name\">\r\n                <th mat-header-cell *matHeaderCellDef > Name </th>\r\n                <td mat-cell *matCellDef=\"let row\"> {{row.systemName}} </td>\r\n            </ng-container>\r\n    \r\n            <!-- type Column -->\r\n            <ng-container matColumnDef=\"type\">\r\n                <th mat-header-cell *matHeaderCellDef> Type </th>\r\n                <td mat-cell *matCellDef=\"let row\"> {{row.serviceType}} </td>\r\n            </ng-container>\r\n    \r\n            <!-- externalIp Column -->\r\n            <ng-container matColumnDef=\"externalIp\">\r\n                <th mat-header-cell *matHeaderCellDef > External Ip </th>\r\n                <td mat-cell *matCellDef=\"let row\"> {{row.sourceIp}} </td>\r\n            </ng-container>\r\n    \r\n            <!-- externalPort Column -->\r\n            <ng-container matColumnDef=\"externalPort\">\r\n                <th mat-header-cell *matHeaderCellDef > External Port </th>\r\n                <td mat-cell *matCellDef=\"let row\"> {{row.sourcePort}} </td>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"createdTime\">\r\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Date</th>\r\n                <td mat-cell *matCellDef=\"let row\"> {{row.createdTime |date}} </td>\r\n            </ng-container>\r\n    \r\n    \r\n           \r\n    \r\n    \r\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n    \r\n            <!-- Row shown when there is no matching data. -->\r\n            <!-- <tr class=\"mat-row\" *matNoDataRow> -->\r\n            <!-- <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{input.value}}\"</td> -->\r\n            <!-- </tr> -->\r\n        </table>\r\n    \r\n        <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n    </div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/edit-rule-mapping/edit-rule-mapping.component.html":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/edit-rule-mapping/edit-rule-mapping.component.html ***!
  \*********************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\" style=\"height:30px; font-size: small;\">\r\n  <span>Rule Mapping</span>\r\n\r\n</mat-toolbar>\r\n\r\n\r\n<br>\r\n\r\n<mat-card>\r\n  <div fxLayout=\"row wrap\" >  \r\n    <div fxFlex=\"100\">\r\n      <div fxFlex=\"10\"></div>\r\n      <div fxFlex=\"25\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Source system</mat-label>\r\n          <input matInput [(ngModel)]=\"rulemapping.systemCode\" readonly>\r\n          <!-- <mat-select name=\"sourceSystem\" [(ngModel)]=\"rulemapping.sourceTranslationId\"\r\n           #sourceSystem #sourceSystem=\"ngModel\"  (selectionChange)=\"onSourseSelection($event)\">\r\n            <mat-option *ngFor=\"let extsys of externalSystem\" \r\n           [value]=\"extsys\">{{extsys}} \r\n            </mat-option>\r\n\r\n          </mat-select> -->\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxFlex=\"25\">\r\n\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Message Type</mat-label>\r\n          <mat-select name=\"msgType\" [disabled]=\"!editFetch || disableSubmitBtn\" #msgType #msgType=\"ngModel\" [(ngModel)]=\"rulemapping.messageType\"\r\n          (selectionChange)=\"onSelectionOFMessageType(rulemapping.sourceTranslationId,$event)\" \r\n          (optionSelected)=\"onSelectionOFMessageType(rulemapping.sourceTranslationId,$event)\">\r\n            <mat-option value=\"I\">\r\n              Incoming\r\n            </mat-option>\r\n            <mat-option value=\"O\">\r\n              Outgoing\r\n            </mat-option>\r\n            <mat-option value=\"A\">\r\n              All\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxFlex=\"25\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Service</mat-label>\r\n          <input matInput [disabled]=\"!editFetch || disableSubmitBtn\" [(ngModel)]=\"rulemapping.serviceName\">\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxFlex=\"25\">\r\n <div fxFlex=\"25\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Operation</mat-label>\r\n          <input matInput [disabled]=\"!editFetch || disableSubmitBtn\" [(ngModel)]=\"rulemapping.operationName\">\r\n        </mat-form-field>\r\n      </div>\r\n\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div fxLayout=\"row wrap\" >  \r\n      <div fxFlex=\"100\">\r\n        <div fxFlex=\"10\"></div>\r\n        <div fxFlex=\"25\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Destination system</mat-label>\r\n            <input matInput [disabled]=\"!editFetch || disableSubmitBtn\" [(ngModel)]=\"rulemappingdest.targetTranslationId\">\r\n            <!-- <mat-select name=\"destinationSystem\" \r\n            [(ngModel)]=\"rulemapping.targetTranslationId\"\r\n             #destinationSystem #destinationSystem=\"ngModel\" (selectionChange)=\"ondestinationSource($event)\">\r\n              <mat-option *ngFor=\"let extsys of externalSystem\" [value]=\"extsys\">{{extsys}}\r\n              </mat-option> \r\n  \r\n            </mat-select>-->\r\n          </mat-form-field>\r\n        </div>\r\n        <div fxFlex=\"25\">\r\n  \r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Message Type</mat-label>\r\n            <mat-select [disabled]=\"!editFetch || disableSubmitBtn\" name=\"msgType\" #msgType #msgType=\"ngModel\" [(ngModel)]=\"rulemappingdest.messageType\"\r\n            (selectionChange)=\"msgTypeOfDestination($event)\" \r\n            (optionSelected)=\"msgTypeOfDestination($event)\">\r\n              <mat-option value=\"I\">\r\n                Incoming\r\n              </mat-option>\r\n              <mat-option value=\"O\">\r\n                Outgoing\r\n              </mat-option>\r\n              <mat-option value=\"A\">\r\n                All\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n        <div fxFlex=\"25\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Service</mat-label>\r\n            <input matInput [disabled]=\"!editFetch || disableSubmitBtn\" [(ngModel)]=\"rulemappingdest.serviceName\">\r\n          </mat-form-field>\r\n        </div>\r\n        <div fxFlex=\"25\" >\r\n   <div fxFlex=\"25\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Operation</mat-label>\r\n            <input matInput [disabled]=\"!editFetch || disableSubmitBtn\" [(ngModel)]=\"rulemappingdest.operationName\">\r\n          </mat-form-field>\r\n        </div>\r\n  \r\n  \r\n        </div>\r\n      </div>\r\n    </div>\r\n  <div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\">\r\n      <div fxFlex=\"50\"></div>\r\n      <div fxFlex=\"50\" fxLayoutGap=\"10px\">\r\n        <button mat-raised-button  [disabled]=\"disableFetchBtn\" *ngIf=\"editFetch\" (click)=\"fetchDestination()\" color=\"warn\">Fetch All</button>\r\n        <button  mat-raised-button  *ngIf=\"!editFetch\" (click)=\"EditFetch()\" color=\"primary\" [disabled]=\"editBtn\"\r\n        >\r\n         Edit\r\n       </button>\r\n       <button mat-raised-button  *ngIf=\"addSysRespData.approvedEver=='N'\" (click)=\"onAuthOfRuleMapping()\" color=\"primary\" [disabled]=\"authBtn\" [hidden]=\"authBtnHide\">Auth</button>\r\n       <button mat-raised-button  (click)=\"onCloseOfRuleMapping()\" color=\"primary\" *ngIf=\"addSysRespData.recordStatus=='O'\" [disabled]=\"closeBtn\">Close</button>\r\n       <button mat-raised-button  (click)=\"onOpenRuleMapping()\" color=\"primary\" *ngIf=\"addSysRespData.recordStatus=='C'\" [hidden]=\"reopenBtn\">Re-Open</button>\r\n       <button mat-raised-button [disabled]=\"deleted\" (click)=\"deleteRuleMapping()\" color=\"primary\" *ngIf=\"addSysRespData.approvedEver=='N'\">Delete</button>\r\n       <button mat-raised-button color=\"primary\" [routerLink]=\"'/sias-v2/litsRuleMapping'\">Exit</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</mat-card>\r\n<br>\r\n<mat-card *ngIf=\"showSource ||showDestination\">\r\n<div fxLayout=\"column wrap\">\r\n    <div fxFlex=\"100\" fxLayoutGap=\"center\">\r\n      <div fxFlex=\"33\">\r\n        <h5 fxLayoutAlign=\"center stretch\">Source System</h5>\r\n      </div>\r\n      <div fxFlex=\"33\">\r\n        <h5 fxLayoutAlign=\"center stretch\">Destination System</h5>\r\n      </div>\r\n      <div fxFlex=\"33\">\r\n        <h5 fxLayoutAlign=\"center stretch\">Default Value</h5>\r\n      </div>\r\n    </div>\r\n  </div>\r\n <div fxLayout=\"column wrap\"  *ngFor=\"let data of rulemappingDetail;let i=index\">\r\n   <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n  <div fxFlex=\"33\">\r\n    <mat-card>\r\n     \r\n      <div fxLayout=\"column wrap\" >\r\n        <div fxFlex=\"100\" fxLayoutAlign=\"space-around center\">\r\n          <div fxFlex=\"50\"> \r\n              <mat-form-field appearance=\"outline\"  >\r\n                  <mat-label *ngIf=\"sourceLabel=='TCP/IP'\">Field No</mat-label>\r\n                  <mat-label *ngIf=\"sourceLabel=='Https/Http'\">Tag</mat-label>\r\n                  <mat-select [disabled]=\"!edit || disableSubmitBtn\"  name=\"sourceKey\" #sourceKey=\"ngModel\" [(ngModel)]=\"data.sourceKey\" *ngIf=\"sourceLabel=='TCP/IP'\">\r\n                  <mat-option *ngFor=\"let data of sourceData\"\r\n                  [value]=\"data.messageBasis\">\r\n                  {{data.messageKey}}<{{data.messageBasis}}\r\n                  </mat-option>\r\n                </mat-select>\r\n                <mat-select [disabled]=\"!edit || disableSubmitBtn\"  name=\"sourceKey\" #sourceKey=\"ngModel\" [(ngModel)]=\"data.sourceKey\" *ngIf=\"sourceLabel=='Https/Http'\">\r\n                  <mat-option *ngFor=\"let data of sourceData\"\r\n                  [value]=\"data.messageBasis\">\r\n                  {{data.messageBasis}}\r\n                  </mat-option>\r\n                </mat-select>\r\n                </mat-form-field>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </mat-card>\r\n  </div>\r\n  <div fxFlex=\"33\">\r\n      <mat-card>\r\n        <div fxLayout=\"column wrap\" >\r\n          <div fxFlex=\"100\" fxLayoutAlign=\"space-around center\">\r\n            <div fxFlex=\"50\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label *ngIf=\"labelsDestination=='TCP/IP'\">Filed No</mat-label>\r\n                    <mat-label *ngIf=\"labelsDestination=='Https/Http'\">Tag</mat-label>\r\n                    <mat-select [disabled]=\"!edit || disableSubmitBtn\" name=\"destinationKey\" #destinationKey=\"ngModel\"  [(ngModel)]=\"data.destinationKey\" *ngIf=\"labelsDestination=='TCP/IP'\">\r\n                        <mat-option *ngFor=\"let fNo of destinationData;let i=index\"\r\n                         [value]=\"fNo.messageBasis\">\r\n                         {{fNo.messageKey}}<{{fNo.messageBasis}}\r\n                        </mat-option>\r\n                      </mat-select>\r\n                      <mat-select [disabled]=\"!edit || disableSubmitBtn\" name=\"destinationKey\" #destinationKey=\"ngModel\"  [(ngModel)]=\"data.destinationKey\"  *ngIf=\"labelsDestination=='Https/Http'\">\r\n                        <mat-option *ngFor=\"let fNo of destinationData;let i=index\"\r\n                         [value]=\"fNo.messageBasis\">\r\n                        {{fNo.messageBasis}}\r\n                        </mat-option>\r\n                      </mat-select>\r\n                  </mat-form-field>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </mat-card>\r\n    </div>\r\n    <div fxFlex=\"33\">\r\n        <mat-card>\r\n            <div fxLayout=\"row wrap\" >\r\n                <div fxFlex=\"100\" fxLayoutAlign=\"space-around center\">\r\n                  <div>\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Default Value</mat-label>\r\n                        <input [disabled]=\"!edit || disableSubmitBtn\" matInput [(ngModel)]=\"data.defaultValue\">\r\n                      </mat-form-field>&nbsp;&nbsp;\r\n                      <mat-icon  *ngIf=\"edit\"(click)=\"delete(i)\" color=\"warn\" style=\"cursor: pointer;margin-top:10px\">delete</mat-icon>\r\n                    </div>\r\n                </div>\r\n              </div>\r\n        </mat-card>\r\n      </div>\r\n </div>\r\n</div>\r\n<div fxLayout=\"row wrap\">\r\n<div fxFlex=\"100\">\r\n<div fxFlex=\"30\">\r\n    <div fxFlex=\"10\">\r\n        <!-- <button  mat-raised-button > -->\r\n            <mat-icon (click)=\"add()\"  *ngIf=\"edit\" color=\"primary\" style=\"cursor:pointer;margin-top:10px\">add</mat-icon>\r\n        <!-- </button> -->\r\n    </div>\r\n</div>\r\n\r\n</div>\r\n</div>\r\n<div fxLayout=\"row wrap\">\r\n  <div fxFlex=\"100\">\r\n    <div fxFlex=\"40\"></div>\r\n  <!-- <div fxFlex=\"30\"> -->\r\n      <div fxFlex=\"60\" fxLayoutGap=\"8px\">\r\n        <button  mat-raised-button  *ngIf=\"!edit\" (click)=\"Edit()\" color=\"primary\" [disabled]=\"editBtn\"\r\n        >\r\n         Edit\r\n       </button>\r\n          <button  mat-raised-button  *ngIf=\"edit\" [disabled]=\"disableSubmitBtn\" (click)=\"onsaveRuleMapping()\" color=\"primary\"\r\n           >\r\n             Submit\r\n          </button>\r\n          <!-- <button  mat-raised-button type=\"reset\" color=\"warn\"\r\n           >\r\n             Reset\r\n          </button> -->\r\n      </div>\r\n  <!-- </div> -->\r\n  \r\n  </div>\r\n  </div>\r\n\r\n</mat-card>\r\n\r\n<br><br>\r\n<div fxLayout=\"row\">\r\n        <!-- <div fxFlex></div> -->\r\n        <div fxFlex=\"95\">\r\n          <mat-card style=\"width: 70%;  margin-left:260px;\">\r\n            <mat-card-title>\r\n            </mat-card-title>\r\n            <mat-card-content>\r\n              <div fxLayout=\"row\">\r\n                <table id=\"customers\">\r\n                  <tr>\r\n                    <th>Record Status:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.recordStatus}}</mat-chip>\r\n                    </td>\r\n                    <th>Input By:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.creatorId}}</mat-chip>\r\n                    </td>\r\n                    <th>Verified By:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.approverId}}</mat-chip>\r\n                    </td>\r\n                    <th>Verified Once:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.approvedEver}}</mat-chip>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Modification No:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.versionNo}}</mat-chip>\r\n                    </td>\r\n                    <th>Input Date:</th>\r\n                    <td>\r\n                       <mat-chip>{{addSysRespData.createdTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n    \r\n                    </td>\r\n                    <th>Verified Date:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.approvedTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n                    </td>\r\n      \r\n                    <th>Verified Status:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.verifiedStatus}}</mat-chip>\r\n                    </td>\r\n      \r\n                  </tr>\r\n                </table>\r\n              </div>\r\n            </mat-card-content>\r\n          </mat-card>\r\n        </div>\r\n      </div>\r\n\r\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/list-rule-mapping/list-rule-mapping.component.html":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/list-rule-mapping/list-rule-mapping.component.html ***!
  \*********************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n<mat-toolbar color=\"primary\"  style=\"height:30px; font-size: small;\">\r\n  <span>Rule Mapping</span>\r\n</mat-toolbar>\r\n<br />\r\n<div>\r\n    <div fxLayoutAlign=\"end stretch\" fxLayoutGap=\"10px\">\r\n            <div fxLayoutAlign=\"end stretch\">\r\n                    <button mat-raised-button routerLink=\"/sias-v2/RuleMapping\" color=\"primary\"\r\n                    >New </button>\r\n            </div>\r\n        <button mat-raised-button routerLink=\"/dashboard\" color=\"warn\"\r\n        >Exit</button>\r\n</div>\r\n</div>\r\n<br>\r\n<div class=\" mat-elevation-z8\">\r\n    <table mat-table [dataSource]=\"dataSource\" matSort matSortActive=\"createdTime\" matSortDirection=\"desc\">\r\n\r\n        <!-- code Column -->\r\n        <ng-container matColumnDef=\"sourceId\">\r\n            <th mat-header-cell *matHeaderCellDef > Source Id </th>\r\n          \r\n           <td mat-cell *matCellDef=\"let row\">\r\n                   \r\n                  <a routerLink=\"/sias-v2/viewOrEditSystem/{{row.sourceTranslationId}}\" (click)=\"ruleMappingEdit(row)\">{{\r\n                    row.sourceTranslationId\r\n                  }}</a>\r\n                  </td> \r\n        </ng-container>\r\n\r\n        <!-- name Column -->\r\n        <ng-container matColumnDef=\"targetTranslationId\">\r\n            <th mat-header-cell *matHeaderCellDef > Transaltion Id </th>\r\n            <td mat-cell *matCellDef=\"let row\"> {{row.targetTranslationId}} </td>\r\n        </ng-container>\r\n\r\n        <!-- type Column -->\r\n        <ng-container matColumnDef=\"sourceOperation\">\r\n            <th mat-header-cell *matHeaderCellDef> Source Operation </th>\r\n            <td mat-cell *matCellDef=\"let row\"> {{row.sourceOperation}} </td>\r\n        </ng-container>\r\n\r\n        <!-- externalIp Column -->\r\n        <ng-container matColumnDef=\"recordStatus\">\r\n            <th mat-header-cell *matHeaderCellDef> Record Status</th>\r\n            <td mat-cell *matCellDef=\"let row\"> {{row.recordStatus}} </td>\r\n        </ng-container>\r\n\r\n        <!-- externalPort Column -->\r\n        <ng-container matColumnDef=\"creatorId\">\r\n            <th mat-header-cell *matHeaderCellDef > Maker Id </th>\r\n            <td mat-cell *matCellDef=\"let row\"> {{row.creatorId}} </td>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"createdTime\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Date</th>\r\n            <td mat-cell *matCellDef=\"let row\"> {{row.createdTime |date}} </td>\r\n        </ng-container>\r\n\r\n\r\n        \r\n\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n        <!-- Row shown when there is no matching data. -->\r\n        <!-- <tr class=\"mat-row\" *matNoDataRow> -->\r\n        <!-- <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{input.value}}\"</td> -->\r\n        <!-- </tr> -->\r\n    </table>\r\n\r\n    <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n</div>\r\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/rule-mapping.component.html":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/rule-mapping.component.html ***!
  \**********************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\" style=\"height:30px; font-size: small;\">\r\n  <span>Rule Mapping</span>\r\n\r\n</mat-toolbar>\r\n\r\n\r\n<br>\r\n\r\n<mat-card>\r\n  <form #mapping=\"ngForm\">\r\n  <div fxLayout=\"row wrap\" >  \r\n    <div fxFlex=\"100\">\r\n      <div fxFlex=\"10\"></div>\r\n      <div fxFlex=\"25\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Source system</mat-label>\r\n          <input matInput name=\"sourceSystem\" [(ngModel)]=\"rulemapping.systemCode\" required [disabled]=\"disableSubmitBtn\"\r\n           #sourceSystem (keyup)=\"onsearchingTablName($event)\" \r\n           [matAutocomplete]=\"autotablName\">\r\n           <mat-icon matSuffix>arrow_drop_down</mat-icon>\r\n           <mat-autocomplete #autotablName=\"matAutocomplete\"  (selectionChange)=\"onSourseSelection($event)\"\r\n           (optionSelected)=\"onSourseSelection($event)\">\r\n            <mat-option *ngFor=\"let extsys of externalSystem\" \r\n           [value]=\"extsys\" [hidden]=\"extsys == destinationSource\">{{extsys}} \r\n            </mat-option>\r\n          </mat-autocomplete>\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxFlex=\"25\">\r\n\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Message Type</mat-label>\r\n          <mat-select name=\"msgType\" #msgType #msgType=\"ngModel\" [(ngModel)]=\"rulemapping.messageType\" required\r\n          (selectionChange)=\"onSelectionOFMessageType($event)\" [disabled]=\"disableSubmitBtn\"\r\n          (optionSelected)=\"onSelectionOFMessageType($event)\">\r\n            <mat-option value=\"I\">\r\n              Incoming\r\n            </mat-option>\r\n            <mat-option value=\"O\">\r\n              Outgoing\r\n            </mat-option>\r\n            <!-- <mat-option value=\"A\">\r\n              All\r\n            </mat-option> -->\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxFlex=\"25\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Service</mat-label>\r\n          <input matInput [(ngModel)]=\"rulemapping.serviceName\" required #sourserv #sourserv=\"ngModel\" name=\"sourserv\" [disabled]=\"disableSubmitBtn\" readonly>\r\n          <!-- <mat-select [(ngModel)]=\"rulemapping.serviceName\">\r\n            <mat-option *ngFor=\"let serv of sourceService\" [value]=\"serv.headerValue\">{{serv.headerValue}}</mat-option>\r\n          </mat-select> -->\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxFlex=\"25\">\r\n <div fxFlex=\"25\">\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Operation</mat-label>\r\n          <input matInput [(ngModel)]=\"rulemapping.operationName\" required #souropt #souropt=\"ngModel\" name=\"souropt\" [disabled]=\"disableSubmitBtn\" readonly>\r\n          <!-- <mat-select>\r\n            <mat-option *ngFor=\"let opt of sourceoperation\" [value]=\"opt.headerValue\">{{opt.headerValue}}</mat-option>\r\n          </mat-select> -->\r\n        </mat-form-field>\r\n      </div>\r\n\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div fxLayout=\"row wrap\" >  \r\n      <div fxFlex=\"100\">\r\n        <div fxFlex=\"10\"></div>\r\n        <div fxFlex=\"25\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Destination system</mat-label>\r\n            <input matInput name=\"destinationSystem\" (keyup)=\"onsearchingTablName($event)\" \r\n            [matAutocomplete]=\"autotablName1\"\r\n            [(ngModel)]=\"rulemappingDest.systemCode\" [disabled]=\"disableSubmitBtn\"\r\n             #destinationSystem  required>\r\n             <mat-icon matSuffix>arrow_drop_down</mat-icon>\r\n             <mat-autocomplete #autotablName1=\"matAutocomplete\"  (selectionChange)=\"ondestinationSource($event)\"\r\n           (optionSelected)=\"ondestinationSource($event)\">\r\n              <mat-option *ngFor=\"let extsys of externalSystem\" [value]=\"extsys\" [hidden]=\"extsys === sourseSys\">{{extsys}}\r\n              </mat-option>\r\n            </mat-autocomplete>\r\n            \r\n          </mat-form-field>\r\n        </div>\r\n        <div fxFlex=\"25\">\r\n  \r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Message Type</mat-label>\r\n            <mat-select name=\"msgTypeDest\" #msgTypeDest #msgTypeDest=\"ngModel\" [(ngModel)]=\"rulemappingDest.messageType\" required [disabled]=\"disableSubmitBtn\"\r\n            (selectionChange)=\"msgTypeOfDestination($event)\" \r\n            (optionSelected)=\"msgTypeOfDestination($event)\">\r\n              <mat-option value=\"I\">\r\n                Incoming\r\n              </mat-option>\r\n              <mat-option value=\"O\">\r\n                Outgoing\r\n              </mat-option>\r\n              <!-- <mat-option value=\"A\">\r\n                All\r\n              </mat-option> -->\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n        <div fxFlex=\"25\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Service</mat-label>\r\n            <input matInput [(ngModel)]=\"rulemappingDest.serviceName\" required #servdest #servdest=\"ngModel\" name=\"servdest\" [disabled]=\"disableSubmitBtn\" readonly>\r\n            <!-- <mat-select>\r\n              <mat-option *ngFor=\"let destServ of destinationService\" [value]=\"destServ.headerValue\">{{destServ.headerValue}}</mat-option>\r\n            </mat-select> -->\r\n          </mat-form-field>\r\n        </div>\r\n        <div fxFlex=\"25\" >\r\n   <div fxFlex=\"25\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Operation</mat-label>\r\n            <input [(ngModel)]=\"rulemappingDest.operationName\" matInput required #optdest #optdest=\"ngModel\" [disabled]=\"disableSubmitBtn\" name=\"optdest\" readonly>\r\n            <!-- <mat-select>\r\n              <mat-option *ngFor=\"let destOpt of destinationOperation\" [value]=\"destOpt.headerValue\">{{destOpt.headerValue}}</mat-option>\r\n            </mat-select> -->\r\n          </mat-form-field>\r\n        </div>\r\n  \r\n  \r\n        </div>\r\n      </div>\r\n    </div>\r\n  <div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\">\r\n      <div fxFlex=\"40\"></div>\r\n      <div fxFlex=\"25\">\r\n        <button mat-raised-button [disabled]=\"!mapping.valid ||showfetchAll\" (click)=\"fetchDestination()\" color=\"primary\">Fetch All</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</form>\r\n</mat-card>\r\n<br>\r\n<mat-card *ngIf=\"showSource ||showDestination\">\r\n    <form #mappingdestails=\"ngForm\">\r\n<div fxLayout=\"column wrap\">\r\n    <div fxFlex=\"100\" fxLayoutGap=\"center\">\r\n      <div fxFlex=\"33\">\r\n        <h5 fxLayoutAlign=\"center stretch\">Source System</h5>\r\n      </div>\r\n      <div fxFlex=\"33\">\r\n        <h5 fxLayoutAlign=\"center stretch\">Destination System</h5>\r\n      </div>\r\n      <div fxFlex=\"33\">\r\n        <h5 fxLayoutAlign=\"center stretch\">Default Value</h5>\r\n      </div>\r\n    </div>\r\n  </div>\r\n <div fxLayout=\"column wrap\"  *ngFor=\"let data of rulemappingDetail;let i=index\">\r\n  \r\n   <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n  <div fxFlex=\"33\">\r\n    <mat-card>\r\n     \r\n      <div fxLayout=\"column wrap\" >\r\n        <div fxFlex=\"100\" fxLayoutAlign=\"space-around center\" >\r\n          <div fxFlex=\"50\">\r\n              <mat-form-field appearance=\"outline\"  >\r\n                  <mat-label  *ngIf=\"sourceLabel=='TCP/IP'\">Field No</mat-label>\r\n                  <mat-label *ngIf=\"sourceLabel=='Https/Http'\">Tag</mat-label>\r\n                  <mat-select name=\"sourceKey_{{i}}\" #sourceKey=\"ngModel\" required [(ngModel)]=\"data.sourceKey\" [disabled]=\"disableSubmitBtn\" *ngIf=\"sourceLabel=='TCP/IP'\">\r\n                    <mat-option *ngFor=\"let tag of sourceData\" [value]=\"tag.messageBasis\">{{tag.messageKey}}<{{tag.messageBasis}}</mat-option>   \r\n                  </mat-select>  \r\n                  <mat-select name=\"sourceKey_{{i}}\" #sourceKey=\"ngModel\" required [(ngModel)]=\"data.sourceKey\" [disabled]=\"disableSubmitBtn\" *ngIf=\"sourceLabel=='Https/Http'\">\r\n                    <mat-option *ngFor=\"let tag of sourceData\" [value]=\"tag.messageBasis\">{{tag.messageBasis}}</mat-option>   \r\n                  </mat-select>      \r\n                </mat-form-field>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </mat-card>\r\n  </div>\r\n  <div fxFlex=\"33\">\r\n      <mat-card>\r\n       \r\n        <div fxLayout=\"column wrap\" >\r\n          <div fxFlex=\"100\" fxLayoutAlign=\"space-around center\">\r\n            <div fxFlex=\"50\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label *ngIf=\"labelsDestination=='TCP/IP'\">Field No</mat-label>\r\n                    <mat-label *ngIf=\"labelsDestination=='Https/Http'\">Tag</mat-label>\r\n                    <mat-select name=\"destinationKey_{{i}}\" #destinationKey=\"ngModel\"  required [(ngModel)]=\"data.destinationKey\" [disabled]=\"disableSubmitBtn\"  *ngIf=\"labelsDestination=='TCP/IP'\">\r\n                      <mat-option *ngFor=\"let fname of destinationData;let i=index\" [value]=\"fname.messageBasis\">\r\n                        {{fname.messageKey}}<{{fname.messageBasis}}\r\n                      </mat-option>\r\n                    </mat-select>   \r\n                    <mat-select name=\"destinationKey_{{i}}\" #destinationKey=\"ngModel\"  required [(ngModel)]=\"data.destinationKey\" [disabled]=\"disableSubmitBtn\"  *ngIf=\"labelsDestination=='Https/Http'\">\r\n                      <mat-option *ngFor=\"let fname of destinationData;let i=index\" [value]=\"fname.messageBasis\">\r\n                      {{fname.messageBasis}}\r\n                      </mat-option>\r\n                    </mat-select>    \r\n                  </mat-form-field>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </mat-card>\r\n    </div>\r\n    <div fxFlex=\"33\">\r\n        <mat-card>\r\n            <div fxLayout=\"row wrap\" >\r\n                <div fxFlex=\"100\" fxLayoutAlign=\"space-around center\">\r\n                  <div>\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Default Value</mat-label>\r\n                        <input name=\"defaultValue_{{i}}\" #defaultValue=\"ngModel\" matInput [(ngModel)]=\"data.defaultValue\" required [disabled]=\"disableSubmitBtn\">\r\n                      </mat-form-field>&nbsp;&nbsp;\r\n                      <mat-icon (click)=\"delete(i)\" color=\"warn\" style=\"cursor: pointer;margin-top: 10px\" [ngClass]=\"{'readonly-wrapper' : afterSubmit}\">delete</mat-icon>\r\n                    </div>\r\n                </div>\r\n              </div>\r\n        </mat-card>\r\n      </div>\r\n </div>\r\n\r\n</div>\r\n<br>\r\n<div fxLayout=\"row wrap\">\r\n<div fxFlex=\"100\">\r\n<div fxFlex=\"30\">\r\n    <div fxFlex=\"10\">\r\n        <!-- <button  mat-raised-button color=\"primary\"> -->\r\n            <mat-icon  (click)=\"add()\" style=\"cursor: pointer\" color=\"primary\">add</mat-icon>\r\n        <!-- </button> -->\r\n    </div>\r\n</div>\r\n\r\n</div>\r\n</div>\r\n<br>\r\n<div fxLayout=\"row wrap\">\r\n  <div fxFlex=\"100\">\r\n      <div fxFlex=\"40\"></div>\r\n  <!-- <div fxFlex=\"30\"> -->\r\n  \r\n      <div fxFlex=\"60\" fxLayoutGap=\"8px\">\r\n          <button  mat-raised-button (click)=\"onsaveRuleMapping()\" color=\"primary\"\r\n          [disabled]=\"afterSubmit || disableSubmitBtn || !mappingdestails.valid\"\r\n           >\r\n             Submit\r\n          </button>\r\n          <button  mat-raised-button [disabled]=\"disableResetBtn\"  color=\"warn\" type=\"reset\" (click)=\"onReset()\"\r\n           >\r\n            Reset\r\n          </button>\r\n      <!-- </div> -->\r\n  </div>\r\n  \r\n  </div>\r\n  </div>\r\n</form>\r\n</mat-card>\r\n\r\n<br><br>\r\n<div fxLayout=\"row\" *ngIf=\"showAuditLog\">\r\n        <!-- <div fxFlex></div> -->\r\n        <div fxFlex=\"95\">\r\n          <mat-card style=\"width: 70%;  margin-left:260px;\">\r\n            <mat-card-title>\r\n            </mat-card-title>\r\n            <mat-card-content>\r\n              <div fxLayout=\"row\">\r\n                <table id=\"customers\">\r\n                  <tr>\r\n                    <th>Record Status:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.recordStatus}}</mat-chip>\r\n                    </td>\r\n                    <th>Input By:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.creatorId}}</mat-chip>\r\n                    </td>\r\n                    <th>Verified By:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.approverId}}</mat-chip>\r\n                    </td>\r\n                    <th>Verified Once:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.approvedEver}}</mat-chip>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Modification No:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.versionNo}}</mat-chip>\r\n                    </td>\r\n                    <th>Input Date:</th>\r\n                    <td>\r\n                       <mat-chip>{{addSysRespData.createdTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n    \r\n                    </td>\r\n                    <th>Verified Date:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.approvedTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n                    </td>\r\n      \r\n                    <th>Verified Status:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysRespData.verifiedStatus}}</mat-chip>\r\n                    </td>\r\n      \r\n                  </tr>\r\n                </table>\r\n              </div>\r\n            </mat-card-content>\r\n          </mat-card>\r\n        </div>\r\n      </div>\r\n\r\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/view-or-edit-external-system/view-or-edit-external-system.component.html":
/*!******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/view-or-edit-external-system/view-or-edit-external-system.component.html ***!
  \******************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\" style=\"height:30px; font-size: small;\">\r\n    <span>Add System</span>\r\n</mat-toolbar>\r\n<br>\r\n   \r\n<mat-card *ngIf=\"!hideBasic\" class=\"baiscInfocard\">\r\n    <form  #basicForm=\"ngForm\">\r\n        <div fxLayoutAlign=\"center stretch\"><b>System Information</b></div>\r\n        <div fxLayout=\"row wrap\">\r\n            <div fxFlex=\"100\">\r\n\r\n                <div fxFlex=\"15\"></div>\r\n                <div fxFlex=\"30\">\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Code</mat-label>\r\n                            <input type=\"text\" matInput name=\"code\"\r\n                             #code #code=\"ngModel\" required [readonly]=\"isEdit\"\r\n                                [(ngModel)]=\"addSysBasic.systemCode\" \r\n                                [ngModelOptions]=\"{standalone: true}\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Type</mat-label>\r\n                            <!-- <input type=\"text\" matInput name=\"type\" #type #type=\"ngModel\" [(ngModel)]=\"createExtSys1.type\" [ngModelOptions]=\"{standalone: true}\"> -->\r\n                            <mat-select name=\"type\" #type #type=\"ngModel\" type=\"text\" required\r\n                             [(ngModel)]=\"addSysBasic.serviceType\" [disabled]=\"isEdit\"\r\n                                [ngModelOptions]=\"{standalone: true}\">\r\n                                <mat-option value=\"server\">Server</mat-option>\r\n                                <mat-option value=\"client\">Client</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>External IP</mat-label>\r\n                            <input type=\"text\" matInput [readonly]=\"isEdit\"\r\n                            required name=\"sourceIp\" #sourceIp #sourceIp=\"ngModel\"  (input)=\"isValidIpv4Addr1($event)\"\r\n                            [(ngModel)]=\"addSysBasic.sourceIp\"  >\r\n                        </mat-form-field>\r\n                        <mat-error *ngIf=\"!invalidIp1\" style=\"margin-top:-10%;font-size:12px;\"> \r\n                            IP Address is not valid.\r\n                         </mat-error> \r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Median IP</mat-label>\r\n                            <input type=\"text\" matInput [readonly]=\"isEdit\"\r\n                            required name=\"medianIp\" #medianIp #medianIp=\"ngModel\"\r\n                                [(ngModel)]=\"addSysBasic.medianIp\" (input)=\"isValidIpv4Addr($event)\">\r\n                        </mat-form-field>\r\n                        <mat-error *ngIf=\"!invalidIp\" style=\"margin-top:-10%;font-size:12px;\"> \r\n                            IP Address is not valid.\r\n                         </mat-error> \r\n                    </div>\r\n                </div>\r\n                <div fxFlex=\"5\"></div>\r\n                <div fxFlex=\"30\">\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Name</mat-label>\r\n                            <input type=\"text\" [readonly]=\"isEdit\"\r\n                            required matInput name=\"systemName\" #systemName #systemName=\"ngModel\"\r\n                                [(ngModel)]=\"addSysBasic.systemName\" [ngModelOptions]=\"{standalone: true}\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Message Type</mat-label>\r\n                            <mat-select disableOptionCentering (selectionChange)=\"onsystemMessageSelection($event.value)\" [disabled]=\"isEdit\"  #messsageType #messsageType=\"ngModel\"\r\n                            [(ngModel)]=\"addSysBasic.messsageType\" name=\"messsageType\" type=\"text\" required\r\n                                >\r\n                                <mat-option value=\"null\">Please select</mat-option>\r\n                                <mat-option value=\"I\">Incoming\r\n                                </mat-option>\r\n                                <mat-option value=\"O\">Outgoing\r\n                                </mat-option>\r\n                                <mat-option value=\"A\">All</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>External Port</mat-label>\r\n                            <input type=\"text\" minlength=\"2\" maxlength=\"4\" matInput name=\"sourcePort\" [readonly]=\"isEdit\"\r\n                             #sourcePort #sPort=\"ngModel\" required\r\n                            [(ngModel)]=\"addSysBasic.sourcePort\" (keypress)=\"allowNumbersOnly($event)\">\r\n                        </mat-form-field>\r\n                        <mat-error *ngIf=\"sPort.errors?.minlength\" style=\"margin-top:-10%;font-size: 12px;\">\r\n                            External Port must be at least 2 numbers.\r\n                        </mat-error> \r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Median Port</mat-label>\r\n                            <input type=\"text\" minlength=\"2\" maxlength=\"4\" matInput name=\"medianPort\" [readonly]=\"isEdit\"\r\n                            #medianPort #mPort=\"ngModel\" required\r\n                                [(ngModel)]=\"addSysBasic.medianPort\" (keypress)=\"allowNumbersOnly($event)\">\r\n                        </mat-form-field>\r\n                        <mat-error *ngIf=\"mPort.errors?.minlength\" style=\"margin-top:-10%;font-size: 12px;\">\r\n                            Median Port must be at least 2 numbers.\r\n                        </mat-error> \r\n                    </div>\r\n                </div>\r\n                <div fxFlex=\"10\"></div>\r\n            </div>\r\n        </div>\r\n        <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"40\"></div>\r\n            <div  fxLayoutAlign=\"center stretch\"  fxLayoutGap=\"10px\">\r\n              \r\n                <button mat-raised-button (click)=\"onNextOfBasicInfo()\" color=\"primary\"\r\n                *ngIf=\"!isEdit\" [disabled]=\"!basicForm.valid || !invalidIp || !invalidIp1\">Next</button>\r\n                   <button mat-raised-button (click)=\"onEdit()\" color=\"primary\" *ngIf=\"isEdit\" [disabled]=\"editBtn\">Edit</button>\r\n                   <div>\r\n                    <button mat-raised-button *ngIf=\"addSysBasic.approvedEver == 'N'\" (click)=\"authorizeSystem()\" [hidden]=\"authBtnHide\"  [disabled]=\"authBtn\" color=\"primary\">Authorize</button>\r\n                </div>\r\n                <div *ngIf=\"addSysBasic.recordStatus == 'O'\">\r\n                    <button mat-raised-button (click)=\"closeSystem()\" color=\"primary\"  [disabled]=\"closeBtn\">Close</button>\r\n                </div>\r\n                <div *ngIf=\"addSysBasic.recordStatus == 'C'\">\r\n                    <button mat-raised-button (click)=\"openSystem()\" color=\"primary\" [hidden]=\"reopenBtn\">Re-Open</button>\r\n                </div>\r\n                <div *ngIf=\"addSysBasic.approvedEver == 'N'\">\r\n                    <button mat-raised-button [disabled]=\"deleted\" (click)=\"deleteSystem()\" color=\"primary\">Delete</button>\r\n                </div>\r\n                <div >\r\n                    <button mat-raised-button color=\"primary\" [routerLink]=\"'/sias-v2/externalSysSummaryNew'\">Exit</button>\r\n                </div>\r\n                   <!--  -->\r\n\r\n               \r\n               \r\n                <!-- <button mat-raised-button type=\"reset\" color=\"warn\" (click)=\"onResetOfBasicInfo()\">Reset</button> -->\r\n            </div>\r\n        </div>\r\n    </form>\r\n</mat-card>\r\n<div *ngIf=\"showProgressbar\">\r\n<mat-progress-bar mode=\"indeterminate\" *ngIf=\"showProgressbar\"></mat-progress-bar>\r\n<p style=\"color: red\">Fetching Record... Please wait...</p>\r\n</div>\r\n<!-- Protocol screen For Both Incoming and outgoing-->\r\n<mat-card *ngIf=\"showProtocol\" style=\"width:83%;margin-left:10%\">\r\n        <form #protocol1=\"ngForm\">\r\n        <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\">\r\n                    <div fxFlex=\"30\"></div>\r\n                    <div fxFlex=\"90\">\r\n                        <h5>{{msgType}} Message Configuration</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div fxLayout=\"column wrap\" >\r\n                    <div fxFlex=\"100\">\r\n                        <div fxFlex=\"30\"></div>\r\n                        <div fxFlex=\"40\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>{{msgType}} Message Protocol</mat-label>\r\n                                <mat-select #protocolRef name=\"messageChannel\"\r\n                                [(ngModel)]=\"protocolForBothIncOut.messageChannel\"\r\n                                    (selectionChange)=\"onProtocalSlection(protocolForBothIncOut.messageChannel)\"\r\n                                    (optionSelected)=\"onProtocalSlection(protocolForBothIncOut.messageChannel)\">\r\n                                    <mat-option value=\" \">Please select</mat-option>\r\n                                    <mat-option value=\"TCP/IP\">TCP/IP</mat-option>\r\n                                    <mat-option value=\"Https/Http\">HTTPS/HTTP\r\n                                    </mat-option>\r\n                                    <mat-option value=\"MDB\">MDB</mat-option>\r\n                                    <mat-option value=\"EJB\">EJB</mat-option>\r\n                                    <mat-option value=\"DB Connection\">DB Connection\r\n                                    </mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n            \r\n                    </div>\r\n                    <div fxFlex=\"100\">\r\n                        <div fxFlex=\"30\"></div>\r\n                        <div fxFlex=\"40\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                <mat-label>Data Type</mat-label>\r\n                                <mat-select required\r\n                                [(ngModel)]=\"protocolForBothIncOut.messageFormat\" name=\"messageFormat\"\r\n                                    (selectionChange)=\"incomingDataypeSelection(protocolForBothIncOut.messageFormat)\">\r\n                                    <mat-option *ngFor=\"let data of dataType\" [value]=\"data\">{{data}}</mat-option>\r\n                                </mat-select>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div fxFlex=\"100\" *ngIf=\"protocolForBothIncOut.messageChannel=='DB Connection'\">\r\n                        <div fxFlex=\"25\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>User Name</mat-label>\r\n                                        <input matInput name=\"dbUsername\"\r\n                                         #dbUsername \r\n                                         [(ngModel)]=\"protocolForBothIncOut.dbUsername\">\r\n                                    </mat-form-field>\r\n                        </div>\r\n                        <div fxFlex=\"25\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>Passowrd</mat-label>\r\n                                        <input matInput name=\"dbPassword\"\r\n                                         #dbPassword type=\"password\" \r\n                                         [(ngModel)]=\"protocolForBothIncOut.password\">\r\n                                         \r\n                                     </mat-form-field>\r\n                        </div>\r\n                        <div fxFlex=\"25\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>DataBase Name</mat-label>\r\n                                        <input matInput name=\"dbServiceName\" \r\n                                        \r\n                                        #dbServiceName type=\"text\" \r\n                                        [(ngModel)]=\"protocolForBothIncOut.dbServiceName\">\r\n                                         \r\n                                     </mat-form-field>\r\n                        </div>\r\n                        <div fxFlex=\"25\">\r\n                                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                                        <mat-label>Connecting String</mat-label>\r\n                                        <textarea matInput \r\n                                        [(ngModel)]=\"protocolForBothIncOut.dbConnectString\" \r\n                                        name=\"dbConnectString\" #dbConnectString></textarea>\r\n                                      </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div fxFlex=\"100\" fxLayoutGap=\"10px\" *ngIf=\"protocolForBothIncOut.messageChannel=='MDB'\">\r\n                            <div fxFlex=\"25\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                            <mat-label>Type of Queue</mat-label>\r\n                                          <mat-select (selectionChange)=\"onMdbQueue($event)\">\r\n                                              <mat-option *ngFor=\"let queue of mdbQueueInc\" [value]=\"queue\">{{queue}}</mat-option>\r\n                                          </mat-select>\r\n                                         </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngIf=\"queueType=='JMS' &&protocolForBothIncOut.messageChannel=='MDB'\">                    \r\n                                <div fxFlex=\"20\" >\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                           <mat-label>Queue Manager</mat-label>\r\n                                           <input matInput name=\"queueManager\" >\r\n                                        </mat-form-field>\r\n                                    </div>\r\n                                    <div fxFlex=\"20\" >\r\n                                            <mat-form-field appearance=\"outline\">\r\n                                               <mat-label>Queue Name</mat-label>\r\n                                               <input matInput name=\"queueName\">\r\n                                            </mat-form-field>\r\n                                        </div>\r\n                                        <div fxFlex=\"20\" >\r\n                                                <mat-form-field appearance=\"outline\">\r\n                                                   <mat-label>Channel</mat-label>\r\n                                                   <input matInput name=\"channel\">\r\n                                                </mat-form-field>\r\n                                                \r\n                                            </div>\r\n                               \r\n                                    \r\n                               \r\n                         </div>\r\n                         <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngIf=\"queueType=='IBM' &&protocolForBothIncOut.messageChannel=='MDB'\" >\r\n                                <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                       <mat-label>Queue Manager</mat-label>\r\n                                       <input matInput name=\"queueManager\" >\r\n                                        \r\n                                    </mat-form-field>\r\n                                </div>\r\n                                <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                           <mat-label>Queue Name</mat-label>\r\n                                           <input matInput name=\"queueName\"  >\r\n                                            \r\n                                        </mat-form-field>\r\n                                    </div>         \r\n                                    <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                            <mat-form-field appearance=\"outline\">\r\n                                               <mat-label>Connecting Factory</mat-label>\r\n                                               <input matInput name=\"connectingFactory\">\r\n                                                \r\n                                            </mat-form-field>\r\n                                        </div>\r\n                               \r\n                                </div>\r\n                    <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n                       <div fxFlex=\"40\"></div>\r\n                        <button mat-raised-button (click)=\"onNextOfProtocol(protocolForBothIncOut)\"   [disabled]=\"!protocol1.valid\"color=\"primary\">Next</button>\r\n                        <button mat-raised-button (click)=\"onPreviousToBasic()\" color=\"warn\">Previous</button>\r\n                        <!-- <button mat-raised-button (click)=\"onResetOfProtocol(protocolForBothIncOut)\"   [disabled]=\"!protocol1.valid\" color=\"warn\">Reset</button> -->\r\n                    </div>\r\n                    </div>\r\n                   </form>\r\n</mat-card>\r\n<!-- OUT AND iN 3RD SCREEN -->\r\n<mat-card *ngIf=\"onlyInc\">\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"30\"></div>\r\n            <div fxFlex=\"90\">\r\n                <h5>Header and Service Details</h5>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\" *ngIf=\"incDataType=='XML' && incProtocol=='EJB' ||incProtocol=='MDB'&& incDataType=='XML' ||incProtocol=='Https/Http' &&incDataType=='XML'\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"60\">\r\n                <input type=\"file\" id=\"chFile\" (change)=\"uploadFileXml($event)\">\r\n                <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                  <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{fileName}}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\" *ngIf=\"incDataType=='CSV/EXCEL'  ||incDataType=='FLATFILE'\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"60\">\r\n               <mat-form-field appearance=\"outline\">\r\n                <mat-label>Folder Name</mat-label>\r\n                <input matInput>\r\n               </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\" *ngIf=\"incProtocol=='DB Connection' &&incDataType=='XML' ||incProtocol=='DB Connection'&& incDataType=='JSON'\" >\r\n            <div fxFlex=\"100\">\r\n                <div fxFlex=\"60\">\r\n                   <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Table Name</mat-label>\r\n                    <input matInput>\r\n                   </mat-form-field>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div *ngIf=\"incDataType!='CSV/EXCEL' &&incDataType!='FLATFILE'\">\r\n            <div fxLayout=\"row wrap\" *ngFor=\"let iso of mdmtSystemService;let i=index\" [ngClass]=\"{'readonly-wrapper' : disableupdtae}\">\r\n                <div fxFlex=\"100\" fxLayoutGap=\"10px\">\r\n                        <div fxFlex=\"15\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>{{matLabel_header}}</mat-label>\r\n                                    <!-- <input name=\"headerTag\" #headerTag=\"ngModel\" \r\n                                    matInput [(ngModel)]=\"iso.headerTag\"> -->\r\n                                    <mat-select name=\"headerTag\" name=\"headerTag\" \r\n                                    required placeholder=\"{{matLabel_header}}\"\r\n                                    #headerTag #headerTag=\"ngModel\"\r\n                                    [(ngModel)]=\"iso.headerTag\">\r\n                                            <mat-option *ngFor=\"let header of headerTagData\"\r\n                                            [value]=\"header.headerTag\">\r\n                                            {{header.headerTag}}\r\n                                            </mat-option>\r\n                                        </mat-select> \r\n                                    <!-- <mat-select name=\"messageKey\" #messageKey=\"ngModel\" [(ngModel)]=\"iso.messageKey\"> \r\n                                        <mat-option *ngFor=\"let mkey of messageKeyIso\"\r\n                                        [value]=\"mkey\">\r\n                                        {{mkey}}\r\n                                        </mat-option>\r\n                                    </mat-select> -->\r\n                                      \r\n                                </mat-form-field>\r\n                        </div>\r\n                    <div fxFlex=\"15\" *ngIf=\"incDataType!='XML' &&matLabel1!='null'\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>{{matLabel1}}</mat-label>\r\n                            <!-- (selectionChange)=\"onSelectingMessageBasis($event,i)\"   -->\r\n                            <mat-select name=\"messageKey_{{i}}\" #messageKey=\"ngModel\"\r\n                            [(ngModel)]=\"iso.messageKey\" required (selectionChange)=\"onSelectingMessageBasis($event,i)\"> \r\n                              <mat-option *ngFor=\"let mkey of isoRespData\"\r\n                              [value]=\"mkey.fieldNo\">\r\n                              {{mkey.fieldNo}}\r\n                              </mat-option>\r\n                          </mat-select> \r\n\r\n                        </mat-form-field>\r\n                    </div>\r\n                    \r\n                    <div fxFlex=\"15\" *ngIf=\"incDataType=='XML'\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                <mat-label>{{matLabel2}}</mat-label>\r\n                                <!-- <input name=\"messageKey\" #messageKey=\"ngModel\" \r\n                                matInput [(ngModel)]=\"iso.messageKey\"> -->\r\n                                 \r\n                                <mat-select name=\"messageBasis\" #messageBasis #messageBasis=\"ngModel\" [(ngModel)]=\"iso.messageBasis\"\r\n                                required     (selectionChange)=\"onselectingTag($event,i)\">\r\n                                      <mat-option *ngFor=\"let data of messageBasisIso\" [disabled]=\"shouldDisableTagOption(data)\"\r\n                                      [value]=\"data\">\r\n                                      {{data}}\r\n                                      </mat-option>\r\n                                  </mat-select>\r\n                                  \r\n                            </mat-form-field>\r\n                    </div>\r\n                   \r\n                    <div fxFlex=\"15\" *ngIf=\"incDataType!='XML'\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                <mat-label>{{matLabel3}}</mat-label>\r\n                                <!-- <input matInput name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"iso.dataType\"> -->\r\n                                <mat-select name=\"dataType_{{i}}\" #dataType required\r\n                                #dataType=\"ngModel\" [(ngModel)]=\"iso.dataType\">\r\n                                <mat-option *ngFor=\"let outtype of typeDataIso\" [value]=\"outtype\">{{outtype}}</mat-option>\r\n                                    </mat-select> \r\n                            </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"15\" *ngIf=\"incDataType=='XML'\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>{{matLabel3}}</mat-label>\r\n                            <!-- <input matInput name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"iso.dataType\"> -->\r\n                         <mat-select name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"iso.dataType\" required>\r\n                                    <mat-option value=\"numeric\">\r\n                                    Numeric\r\n                                    </mat-option>\r\n                                    <mat-option value=\"alphaNumeric\">\r\n                                      Alpha  Numeric\r\n                                        </mat-option>\r\n                                        <mat-option value=\"date\">\r\n                                            Date\r\n                                            </mat-option>\r\n                                </mat-select>  \r\n                        </mat-form-field>\r\n                </div>\r\n                    <div fxFlex=\"15\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>{{matLabel4}}</mat-label>\r\n                                    <input name=\"messageBasis\" matInput required\r\n                                     name=\"headerValue\" #headerValue #headerValue=\"ngModel\"\r\n                                    [(ngModel)]=\"iso.headerValue\">\r\n                                    <!-- <mat-select name=\"messageBasis\" name=\"headerValue\" #headerValue #headerValue=\"ngModel\"\r\n                                    [(ngModel)]=\"iso.headerValue\">\r\n                                            <mat-option *ngFor=\"let header of headerValueIso\"\r\n                                            [value]=\"header\">\r\n                                            {{header}}\r\n                                            </mat-option>\r\n                                        </mat-select> -->\r\n                                </mat-form-field>\r\n                        </div> \r\n                       \r\n                        <div fxFlex=\"15\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>{{matLabel5}}</mat-label>\r\n                                        <!-- <input name=\"encryption\" matInput\r\n                                         name=\"encryption\" #encryption #encryption=\"ngModel\"\r\n                                        [(ngModel)]=\"iso.encryption\"> -->\r\n                                        <mat-select name=\"encryption\" name=\"encryption\" #encryption\r\n                                        #encryption=\"encryption\" required\r\n                                       [(ngModel)]=\"iso.encryption\">\r\n                                       <mat-option >--Select--</mat-option>\r\n                                       <mat-option value=\"No Encryption\">No Encryption</mat-option>\r\n                                       <mat-option value=\"BASE64\">\r\n                                               BASE64\r\n                                               </mat-option>\r\n                                               <mat-option value=\"SHA264\">\r\n                                                       SHA264\r\n                                                       </mat-option>\r\n                                                       <mat-option value=\"SHA512\">\r\n                                                               SHA512\r\n                                                               </mat-option>\r\n                                           </mat-select> \r\n                                    </mat-form-field>\r\n                            </div> \r\n                 \r\n                    <div fxFlex=\"20\">\r\n                        <!-- <button mat-raised-button > -->\r\n                            <mat-icon (click)=\"onDelete(i)\" color=\"warn\" style=\"cursor: pointer;margin-top:10px\">delete</mat-icon>\r\n                        <!-- </button> -->\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        \r\n        </div>\r\n       \r\n        <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\">\r\n                        <div fxFlex=\"50\">\r\n                                <!-- <button mat-raised-button > -->\r\n                                        <mat-icon (click)=\"add()\" color=\"primary\" style=\"cursor: pointer;margin-top:10px\" [ngClass]=\"{'readonly-wrapper' : disableupdtae}\">add</mat-icon>\r\n                                    <!-- </button> -->\r\n                        </div>\r\n                    </div>\r\n        </div>\r\n            <br>\r\n            <div fxLayout=\"row wrap\">\r\n                    <div fxFlex=\"40\"></div>\r\n                <div>\r\n                    <div fxLayout=\"row wrap\" fxLayoutGap=\"20px\">\r\n                        <div>\r\n                            <button mat-raised-button (click)=\"onFisnih()\" color=\"primary\" [disabled]=\"disableupdtae || mdmtSystemService.length < 2\">Update</button>\r\n                        </div>\r\n                        <!-- <div *ngIf=\"ableToAuthorize\">\r\n                            <button mat-raised-button (click)=\"authorizeSystem()\" color=\"primary\">Authorize</button>\r\n                        </div>\r\n                        <div *ngIf=\"ableToAuthorize && addSysBasic.recordStatus == 'O'\">\r\n                            <button mat-raised-button (click)=\"closeSystem()\" color=\"primary\">Close</button>\r\n                        </div>\r\n                        <div *ngIf=\"ableToAuthorize && addSysBasic.recordStatus == 'C'\">\r\n                            <button mat-raised-button (click)=\"openSystem()\" color=\"primary\">Open</button>\r\n                        </div>\r\n                        <div *ngIf=\"addSysBasic.approvedEver == 'N'\">\r\n                            <button mat-raised-button (click)=\"deleteSystem()\" color=\"primary\">Delete</button>\r\n                        </div> -->\r\n                        <div>\r\n                            <!-- <button mat-raised-button (click)=\"onReset()\" color=\"primary\">Reset</button> -->\r\n                        </div>\r\n                        <div>\r\n                            <button mat-raised-button (click)=\"moveToProtocol()\" color=\"warn\" [disabled]=\"disableupdtae\">Previous</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n</mat-card>\r\n\r\n<!-- All tab for protocol selection -->\r\n<mat-card *ngIf=\"showTab\">\r\n        <mat-tab-group #tabgroup [selectedIndex]=\"selectedIndex\"\r\n        (selectedTabChange)=\"tabChanged($event)\" [ngClass]=\"{'readonly-wrapper' : disableupdtae}\">\r\n                <mat-tab label=\"Incoming\">\r\n                     <mat-card *ngIf=\"showProtocolForAllInc\">\r\n                         <form #incAllProtocol=\"ngForm\">\r\n                            <div fxLayout=\"row wrap\">\r\n                                    <div fxFlex=\"100\">\r\n                                        <div fxFlex=\"30\"></div>\r\n                                        <div fxFlex=\"90\">\r\n                                            <h5>Incoming Message Configuration</h5>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div fxLayout=\"column wrap\" >\r\n                                        <div fxFlex=\"100\">\r\n                                            <div fxFlex=\"30\"></div>\r\n                                            <div fxFlex=\"40\">\r\n                                                <mat-form-field appearance=\"outline\">\r\n                                                        <mat-label>Incoming Message Protocol</mat-label>\r\n                                                    <mat-select #protocolRef [(ngModel)]=\"protocolAllInc.messageChannel\"\r\n                                                     name=\"messageChannel\" required\r\n                                                        (selectionChange)=\"onProtocalSlectionIncoming(protocolAllInc.messageChannel)\"\r\n                                                        (optionSelected)=\"onProtocalSlectionIncoming(protocolAllInc.messageChannel)\">\r\n                                                        <mat-option value=\" \">Please select</mat-option>\r\n                                                        <mat-option value=\"TCP/IP\">TCP/IP</mat-option>\r\n                                                        <mat-option value=\"Https/Http\">HTTPS/HTTP\r\n                                                        </mat-option>\r\n                                                        <mat-option value=\"MDB\">MDB</mat-option>\r\n                                                        <mat-option value=\"EJB\">EJB</mat-option>\r\n                                                        <mat-option value=\"DB Connection\">DB Connection\r\n                                                        </mat-option>\r\n                                                    </mat-select>\r\n                                                </mat-form-field>\r\n                                            </div>\r\n                                \r\n                                        </div>\r\n                                        <div fxFlex=\"100\">\r\n                                            <div fxFlex=\"30\"></div>\r\n                                            <div fxFlex=\"40\">\r\n                                                <mat-form-field appearance=\"outline\">\r\n                                                        <mat-label>Data Type</mat-label>\r\n                                                    <mat-select [(ngModel)]=\"protocolAllInc.messageFormat\" name=\"messageFormat\" required\r\n                                                        (selectionChange)=\"incomingDataypeSelection(protocolAllInc.messageChannel)\"\r\n                                                        (optionSelected)=\"incomingDataypeSelection(protocolAllInc.messageChannel)\">\r\n\r\n                                                        <mat-option *ngFor=\"let data of dataTypeOfIncAll\" [value]=\"data\">{{data}}</mat-option>\r\n                                                    </mat-select>\r\n                                                </mat-form-field>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div fxFlex=\"100\" *ngIf=\"protocolAllInc.messageChannel=='DB Connection'\">\r\n                                            <div fxFlex=\"25\">\r\n                                                    <mat-form-field appearance=\"outline\">\r\n                                                            <mat-label>User Name</mat-label>\r\n                                                            <input matInput name=\"dbUsername\"\r\n                                                             #dbUsername \r\n                                                             [(ngModel)]=\"protocolAllInc.dbUsername\">\r\n                                                        </mat-form-field>\r\n                                            </div>\r\n                                            <div fxFlex=\"25\">\r\n                                                    <mat-form-field appearance=\"outline\">\r\n                                                            <mat-label>Passowrd</mat-label>\r\n                                                            <input matInput name=\"dbPassword\" #dbPassword \r\n                                                            type=\"password\" [(ngModel)]=\"protocolAllInc.password\">\r\n                                                             \r\n                                                         </mat-form-field>\r\n                                            </div>\r\n                                            <div fxFlex=\"25\">\r\n                                                    <mat-form-field appearance=\"outline\">\r\n                                                            <mat-label>DataBase Name</mat-label>\r\n                                                            <input matInput name=\"dbServiceName\" \r\n                                                            #dbServiceName type=\"text\" \r\n                                                            [(ngModel)]=\"protocolAllInc.dbServiceName\">\r\n                                                             \r\n                                                         </mat-form-field>\r\n                                            </div>\r\n                                            <div fxFlex=\"25\">\r\n                                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                                                            <mat-label>Connecting String</mat-label>\r\n                                                            <textarea matInput \r\n                                                            [(ngModel)]=\"protocolAllInc.dbConnectString\" \r\n                                                            name=\"dbConnectString\" #dbConnectString></textarea>\r\n                                                          </mat-form-field>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div fxFlex=\"100\" fxLayoutGap=\"10px\" *ngIf=\"protocolAllInc.messageChannel=='MDB'\">\r\n                                                <div fxFlex=\"25\">\r\n                                                        <mat-form-field appearance=\"outline\">\r\n                                                                <mat-label>Type of Queue</mat-label>\r\n                                                              <mat-select (selectionChange)=\"onMdbQueue($event)\" name=\"queueType\">\r\n                                                                  <mat-option *ngFor=\"let queue of mdbQueueInc\" [value]=\"queue\">{{queue}}</mat-option>\r\n                                                              </mat-select>\r\n                                                             </mat-form-field>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngIf=\"queueType=='JMS' &&protocolAllInc.messageChannel=='MDB'\">                    \r\n                                                    <div fxFlex=\"20\" >\r\n                                                            <mat-form-field appearance=\"outline\">\r\n                                                               <mat-label>Queue Manager</mat-label>\r\n                                                               <input matInput name=\"queueManager\" >\r\n                                                            </mat-form-field>\r\n                                                        </div>\r\n                                                        <div fxFlex=\"20\" >\r\n                                                                <mat-form-field appearance=\"outline\">\r\n                                                                   <mat-label>Queue Name</mat-label>\r\n                                                                   <input matInput name=\"queueName\">\r\n                                                                </mat-form-field>\r\n                                                            </div>\r\n                                                            <div fxFlex=\"20\" >\r\n                                                                    <mat-form-field appearance=\"outline\">\r\n                                                                       <mat-label>Channel</mat-label>\r\n                                                                       <input matInput name=\"channel\">\r\n                                                                    </mat-form-field>\r\n                                                                    \r\n                                                                </div>\r\n                                                   \r\n                                                        \r\n                                                   \r\n                                             </div>\r\n                                             <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngIf=\"queueType=='IBM' &&protocolAllInc.messageChannel=='MDB'\" >\r\n                                                    <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                                        <mat-form-field appearance=\"outline\">\r\n                                                           <mat-label>Queue Manager</mat-label>\r\n                                                           <input matInput name=\"queueManager\" >\r\n                                                            \r\n                                                        </mat-form-field>\r\n                                                    </div>\r\n                                                    <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                                            <mat-form-field appearance=\"outline\">\r\n                                                               <mat-label>Queue Name</mat-label>\r\n                                                               <input matInput name=\"queueName\"  >\r\n                                                                \r\n                                                            </mat-form-field>\r\n                                                        </div>         \r\n                                                        <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                                                <mat-form-field appearance=\"outline\">\r\n                                                                   <mat-label>Connecting Factory</mat-label>\r\n                                                                   <input matInput name=\"connectingFactory\">\r\n                                                                    \r\n                                                                </mat-form-field>\r\n                                                            </div>\r\n                                                   \r\n                                                    </div>\r\n                                        <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n                                           <div fxFlex=\"40\"></div>\r\n                                                <button mat-raised-button (click)=\"nextToServcieFromInc(protocolAllInc)\" \r\n                                                [disabled]=\"!incAllProtocol.valid\"color=\"primary\">Next</button>\r\n                                                <button mat-raised-button (click)=\"onPreviousToBasic()\" color=\"warn\">Previous</button>\r\n                                                <!-- <button mat-raised-button (click)=\"onResetOfProtocol()\" color=\"warn\" [disabled]=\"!incAllProtocol.valid\">Reset</button> -->\r\n                                        </div>\r\n                                        </div>\r\n                                    </form>\r\n                     </mat-card>\r\n                                 <mat-card *ngIf=\"showServiceScreen\">\r\n                                        <div >\r\n                                            <div fxLayout=\"row wrap\">\r\n                                                <div fxFlex=\"100\">\r\n                                                    <div fxFlex=\"30\"></div>\r\n                                                    <div fxFlex=\"90\">\r\n                                                        <h5>Header and Service Details</h5>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                                        <div fxLayout=\"row wrap\" *ngIf=\"incDataType=='XML' && incProtocol=='EJB' ||incProtocol=='MDB'&& incDataType=='XML' ||incProtocol=='Https/Http' &&incDataType=='XML'\">\r\n                                                            <div fxFlex=\"100\">\r\n                                                                <div fxFlex=\"60\">\r\n                                                                    <input type=\"file\" id=\"chFile\" (change)=\"uploadFileXml($event)\">\r\n                <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                    <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{fileName}}\r\n                </button>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div fxLayout=\"row wrap\" *ngIf=\"incDataType=='CSV/EXCEL'  ||incDataType=='FLATFILE'\">\r\n                                                            <div fxFlex=\"100\">\r\n                                                                <div fxFlex=\"60\">\r\n                                                                   <mat-form-field appearance=\"outline\">\r\n                                                                    <mat-label>Folder Name</mat-label>\r\n                                                                    <input matInput>\r\n                                                                   </mat-form-field>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div fxLayout=\"row wrap\" *ngIf=\"incProtocol=='DB Connection' &&incDataType=='XML' ||incProtocol=='DB Connection'&& incDataType=='JSON'\" >\r\n                                                                <div fxFlex=\"100\">\r\n                                                                    <div fxFlex=\"60\">\r\n                                                                       <mat-form-field appearance=\"outline\">\r\n                                                                        <mat-label>Table Name</mat-label>\r\n                                                                        <input matInput>\r\n                                                                       </mat-form-field>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div *ngIf=\"incDataType!='CSV/EXCEL' &&incDataType!='FLATFILE'\">\r\n                                                            <div fxLayout=\"row wrap\" *ngFor=\"let incTcp of mdmtSystemServiceAllInc;let i=index\">\r\n                                                                    <div fxFlex=\"100\" fxLayoutGap=\"10px\">\r\n                                                                            <div fxFlex=\"15\">\r\n                                                                                    <mat-form-field appearance=\"outline\">\r\n                                                                                        <mat-label>{{matLabel_header}}</mat-label>\r\n                                                                                        <!-- <input name=\"headerTag\" #headerTag=\"ngModel\" \r\n                                                                                        matInput [(ngModel)]=\"incTcp.headerTag\"> -->\r\n                                                                                        <mat-select name=\"headerTag\" name=\"headerTag\" \r\n                                                                                        #headerTag #headerTag=\"ngModel\"\r\n                                                                                        [(ngModel)]=\"incTcp.headerTag\">\r\n                                                                                                <mat-option *ngFor=\"let header of headerTagData\"\r\n                                                                                                [value]=\"header.headerTag\">\r\n                                                                                                {{header.headerTag}}\r\n                                                                                                </mat-option>\r\n                                                                                            </mat-select>  \r\n                                                                                          \r\n                                                                                    </mat-form-field>\r\n                                                                            </div>\r\n                                                                        <div fxFlex=\"15\" *ngIf=\"protocolAllInc.messageFormat!='XML'&& matLabel1!='null'\">\r\n                                                                            <mat-form-field appearance=\"outline\">\r\n                                                                                <mat-label>{{matLabel1}}</mat-label>\r\n                                                                                <!-- (selectionChange)=\"onSelectingMessageBasis($event,i)\" -->\r\n                                                                                     <mat-select name=\"messageKey\" #messageKey=\"ngModel\" [(ngModel)]=\"incTcp.messageKey\"\r\n                                                                                     (selectionChange)=\"onSelectingMessageBasis($event,i)\"> \r\n                                                                                        <mat-option *ngFor=\"let mkey of isoRespData\"\r\n                                                                                        [value]=\"mkey.fieldNo\">\r\n                                                                                        {{mkey.fieldNo }}\r\n                                                                                        </mat-option>\r\n                                                                                    </mat-select> \r\n                                                                              \r\n                                                                            </mat-form-field>\r\n                                                                        </div>\r\n                                                                       \r\n                                                                           \r\n                                                                        <div fxFlex=\"15\" *ngIf=\"protocolAllInc.messageFormat!='XML'\">\r\n                                                                                <mat-form-field appearance=\"outline\">\r\n                                                                                    <mat-label>{{matLabel2}}</mat-label>\r\n                                                                                    <!-- <input matInput name=\"messageKey\" #messageKey=\"ngModel\"\r\n                                                                                     [(ngModel)]=\"incTcp.messageKey\"> -->\r\n                                                                                     <mat-select name=\"messageBasis\" #messageBasis #messageBasis=\"ngModel\"\r\n                                                                                     [(ngModel)]=\"incTcp.messageBasis\"  \r\n                                                                                  >\r\n                                                                                            <mat-option *ngFor=\"let data of messageBasisIso\"\r\n                                                                                            [value]=\"data\">\r\n                                                                                            {{data}}\r\n                                                                                            </mat-option>\r\n                                                                                        </mat-select>\r\n                                                                                     \r\n                                                                                </mat-form-field>\r\n                                                                        </div>\r\n                                                                        <div fxFlex=\"15\" *ngIf=\"protocolAllInc.messageFormat=='XML'\">\r\n                                                                            <mat-form-field appearance=\"outline\">\r\n                                                                                <mat-label>{{matLabel2}}</mat-label>\r\n                                                                                <!-- <input matInput name=\"messageKey\" #messageKey=\"ngModel\"\r\n                                                                                 [(ngModel)]=\"incTcp.messageKey\"> -->\r\n                                                                                 <mat-select name=\"messageBasis\" #messageBasis #messageBasis=\"ngModel\"\r\n                                                                                 [(ngModel)]=\"incTcp.messageBasis\"\r\n                                                                                 (selectionChange)=\"onselectingTag($event,i)\"\r\n                                                                              >\r\n                                                                                        <mat-option *ngFor=\"let data of messageBasisIso\"\r\n                                                                                        [value]=\"data\">\r\n                                                                                        {{data}}\r\n                                                                                        </mat-option>\r\n                                                                                    </mat-select>\r\n                                                                                 \r\n                                                                            </mat-form-field>\r\n                                                                    </div>\r\n                                                                        <div fxFlex=\"15\" *ngIf=\"protocolAllInc.messageFormat!='XML'\">\r\n                                                                            <mat-form-field appearance=\"outline\">\r\n                                                                                <mat-label>Data Type</mat-label>\r\n                                                                                <!-- <input name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"incTcp.dataType\" matInput> -->\r\n\r\n                                                                                <mat-select name=\"dataType_{{i}}\" #dataType required\r\n                                                                                #dataType=\"ngModel\" [(ngModel)]=\"incTcp.dataType\">\r\n                                                                                <mat-option *ngFor=\"let outtype of typeDataIso\" [value]=\"outtype\">{{outtype}}</mat-option>\r\n                                                                                    </mat-select> \r\n                                                                            </mat-form-field>\r\n                                                                    </div>\r\n                                                                        <div fxFlex=\"15\"  *ngIf=\"protocolAllInc.messageFormat=='XML'\">\r\n                                                                                <mat-form-field appearance=\"outline\">\r\n                                                                                    <mat-label>{{matLabel3}}</mat-label>\r\n                                                                                    <!-- <input name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"incTcp.dataType\" matInput> -->\r\n\r\n                                                                                    <mat-select name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"incTcp.dataType\">\r\n                                                                                        <mat-option value=\"numeric\">\r\n                                                                                            Numeric\r\n                                                                                            </mat-option>\r\n                                                                                            <mat-option value=\"alphaNumeric\">\r\n                                                                                              Alpha  Numeric\r\n                                                                                                </mat-option>\r\n                                                                                                <mat-option value=\"date\">\r\n                                                                                                    Date\r\n                                                                                                    </mat-option>\r\n                                                                                        </mat-select>\r\n                                                                                </mat-form-field>\r\n                                                                        </div>\r\n                                                                        <div fxFlex=\"15\">\r\n                                                                                <mat-form-field appearance=\"outline\">\r\n                                                                                        <mat-label>{{matLabel4}}</mat-label>\r\n                                                                                        <input matInput name=\"headerValue\"\r\n                                                                                         #headerValue=\"ngModel\" [(ngModel)]=\"incTcp.headerValue\">\r\n                                                                                        <!-- <mat-select name=\"messageBasis\" name=\"headerValue\" #headerValue #headerValue=\"ngModel\"\r\n                                                                                        [(ngModel)]=\"incTcp.headerValue\">\r\n                                                                                                <mat-option *ngFor=\"let header of headerValueIso\"\r\n                                                                                                [value]=\"header\">\r\n                                                                                                {{header}}\r\n                                                                                                </mat-option>\r\n                                                                                            </mat-select> -->\r\n                                                                                    </mat-form-field>\r\n                                                                            </div>\r\n                                                                           \r\n                                                                            <div fxFlex=\"15\">\r\n                                                                                    <mat-form-field appearance=\"outline\">\r\n                                                                                            <mat-label>{{matLabel5}}</mat-label>\r\n                                                                                            <!-- <input name=\"encryption\" matInput\r\n                                                                                             name=\"encryption\" #encryption \r\n                                                                                             #encryption=\"ngModel\"\r\n                                                                                            [(ngModel)]=\"incTcp.encryption\"> -->\r\n                                                                                           <mat-select name=\"encryption\" name=\"encryption\" #headerValue #headerValue=\"ngModel\"\r\n                                                                                            [(ngModel)]=\"incTcp.encryption\">\r\n                                                                                            <mat-option >--Select--</mat-option>\r\n                                                                                             <mat-option value=\"No Encryption\">No Encryption</mat-option>\r\n                                                                                                    <mat-option value=\"BASE64\">\r\n                                                                                                    BASE64\r\n                                                                                                    </mat-option>\r\n                                                                                                    <mat-option value=\"SHA264\">\r\n                                                                                                            SHA264\r\n                                                                                                            </mat-option>\r\n                                                                                                            <mat-option value=\"SHA512\">\r\n                                                                                                                    SHA512\r\n                                                                                                                    </mat-option>\r\n                                                                                                </mat-select> \r\n                                                                                        </mat-form-field>\r\n                                                                                </div> \r\n                                                                        <div fxFlex=\"20\">\r\n                                                                            <!-- <button mat-raised-button > -->\r\n                                                                                <mat-icon (click)=\"onDeleteOFAllInc(i)\" color=\"primary\" style=\"cursor: pointer;margin-top:10px\">delete</mat-icon>\r\n                                                                            <!-- </button> -->\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div fxLayout=\"row wrap\">\r\n                                                                    <div fxFlex=\"100\">\r\n                                                                        <div fxFlex=\"50\">\r\n                                                                                <!-- <button mat-raised-button> -->\r\n                                                                                        <mat-icon  (click)=\"addOfIncAll()\" color=\"primary\" style=\"cursor: pointer;margin-top:10px\">add</mat-icon>\r\n                                                                                    <!-- </button> -->\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                <div fxLayout=\"row wrap\">\r\n                                                                    <div fxFlex=\"100\">\r\n                                                                            <div fxFlex=\"40\"></div>\r\n                                                                        <div fxFlex=\"60\" fxLayoutGap=\"20px\">\r\n                                                                            \r\n                                                                                <button mat-raised-button (click)=\"nextStep(tabgroup.selectedIndex)\" color=\"primary\">Next</button>\r\n                                                                                <button mat-raised-button (click)=\"moveIncProtocolAll()\" color=\"warn\">Previous</button>\r\n                                                                                <!-- <button mat-raised-button (click)=\"onResetOFAllInc()\" color=\"primary\">Reset</button> -->\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                   \r\n                                                   \r\n                                        </div>\r\n                                 </mat-card>\r\n                </mat-tab>\r\n                <!-- outgoing -->\r\n                <mat-tab label=\"Outgoing\"> \r\n                    <mat-card *ngIf=\"showProtocolForAllOut\">\r\n                        <form #protocolAllOut1=\"ngForm\">\r\n                        <div fxLayout=\"row wrap\">\r\n                                <div fxFlex=\"100\">\r\n                                    <div fxFlex=\"30\"></div>\r\n                                    <div fxFlex=\"90\">\r\n                                        <h5>Outgoing Message Configuration</h5>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div fxLayout=\"column wrap\" >\r\n                                    <div fxFlex=\"100\">\r\n                                        <div fxFlex=\"30\"></div>\r\n                                        <div fxFlex=\"40\">\r\n                                            <mat-form-field appearance=\"outline\">\r\n                                                <mat-label>Outgoing Message Protocol</mat-label>\r\n                                                <mat-select #protocolRef [(ngModel)]=\"protocolAllOut.messageChannel\" name=\"messageChannel\" required\r\n                                                    (selectionChange)=\"onProtocalSlectionOutGoing(protocolAllOut.messageChannel)\"\r\n                                                    (optionSelected)=\"onProtocalSlectionOutgoing(protocolAllOut.messageChannel)\">\r\n                                                    <mat-option value=\" \">Please select</mat-option>\r\n                                                    <mat-option value=\"TCP/IP\">TCP/IP</mat-option>\r\n                                                    <mat-option value=\"Https/Http\">HTTPS/HTTP\r\n                                                    </mat-option>\r\n                                                    <mat-option value=\"MDB\">MDB</mat-option>\r\n                                                    <mat-option value=\"EJB\">EJB</mat-option>\r\n                                                    <mat-option value=\"DB Connection\">DB Connection\r\n                                                    </mat-option>\r\n                                                </mat-select>\r\n                                            </mat-form-field>\r\n                                        </div>\r\n                            \r\n                                    </div>\r\n                                    <div fxFlex=\"100\">\r\n                                        <div fxFlex=\"30\"></div>\r\n                                        <div fxFlex=\"40\">\r\n                                            <mat-form-field appearance=\"outline\">\r\n                                                <mat-label>Data Type</mat-label>\r\n                                                <mat-select [(ngModel)]=\"protocolAllOut.messageFormat\" name=\"messageFormat\" required \r\n                                                    (selectionChange)=\"incomingDataypeSelection(protocolAllOut.messageFormat)\">\r\n                                                    <mat-option *ngFor=\"let data of dataType\" [value]=\"data\">{{data}}</mat-option>\r\n                                                </mat-select>\r\n                                            </mat-form-field>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div fxFlex=\"100\" *ngIf=\"protocolAllOut.messageChannel=='DB Connection'\">\r\n                                        <div fxFlex=\"25\">\r\n                                                <mat-form-field appearance=\"outline\">\r\n                                                        <mat-label>User Name</mat-label>\r\n                                                        <input matInput name=\"dbUsername\"\r\n                                                         #dbUsername \r\n                                                         [(ngModel)]=\"protocolAllOut.dbUsername\">\r\n                                                    </mat-form-field>\r\n                                        </div>\r\n                                        <div fxFlex=\"25\">\r\n                                                <mat-form-field appearance=\"outline\">\r\n                                                        <mat-label>Passowrd</mat-label>\r\n                                                        <input matInput name=\"dbPassword\" #dbPassword \r\n                                                        type=\"password\" [(ngModel)]=\"protocolAllOut.password\">\r\n                                                         \r\n                                                     </mat-form-field>\r\n                                        </div>\r\n                                        <div fxFlex=\"25\">\r\n                                                <mat-form-field appearance=\"outline\">\r\n                                                        <mat-label>DataBase Name</mat-label>\r\n                                                        <input matInput name=\"dbServiceName\" \r\n                                                        #dbServiceName type=\"text\" \r\n                                                        [(ngModel)]=\"protocolAllOut.dbServiceName\">\r\n                                                         \r\n                                                     </mat-form-field>\r\n                                        </div>\r\n                                        <div fxFlex=\"25\">\r\n                                                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                                                        <mat-label>Connecting String</mat-label>\r\n                                                        <textarea matInput \r\n                                                        [(ngModel)]=\"protocolAllOut.dbConnectString\" \r\n                                                        name=\"dbConnectString\" #dbConnectString></textarea>\r\n                                                      </mat-form-field>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div fxFlex=\"100\" fxLayoutGap=\"10px\" *ngIf=\"protocolAllOut.messageChannel=='MDB'\">\r\n                                            <div fxFlex=\"25\">\r\n                                                    <mat-form-field appearance=\"outline\">\r\n                                                            <mat-label>Type of Queue</mat-label>\r\n                                                          <mat-select (selectionChange)=\"onMdbQueue($event)\" name=\"queuetype\">\r\n                                                              <mat-option *ngFor=\"let queue of mdbQueueInc\" [value]=\"queue\">{{queue}}</mat-option>\r\n                                                          </mat-select>\r\n                                                         </mat-form-field>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngIf=\"queueType=='JMS' &&protocolAllOut.messageChannel=='MDB'\">                    \r\n                                                <div fxFlex=\"20\" >\r\n                                                        <mat-form-field appearance=\"outline\">\r\n                                                           <mat-label>Queue Manager</mat-label>\r\n                                                           <input matInput name=\"queueManager\" >\r\n                                                        </mat-form-field>\r\n                                                    </div>\r\n                                                    <div fxFlex=\"20\" >\r\n                                                            <mat-form-field appearance=\"outline\">\r\n                                                               <mat-label>Queue Name</mat-label>\r\n                                                               <input matInput name=\"queueName\">\r\n                                                            </mat-form-field>\r\n                                                        </div>\r\n                                                        <div fxFlex=\"20\" >\r\n                                                                <mat-form-field appearance=\"outline\">\r\n                                                                   <mat-label>Channel</mat-label>\r\n                                                                   <input matInput name=\"channel\">\r\n                                                                </mat-form-field>\r\n                                                                \r\n                                                            </div>\r\n                                               \r\n                                                    \r\n                                               \r\n                                         </div>\r\n                                         <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngIf=\"queueType=='IBM' &&protocolAllOut.messageChannel=='MDB'\" >\r\n                                                <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                                    <mat-form-field appearance=\"outline\">\r\n                                                       <mat-label>Queue Manager</mat-label>\r\n                                                       <input matInput name=\"queueManager\" >\r\n                                                        \r\n                                                    </mat-form-field>\r\n                                                </div>\r\n                                                <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                                        <mat-form-field appearance=\"outline\">\r\n                                                           <mat-label>Queue Name</mat-label>\r\n                                                           <input matInput name=\"queueName\"  >\r\n                                                            \r\n                                                        </mat-form-field>\r\n                                                    </div>         \r\n                                                    <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                                            <mat-form-field appearance=\"outline\">\r\n                                                               <mat-label>Connecting Factory</mat-label>\r\n                                                               <input matInput name=\"connectingFactory\">\r\n                                                                \r\n                                                            </mat-form-field>\r\n                                                        </div>\r\n                                               \r\n                                                </div>\r\n                                    <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n                                        <div fxFlex=\"40\"></div>\r\n                                            <button mat-raised-button (click)=\"onNextOfProtocolAllOut(protocolAllOut)\" [disabled]=\"!protocolAllOut1.valid\" color=\"primary\">Next</button>\r\n                                            <button mat-raised-button (click)=\"onPreviousToBasic()\" color=\"warn\">Previous</button>\r\n                                            <!-- <button mat-raised-button (click)=\"onResetOfProtocolAllOut()\" color=\"warn\" [disabled]=\"!protocolAllOut1.valid\">Reset</button> -->\r\n                                    </div>\r\n                                    </div>\r\n                                </form>\r\n                    </mat-card>\r\n\r\n                                <mat-card *ngIf=\"showServiceScreeAllOut\">\r\n                                    <div fxLayout=\"row wrap\">\r\n                                        <div fxFlex=\"100\">\r\n                                            <div fxFlex=\"30\"></div>\r\n                                            <div fxFlex=\"90\">\r\n                                                <h5>Header and Service Details</h5>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                        <div >\r\n                                              \r\n                                                        <div fxLayout=\"row wrap\" *ngIf=\"protocolAllOut.messageFormat=='XML' && incProtocol=='EJB' ||incProtocol=='MDB'&& protocolAllOut.messageFormat=='XML' ||incProtocol=='Https/Http' &&incDataType=='XML'\" [ngClass]=\"{'readonly-wrapper' : disableupdtae}\">\r\n                                                            <div fxFlex=\"100\">\r\n                                                                <div fxFlex=\"60\">\r\n                                                                    <input type=\"file\" id=\"chFile\" (change)=\"uploadFileXml($event)\">\r\n                                                                    <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                                                                      <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{fileName}}\r\n                                                                    </button>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div fxLayout=\"row wrap\" *ngIf=\"incDataType=='CSV/EXCEL'  ||incDataType=='FLATFILE'\">\r\n                                                            <div fxFlex=\"100\">\r\n                                                                <div fxFlex=\"60\">\r\n                                                                   <mat-form-field appearance=\"outline\">\r\n                                                                    <mat-label>Folder Name</mat-label>\r\n                                                                    <input matInput>\r\n                                                                   </mat-form-field>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div fxLayout=\"row wrap\" *ngIf=\"incProtocol=='DB Connection' &&incDataType=='XML' ||incProtocol=='DB Connection'&& incDataType=='JSON'\" >\r\n                                                                <div fxFlex=\"100\">\r\n                                                                    <div fxFlex=\"60\">\r\n                                                                       <mat-form-field appearance=\"outline\">\r\n                                                                        <mat-label>Table Name</mat-label>\r\n                                                                        <input matInput>\r\n                                                                       </mat-form-field>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div *ngIf=\"incDataType!='CSV/EXCEL' &&incDataType!='FLATFILE'\">\r\n                                                            <div fxLayout=\"row wrap\" *ngFor=\"let tcpOut of mdmtSystemServiceAllOut;let i=index\" [ngClass]=\"{'readonly-wrapper' : disableupdtae}\">\r\n                                                                    <div fxFlex=\"100\" fxLayoutGap=\"10px\">\r\n                                                                            <div fxFlex=\"15\">\r\n                                                                                    <mat-form-field appearance=\"outline\">\r\n                                                                                            <mat-label>{{matLabel_header}}</mat-label>\r\n                                                                                            <!-- <input matInput name=\"headerTag\" name=\"headerTag\"\r\n                                                                                             #headerTag #headerTag=\"ngModel\"\r\n                                                                                            [(ngModel)]=\"tcpOut.headerTag\"> -->\r\n                                                                                            <mat-select name=\"headerTag\" name=\"headerTag\" \r\n                                                                                            #headerTag #headerTag=\"ngModel\"\r\n                                                                                            [(ngModel)]=\"tcpOut.headerTag\">\r\n                                                                                                    <mat-option *ngFor=\"let header of headerTagData\"\r\n                                                                                                    [value]=\"header.headerTag\">\r\n                                                                                                    {{header.headerTag}}\r\n                                                                                                    </mat-option>\r\n                                                                                                </mat-select> \r\n                                                                                        </mat-form-field>\r\n                                                                            </div>\r\n                                                                        <div fxFlex=\"15\" *ngIf=\"matLabel1!=null && matLabel1!='null'\">\r\n                                                                                <mat-form-field appearance=\"outline\">\r\n                                                                                        <mat-label>{{matLabel1}}</mat-label>\r\n                                                                                        <!-- (selectionChange)=\"onSelectingMessageBasis($event,i)\" -->\r\n                                                                                        <mat-select name=\"messageKey\" #messageKey=\"ngModel\"\r\n                                                                                        [(ngModel)]=\"tcpOut.messageKey\" (selectionChange)=\"onSelectingMessageBasis($event,i)\"> \r\n                                                                                               <mat-option *ngFor=\"let mkey of isoRespData\"\r\n                                                                                               [value]=\"mkey.fieldNo\">\r\n                                                                                               {{mkey.fieldNo }}\r\n                                                                                               </mat-option>\r\n                                                                                           </mat-select>      \r\n                                                        \r\n                                                                                    </mat-form-field>\r\n                                                                        </div>\r\n                                                                        \r\n                                                                        <div fxFlex=\"15\"  *ngIf=\"protocolAllOut.messageFormat!='XML'\">\r\n                                                                            <mat-form-field appearance=\"outline\" >\r\n                                                                                    <mat-label>{{matLabel2}}</mat-label>\r\n                                                                                    <!-- <input matInput  name=\"messageKey\" #messageKey=\"ngModel\"\r\n                                                                                    [(ngModel)]=\"tcpOut.messageKey\"> -->\r\n                                                                                  \r\n                                                                                        <mat-select name=\"messageBasis\"\r\n                                                                                        #messageBasis #messageBasis=\"ngModel\"\r\n                                                                                       \r\n                                                                                         [(ngModel)]=\"tcpOut.messageBasis\"  >\r\n                                                                                           <mat-option *ngFor=\"let data of messageBasisIso\"\r\n                                                                                           [value]=\"data\">\r\n                                                                                           {{data}}\r\n                                                                                           </mat-option>\r\n                                                                                       </mat-select>\r\n                                                                                </mat-form-field>\r\n                                                                        </div>\r\n                                                                        <div fxFlex=\"15\"  *ngIf=\"protocolAllOut.messageFormat=='XML'\">\r\n                                                                            <mat-form-field appearance=\"outline\" >\r\n                                                                                    <mat-label>{{matLabel2}}</mat-label>\r\n                                                                                    <!-- <input matInput  name=\"messageKey\" #messageKey=\"ngModel\"\r\n                                                                                    [(ngModel)]=\"tcpOut.messageKey\"> -->\r\n                                                                                  \r\n                                                                                        <mat-select name=\"messageBasis\"\r\n                                                                                        #messageBasis #messageBasis=\"ngModel\"\r\n                                                                                        (selectionChange)=\"onselectingTag($event,i)\"\r\n                                                                                       \r\n                                                                                         [(ngModel)]=\"tcpOut.messageBasis\">\r\n                                                                                           <mat-option *ngFor=\"let data of messageBasisIsoAllOut\"\r\n                                                                                           [value]=\"data\">\r\n                                                                                           {{data}}\r\n                                                                                           </mat-option>\r\n                                                                                       </mat-select>\r\n                                                                                </mat-form-field>\r\n                                                                        </div>\r\n                                                                        <div fxFlex=\"15\" *ngIf=\"protocolAllOut.messageFormat!='XML'\">\r\n                                                                            <mat-form-field appearance=\"outline\">\r\n                                                                                <mat-label>Data Type</mat-label>\r\n                                                                                <!-- <input name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"incTcp.dataType\" matInput> -->\r\n\r\n                                                                                <mat-select name=\"dataType_{{i}}\" #dataType required\r\n                                                                                #dataType=\"ngModel\" [(ngModel)]=\"tcpOut.dataType\">\r\n                                                                                <mat-option *ngFor=\"let outtype of typeDataIso\" [value]=\"outtype\">{{outtype}}</mat-option>\r\n                                                                                    </mat-select> \r\n                                                                            </mat-form-field>\r\n                                                                    </div>\r\n                                                                        <div fxFlex=\"15\"  *ngIf=\"protocolAllOut.messageFormat=='XML'\">\r\n                                                                                <mat-form-field appearance=\"outline\">\r\n                                                                                        <mat-label>{{matLabel3}}</mat-label>\r\n                                                                                        <!-- <input matInput name=\"dataType\" #dataType \r\n                                                                                        #dataType=\"ngModel\" [(ngModel)]=\"tcpOut.dataType\"> -->\r\n                                                                                        <mat-select name=\"dataType\" #dataType \r\n                                                                                        #dataType=\"ngModel\" [(ngModel)]=\"tcpOut.dataType\">\r\n                                                                                        <mat-option value=\"numeric\">\r\n                                                                                            Numeric\r\n                                                                                            </mat-option>\r\n                                                                                            <mat-option value=\"alphaNumeric\">\r\n                                                                                              Alpha  Numeric\r\n                                                                                                </mat-option>\r\n                                                                                                <mat-option value=\"date\">\r\n                                                                                                    Date\r\n                                                                                                    </mat-option>\r\n                                                                                            </mat-select> \r\n                                                                                    </mat-form-field>\r\n                                                                        </div>\r\n                                                                        <div fxFlex=\"15\">\r\n                                                                                <mat-form-field appearance=\"outline\">\r\n                                                                                        <mat-label>{{matLabel4}}</mat-label>\r\n                                                                                        <input matInput name=\"messageBasis\" name=\"headerValue\" #headerValue #headerValue=\"ngModel\"\r\n                                                                                        [(ngModel)]=\"tcpOut.headerValue\">\r\n                                                                                        <!-- <mat-select name=\"messageBasis\" name=\"headerValue\" #headerValue #headerValue=\"ngModel\"\r\n                                                                                        [(ngModel)]=\"tcpOut.headerValue\">\r\n                                                                                                <mat-option *ngFor=\"let header of headerValueIso\"\r\n                                                                                                [value]=\"header\">\r\n                                                                                                {{header}}\r\n                                                                                                </mat-option>\r\n                                                                                            </mat-select> -->\r\n                                                                                    </mat-form-field>\r\n                                                                        </div>\r\n                                                                      \r\n                                                                        <div fxFlex=\"15\">\r\n                                                                                <mat-form-field appearance=\"outline\">\r\n                                                                                        <mat-label>{{matLabel5}}</mat-label>\r\n                                                                                        <!-- <input matInput name=\"encryption\" name=\"encryption\"\r\n                                                                                         #encryption #encryption=\"ngModel\"\r\n                                                                                        [(ngModel)]=\"tcpOut.encryption\"> -->\r\n                                                                                        <mat-select name=\"encryption\" name=\"encryption\" #encryption\r\n                                                                                         #encryption=\"encryption\"\r\n                                                                                        [(ngModel)]=\"tcpOut.encryption\">\r\n                                                                                        <mat-option >--Select--</mat-option>\r\n                                                                                        <mat-option value=\"No Encryption\">No Encryption</mat-option>\r\n                                                                                        <mat-option value=\"BASE64\">\r\n                                                                                                BASE64\r\n                                                                                                </mat-option>\r\n                                                                                                <mat-option value=\"SHA264\">\r\n                                                                                                        SHA264\r\n                                                                                                        </mat-option>\r\n                                                                                                        <mat-option value=\"SHA512\">\r\n                                                                                                                SHA512\r\n                                                                                                                </mat-option>\r\n                                                                                            </mat-select> \r\n                                                                                    </mat-form-field>\r\n                                                                        </div>\r\n                                                                        <div fxFlex=\"20\">\r\n                                                                            <!-- <button mat-raised-button > -->\r\n                                                                                <mat-icon (click)=\"onDeleteOfAllOut(i)\" color=\"warn\" style=\"cursor: pointer;margin-top:10px\">delete</mat-icon>\r\n                                                                            <!-- </button> -->\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                <div fxLayout=\"row wrap\">\r\n                                                                    <div fxFlex=\"100\">\r\n                                                                        <div fxFlex=\"50\" [ngClass]=\"{'readonly-wrapper' : disableupdtae}\">\r\n                                                                                <!-- <button mat-raised-button> -->\r\n                                                                                        <mat-icon  (click)=\"addOfAllOut()\" color=\"primary\" style=\"cursor: pointer;margin-top:10px\">add</mat-icon>\r\n                                                                                    <!-- </button> -->\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                \r\n                                                                <div fxLayout=\"row wrap\">\r\n                                                                    <div fxFlex=\"100\">\r\n                                                                        <div fxFlex=\"40\"></div>\r\n                                                                        <div fxFlex=\"60\" fxLayoutGap=\"20px\">\r\n                                                                                <button mat-raised-button (click)=\"onFisnih()\" color=\"primary\" [disabled]=\"disableupdtae || mdmtSystemServiceAllOut.length < 2\">Update</button>\r\n                                                                                <button mat-raised-button (click)=\"moveToProtocolAllOut()\" color=\"warn\" [disabled]=\"disableupdtae\">Previous</button>\r\n                                                                                <!-- <button mat-raised-button (click)=\"onResetOfAllOut()\" color=\"warn\">Reset</button> -->\r\n\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                   \r\n                                                   \r\n                                        </div>\r\n                                 </mat-card>\r\n                </mat-tab>\r\n              \r\n              </mat-tab-group>\r\n</mat-card>\r\n <br>\r\n <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n          <mat-card>\r\n            <mat-card-title>\r\n            </mat-card-title>\r\n            <mat-card-content>\r\n              <div fxLayout=\"row\">\r\n                <table id=\"customers\">\r\n                  <tr>\r\n                    <th>Record Status:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysBasic.recordStatus}}</mat-chip>\r\n                    </td>\r\n                    <th>Input By:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysBasic.creatorId}}</mat-chip>\r\n                    </td>\r\n                    <th>Verified By:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysBasic.approverId}}</mat-chip>\r\n                    </td>\r\n                    <th>Verified Ever:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysBasic.approvedEver}}</mat-chip>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Modification No:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysBasic.versionNo}}</mat-chip>\r\n                    </td>\r\n                    <th>Input Date:</th>\r\n                    <td>\r\n                       <mat-chip>{{addSysBasic.createdTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n    \r\n                    </td>\r\n                    <th>Verified Date:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysBasic.approvedTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n                    </td>\r\n      \r\n                    <th>Verified Status:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysBasic.approvedStatus}}</mat-chip>\r\n                    </td>\r\n      \r\n                  </tr>\r\n                </table>\r\n              </div>\r\n            </mat-card-content>\r\n          </mat-card>\r\n        </div>\r\n      </div>  \r\n     \r\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/edit-add-system/edit-add-system.component.html":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/edit-add-system/edit-add-system.component.html ***!
  \********************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\" style=\"height:30px; font-size: small;\">\r\n    <span>Add System</span>\r\n</mat-toolbar>\r\n<br>\r\n\r\n\r\n<mat-card *ngIf=\"!hideBasic\" class=\"baiscInfocard\">\r\n    <form #basicForm basicForm=\"ngForm\">\r\n        <div fxLayoutAlign=\"center stretch\"><b>Basic Information</b></div>\r\n        <div fxLayout=\"row wrap\">\r\n            <div fxFlex=\"100\">\r\n\r\n                <div fxFlex=\"15\"></div>\r\n                <div fxFlex=\"30\">\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Code</mat-label>\r\n                            <input type=\"text\" matInput name=\"code\" #code #code=\"ngModel\"\r\n                                [(ngModel)]=\"createExtSys1.code\" [ngModelOptions]=\"{standalone: true}\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Type</mat-label>\r\n                            <!-- <input type=\"text\" matInput name=\"type\" #type #type=\"ngModel\" [(ngModel)]=\"createExtSys1.type\" [ngModelOptions]=\"{standalone: true}\"> -->\r\n                            <mat-select name=\"type\" #type #type=\"ngModel\" [(ngModel)]=\"createExtSys1.type\"\r\n                                [ngModelOptions]=\"{standalone: true}\">\r\n                                <mat-option value=\"server\">Server</mat-option>\r\n                                <mat-option value=\"client\">Client</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>External IP</mat-label>\r\n                            <input type=\"text\" matInput name=\"externalIp\" #externalIp #externalPort=\"ngModel\"\r\n                                [(ngModel)]=\"createExtSys1.externalIp\" [ngModelOptions]=\"{standalone: true}\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Median IP</mat-label>\r\n                            <input type=\"text\" matInput name=\"medianIp\" #medianIp #medianIp=\"ngModel\"\r\n                                [(ngModel)]=\"createExtSys1.medianIp\" [ngModelOptions]=\"{standalone: true}\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n                <div fxFlex=\"5\"></div>\r\n                <div fxFlex=\"30\">\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Name</mat-label>\r\n                            <input type=\"text\" matInput name=\"name\" #namein #namein=\"ngModel\"\r\n                                [(ngModel)]=\"createExtSys1.name\" [ngModelOptions]=\"{standalone: true}\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Message Type</mat-label>\r\n                            <mat-select (selectionChange)=\"onsystemMessageSelection($event.value)\"\r\n                                [(ngModel)]=\"createExtSys1.openToMessage\" name=\"openToMesg\"\r\n                                [ngModelOptions]=\"{standalone: true}\">\r\n                                <mat-option>Please select</mat-option>\r\n                                <mat-option value=\"Incoming\">Incoming\r\n                                </mat-option>\r\n                                <mat-option value=\"OutComing\">OutGoing\r\n                                </mat-option>\r\n                                <mat-option value=\"All\">All</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>External Port</mat-label>\r\n                            <input type=\"text\" matInput name=\"externalPort\" #externalPort #externalPort=\"ngModel\"\r\n                                [(ngModel)]=\"createExtSys1.externalPort\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Median Port</mat-label>\r\n                            <input type=\"text\" matInput name=\"medianPort\" #medianPort #medianPort=\"ngModel\"\r\n                                [(ngModel)]=\"createExtSys1.medianPort\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n                <div fxFlex=\"10\"></div>\r\n            </div>\r\n        </div>\r\n        <div fxLayout=\"row wrap\">\r\n            <div fxLayoutAlign=\"end stretch\" fxLayoutGap=\"10px\">\r\n                <button mat-raised-button (click)=\"onNextToIncomingProtocal()\" color=\"primary\"\r\n                    *ngIf=\"showOfIcoming\">Incoming</button>\r\n\r\n                <button mat-raised-button (click)=\"onNextOutgoingProtocol()\" color=\"primary\"\r\n                    *ngIf=\"showOfoutNext\">Outgoing\r\n                </button>\r\n                <button mat-raised-button (click)=\"onALlProtocol()\" color=\"primary\" *ngIf=\"showALl\">All</button>\r\n                <button mat-raised-button type=\"reset\" color=\"warn\">Reset</button>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</mat-card>\r\n<div >\r\n        <mat-spinner *ngIf=\"showPrepgrassBar\"></mat-spinner>\r\n        <p style=\"color:red\"  *ngIf=\"showPrepgrassBar\">Please Wait... Fetching the Records</p>\r\n</div>\r\n\r\n<!-- showing Incoming -->\r\n<mat-card *ngIf=\"showIncMsgProtocol\">\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"10\"></div>\r\n            <div fxFlex=\"90\">\r\n                <h5>Incoming Message Configuration ({{incProtocol}}&nbsp;{{incDataType}})</h5>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"column wrap\" *ngFor=\"let protocol of incomingIntegrationProtocol\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"10\"></div>\r\n            <div fxFlex=\"40\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-select #protocolRef [(ngModel)]=\"protocol.typeOfProtocol\"\r\n                        (selectionChange)=\"onProtocalSlection(protocol.typeOfProtocol)\"\r\n                        (optionSelected)=\"onProtocalSlection(protocol.typeOfProtocol)\">\r\n                        <mat-option>Please select</mat-option>\r\n                        <mat-option value=\"TCP/IP\">TCP/IP</mat-option>\r\n                        <mat-option value=\"Https/Http\">Https/Http\r\n                        </mat-option>\r\n                        <mat-option value=\"MDB\">MDB</mat-option>\r\n                        <mat-option value=\"EJB\">EJB</mat-option>\r\n                        <mat-option value=\"DB Connection\">DB Connection\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n\r\n        </div>\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"10\"></div>\r\n            <div fxFlex=\"40\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-select [(ngModel)]=\"protocol.dataType\"\r\n                        (selectionChange)=\"incomingDataypeSelection(protocol.dataType)\">\r\n                        <mat-option *ngFor=\"let data of dataType\" [value]=\"data\">{{data}}</mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n        <div fxFlex=\"100\" fxLayoutGap=\"10px\" *ngIf=\"protocol.typeOfProtocol=='DB Connection'\">\r\n            <div fxFlex=\"25\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>User Name</mat-label>\r\n                    <input matInput name=\"userName\" #userName [(ngModel)]=\"incDbData.userName\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"25\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Passowrd</mat-label>\r\n                            <input matInput name=\"password\" #password type=\"password\" [(ngModel)]=\"incDbData.password\">\r\n                             \r\n                         </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"25\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Data Base Name</mat-label>\r\n                            <input matInput name=\"DBname\" #dbName [(ngModel)]=\"incDbData.dataBaseName\"> \r\n                         </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"25\">\r\n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                            <mat-label>Connecting String</mat-label>\r\n                            <textarea matInput [(ngModel)]=\"incDbData.connectiongstring\" name=\"connectingString\" #connectingSgtring></textarea>\r\n                          </mat-form-field>\r\n            </div>\r\n        </div>\r\n        <div fxFlex=\"100\" fxLayoutGap=\"10px\" *ngIf=\"protocol.typeOfProtocol=='MDB'\">\r\n            <div fxFlex=\"25\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Type of Queue</mat-label>\r\n                          <mat-select (selectionChange)=\"onMdbIncQueue($event)\">\r\n                              <mat-option *ngFor=\"let queue of mdbQueueInc\" [value]=\"queue\">{{queue}}</mat-option>\r\n                          </mat-select>\r\n                         </mat-form-field>\r\n            </div>\r\n        </div>\r\n        <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngIf=\"showjsmQueue\">                    \r\n                <div fxFlex=\"20\" >\r\n                        <mat-form-field appearance=\"outline\">\r\n                           <mat-label>Queue Manager</mat-label>\r\n                           <input matInput name=\"queueManager\" >\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"20\" >\r\n                            <mat-form-field appearance=\"outline\">\r\n                               <mat-label>Queue Name</mat-label>\r\n                               <input matInput >\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div fxFlex=\"20\" >\r\n                                <mat-form-field appearance=\"outline\">\r\n                                   <mat-label>Channel</mat-label>\r\n                                   <input matInput>\r\n                                </mat-form-field>\r\n                                \r\n                            </div>\r\n               \r\n                    \r\n               \r\n         </div>\r\n         <div fxFlex=\"100\" fxLayoutGap=\"20px\"  *ngIf=\"showibmQueue\" >\r\n                <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                       <mat-label>Queue Manager</mat-label>\r\n                       <input matInput name=\"queueManager\" >\r\n                        \r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                           <mat-label>Queue Name</mat-label>\r\n                           <input matInput name=\"queueName\"  >\r\n                            \r\n                        </mat-form-field>\r\n                    </div>         \r\n                    <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                               <mat-label>Connecting Factory</mat-label>\r\n                               <input matInput name=\"connectingFactory\">\r\n                                \r\n                            </mat-form-field>\r\n                        </div>\r\n               \r\n                </div>\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"50\" fxLayoutGap=\"20px\">\r\n                <button mat-raised-button (click)=\"nextOfIncomingProtocol(protocol)\" color=\"primary\">Next</button>\r\n                <button mat-raised-button (click)=\"previousOfIncoming()\" color=\"accent\">Previous</button>\r\n                <button mat-raised-button (click)=\"onResetIncoming(protocol)\" color=\"warn\">Reset</button>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</mat-card>\r\n\r\n<!-- Tcp Incoming -->\r\n<mat-card *ngIf=\"showTcpInc\">\r\n    <div fxLayout=\"row wrap\" *ngFor=\"let incTcp of incomingMessageConfigurationTcp\">\r\n        <div fxFlex=\"100\" fxLayoutGap=\"10px\">\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Field No</mat-label>\r\n\r\n                    <input matInput name=\"fieldNo\" #fieldNo fieldNo=\"ngModel\" [(ngModel)]=\"incTcp.fieldNo\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Field Name</mat-label>\r\n                    <input matInput name=\"fieldName\" #fieldName fieldName=\"ngModel\" [(ngModel)]=\"incTcp.fieldName\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Data Type</mat-label>\r\n                    <mat-select name=\"dataType\" #dataType dataType=\"ngModel\" [(ngModel)]=\"incTcp.dataType\">\r\n\r\n                        <mat-option value=\"numeric\">Numeric</mat-option>\r\n                        <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                        <mat-option value=\"date\">Date</mat-option>\r\n\r\n                    </mat-select>\r\n\r\n\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Default Value</mat-label>\r\n                    <input matInput name=\"defaultValue\" #defaultValue defaultValue=\"ngModel\"\r\n                        [(ngModel)]=\"incTcp.defaultValue\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <button mat-raised-button (click)=\"deleteOfTCP(i)\" color=\"primary\">\r\n                    <mat-icon>delete</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"25\">\r\n                <button mat-raised-button (click)=\"addIncomingTcp()\" color=\"primary\">\r\n                    <mat-icon>add</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</mat-card>\r\n<!-- Http XMl ----incoming -->\r\n<mat-card *ngIf=\"showHttpXmlInc\">\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\" fxLayoutGap=\"20\">\r\n\r\n\r\n            <div fxFlex=\"50\">\r\n                <input type=\"file\" id=\"chFile\" (change)=\"fileuploadHttpXMlInc($event)\">\r\n                <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                    <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n                </button>\r\n\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n\r\n    </div>\r\n    <div fxLayout=\"row wrap\" *ngFor=\"let xmlhttpInc of incHttpXMl\">\r\n        <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Node</mat-label>\r\n                    <input matInput name=\"node\" #node #node=\"ngModel\" [(ngModel)]=\"xmlhttpInc.node\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Tag Name</mat-label>\r\n                    <input matInput name=\"tagName\" #tagName #tagName=\"ngModel\" [(ngModel)]=\"xmlhttpInc.tagName\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Data Type</mat-label>\r\n                    <mat-select name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"xmlhttpInc.dataType\">\r\n\r\n                        <mat-option value=\"numeric\">Numeric</mat-option>\r\n                        <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                        <mat-option value=\"date\">Date</mat-option>\r\n\r\n                    </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Default Value</mat-label>\r\n                    <input matInput name=\"defaultValue\" #defaultValue #defaultValue=\"ngModel\"\r\n                        [(ngModel)]=\"xmlhttpInc.defaultValue\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"10\">\r\n                <button mat-raised-button (click)=\"deleteIncHttpXml(i)\" color=\"primary\">\r\n                    <mat-icon>delete</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"30\">\r\n                <button mat-raised-button (click)=\"addIncHttpXMl()\" color=\"primary\">\r\n                    <mat-icon>add</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</mat-card>\r\n<!-- Http Json   Incoming -->\r\n<mat-card *ngIf=\"showHttpJsonInc\">\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\" *ngFor=\"let incomingHttpJson of incHttpJson; let i = index;\" fxLayoutGap=\"20px\">\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Key</mat-label>\r\n\r\n                    <input matInput name=\"node\" #node #node=\"ngModel\" [(ngModel)]=\"incomingHttpJson.key\">\r\n                </mat-form-field>\r\n            </div>\r\n\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Data Type</mat-label>\r\n\r\n                    <mat-select name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"incomingHttpJson.dataType\">\r\n\r\n                        <mat-option value=\"numeric\">Numeric</mat-option>\r\n                        <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                        <mat-option value=\"date\">Date</mat-option>\r\n\r\n                    </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Default Value</mat-label>\r\n                    <input matInput name=\"type\" #defaultValue #defaultValue=\"ngModel\"\r\n                        [(ngModel)]=\"incomingHttpJson.deafultValue\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <button mat-raised-button (click)=\"deleteIncHttpJson(i)\" color=\"primary\">\r\n                    <mat-icon>delete</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"30\">\r\n                <button mat-raised-button (click)=\"addIncHttpJson()\" color=\"primary\">\r\n                    <mat-icon>add</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</mat-card>\r\n<!-- MDB XMl incoming -->\r\n<mat-card *ngIf=\"showMdbXmlInc\">\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\" fxLayoutGap=\"20\">\r\n            <div fxFlex=\"50\">\r\n                <input type=\"file\" id=\"chFile\" (change)=\"fileuploadHttpXMlInc($event)\">\r\n                <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                    <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\" fxLayoutGap=\"10px\" *ngFor=\"let xmlMdbInc of incMDBXML;let i=index\">\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Node</mat-label>\r\n                    <input matInput name=\"node\" #node #node=\"ngModel\" [(ngModel)]=\"xmlMdbInc.node\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>TagName</mat-label>\r\n                    <input matInput name=\"tagName\" #tagName #tagName=\"ngModel\" [(ngModel)]=\"xmlMdbInc.tagName\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Data Type</mat-label>\r\n                    <mat-select name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"xmlMdbInc.dataType\">\r\n                        <mat-option value=\"numeric\">Numeric</mat-option>\r\n                        <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                        <mat-option value=\"date\">Date</mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Default Value</mat-label>\r\n                    <input matInput name=\"defaultValue\" #defaultValue #defaultValue=\"ngModel\"\r\n                        [(ngModel)]=\"xmlMdbInc.defaultValue\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"10\">\r\n                <button mat-raised-button (click)=\"deleteMdbXmlInc(i)\" color=\"primary\">\r\n                    <mat-icon>delete</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"30\">\r\n                <button mat-raised-button (click)=\"addMdbXMlInc()\" color=\"primary\">\r\n                    <mat-icon>add</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</mat-card>\r\n<!-- MDB JSON incoming -->\r\n<mat-card *ngIf=\"showMDBJsonInc\">\r\n\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\" *ngFor=\"let mdbJsonInc of incMdbJson;let i=index\" fxLayoutGap=\"20px\">\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Key</mat-label>\r\n                    <input matInput name=\"key\" #key #key=\"ngModel\" [(ngModel)]=\"mdbJsonInc.key\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Data Type</mat-label>\r\n                    <mat-select name=\"dataType\" #dataType dataType=\"ngModel\" [(ngModel)]=\"mdbJsonInc.dataType\">\r\n\r\n                        <mat-option value=\"numeric\">Numeric</mat-option>\r\n                        <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                        <mat-option value=\"date\">Date</mat-option>\r\n\r\n                    </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Default Value</mat-label>\r\n                    <input matInput name=\"defaultValue\" #defaultValue #defaultValue=\"ngModel\"\r\n                        [(ngModel)]=\"mdbJsonInc.defaultValue\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <button mat-raised-button (click)=\"deleteMdbJsonInc(i)\" color=\"primary\">\r\n                    <mat-icon>delete</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"30\">\r\n                <button mat-raised-button (click)=\"addMdbJsonInc()\" color=\"primary\">\r\n                    <mat-icon>add</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</mat-card>\r\n<!-- MDB CSV and Excel -->\r\n<mat-card *ngIf=\"showMdbCSVInc\">\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"40\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Folder Name</mat-label>\r\n                    <input matInput>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</mat-card>\r\n<!-- MDB FlatFile Incoming -->\r\n<mat-card *ngIf=\"showMdbFlatInc\">\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"40\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Folder Name</mat-label>\r\n                    <input matInput>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</mat-card>\r\n<!-- EJb XMl incoming -->\r\n<mat-card *ngIf=\"showEjbXMlInc\">\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\" fxLayoutGap=\"20\">\r\n            <div fxFlex=\"50\">\r\n                <input type=\"file\" id=\"chFile\" (change)=\"fileuploadHttpXMlInc($event)\">\r\n                <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                    <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\" *ngFor=\"let ejbxmlInc of incEjbXMl\" fxLayoutGap=\"20px\">\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Node</mat-label>\r\n\r\n                    <input matInput name=\"node\" #node #node=\"ngModel\" [(ngModel)]=\"ejbxmlInc.node\">\r\n\r\n                </mat-form-field>\r\n            </div>\r\n\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Tag Name</mat-label>\r\n\r\n                    <input matInput name=\"tagName\" #tagName #tagName=\"ngModel\" [(ngModel)]=\"ejbxmlInc.tagName\">\r\n\r\n                </mat-form-field>\r\n            </div>\r\n\r\n\r\n\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-select name=\"datatype\" #datatype #datatype=\"ngModel\" [(ngModel)]=\"ejbxmlInc.dataType\">\r\n\r\n                        <mat-option value=\"numeric\">Numeric</mat-option>\r\n                        <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                        <mat-option value=\"date\">Date</mat-option>\r\n\r\n                    </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Default Value</mat-label>\r\n\r\n                    <input matInput name=\"tagvalue\" #tagvalue #tagvalue=\"ngModel\" [(ngModel)]=\"ejbxmlInc.tagvalue\">\r\n\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <button mat-raised-button (click)=\"deleteEjbXmlInc(i)\" color=\"primary\">\r\n                    <mat-icon>delete</mat-icon>\r\n                </button>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"30\">\r\n                <button mat-raised-button (click)=\"addEjbXMlInc()\" color=\"primary\">\r\n                    <mat-icon>add</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</mat-card>\r\n<!-- EJb Json incoming -->\r\n<mat-card *ngIf=\"showEjbJsonInc\">\r\n        <div fxLayout=\"row wrap\" fxLayoutGap=\"20px\">\r\n            <div fxFlex=\"100\" *ngFor=\"let ejbinJosn of incEjbJson\" fxLayoutGap=\"20px\">\r\n                <div fxFlex=\"20\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Key</mat-label>\r\n\r\n                        <input matInput name=\"key\" #key=\"ngModel\" [(ngModel)]=\"ejbinJosn.key\">\r\n\r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxFlex=\"20\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-select name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"ejbinJosn.dataType\">\r\n\r\n                            <mat-option value=\"numeric\">Numeric</mat-option>\r\n                            <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                            <mat-option value=\"date\">Date</mat-option>\r\n\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxFlex=\"20\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Default Value</mat-label>\r\n\r\n                        <input matInput name=\"defaultValue\" #defaultValue #defaultValue=\"ngModel\"\r\n                            [(ngModel)]=\"ejbinJosn.defaultValue\">\r\n\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n\r\n                <div fxFlex=\"20\">\r\n                    <button mat-raised-button (click)=\"deleteIncEjbJson(i)\" color=\"primary\">\r\n                        <mat-icon>delete</mat-icon>\r\n                    </button>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div fxLayout=\"row wrap\">\r\n            <div fxFlex=\"100\">\r\n                <div fxFlex=\"30\">\r\n                        <button mat-raised-button (click)=\"addIncEjbJson()\" color=\"primary\">\r\n                                <mat-icon>add</mat-icon>\r\n                            </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n</mat-card>\r\n<!-- EJB CSV Incoming -->\r\n<mat-card *ngIf=\"showEjbCsvInc\">\r\n<div fxLayout=\"row wrap\">\r\n<div fxFlex=\"100\">\r\n<div fxFlex=\"40\">\r\n<mat-form-field appearance=\"outline\"> \r\n<mat-label>Folder Name</mat-label>\r\n<input matInput>\r\n</mat-form-field>\r\n</div>\r\n</div>\r\n</div>\r\n</mat-card>\r\n<!-- Ejb Flat file Incoming -->\r\n<mat-card *ngIf=\"showEjbFlatInc\">\r\n        <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\">\r\n                <div fxFlex=\"40\">\r\n                <mat-form-field appearance=\"outline\"> \r\n                <mat-label>Folder Name</mat-label>\r\n                <input matInput>\r\n                </mat-form-field>\r\n                </div>\r\n                </div>\r\n         </div>\r\n</mat-card>\r\n<!-- DB xml inc -->\r\n<mat-card *ngIf=\"showDbXmlInc\">\r\n        <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\" fxLayoutGap=\"20\">\r\n                    <div fxFlex=\"50\">\r\n                        <input type=\"file\" id=\"chFile\" (change)=\"fileuploadHttpXMlInc($event)\">\r\n                        <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                            <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n        \r\n            </div>\r\n<div fxLayout=\"row wrap\">\r\n<div fxFlex=\"100\">\r\n<div fxFlex=\"40\">\r\n        <mat-form-field appearance=\"outline\">\r\n                <mat-label>Table Name</mat-label>\r\n                <input matInput name=\"tableName\"\r\n                (keyup)=\"onsearchingTablName($event)\" [matAutocomplete]=\"autotablName\">\r\n                <mat-autocomplete #autotablName=\"matAutocomplete\" \r\n                (optionSelected)=\"gettingColumnNameForIncoming($event)\">\r\n               <mat-option *ngFor=\"let tabname of incDbRecords\" [value]=\"tabname\">\r\n                    {{tabname}}\r\n                </mat-option>\r\n                </mat-autocomplete>\r\n              </mat-form-field>\r\n</div>\r\n</div>\r\n</div>\r\n<!-- Columns -->\r\n<div fxLayout=\"row wrap\"  *ngIf=\"coulmnNameBasedonTanbleName &&coulmnNameBasedonTanbleName.length\">\r\n        <div fxFlex=\"100\" *ngFor=\"let column of colRowForDbInc;let i=index\" fxLayoutGap=\"20px\">\r\n            <div fxFlex=\"30\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Column Name</mat-label>\r\n                    <mat-select>\r\n                        <mat-option *ngFor=\"let col of column\" [value]=\"col\">\r\n                            {{col}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"30\">\r\n                    \r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Data Type</mat-label>\r\n                                <mat-select\r\n                                name=\"dataType\"\r\n                                >\r\n                                \r\n                                 <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                 <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                 <mat-option value=\"date\">Date</mat-option>\r\n                                \r\n                             </mat-select>\r\n                            </mat-form-field>\r\n                    \r\n                </div>\r\n                <div fxFlex=\"30\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Default Value</mat-label>\r\n                        <input matInput >\r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxFlex=\"30\">\r\n                        <button mat-raised-button (click)=\"deleteDbXInc(i)\" color=\"primary\">\r\n                                <mat-icon>remove</mat-icon>\r\n                            </button>\r\n                </div>\r\n               \r\n        </div>\r\n      <div fxFlex=\"100\">\r\n            <button mat-raised-button (click)=\"onAddingrowsForDbInc(i)\" color=\"primary\">\r\n                    <mat-icon>add</mat-icon>\r\n                </button>\r\n      </div>\r\n              \r\n    </div>\r\n   \r\n</mat-card>\r\n<!-- DB Json Inc -->\r\n<mat-card *ngIf=\"showDBJsonInc\">\r\n        <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n        <div fxFlex=\"40\">\r\n                <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Table Name</mat-label>\r\n                        <input matInput name=\"tableName\"\r\n                        (keyup)=\"onsearchingTablName($event)\" [matAutocomplete]=\"autotablName\">\r\n                        <mat-autocomplete #autotablName=\"matAutocomplete\" \r\n                        (optionSelected)=\"gettingColumnNameForIncoming($event)\">\r\n                       <mat-option *ngFor=\"let tabname of incDbRecords\" [value]=\"tabname.tableName\">\r\n                            {{tabname.tableName}}\r\n                        </mat-option>\r\n                        </mat-autocomplete>\r\n                      </mat-form-field>\r\n        </div>\r\n        </div>\r\n        </div>\r\n        <!-- Columns -->\r\n        <div fxLayout=\"row wrap\"  *ngIf=\"coulmnNameBasedonTanbleName &&coulmnNameBasedonTanbleName.length\">\r\n                <div fxFlex=\"100\" *ngFor=\"let column of coulmnNameBasedonTanbleName;let i=index\" fxLayoutGap=\"20px\">\r\n                    <div fxFlex=\"30\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Column Name</mat-label>\r\n                            <mat-select>\r\n                                <mat-option *ngFor=\"let col of column\" [value]=\"col\">\r\n                                    {{col}}\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"30\">\r\n                            \r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Data Type</mat-label>\r\n                                        <mat-select\r\n                                        name=\"dataType\"\r\n                                        >\r\n                                        \r\n                                         <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                         <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                         <mat-option value=\"date\">Date</mat-option>\r\n                                        \r\n                                     </mat-select>\r\n                                    </mat-form-field>\r\n                            \r\n                        </div>\r\n                        <div fxFlex=\"30\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                <mat-label>Default Value</mat-label>\r\n                                <input matInput >\r\n                            </mat-form-field>\r\n                        </div>\r\n                </div>\r\n            </div>\r\n</mat-card>\r\n<!-- Db CSv Inc -->\r\n<mat-card *ngIf=\"showDbCsvInc\">\r\n<div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\">\r\n        <div fxFlex=\"40\">\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>Folder Name</mat-label>\r\n                <input matInput>\r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n</mat-card>\r\n<!-- Db Flatfile Inc -->\r\n<mat-card *ngIf=\"showDbFlatInc\">\r\n        <div fxLayout=\"row wrap\">\r\n            <div fxFlex=\"100\">\r\n                <div fxFlex=\"40\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Folder Name</mat-label>\r\n                        <input matInput>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n        \r\n        </div>\r\n        </mat-card>\r\n\r\n\r\n<!--==============================End for Incoming=======================  -->\r\n<!-- showing outgoing -->\r\n<mat-card *ngIf=\"showOutMsgProtocol\">\r\n    <h5>OutGoing Message Header Configuration({{protocoloutGoing}}&nbsp;{{dataTypeOutgoing}} )</h5>\r\n    <div fxLayout=\"row wrap\" *ngFor=\"let protocolOut of outgoingIntegrationProtocol\">\r\n\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"20\"></div>\r\n            <div fxFlex=\"50\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-select #protocolRef [(ngModel)]=\"protocolOut.typeOfProtocol\"\r\n                        (selectionChange)=\"onOutgoingProtocolSelction($event.value)\" \r\n                        (optionSelected)=\"onOutgoingProtocolSelction($event.value)\">\r\n                        <mat-option>Please select</mat-option>\r\n                        <mat-option value=\"TCP/IP\">TCP/IP</mat-option>\r\n                        <mat-option value=\"Https/Http\">Https/Http\r\n                        </mat-option>\r\n                        <mat-option value=\"MDB\">MDB</mat-option>\r\n                        <mat-option value=\"EJB\">EJB</mat-option>\r\n                        <mat-option value=\"DB Connection\">DB Connection\r\n                        </mat-option>\r\n\r\n                    </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"20\"></div>\r\n            <div fxFlex=\"50\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-select [(ngModel)]=\"protocolOut.dataType\"\r\n                        (selectionChange)=\"onDataTypeOFOutgoingProtocol($event.value)\">\r\n                        <mat-option *ngFor=\"let data of dataTypeForOutGoing\" [value]=\"data\">{{data}}</mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n\r\n        </div>\r\n        <div fxFlex=\"100\" fxLayoutGap=\"10px\" *ngIf=\"protocolOut.typeOfProtocol=='MDB'\">\r\n                <div fxFlex=\"25\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                                <mat-label>Type of Queue</mat-label>\r\n                              <mat-select (selectionChange)=\"onMdbQueueOut($event)\">\r\n                                  <mat-option *ngFor=\"let queue of mdbQueueInc\" [value]=\"queue\">{{queue}}</mat-option>\r\n                              </mat-select>\r\n                             </mat-form-field>\r\n                </div>\r\n            </div>\r\n            <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngIf=\"showjsmQueueOut\">                    \r\n                    <div fxFlex=\"20\" >\r\n                            <mat-form-field appearance=\"outline\">\r\n                               <mat-label>Queue Manager</mat-label>\r\n                               <input matInput name=\"queueManager\" >\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div fxFlex=\"20\" >\r\n                                <mat-form-field appearance=\"outline\">\r\n                                   <mat-label>Queue Name</mat-label>\r\n                                   <input matInput >\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\" >\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                       <mat-label>Channel</mat-label>\r\n                                       <input matInput>\r\n                                    </mat-form-field>\r\n                                    \r\n                                </div>\r\n                   \r\n                        \r\n                   \r\n             </div>\r\n             <div fxFlex=\"100\" fxLayoutGap=\"20px\"  *ngIf=\"showibmQueueOut\" >\r\n                    <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                           <mat-label>Queue Manager</mat-label>\r\n                           <input matInput name=\"queueManager\" >\r\n                            \r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                               <mat-label>Queue Name</mat-label>\r\n                               <input matInput name=\"queueName\"  >\r\n                                \r\n                            </mat-form-field>\r\n                        </div>         \r\n                        <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                   <mat-label>Connecting Factory</mat-label>\r\n                                   <input matInput name=\"connectingFactory\">\r\n                                    \r\n                                </mat-form-field>\r\n                            </div>\r\n                   \r\n                    </div>\r\n                    <div fxFlex=\"100\" fxLayoutGap=\"10px\" *ngIf=\"protocolOut.typeOfProtocol=='DB Connection'\">\r\n                            <div fxFlex=\"25\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>User Name</mat-label>\r\n                                    <input matInput name=\"userName\" #userName [(ngModel)]=\"incDbData.userName\">\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"25\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                            <mat-label>Passowrd</mat-label>\r\n                                            <input matInput name=\"password\" #password type=\"password\" [(ngModel)]=\"incDbData.password\">\r\n                                             \r\n                                         </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"25\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                            <mat-label>Data Base Name</mat-label>\r\n                                            <input matInput name=\"DBname\" #dbName [(ngModel)]=\"incDbData.dataBaseName\"> \r\n                                         </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"25\">\r\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                                            <mat-label>Connecting String</mat-label>\r\n                                            <textarea matInput [(ngModel)]=\"incDbData.connectiongstring\" name=\"connectingString\" #connectingSgtring></textarea>\r\n                                          </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"50\" fxLayoutGap=\"20px\">\r\n                <button mat-raised-button (click)=\"nextOfOutgoinProtocol(protocolOut)\" color=\"primary\">Next</button>\r\n                <button mat-raised-button (click)=\"previousOfOutgoing()\" color=\"accent\">Previous</button>\r\n                <button mat-raised-button (click)=\"onResetingOutgoing(protocolOut)\" color=\"warn\">Reset</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</mat-card>\r\n<!-- Tcp outgoing -->\r\n<mat-card *ngIf=\"showTcpOut\">\r\n    <div fxLayout=\"row wrap\" *ngFor=\"let outTcp of outgoingMessageConfigurationTcp; let i = index;\">\r\n        <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Field No</mat-label>\r\n\r\n                    <input matInput name=\"fieldNo\" #fieldNo fieldNo=\"ngModel\" [(ngModel)]=\"outTcp.fieldNo\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Field Name</mat-label>\r\n                    <input matInput name=\"fieldName\" #fieldName fieldName=\"ngModel\" [(ngModel)]=\"outTcp.fieldName\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Data Type</mat-label>\r\n                    <mat-select name=\"dataType\" #dataType dataType=\"ngModel\" [(ngModel)]=\"outTcp.dataType\">\r\n\r\n                        <mat-option value=\"numeric\">Numeric</mat-option>\r\n                        <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                        <mat-option value=\"date\">Date</mat-option>\r\n\r\n                    </mat-select>\r\n\r\n\r\n                </mat-form-field>\r\n\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Default Value</mat-label>\r\n                    <input matInput name=\"type\" #fieldDefault fieldDefault=\"ngModel\" [(ngModel)]=\"outTcp.fieldDefault\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <button mat-raised-button (click)=\"deleteOutgoingTcp(i)\" color=\"primary\">\r\n                    <mat-icon>delete</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"30\">\r\n                <button mat-raised-button (click)=\"addoutgoingTCP()\" color=\"primary\">\r\n                    <mat-icon>add</mat-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</mat-card>\r\n<!-- Http xml out going -->\r\n<mat-card *ngIf=\"showHttpXmlOut\">\r\n        <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\" fxLayoutGap=\"20\">\r\n                    <div fxFlex=\"50\">\r\n                        <input type=\"file\" id=\"chFile\" (change)=\"fileuploadHttpXMlInc($event)\">\r\n                        <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                            <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div fxLayout=\"row wrap\" *ngFor=\"let outxmlHttp of outHttpXml\">\r\n                <div fxFlex=\"100\" fxLayoutGap=\"10px\">\r\n                    <div fxFlex=\"20\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Node</mat-label>\r\n                                    <input matInput name=\"node\" #node #node=\"ngModel\"[(ngModel)]=\"outxmlHttp.node\">\r\n                                </mat-form-field>\r\n\r\n                    </div>\r\n                    <div fxFlex=\"20\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Tag Name</mat-label>\r\n                                    <input matInput name=\"tagName\"#tagName #tagName=\"ngModel\"[(ngModel)]=\"outxmlHttp.tagName\">\r\n                                </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"20\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Data Type</mat-label>\r\n                                    <mat-select \r\n                                    name=\"dataType\" #dataType #dataType=\"ngModel\"[(ngModel)]=\"outxmlHttp.dataType\"\r\n                                   >\r\n                                    <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                    <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                    <mat-option value=\"date\">Date</mat-option>    \r\n                                </mat-select>\r\n                                </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"20\">\r\n                            <mat-form-field appearance=\"outline\">  \r\n                                    <mat-label>Default Value</mat-label>\r\n                                    <input matInput name=\"defaultValue\" #defaultValue #defaultValue=\"ngModel\"[(ngModel)]=\"outxmlHttp.defaultValue\">\r\n                                </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"10\">\r\n                        \r\n                        <button mat-raised-button (click)=\"deleteIncHttpXml(i)\" color=\"primary\">\r\n                                <mat-icon>delete</mat-icon>\r\n                            </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"10\">\r\n                <button mat-raised-button (click)=\"addIncHttpXMl()\" color=\"primary\">\r\n                        <mat-icon>add</mat-icon>\r\n                    </button>\r\n                    </div>\r\n            </div>\r\n</mat-card>\r\n<!-- Http and Json outgoing -->\r\n<mat-card *ngIf=\"showHttpJsonOut\">\r\n    <div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngFor=\"let outgoingHttpJSon of outHttpJson; let i = index;\">\r\n                         \r\n        <div fxFlex=\"20\">\r\n            <mat-form-field appearance=\"outline\">\r\n               <mat-label>key</mat-label>\r\n              \r\n                <input matInput #key #key=\"ngModel\" name=\"key\" [(ngModel)]=\"outgoingHttpJSon.key\">\r\n            </mat-form-field>\r\n        </div>\r\n     \r\n            <div fxFlex=\"20\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Data Type</mat-label>\r\n                            <mat-select\r\n                            #dataType #dataType=\"ngModel\" name=\"dataType\" [(ngModel)]=\"outgoingHttpJSon.dataType\"\r\n                            >\r\n                            \r\n                             <mat-option value=\"numeric\">Numeric</mat-option>\r\n                             <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                             <mat-option value=\"date\">Date</mat-option>\r\n                            \r\n                         </mat-select>\r\n                             \r\n                         </mat-form-field>\r\n                </div>\r\n                <div fxFlex=\"20\">\r\n                      <mat-form-field appearance=\"outline\">\r\n                         <mat-label>Default Value</mat-label>\r\n                        \r\n                          <input matInput #defaultValue #defaultValue=\"ngModel\" name=\"defaultValue\" [(ngModel)]=\"outgoingHttpJSon.defaultValue\">\r\n                      </mat-form-field>\r\n                  </div>\r\n                \r\n                    <div fxFlex=\"20\">\r\n                           <button mat-raised-button (click)=\"deleteOutHttpJson(i)\" color=\"primary\"><mat-icon>delete</mat-icon></button>\r\n                        </div>\r\n    </div>\r\n</div>\r\n<div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\">\r\n            <button mat-raised-button (click)=\"addOutHttpJosn()\" color=\"primary\">\r\n                    <mat-icon>add</mat-icon>\r\n                </button>\r\n    </div>\r\n</div>\r\n    \r\n</mat-card>\r\n<!-- MDB and XMl outgoing -->\r\n<mat-card *ngIf=\"showMdbXmlOut\">\r\n        <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\" fxLayoutGap=\"20\">\r\n                    <div fxFlex=\"50\">\r\n                        <input type=\"file\" id=\"chFile\" (change)=\"fileuploadHttpXMlInc($event)\">\r\n                        <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                            <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div fxLayout=\"row wrap\" >\r\n                    <div fxFlex=\"100\" *ngFor=\"let mdboutxml of outMdbXml;let i=index\" fxLayoutGap=\"20px\">\r\n                        <div fxFlex=\"20\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                               <mat-label>Node</mat-label>\r\n                                <input matInput #node name=\"node\" #node=\"ngModel\" [(ngModel)]=\"mdboutxml.node\">\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>TagName</mat-label>\r\n                                        <input matInput #tagName name=\"tagName\" #tagName=\"ngModel\" [(ngModel)]=\"mdboutxml.tagName\">\r\n                                     </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                            <mat-label>Data Type</mat-label>\r\n                                            <mat-select\r\n                                            #dataType name=\"dataType\" #dataType=\"ngModel\" [(ngModel)]=\"mdboutxml.dataType\"\r\n                                           > <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                            <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                            <mat-option value=\"date\">Date</mat-option>\r\n                                        </mat-select>\r\n                                         </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                            <mat-label>Default Value</mat-label>\r\n                                            <input matInput #tagDefault name=\"tagDefault\" #tagDefault=\"ngModel\" [(ngModel)]=\"mdboutxml.tagDefault\">\r\n                                         </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\">   \r\n                                    <button mat-raised-button (click)=\"deleteoutMdbXml(i)\" color=\"primary\"><mat-icon>delete</mat-icon></button>\r\n\r\n                            </div>\r\n                    </div>\r\n                    <div fxLayout=\"row wrap\">\r\n                            <div fxFlex=\"100\">\r\n                                <div fxLayoutAlign=\"center stretch\">\r\n                                    <button mat-raised-button (click)=\"addoutMdbXMl()\" color=\"primary\"><mat-icon>add</mat-icon></button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n</mat-card>\r\n<!-- MDB Json outgoing -->\r\n<mat-card *ngIf=\"showMdbJsonOut\">\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngFor=\"let mdbJsonOut of outMdbJson\">\r\n                <div fxFlex=\"20\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>key</mat-label>\r\n                        <input matInput type=\"text\" name=\"key\" [(ngModel)]=\"mdbJsonOut.key\" #key #key=\"ngModel\"> \r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxFlex=\"20\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                                <mat-label>Data Type</mat-label>\r\n                                <mat-select\r\n                                name=\"dataType\" [(ngModel)]=\"mdbJsonOut.dataType\" #dataType #dataType=\"ngModel\"\r\n                               >\r\n                               \r\n                                <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                <mat-option value=\"date\">Date</mat-option>\r\n                               \r\n                            </mat-select>\r\n                             </mat-form-field>\r\n                    </div>\r\n                <div fxFlex=\"20\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Default Value</mat-label>\r\n                            <input matInput type=\"text\" name=\"defaultValue\" [(ngModel)]=\"mdbJsonOut.defaultValue\" #defaultValue #defaultValue=\"ngModel\"> \r\n                        </mat-form-field>\r\n                    </div>\r\n                   \r\n                        <div fxFlex=\"20\">   \r\n                                <button mat-raised-button (click)=\"deleteMdbJsonOut(i)\" color=\"primary\"><mat-icon>delete</mat-icon></button>\r\n\r\n                        </div>\r\n            </div>\r\n        </div>\r\n            <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\">\r\n                    <div fxFlex=\"30\">\r\n                            <button mat-raised-button (click)=\"addoutMdbJosn()\" color=\"primary\"><mat-icon>add</mat-icon></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n</mat-card>\r\n<!-- Mdb csV outgoing -->\r\n<mat-card *ngIf=\"showMdbCsvOut\">\r\n        <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\">\r\n                    <div fxFlex=\"40\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Folder Name</mat-label>\r\n                            <input matInput>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n</mat-card>\r\n<!-- Mdb Flatfile outgoing -->\r\n<mat-card *ngIf=\"showMdbFlatOut\">\r\n        <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\">\r\n                    <div fxFlex=\"40\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Folder Name</mat-label>\r\n                            <input matInput>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n</mat-card>\r\n<!-- Ejb XMl  outgoing-->\r\n<mat-card *ngIf=\"showEjbXMlOut\">\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\" fxLayoutGap=\"20\">\r\n                <div fxFlex=\"50\">\r\n                    <input type=\"file\" id=\"chFile\" (change)=\"fileuploadHttpXMlInc($event)\">\r\n                    <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                        <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n            <div fxLayout=\"row wrap\" >\r\n                    <div fxFlex=\"100\" *ngFor=\"let ejboutxml of outEjbXml;let i=index\" fxLayoutGap=\"20px\">\r\n                            <div fxFlex=\"20\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                       <mat-label>Node</mat-label>\r\n                                       <input matInput name=\"node\" #node node=\"ngModel\" [(ngModel)]=\"ejboutxml.node\">\r\n                                        \r\n                                    </mat-form-field>\r\n                                </div>\r\n                                <div fxFlex=\"20\">\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                           <mat-label>Tag Name</mat-label>\r\n                                           <input matInput name=\"tagName\" #tagName tagName=\"ngModel\" [(ngModel)]=\"ejboutxml.tagName\">\r\n                                            \r\n                                        </mat-form-field>\r\n                                    </div>\r\n                                <div fxFlex=\"20\">\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                             <mat-label>Data Type</mat-label>\r\n                                             <mat-select\r\n                                             name=\"node\" #dataType dataType=\"ngModel\" [(ngModel)]=\"ejboutxml.dataType\"\r\n                                            >\r\n                                            \r\n                                             <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                             <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                             <mat-option value=\"date\">Date</mat-option>\r\n                                            \r\n                                         </mat-select>\r\n                                        </mat-form-field>\r\n                                     </div>\r\n                                        <div fxFlex=\"20\">\r\n                                                <mat-form-field appearance=\"outline\">\r\n                                                   <mat-label>Default Value</mat-label>\r\n                                                   <input matInput name=\"tagvalue\" #tagvalue tagvalue=\"ngModel\" [(ngModel)]=\"ejboutxml.tagvalue\">\r\n                                                    \r\n                                                </mat-form-field>\r\n                                            </div>\r\n                                            \r\n                            <div fxFlex=\"20\">   \r\n                                    <button mat-raised-button (click)=\"deleteOutEjbXml(i)\" color=\"primary\"><mat-icon>delete</mat-icon></button>\r\n\r\n                            </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"30\">\r\n                                <button mat-raised-button (click)=\"addoutEjbXml()\" color=\"primary\"><mat-icon>add</mat-icon></button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n</mat-card>\r\n<!-- Ejb out Json -->\r\n<mat-card *ngIf=\"showEjbJsonOut\">\r\n        <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngFor=\"let ejboutjosn of outEjbJson\">\r\n                    <div fxFlex=\"20\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>key</mat-label>\r\n                            <input matInput type=\"text\" name=\"key\" [(ngModel)]=\"ejboutjosn.key\" #key #key=\"ngModel\"> \r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"20\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                <mat-label>Default Value</mat-label>\r\n                                <input matInput type=\"text\" name=\"defaultValue\" [(ngModel)]=\"ejboutjosn.defaultValue\" #defaultValue #node=\"ngModel\"> \r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>Data Type</mat-label>\r\n                                        <mat-select\r\n            \r\n                                       >\r\n                                       \r\n                                        <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                        <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                        <mat-option value=\"date\">Date</mat-option>\r\n                                       \r\n                                    </mat-select>\r\n                                        <!-- <input matInput name=\"type\" #type type=\"ngModel\" [(ngModel)]=\"incomingTCP.type\"> -->\r\n    \r\n                                     </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\">   \r\n                                    <button mat-raised-button (click)=\"deleteEjbJsonOut(i)\" color=\"primary\"><mat-icon>delete</mat-icon></button>\r\n\r\n                            </div>\r\n                </div>\r\n            </div>\r\n            <div fxLayout=\"row wrap\">\r\n                    <div fxFlex=\"100\">\r\n                        <div >\r\n                            <button mat-raised-button (click)=\"addEjbJsonOut()\" color=\"primary\"><mat-icon>add</mat-icon></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n</mat-card>\r\n<!-- EJB CSV outgoing -->\r\n<mat-card *ngIf=\"showEjbCsvOut\">\r\n        <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\">\r\n                    <div fxFlex=\"40\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Folder Name</mat-label>\r\n                            <input matInput>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n</mat-card>\r\n<!-- EJB Flat File out goinh -->\r\n<mat-card *ngIf=\"showEjbFlatOut\">\r\n        <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\">\r\n                    <div fxFlex=\"40\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Folder Name</mat-label>\r\n                            <input matInput>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n</mat-card>\r\n<!-- Db connection  Xml out-->\r\n<mat-card *ngIf=\"showDBXmlOut\">\r\n        <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\" fxLayoutGap=\"20\">\r\n                    <div fxFlex=\"50\">\r\n                        <input type=\"file\" id=\"chFile\" (change)=\"fileuploadHttpXMlInc($event)\">\r\n                        <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                            <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n        \r\n            </div>\r\n<div fxLayout=\"row wrap\">\r\n<div fxFlex=\"100\">\r\n<div fxFlex=\"40\">\r\n        <mat-form-field appearance=\"outline\">\r\n                <mat-label>Table Name</mat-label>\r\n                <input matInput name=\"tableName\"\r\n                (keyup)=\"onsearchingTablName($event)\" [matAutocomplete]=\"autotablName\">\r\n                <mat-autocomplete #autotablName=\"matAutocomplete\" \r\n                (optionSelected)=\"gettingColumnNameForIncoming($event)\">\r\n               <mat-option *ngFor=\"let tabname of incDbRecords\" [value]=\"tabname\">\r\n                    {{tabname}}\r\n                </mat-option>\r\n                </mat-autocomplete>\r\n              </mat-form-field>\r\n</div>\r\n</div>\r\n</div>\r\n<!-- Columns -->\r\n<div fxLayout=\"row wrap\"  *ngIf=\"coulmnNameBasedonTanbleName &&coulmnNameBasedonTanbleName.length\">\r\n        <div fxFlex=\"100\" *ngFor=\"let column of colRowForDbInc;let i=index\" fxLayoutGap=\"20px\">\r\n            <div fxFlex=\"30\">\r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Column Name</mat-label>\r\n                    <mat-select>\r\n                        <mat-option *ngFor=\"let col of column\" [value]=\"col\">\r\n                            {{col}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"30\">\r\n                    \r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Data Type</mat-label>\r\n                                <mat-select\r\n                                name=\"dataType\"\r\n                                >\r\n                                \r\n                                 <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                 <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                 <mat-option value=\"date\">Date</mat-option>\r\n                                \r\n                             </mat-select>\r\n                            </mat-form-field>\r\n                    \r\n                </div>\r\n                <div fxFlex=\"30\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Default Value</mat-label>\r\n                        <input matInput >\r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxFlex=\"30\">\r\n                        <button mat-raised-button (click)=\"deleteDbXInc(i)\" color=\"primary\">\r\n                                <mat-icon>remove</mat-icon>\r\n                            </button>\r\n                </div>\r\n               \r\n        </div>\r\n      <div fxFlex=\"100\">\r\n            <button mat-raised-button (click)=\"onAddingrowsForDbInc(i)\" color=\"primary\">\r\n                    <mat-icon>add</mat-icon>\r\n                </button>\r\n      </div>\r\n              \r\n    </div>\r\n   \r\n</mat-card>\r\n<!-- Db connection Json Outgoing -->\r\n<mat-card *ngIf=\"showDBJsonOut\">\r\n        <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\">\r\n                <div fxFlex=\"40\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                                <mat-label>Table Name</mat-label>\r\n                                <input matInput name=\"tableName\"\r\n                                (keyup)=\"onsearchingTablName($event)\" [matAutocomplete]=\"autotablName\">\r\n                                <mat-autocomplete #autotablName=\"matAutocomplete\" \r\n                                (optionSelected)=\"gettingColumnNameForIncoming($event)\">\r\n                               <mat-option *ngFor=\"let tabname of incDbRecords\" [value]=\"tabname\">\r\n                                    {{tabname}}\r\n                                </mat-option>\r\n                                </mat-autocomplete>\r\n                              </mat-form-field>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                <!-- Columns -->\r\n                <div fxLayout=\"row wrap\"  *ngIf=\"coulmnNameBasedonTanbleName &&coulmnNameBasedonTanbleName.length\">\r\n                        <div fxFlex=\"100\" *ngFor=\"let column of colRowForDbInc;let i=index\" fxLayoutGap=\"20px\">\r\n                            <div fxFlex=\"30\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Column Name</mat-label>\r\n                                    <mat-select>\r\n                                        <mat-option *ngFor=\"let col of column\" [value]=\"col\">\r\n                                            {{col}}\r\n                                        </mat-option>\r\n                                    </mat-select>\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"30\">\r\n                                    \r\n                                        <mat-form-field appearance=\"outline\">\r\n                                            <mat-label>Data Type</mat-label>\r\n                                                <mat-select\r\n                                                name=\"dataType\"\r\n                                                >\r\n                                                \r\n                                                 <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                                 <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                                 <mat-option value=\"date\">Date</mat-option>\r\n                                                \r\n                                             </mat-select>\r\n                                            </mat-form-field>\r\n                                    \r\n                                </div>\r\n                                <div fxFlex=\"30\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>Default Value</mat-label>\r\n                                        <input matInput >\r\n                                    </mat-form-field>\r\n                                </div>\r\n                        </div>\r\n                    </div>\r\n</mat-card>\r\n<!-- Db connection Csv outgoing -->\r\n<mat-card *ngIf=\"showDbCsvOut\">\r\n        <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\">\r\n                    <div fxFlex=\"40\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Folder Name</mat-label>\r\n                            <input matInput>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n</mat-card>\r\n\r\n<!-- Db connection Flat outgoing -->\r\n<mat-card *ngIf=\"showDbFaltOut\">\r\n        <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\">\r\n                    <div fxFlex=\"40\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Folder Name</mat-label>\r\n                            <input matInput>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    </mat-card>\r\n\r\n<!-- ===================End For outgoing=============================== -->\r\n<!-- showing All -->\r\n<mat-tab-group mat-align-tabs=\"start\" *ngIf=\"showAllMsgProtocol\" #tabGroup [selectedIndex]=\"selectedIndex\"\r\n (selectedTabChange)=\"tabChanged($event)\" >\r\n    <mat-tab label=\"Incoming\">\r\n        <mat-card *ngIf=\"showAllProtocolInc\">\r\n            <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\">\r\n                    <div fxFlex=\"10\"></div>\r\n                    <div fxFlex=\"90\">\r\n                        <h5>Incoming Message Configuration ({{incProtocol}}&nbsp;{{incDataType}})</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div fxLayout=\"column wrap\" *ngFor=\"let protocol of incomingIntegrationProtocol\">\r\n                <div fxFlex=\"100\">\r\n                    <div fxFlex=\"10\"></div>\r\n                    <div fxFlex=\"40\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-select #protocolRef [(ngModel)]=\"protocol.typeOfProtocol\"\r\n                                (selectionChange)=\"onProtocalSlection(protocol.typeOfProtocol)\"\r\n                                (optionSelected)=\"onProtocalSlection(protocol.typeOfProtocol)\">\r\n                                <mat-option>Please select</mat-option>\r\n                                <mat-option value=\"TCP/IP\">TCP/IP</mat-option>\r\n                                <mat-option value=\"Https/Http\">Https/Http\r\n                                </mat-option>\r\n                                <mat-option value=\"MDB\">MDB</mat-option>\r\n                                <mat-option value=\"EJB\">EJB</mat-option>\r\n                                <mat-option value=\"DB Connection\">DB Connection\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n\r\n                </div>\r\n                <div fxFlex=\"100\">\r\n                    <div fxFlex=\"10\"></div>\r\n                    <div fxFlex=\"40\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-select [(ngModel)]=\"protocol.dataType\"\r\n                                (selectionChange)=\"incomingDataypeSelection(protocol.dataType)\">\r\n                                <mat-option *ngFor=\"let data of dataType\" [value]=\"data\">{{data}}</mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n                <div fxFlex=\"100\" fxLayoutGap=\"10px\" *ngIf=\"protocol.typeOfProtocol=='MDB'\">\r\n                        <div fxFlex=\"25\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>Type of Queue</mat-label>\r\n                                      <mat-select (selectionChange)=\"onMdbIncQueue($event)\">\r\n                                          <mat-option *ngFor=\"let queue of mdbQueueInc\" [value]=\"queue\">{{queue}}</mat-option>\r\n                                      </mat-select>\r\n                                     </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngIf=\"showjsmQueue\">                    \r\n                            <div fxFlex=\"20\" >\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                       <mat-label>Queue Manager</mat-label>\r\n                                       <input matInput name=\"queueManager\" >\r\n                                    </mat-form-field>\r\n                                </div>\r\n                                <div fxFlex=\"20\" >\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                           <mat-label>Queue Name</mat-label>\r\n                                           <input matInput >\r\n                                        </mat-form-field>\r\n                                    </div>\r\n                                    <div fxFlex=\"20\" >\r\n                                            <mat-form-field appearance=\"outline\">\r\n                                               <mat-label>Channel</mat-label>\r\n                                               <input matInput>\r\n                                            </mat-form-field>\r\n                                            \r\n                                        </div>\r\n                           \r\n                                \r\n                           \r\n                     </div>\r\n                     <div fxFlex=\"100\" fxLayoutGap=\"20px\"  *ngIf=\"showibmQueue\" >\r\n                            <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                   <mat-label>Queue Manager</mat-label>\r\n                                   <input matInput name=\"queueManager\" >\r\n                                    \r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                       <mat-label>Queue Name</mat-label>\r\n                                       <input matInput name=\"queueName\"  >\r\n                                        \r\n                                    </mat-form-field>\r\n                                </div>         \r\n                                <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                           <mat-label>Connecting Factory</mat-label>\r\n                                           <input matInput name=\"connectingFactory\">\r\n                                            \r\n                                        </mat-form-field>\r\n                                    </div>\r\n                           \r\n                            </div>\r\n                            <div fxFlex=\"100\" fxLayoutGap=\"10px\" *ngIf=\"protocol.typeOfProtocol=='DB Connection'\">\r\n                                    <div fxFlex=\"25\">\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                            <mat-label>User Name</mat-label>\r\n                                            <input matInput name=\"userName\" #userName [(ngModel)]=\"incDbData.userName\">\r\n                                        </mat-form-field>\r\n                                    </div>\r\n                                    <div fxFlex=\"25\">\r\n                                            <mat-form-field appearance=\"outline\">\r\n                                                    <mat-label>Passowrd</mat-label>\r\n                                                    <input matInput name=\"password\" #password type=\"password\" [(ngModel)]=\"incDbData.password\">\r\n                                                     \r\n                                                 </mat-form-field>\r\n                                    </div>\r\n                                    <div fxFlex=\"25\">\r\n                                            <mat-form-field appearance=\"outline\">\r\n                                                    <mat-label>Data Base Name</mat-label>\r\n                                                    <input matInput name=\"DBname\" #dbName [(ngModel)]=\"incDbData.dataBaseName\"> \r\n                                                 </mat-form-field>\r\n                                    </div>\r\n                                    <div fxFlex=\"25\">\r\n                                            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                                                    <mat-label>Connecting String</mat-label>\r\n                                                    <textarea matInput [(ngModel)]=\"incDbData.connectiongstring\" name=\"connectingString\" #connectingSgtring></textarea>\r\n                                                  </mat-form-field>\r\n                                    </div>\r\n                                </div>\r\n                <div fxFlex=\"100\">\r\n                    <div fxFlex=\"50\" fxLayoutGap=\"20px\">\r\n                        <button mat-raised-button (click)=\"nextOfAllInc(protocol)\" color=\"primary\">Next</button>\r\n                        <button mat-raised-button (click)=\"previousOfIncoming()\" color=\"accent\">Previous</button>\r\n                        <button mat-raised-button (click)=\"onResetIncoming(protocol)\" color=\"warn\">Reset</button>\r\n                    </div>\r\n                </div>\r\n              \r\n            </div>\r\n        </mat-card>\r\n        <!-- Tcp Incoming -->\r\n        <mat-card *ngIf=\"showAllIncTcp\">\r\n            <div fxLayout=\"row wrap\" *ngFor=\"let incTcp of incomingMessageConfigurationTcp\">\r\n                <div fxFlex=\"100\" fxLayoutGap=\"10px\">\r\n                    <div fxFlex=\"20\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Field No</mat-label>\r\n\r\n                            <input matInput name=\"fieldNo\" #fieldNo fieldNo=\"ngModel\" [(ngModel)]=\"incTcp.fieldNo\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"20\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Field Name</mat-label>\r\n                            <input matInput name=\"fieldName\" #fieldName fieldName=\"ngModel\"\r\n                                [(ngModel)]=\"incTcp.fieldName\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"20\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Data Type</mat-label>\r\n                            <mat-select name=\"dataType\" #dataType dataType=\"ngModel\" [(ngModel)]=\"incTcp.dataType\">\r\n\r\n                                <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                <mat-option value=\"date\">Date</mat-option>\r\n\r\n                            </mat-select>\r\n\r\n\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"20\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Default Value</mat-label>\r\n                            <input matInput name=\"defaultValue\" #defaultValue defaultValue=\"ngModel\"\r\n                                [(ngModel)]=\"incTcp.defaultValue\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"20\">\r\n                        <button mat-raised-button (click)=\"deleteOfTCP(i)\" color=\"primary\">\r\n                            <mat-icon>delete</mat-icon>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\">\r\n                    <div fxFlex=\"25\">\r\n                        <button mat-raised-button (click)=\"addIncomingTcp()\" color=\"primary\">\r\n                            <mat-icon>add</mat-icon>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </mat-card>\r\n        <!-- Http Xml Inc All -->\r\n        <mat-card *ngIf=\"showAllIncHttpXml\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"20\">\r\n                \r\n                \r\n                            <div fxFlex=\"50\">\r\n                                <input type=\"file\" id=\"chFile\" (change)=\"fileuploadHttpXMlInc($event)\">\r\n                                <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                                    <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n                                </button>\r\n                \r\n                            </div>\r\n                \r\n                \r\n                \r\n                        </div>\r\n                \r\n                    </div>\r\n                    <div fxLayout=\"row wrap\" *ngFor=\"let xmlhttpInc of incHttpXMl\">\r\n                            <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n                                <div fxFlex=\"20\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>Node</mat-label>\r\n                                        <input matInput name=\"node\" #node #node=\"ngModel\" [(ngModel)]=\"xmlhttpInc.node\">\r\n                                    </mat-form-field>\r\n                                </div>\r\n                                <div fxFlex=\"20\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>Tag Name</mat-label>\r\n                                        <input matInput name=\"tagName\" #tagName #tagName=\"ngModel\" [(ngModel)]=\"xmlhttpInc.tagName\">\r\n                                    </mat-form-field>\r\n                                </div>\r\n                                <div fxFlex=\"20\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>Data Type</mat-label>\r\n                                        <mat-select name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"xmlhttpInc.dataType\">\r\n                    \r\n                                            <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                            <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                            <mat-option value=\"date\">Date</mat-option>\r\n                    \r\n                                        </mat-select>\r\n                                    </mat-form-field>\r\n                                </div>\r\n                                <div fxFlex=\"20\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>Default Value</mat-label>\r\n                                        <input matInput name=\"defaultValue\" #defaultValue #defaultValue=\"ngModel\"\r\n                                            [(ngModel)]=\"xmlhttpInc.defaultValue\">\r\n                                    </mat-form-field>\r\n                                </div>\r\n                                <div fxFlex=\"10\">\r\n                                    <button mat-raised-button (click)=\"deleteIncHttpXml(i)\" color=\"primary\">\r\n                                        <mat-icon>delete</mat-icon>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div fxLayout=\"row wrap\">\r\n                            <div fxFlex=\"100\">\r\n                                <div fxFlex=\"30\">\r\n                                    <button mat-raised-button (click)=\"addIncHttpXMl()\" color=\"primary\">\r\n                                        <mat-icon>add</mat-icon>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n        </mat-card>\r\n        <!-- Http Json Inc All -->\r\n        <mat-card *ngIf=\"showAllIncHttpJosn\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\" *ngFor=\"let incomingHttpJson of incHttpJson; let i = index;\" fxLayoutGap=\"20px\">\r\n                            <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Key</mat-label>\r\n                \r\n                                    <input matInput name=\"node\" #node #node=\"ngModel\" [(ngModel)]=\"incomingHttpJson.key\">\r\n                                </mat-form-field>\r\n                            </div>\r\n                \r\n                            <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Data Type</mat-label>\r\n                \r\n                                    <mat-select name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"incomingHttpJson.dataType\">\r\n                \r\n                                        <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                        <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                        <mat-option value=\"date\">Date</mat-option>\r\n                \r\n                                    </mat-select>\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Default Value</mat-label>\r\n                                    <input matInput name=\"type\" #defaultValue #defaultValue=\"ngModel\"\r\n                                        [(ngModel)]=\"incomingHttpJson.deafultValue\">\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\">\r\n                                <button mat-raised-button (click)=\"deleteIncHttpJson(i)\" color=\"primary\">\r\n                                    <mat-icon>delete</mat-icon>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"30\">\r\n                                <button mat-raised-button (click)=\"addIncHttpJson()\" color=\"primary\">\r\n                                    <mat-icon>add</mat-icon>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        </mat-card>\r\n        <!-- Mdb XMl Inc All -->\r\n        <mat-card *ngIf=\"showAllIncMdbXml\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"20\">\r\n                            <div fxFlex=\"50\">\r\n                                <input type=\"file\" id=\"chFile\" (change)=\"fileuploadHttpXMlInc($event)\">\r\n                                <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                                    <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"10px\" *ngFor=\"let xmlMdbInc of incMDBXML;let i=index\">\r\n                            <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Node</mat-label>\r\n                                    <input matInput name=\"node\" #node #node=\"ngModel\" [(ngModel)]=\"xmlMdbInc.node\">\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>TagName</mat-label>\r\n                                    <input matInput name=\"tagName\" #tagName #tagName=\"ngModel\" [(ngModel)]=\"xmlMdbInc.tagName\">\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Data Type</mat-label>\r\n                                    <mat-select name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"xmlMdbInc.dataType\">\r\n                                        <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                        <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                        <mat-option value=\"date\">Date</mat-option>\r\n                                    </mat-select>\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Default Value</mat-label>\r\n                                    <input matInput name=\"defaultValue\" #defaultValue #defaultValue=\"ngModel\"\r\n                                        [(ngModel)]=\"xmlMdbInc.defaultValue\">\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"10\">\r\n                                <button mat-raised-button (click)=\"deleteMdbXmlInc(i)\" color=\"primary\">\r\n                                    <mat-icon>delete</mat-icon>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"30\">\r\n                                <button mat-raised-button (click)=\"addMdbXMlInc()\" color=\"primary\">\r\n                                    <mat-icon>add</mat-icon>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        </mat-card>\r\n        <!-- Mdb Jsn Inc All -->\r\n        <mat-card *ngIf=\"showAllIncMdbJson\">\r\n            \r\n    <div fxLayout=\"row wrap\">\r\n            <div fxFlex=\"100\" *ngFor=\"let mdbJsonInc of incMdbJson;let i=index\" fxLayoutGap=\"20px\">\r\n                <div fxFlex=\"20\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Key</mat-label>\r\n                        <input matInput name=\"key\" #key #key=\"ngModel\" [(ngModel)]=\"mdbJsonInc.key\">\r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxFlex=\"20\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Data Type</mat-label>\r\n                        <mat-select name=\"dataType\" #dataType dataType=\"ngModel\" [(ngModel)]=\"mdbJsonInc.dataType\">\r\n    \r\n                            <mat-option value=\"numeric\">Numeric</mat-option>\r\n                            <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                            <mat-option value=\"date\">Date</mat-option>\r\n    \r\n                        </mat-select>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxFlex=\"20\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Default Value</mat-label>\r\n                        <input matInput name=\"defaultValue\" #defaultValue #defaultValue=\"ngModel\"\r\n                            [(ngModel)]=\"mdbJsonInc.defaultValue\">\r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxFlex=\"20\">\r\n                    <button mat-raised-button (click)=\"deleteMdbJsonInc(i)\" color=\"primary\">\r\n                        <mat-icon>delete</mat-icon>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div fxLayout=\"row wrap\">\r\n            <div fxFlex=\"100\">\r\n                <div fxFlex=\"30\">\r\n                    <button mat-raised-button (click)=\"addMdbJsonInc()\" color=\"primary\">\r\n                        <mat-icon>add</mat-icon>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </mat-card>\r\n        <!-- MDB CSv Inc All -->\r\n        <mat-card *ngIf=\"showAllIncMdbCsv\"> \r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"40\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Folder Name</mat-label>\r\n                                    <input matInput>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        </mat-card>\r\n        <!-- Mdb Excel Inc All -->\r\n        <mat-card *ngIf=\"showAllIncMdbFlat\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"40\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Folder Name</mat-label>\r\n                                    <input matInput>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        </mat-card>\r\n        <!-- Ejb Xml Inc All -->\r\n        <mat-card *ngIf=\"showAllIncEjbXml\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"20\">\r\n                            <div fxFlex=\"50\">\r\n                                <input type=\"file\" id=\"chFile\" (change)=\"fileuploadHttpXMlInc($event)\">\r\n                                <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                                    <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\" *ngFor=\"let ejbxmlInc of incEjbXMl\" fxLayoutGap=\"20px\">\r\n                            <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Node</mat-label>\r\n                \r\n                                    <input matInput name=\"node\" #node #node=\"ngModel\" [(ngModel)]=\"ejbxmlInc.node\">\r\n                \r\n                                </mat-form-field>\r\n                            </div>\r\n                \r\n                            <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Tag Name</mat-label>\r\n                \r\n                                    <input matInput name=\"tagName\" #tagName #tagName=\"ngModel\" [(ngModel)]=\"ejbxmlInc.tagName\">\r\n                \r\n                                </mat-form-field>\r\n                            </div>\r\n                \r\n                \r\n                \r\n                            <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-select name=\"datatype\" #datatype #datatype=\"ngModel\" [(ngModel)]=\"ejbxmlInc.dataType\">\r\n                \r\n                                        <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                        <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                        <mat-option value=\"date\">Date</mat-option>\r\n                \r\n                                    </mat-select>\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Default Value</mat-label>\r\n                \r\n                                    <input matInput name=\"tagvalue\" #tagvalue #tagvalue=\"ngModel\" [(ngModel)]=\"ejbxmlInc.tagvalue\">\r\n                \r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\">\r\n                                <button mat-raised-button (click)=\"deleteEjbXmlInc(i)\" color=\"primary\">\r\n                                    <mat-icon>delete</mat-icon>\r\n                                </button>\r\n                            </div>\r\n                \r\n                \r\n                        </div>\r\n                    </div>\r\n                    <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"30\">\r\n                                <button mat-raised-button (click)=\"addEjbXMlInc()\" color=\"primary\">\r\n                                    <mat-icon>add</mat-icon>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n        </mat-card>\r\n        <!-- Ejb  Json Inc All -->\r\n        <mat-card *ngIf=\"showAllIncEjbJson\">\r\n                <div fxLayout=\"row wrap\" fxLayoutGap=\"20px\">\r\n                        <div fxFlex=\"100\" *ngFor=\"let ejbinJosn of incEjbJson\" fxLayoutGap=\"20px\">\r\n                            <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Key</mat-label>\r\n            \r\n                                    <input matInput name=\"key\" #key=\"ngModel\" [(ngModel)]=\"ejbinJosn.key\">\r\n            \r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-select name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"ejbinJosn.dataType\">\r\n            \r\n                                        <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                        <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                        <mat-option value=\"date\">Date</mat-option>\r\n            \r\n                                    </mat-select>\r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Default Value</mat-label>\r\n            \r\n                                    <input matInput name=\"defaultValue\" #defaultValue #defaultValue=\"ngModel\"\r\n                                        [(ngModel)]=\"ejbinJosn.defaultValue\">\r\n            \r\n                                </mat-form-field>\r\n                            </div>\r\n            \r\n            \r\n                            <div fxFlex=\"20\">\r\n                                <button mat-raised-button (click)=\"deleteIncEjbJson(i)\" color=\"primary\">\r\n                                    <mat-icon>delete</mat-icon>\r\n                                </button>\r\n                            </div>\r\n            \r\n            \r\n                        </div>\r\n                    </div>\r\n            \r\n                    <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"30\">\r\n                                    <button mat-raised-button (click)=\"addIncEjbJson()\" color=\"primary\">\r\n                                            <mat-icon>add</mat-icon>\r\n                                        </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        </mat-card>\r\n        <!-- Ejb CSV Inc All -->\r\n        <mat-card *ngIf=\"showAllIncEjbCsv\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"40\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Folder Name</mat-label>\r\n                                    <input matInput>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        </mat-card>\r\n        <!-- Ejb Flat Inc All -->\r\n        <mat-card *ngIf=\"showAllIncEjbFlat\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"40\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Folder Name</mat-label>\r\n                                    <input matInput>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        </mat-card>\r\n        <!-- Db connection Inc Xml -->\r\n        <mat-card *ngIf=\"showAllIncDbXml\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"20\">\r\n                            <div fxFlex=\"50\">\r\n                                <input type=\"file\" id=\"chFile\" (change)=\"fileuploadHttpXMlInc($event)\">\r\n                                <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                                    <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                \r\n                    </div>\r\n        <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n        <div fxFlex=\"40\">\r\n                <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Table Name</mat-label>\r\n                        <input matInput name=\"tableName\"\r\n                        (keyup)=\"onsearchingTablName($event)\" [matAutocomplete]=\"autotablName\">\r\n                        <mat-autocomplete #autotablName=\"matAutocomplete\" \r\n                        (optionSelected)=\"gettingColumnNameForIncoming($event)\">\r\n                       <mat-option *ngFor=\"let tabname of incDbRecords\" [value]=\"tabname\">\r\n                            {{tabname}}\r\n                        </mat-option>\r\n                        </mat-autocomplete>\r\n                      </mat-form-field>\r\n        </div>\r\n        </div>\r\n        </div>\r\n        <!-- Columns -->\r\n        <div fxLayout=\"row wrap\"  *ngIf=\"coulmnNameBasedonTanbleName &&coulmnNameBasedonTanbleName.length\">\r\n                <div fxFlex=\"100\" *ngFor=\"let column of colRowForDbInc;let i=index\" fxLayoutGap=\"20px\">\r\n                    <div fxFlex=\"30\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Column Name</mat-label>\r\n                            <mat-select>\r\n                                <mat-option *ngFor=\"let col of column\" [value]=\"col\">\r\n                                    {{col}}\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"30\">\r\n                            \r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Data Type</mat-label>\r\n                                        <mat-select\r\n                                        name=\"dataType\"\r\n                                        >\r\n                                        \r\n                                         <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                         <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                         <mat-option value=\"date\">Date</mat-option>\r\n                                        \r\n                                     </mat-select>\r\n                                    </mat-form-field>\r\n                            \r\n                        </div>\r\n                        <div fxFlex=\"30\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                <mat-label>Default Value</mat-label>\r\n                                <input matInput >\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div fxFlex=\"30\">\r\n                                <button mat-raised-button (click)=\"deleteDbXInc(i)\" color=\"primary\">\r\n                                        <mat-icon>remove</mat-icon>\r\n                                    </button>\r\n                        </div>\r\n                       \r\n                </div>\r\n              <div fxFlex=\"100\">\r\n                    <button mat-raised-button (click)=\"onAddingrowsForDbInc(i)\" color=\"primary\">\r\n                            <mat-icon>add</mat-icon>\r\n                        </button>\r\n              </div>\r\n                      \r\n            </div>\r\n        </mat-card>\r\n        <!-- Db connection Inc Json -->\r\n        <mat-card *ngIf=\"showAllIncDbJson\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                        <div fxFlex=\"40\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>Table Name</mat-label>\r\n                                        <input matInput name=\"tableName\"\r\n                                        (keyup)=\"onsearchingTablName($event)\" [matAutocomplete]=\"autotablName\">\r\n                                        <mat-autocomplete #autotablName=\"matAutocomplete\" \r\n                                        (optionSelected)=\"gettingColumnNameForIncoming($event)\">\r\n                                       <mat-option *ngFor=\"let tabname of incDbRecords\" [value]=\"tabname.tableName\">\r\n                                            {{tabname.tableName}}\r\n                                        </mat-option>\r\n                                        </mat-autocomplete>\r\n                                      </mat-form-field>\r\n                        </div>\r\n                        </div>\r\n                        </div>\r\n                        <!-- Columns -->\r\n                        <div fxLayout=\"row wrap\"  *ngIf=\"coulmnNameBasedonTanbleName &&coulmnNameBasedonTanbleName.length\">\r\n                                <div fxFlex=\"100\" *ngFor=\"let column of coulmnNameBasedonTanbleName;let i=index\" fxLayoutGap=\"20px\">\r\n                                    <div fxFlex=\"30\">\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                            <mat-label>Column Name</mat-label>\r\n                                            <mat-select>\r\n                                                <mat-option *ngFor=\"let col of column\" [value]=\"col\">\r\n                                                    {{col}}\r\n                                                </mat-option>\r\n                                            </mat-select>\r\n                                        </mat-form-field>\r\n                                    </div>\r\n                                    <div fxFlex=\"30\">\r\n                                            \r\n                                                <mat-form-field appearance=\"outline\">\r\n                                                    <mat-label>Data Type</mat-label>\r\n                                                        <mat-select\r\n                                                        name=\"dataType\"\r\n                                                        >\r\n                                                        \r\n                                                         <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                                         <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                                         <mat-option value=\"date\">Date</mat-option>\r\n                                                        \r\n                                                     </mat-select>\r\n                                                    </mat-form-field>\r\n                                            \r\n                                        </div>\r\n                                        <div fxFlex=\"30\">\r\n                                            <mat-form-field appearance=\"outline\">\r\n                                                <mat-label>Default Value</mat-label>\r\n                                                <input matInput >\r\n                                            </mat-form-field>\r\n                                        </div>\r\n                                </div>\r\n                            </div>\r\n        </mat-card>\r\n        <!-- Db connection Inc csv -->\r\n        <mat-card *ngIf=\"showAllIncDbCsv\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"40\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Folder Name</mat-label>\r\n                                    <input matInput>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        </mat-card>\r\n        <!-- Db connection Inc Flat -->\r\n        <mat-card *ngIf=\"showAllIncDbFalt\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"40\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Folder Name</mat-label>\r\n                                    <input matInput>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        </mat-card>\r\n    </mat-tab>\r\n    <mat-tab label=\"Outgoing\">\r\n        <mat-card *ngIf=\"showAllProtocolOut\">\r\n            <h5>OutGoing Message Header Configuration({{protocoloutGoing}}&nbsp;{{dataTypeOutgoing}} )</h5>\r\n            <div fxLayout=\"row wrap\" *ngFor=\"let protocolOut of outgoingIntegrationProtocol\">\r\n\r\n                <div fxFlex=\"100\">\r\n                    <div fxFlex=\"20\"></div>\r\n                    <div fxFlex=\"50\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-select #protocolRef [(ngModel)]=\"protocolOut.typeOfProtocol\"\r\n                                (selectionChange)=\"onOutgoingProtocolSelction($event.value)\">\r\n                                <mat-option>Please select</mat-option>\r\n                                <mat-option value=\"TCP/IP\">TCP/IP</mat-option>\r\n                                <mat-option value=\"Https/Http\">Https/Http\r\n                                </mat-option>\r\n                                <mat-option value=\"MDB\">MDB</mat-option>\r\n                                <mat-option value=\"EJB\">EJB</mat-option>\r\n                                <mat-option value=\"DB Connection\">DB Connection\r\n                                </mat-option>\r\n\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div fxFlex=\"100\">\r\n                    <div fxFlex=\"20\"></div>\r\n                    <div fxFlex=\"50\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-select [(ngModel)]=\"protocolOut.dataType\"\r\n                                (selectionChange)=\"onDataTypeOFOutgoingProtocol($event.value)\">\r\n                                <mat-option *ngFor=\"let data of dataTypeForOutGoing\" [value]=\"data\">{{data}}\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n\r\n                </div>\r\n                <div fxFlex=\"100\" fxLayoutGap=\"10px\" *ngIf=\"protocolOut.typeOfProtocol=='MDB'\">\r\n                        <div fxFlex=\"25\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>Type of Queue</mat-label>\r\n                                      <mat-select (selectionChange)=\"onMdbQueueOut($event)\">\r\n                                          <mat-option *ngFor=\"let queue of mdbQueueInc\" [value]=\"queue\">{{queue}}</mat-option>\r\n                                      </mat-select>\r\n                                     </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngIf=\"showjsmQueueOut\">                    \r\n                            <div fxFlex=\"20\" >\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                       <mat-label>Queue Manager</mat-label>\r\n                                       <input matInput name=\"queueManager\" >\r\n                                    </mat-form-field>\r\n                                </div>\r\n                                <div fxFlex=\"20\" >\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                           <mat-label>Queue Name</mat-label>\r\n                                           <input matInput >\r\n                                        </mat-form-field>\r\n                                    </div>\r\n                                    <div fxFlex=\"20\" >\r\n                                            <mat-form-field appearance=\"outline\">\r\n                                               <mat-label>Channel</mat-label>\r\n                                               <input matInput>\r\n                                            </mat-form-field>\r\n                                            \r\n                                        </div>\r\n                           \r\n                                \r\n                           \r\n                     </div>\r\n                     <div fxFlex=\"100\" fxLayoutGap=\"20px\"  *ngIf=\"showibmQueueOut\" >\r\n                            <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                   <mat-label>Queue Manager</mat-label>\r\n                                   <input matInput name=\"queueManager\" >\r\n                                    \r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                       <mat-label>Queue Name</mat-label>\r\n                                       <input matInput name=\"queueName\"  >\r\n                                        \r\n                                    </mat-form-field>\r\n                                </div>         \r\n                                <div fxFlex=\"20\" fxLayoutGap=\"20px\">\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                           <mat-label>Connecting Factory</mat-label>\r\n                                           <input matInput name=\"connectingFactory\">\r\n                                            \r\n                                        </mat-form-field>\r\n                                    </div>\r\n                           \r\n                            </div>\r\n                            <div fxFlex=\"100\" fxLayoutGap=\"10px\" *ngIf=\"protocolOut.typeOfProtocol=='DB Connection'\">\r\n                                    <div fxFlex=\"25\">\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                            <mat-label>User Name</mat-label>\r\n                                            <input matInput name=\"userName\" #userName [(ngModel)]=\"incDbData.userName\">\r\n                                        </mat-form-field>\r\n                                    </div>\r\n                                    <div fxFlex=\"25\">\r\n                                            <mat-form-field appearance=\"outline\">\r\n                                                    <mat-label>Passowrd</mat-label>\r\n                                                    <input matInput name=\"password\" #password type=\"password\" [(ngModel)]=\"incDbData.password\">\r\n                                                     \r\n                                                 </mat-form-field>\r\n                                    </div>\r\n                                    <div fxFlex=\"25\">\r\n                                            <mat-form-field appearance=\"outline\">\r\n                                                    <mat-label>Data Base Name</mat-label>\r\n                                                    <input matInput name=\"DBname\" #dbName [(ngModel)]=\"incDbData.dataBaseName\"> \r\n                                                 </mat-form-field>\r\n                                    </div>\r\n                                    <div fxFlex=\"25\">\r\n                                            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                                                    <mat-label>Connecting String</mat-label>\r\n                                                    <textarea matInput [(ngModel)]=\"incDbData.connectiongstring\" name=\"connectingString\" #connectingSgtring></textarea>\r\n                                                  </mat-form-field>\r\n                                    </div>\r\n                                </div>\r\n                <div fxFlex=\"100\">\r\n                    <div fxFlex=\"50\" fxLayoutGap=\"20px\">\r\n                        <button mat-raised-button (click)=\"nextOfAllout(protocolOut)\" color=\"primary\">Next</button>\r\n                        <!-- <button mat-raised-button (click)=\"previousOfOutgoing()\" color=\"accent\">Previous</button> -->\r\n                        <button mat-raised-button (click)=\"previousStep()\" *ngIf=\"createExtSys1.openToMessage=='All' \" color=\"accent\">Back</button>\r\n                        <button mat-raised-button (click)=\"onResetingOutgoing(protocolOut)\" color=\"warn\">Reset</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </mat-card>\r\n        <!-- All out Tcp -->\r\n        <mat-card *ngIf=\"showAllTcpOut\">\r\n            <div fxLayout=\"row wrap\" *ngFor=\"let outTcp of outgoingMessageConfigurationTcp; let i = index;\">\r\n                <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n                    <div fxFlex=\"20\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Field No</mat-label>\r\n\r\n                            <input matInput name=\"fieldNo\" #fieldNo fieldNo=\"ngModel\" [(ngModel)]=\"outTcp.fieldNo\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"20\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Field Name</mat-label>\r\n                            <input matInput name=\"fieldName\" #fieldName fieldName=\"ngModel\"\r\n                                [(ngModel)]=\"outTcp.fieldName\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"20\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Data Type</mat-label>\r\n                            <mat-select name=\"dataType\" #dataType dataType=\"ngModel\" [(ngModel)]=\"outTcp.dataType\">\r\n\r\n                                <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                <mat-option value=\"date\">Date</mat-option>\r\n\r\n                            </mat-select>\r\n\r\n\r\n                        </mat-form-field>\r\n\r\n                    </div>\r\n                    <div fxFlex=\"20\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Default Value</mat-label>\r\n                            <input matInput name=\"type\" #fieldDefault fieldDefault=\"ngModel\"\r\n                                [(ngModel)]=\"outTcp.fieldDefault\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"20\">\r\n                        <button mat-raised-button (click)=\"deleteOutgoingTcp(i)\" color=\"primary\">\r\n                            <mat-icon>delete</mat-icon>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\">\r\n                    <div fxFlex=\"30\">\r\n                        <button mat-raised-button (click)=\"addoutgoingTCP()\" color=\"primary\">\r\n                            <mat-icon>add</mat-icon>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </mat-card>\r\n        <!-- All out http xml -->\r\n        <mat-card *ngIf=\"showAllHttpXmlOut\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"20\">\r\n                            <div fxFlex=\"50\">\r\n                                <input type=\"file\" id=\"chFile\" (change)=\"fileuploadHttpXMlInc($event)\">\r\n                                <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                                    <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div fxLayout=\"row wrap\" *ngFor=\"let outxmlHttp of outHttpXml\">\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"10px\">\r\n                            <div fxFlex=\"20\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                            <mat-label>Node</mat-label>\r\n                                            <input matInput name=\"node\" #node #node=\"ngModel\"[(ngModel)]=\"outxmlHttp.node\">\r\n                                        </mat-form-field>\r\n        \r\n                            </div>\r\n                            <div fxFlex=\"20\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                            <mat-label>Tag Name</mat-label>\r\n                                            <input matInput name=\"tagName\"#tagName #tagName=\"ngModel\"[(ngModel)]=\"outxmlHttp.tagName\">\r\n                                        </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                            <mat-label>Data Type</mat-label>\r\n                                            <mat-select \r\n                                            name=\"dataType\" #dataType #dataType=\"ngModel\"[(ngModel)]=\"outxmlHttp.dataType\"\r\n                                           >\r\n                                            <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                            <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                            <mat-option value=\"date\">Date</mat-option>    \r\n                                        </mat-select>\r\n                                        </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\">\r\n                                    <mat-form-field appearance=\"outline\">  \r\n                                            <mat-label>Default Value</mat-label>\r\n                                            <input matInput name=\"defaultValue\" #defaultValue #defaultValue=\"ngModel\"[(ngModel)]=\"outxmlHttp.defaultValue\">\r\n                                        </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"10\">\r\n                                \r\n                                <button mat-raised-button (click)=\"deleteIncHttpXml(i)\" color=\"primary\">\r\n                                        <mat-icon>delete</mat-icon>\r\n                                    </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"10\">\r\n                        <button mat-raised-button (click)=\"addIncHttpXMl()\" color=\"primary\">\r\n                                <mat-icon>add</mat-icon>\r\n                            </button>\r\n                            </div>\r\n                    </div>\r\n        </mat-card>\r\n        <!-- All out http json -->\r\n        <mat-card *ngIf=\"showAllHttpJsonOut\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngFor=\"let outgoingHttpJSon of outHttpJson; let i = index;\">\r\n                                             \r\n                            <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                   <mat-label>key</mat-label>\r\n                                  \r\n                                    <input matInput #key #key=\"ngModel\" name=\"key\" [(ngModel)]=\"outgoingHttpJSon.key\">\r\n                                </mat-form-field>\r\n                            </div>\r\n                         \r\n                                <div fxFlex=\"20\">\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                                <mat-label>Data Type</mat-label>\r\n                                                <mat-select\r\n                                                #dataType #dataType=\"ngModel\" name=\"dataType\" [(ngModel)]=\"outgoingHttpJSon.dataType\"\r\n                                                >\r\n                                                \r\n                                                 <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                                 <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                                 <mat-option value=\"date\">Date</mat-option>\r\n                                                \r\n                                             </mat-select>\r\n                                                 \r\n                                             </mat-form-field>\r\n                                    </div>\r\n                                    <div fxFlex=\"20\">\r\n                                          <mat-form-field appearance=\"outline\">\r\n                                             <mat-label>Default Value</mat-label>\r\n                                            \r\n                                              <input matInput #defaultValue #defaultValue=\"ngModel\" name=\"defaultValue\" [(ngModel)]=\"outgoingHttpJSon.defaultValue\">\r\n                                          </mat-form-field>\r\n                                      </div>\r\n                                    \r\n                                        <div fxFlex=\"20\">\r\n                                               <button mat-raised-button (click)=\"deleteOutHttpJson(i)\" color=\"primary\"><mat-icon>delete</mat-icon></button>\r\n                                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                                <button mat-raised-button (click)=\"addOutHttpJosn()\" color=\"primary\">\r\n                                        <mat-icon>add</mat-icon>\r\n                                    </button>\r\n                        </div>\r\n                    </div>\r\n        </mat-card>\r\n        <!-- All Mdb XMl out -->\r\n        <mat-card *ngIf=\"showAllMdbXmlOut\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"20\">\r\n                            <div fxFlex=\"50\">\r\n                                <input type=\"file\" id=\"chFile\" (change)=\"fileuploadHttpXMlInc($event)\">\r\n                                <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                                    <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div fxLayout=\"row wrap\" >\r\n                            <div fxFlex=\"100\" *ngFor=\"let mdboutxml of outMdbXml;let i=index\" fxLayoutGap=\"20px\">\r\n                                <div fxFlex=\"20\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                       <mat-label>Node</mat-label>\r\n                                        <input matInput #node name=\"node\" #node=\"ngModel\" [(ngModel)]=\"mdboutxml.node\">\r\n                                    </mat-form-field>\r\n                                </div>\r\n                                <div fxFlex=\"20\">\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                                <mat-label>TagName</mat-label>\r\n                                                <input matInput #tagName name=\"tagName\" #tagName=\"ngModel\" [(ngModel)]=\"mdboutxml.tagName\">\r\n                                             </mat-form-field>\r\n                                    </div>\r\n                                    <div fxFlex=\"20\">\r\n                                            <mat-form-field appearance=\"outline\">\r\n                                                    <mat-label>Data Type</mat-label>\r\n                                                    <mat-select\r\n                                                    #dataType name=\"dataType\" #dataType=\"ngModel\" [(ngModel)]=\"mdboutxml.dataType\"\r\n                                                   > <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                                    <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                                    <mat-option value=\"date\">Date</mat-option>\r\n                                                </mat-select>\r\n                                                 </mat-form-field>\r\n                                    </div>\r\n                                    <div fxFlex=\"20\">\r\n                                            <mat-form-field appearance=\"outline\">\r\n                                                    <mat-label>Default Value</mat-label>\r\n                                                    <input matInput #tagDefault name=\"tagDefault\" #tagDefault=\"ngModel\" [(ngModel)]=\"mdboutxml.tagDefault\">\r\n                                                 </mat-form-field>\r\n                                    </div>\r\n                                    <div fxFlex=\"20\">   \r\n                                            <button mat-raised-button (click)=\"deleteoutMdbXml(i)\" color=\"primary\"><mat-icon>delete</mat-icon></button>\r\n        \r\n                                    </div>\r\n                            </div>\r\n                            <div fxLayout=\"row wrap\">\r\n                                    <div fxFlex=\"100\">\r\n                                        <div fxLayoutAlign=\"center stretch\">\r\n                                            <button mat-raised-button (click)=\"addoutMdbXMl()\" color=\"primary\"><mat-icon>add</mat-icon></button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                        </div>\r\n        </mat-card>\r\n        <!-- All mdb json out -->\r\n        <mat-card *ngIf=\"showAllMdbJsonOut\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngFor=\"let mdbJsonOut of outMdbJson\">\r\n                                <div fxFlex=\"20\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>key</mat-label>\r\n                                        <input matInput type=\"text\" name=\"key\" [(ngModel)]=\"mdbJsonOut.key\" #key #key=\"ngModel\"> \r\n                                    </mat-form-field>\r\n                                </div>\r\n                                <div fxFlex=\"20\">\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                                <mat-label>Data Type</mat-label>\r\n                                                <mat-select\r\n                                                name=\"dataType\" [(ngModel)]=\"mdbJsonOut.dataType\" #dataType #dataType=\"ngModel\"\r\n                                               >\r\n                                               \r\n                                                <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                                <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                                <mat-option value=\"date\">Date</mat-option>\r\n                                               \r\n                                            </mat-select>\r\n                                             </mat-form-field>\r\n                                    </div>\r\n                                <div fxFlex=\"20\">\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                            <mat-label>Default Value</mat-label>\r\n                                            <input matInput type=\"text\" name=\"defaultValue\" [(ngModel)]=\"mdbJsonOut.defaultValue\" #defaultValue #defaultValue=\"ngModel\"> \r\n                                        </mat-form-field>\r\n                                    </div>\r\n                                   \r\n                                        <div fxFlex=\"20\">   \r\n                                                <button mat-raised-button (click)=\"deleteMdbJsonOut(i)\" color=\"primary\"><mat-icon>delete</mat-icon></button>\r\n                \r\n                                        </div>\r\n                            </div>\r\n                        </div>\r\n                            <div fxLayout=\"row wrap\">\r\n                                <div fxFlex=\"100\">\r\n                                    <div fxFlex=\"30\">\r\n                                            <button mat-raised-button (click)=\"addoutMdbJosn()\" color=\"primary\"><mat-icon>add</mat-icon></button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n        </mat-card>\r\n        <!-- All Mdb csv out -->\r\n        <mat-card *ngIf=\"showAllMdbCsvOut\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"40\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Folder Name</mat-label>\r\n                                    <input matInput>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        </mat-card>\r\n        <!-- All mdb out excel -->\r\n\r\n        <mat-card *ngIf=\"showAllMdbExcelOut\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"40\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Folder Name</mat-label>\r\n                                    <input matInput>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        </mat-card>\r\n        <!-- All ejb out Excel -->\r\n        <mat-card *ngIf=\"showAllEjbExcelOut\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"40\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Folder Name</mat-label>\r\n                                    <input matInput>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        </mat-card>\r\n        <!-- All ejb XMl out -->\r\n        <mat-card *ngIf=\"showAllEjbXmlOut\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"20\">\r\n                                <div fxFlex=\"50\">\r\n                                    <input type=\"file\" id=\"chFile\" (change)=\"fileuploadHttpXMlInc($event)\">\r\n                                    <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                                        <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                            <div fxLayout=\"row wrap\" >\r\n                                    <div fxFlex=\"100\" *ngFor=\"let ejboutxml of outEjbXml;let i=index\" fxLayoutGap=\"20px\">\r\n                                            <div fxFlex=\"20\">\r\n                                                    <mat-form-field appearance=\"outline\">\r\n                                                       <mat-label>Node</mat-label>\r\n                                                       <input matInput name=\"node\" #node node=\"ngModel\" [(ngModel)]=\"ejboutxml.node\">\r\n                                                        \r\n                                                    </mat-form-field>\r\n                                                </div>\r\n                                                <div fxFlex=\"20\">\r\n                                                        <mat-form-field appearance=\"outline\">\r\n                                                           <mat-label>Tag Name</mat-label>\r\n                                                           <input matInput name=\"tagName\" #tagName tagName=\"ngModel\" [(ngModel)]=\"ejboutxml.tagName\">\r\n                                                            \r\n                                                        </mat-form-field>\r\n                                                    </div>\r\n                                                <div fxFlex=\"20\">\r\n                                                        <mat-form-field appearance=\"outline\">\r\n                                                             <mat-label>Data Type</mat-label>\r\n                                                             <mat-select\r\n                                                             name=\"node\" #dataType dataType=\"ngModel\" [(ngModel)]=\"ejboutxml.dataType\"\r\n                                                            >\r\n                                                            \r\n                                                             <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                                             <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                                             <mat-option value=\"date\">Date</mat-option>\r\n                                                            \r\n                                                         </mat-select>\r\n                                                        </mat-form-field>\r\n                                                     </div>\r\n                                                        <div fxFlex=\"20\">\r\n                                                                <mat-form-field appearance=\"outline\">\r\n                                                                   <mat-label>Default Value</mat-label>\r\n                                                                   <input matInput name=\"tagvalue\" #tagvalue tagvalue=\"ngModel\" [(ngModel)]=\"ejboutxml.tagvalue\">\r\n                                                                    \r\n                                                                </mat-form-field>\r\n                                                            </div>\r\n                                                            \r\n                                            <div fxFlex=\"20\">   \r\n                                                    <button mat-raised-button (click)=\"deleteOutEjbXml(i)\" color=\"primary\"><mat-icon>delete</mat-icon></button>\r\n                \r\n                                            </div>\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n                                <div fxLayout=\"row wrap\">\r\n                                        <div fxFlex=\"100\">\r\n                                            <div fxFlex=\"30\">\r\n                                                <button mat-raised-button (click)=\"addoutEjbXml()\" color=\"primary\"><mat-icon>add</mat-icon></button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n        </mat-card>\r\n        <!-- All ejb out json -->\r\n        <mat-card *ngIf=\"showAllEjbJsonOut\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"20px\" *ngFor=\"let ejboutjosn of outEjbJson\">\r\n                            <div fxFlex=\"20\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>key</mat-label>\r\n                                    <input matInput type=\"text\" name=\"key\" [(ngModel)]=\"ejboutjosn.key\" #key #key=\"ngModel\"> \r\n                                </mat-form-field>\r\n                            </div>\r\n                            <div fxFlex=\"20\">\r\n                                    <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>Default Value</mat-label>\r\n                                        <input matInput type=\"text\" name=\"defaultValue\" [(ngModel)]=\"ejboutjosn.defaultValue\" #defaultValue #node=\"ngModel\"> \r\n                                    </mat-form-field>\r\n                                </div>\r\n                                <div fxFlex=\"20\">\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                                <mat-label>Data Type</mat-label>\r\n                                                <mat-select\r\n                    \r\n                                               >\r\n                                               \r\n                                                <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                                <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                                <mat-option value=\"date\">Date</mat-option>\r\n                                               \r\n                                            </mat-select>\r\n                                                <!-- <input matInput name=\"type\" #type type=\"ngModel\" [(ngModel)]=\"incomingTCP.type\"> -->\r\n            \r\n                                             </mat-form-field>\r\n                                    </div>\r\n                                    <div fxFlex=\"20\">   \r\n                                            <button mat-raised-button (click)=\"deleteEjbJsonOut(i)\" color=\"primary\"><mat-icon>delete</mat-icon></button>\r\n        \r\n                                    </div>\r\n                        </div>\r\n                    </div>\r\n                    <div fxLayout=\"row wrap\">\r\n                            <div fxFlex=\"100\">\r\n                                <div >\r\n                                    <button mat-raised-button (click)=\"addEjbJsonOut()\" color=\"primary\"><mat-icon>add</mat-icon></button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n        </mat-card>\r\n        <!-- All Ejb flat out -->\r\n        <mat-card *ngIf=\"showAllEjbFlatOut\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"40\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Folder Name</mat-label>\r\n                                    <input matInput>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        </mat-card>\r\n        <!-- All Db out XMl -->\r\n        <mat-card *ngIf=\"showAllDbXmlOut\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\" fxLayoutGap=\"20\">\r\n                            <div fxFlex=\"50\">\r\n                                <input type=\"file\" id=\"chFile\" (change)=\"fileuploadHttpXMlInc($event)\">\r\n                                <button mat-raised-button type=\"file\" class=\"btnFile\" (click)=\"chooseFile()\">\r\n                                    <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                \r\n                    </div>\r\n        <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n        <div fxFlex=\"40\">\r\n                <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Table Name</mat-label>\r\n                        <input matInput name=\"tableName\"\r\n                        (keyup)=\"onsearchingTablName($event)\" [matAutocomplete]=\"autotablName\">\r\n                        <mat-autocomplete #autotablName=\"matAutocomplete\" \r\n                        (optionSelected)=\"gettingColumnNameForIncoming($event)\">\r\n                       <mat-option *ngFor=\"let tabname of incDbRecords\" [value]=\"tabname\">\r\n                            {{tabname}}\r\n                        </mat-option>\r\n                        </mat-autocomplete>\r\n                      </mat-form-field>\r\n        </div>\r\n        </div>\r\n        </div>\r\n        <!-- Columns -->\r\n        <div fxLayout=\"row wrap\"  *ngIf=\"coulmnNameBasedonTanbleName &&coulmnNameBasedonTanbleName.length\">\r\n                <div fxFlex=\"100\" *ngFor=\"let column of colRowForDbInc;let i=index\" fxLayoutGap=\"20px\">\r\n                    <div fxFlex=\"30\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Column Name</mat-label>\r\n                            <mat-select>\r\n                                <mat-option *ngFor=\"let col of column\" [value]=\"col\">\r\n                                    {{col}}\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"30\">\r\n                            \r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Data Type</mat-label>\r\n                                        <mat-select\r\n                                        name=\"dataType\"\r\n                                        >\r\n                                        \r\n                                         <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                         <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                         <mat-option value=\"date\">Date</mat-option>\r\n                                        \r\n                                     </mat-select>\r\n                                    </mat-form-field>\r\n                            \r\n                        </div>\r\n                        <div fxFlex=\"30\">\r\n                            <mat-form-field appearance=\"outline\">\r\n                                <mat-label>Default Value</mat-label>\r\n                                <input matInput >\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div fxFlex=\"30\">\r\n                                <button mat-raised-button (click)=\"deleteDbXInc(i)\" color=\"primary\">\r\n                                        <mat-icon>remove</mat-icon>\r\n                                    </button>\r\n                        </div>\r\n                       \r\n                </div>\r\n              <div fxFlex=\"100\">\r\n                    <button mat-raised-button (click)=\"onAddingrowsForDbInc(i)\" color=\"primary\">\r\n                            <mat-icon>add</mat-icon>\r\n                        </button>\r\n              </div>\r\n                      \r\n            </div>\r\n        </mat-card>\r\n        <!-- All db out json -->\r\n        <mat-card *ngIf=\"showAllDbJsonOut\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                        <div fxFlex=\"40\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                        <mat-label>Table Name</mat-label>\r\n                                        <input matInput name=\"tableName\"\r\n                                        (keyup)=\"onsearchingTablName($event)\" [matAutocomplete]=\"autotablName\">\r\n                                        <mat-autocomplete #autotablName=\"matAutocomplete\" \r\n                                        (optionSelected)=\"gettingColumnNameForIncoming($event)\">\r\n                                       <mat-option *ngFor=\"let tabname of incDbRecords\" [value]=\"tabname.tableName\">\r\n                                            {{tabname.tableName}}\r\n                                        </mat-option>\r\n                                        </mat-autocomplete>\r\n                                      </mat-form-field>\r\n                        </div>\r\n                        </div>\r\n                        </div>\r\n                        <!-- Columns -->\r\n                        <div fxLayout=\"row wrap\"  *ngIf=\"coulmnNameBasedonTanbleName &&coulmnNameBasedonTanbleName.length\">\r\n                                <div fxFlex=\"100\" *ngFor=\"let column of coulmnNameBasedonTanbleName;let i=index\" fxLayoutGap=\"20px\">\r\n                                    <div fxFlex=\"30\">\r\n                                        <mat-form-field appearance=\"outline\">\r\n                                            <mat-label>Column Name</mat-label>\r\n                                            <mat-select>\r\n                                                <mat-option *ngFor=\"let col of column\" [value]=\"col\">\r\n                                                    {{col}}\r\n                                                </mat-option>\r\n                                            </mat-select>\r\n                                        </mat-form-field>\r\n                                    </div>\r\n                                    <div fxFlex=\"30\">\r\n                                            \r\n                                                <mat-form-field appearance=\"outline\">\r\n                                                    <mat-label>Data Type</mat-label>\r\n                                                        <mat-select\r\n                                                        name=\"dataType\"\r\n                                                        >\r\n                                                        \r\n                                                         <mat-option value=\"numeric\">Numeric</mat-option>\r\n                                                         <mat-option value=\"alphaNumeric\">Alpha Numeric</mat-option>\r\n                                                         <mat-option value=\"date\">Date</mat-option>\r\n                                                        \r\n                                                     </mat-select>\r\n                                                    </mat-form-field>\r\n                                            \r\n                                        </div>\r\n                                        <div fxFlex=\"30\">\r\n                                            <mat-form-field appearance=\"outline\">\r\n                                                <mat-label>Default Value</mat-label>\r\n                                                <input matInput >\r\n                                            </mat-form-field>\r\n                                        </div>\r\n                                </div>\r\n                            </div>\r\n        </mat-card>\r\n        <!-- All db out excel -->\r\n        <mat-card *ngIf=\"showAllDbExcelOut\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"40\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Folder Name</mat-label>\r\n                                    <input matInput>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        </mat-card>\r\n        <!-- All db out flatfile -->\r\n        <mat-card *ngIf=\"showAllDbflatOut\">\r\n                <div fxLayout=\"row wrap\">\r\n                        <div fxFlex=\"100\">\r\n                            <div fxFlex=\"40\">\r\n                                <mat-form-field appearance=\"outline\">\r\n                                    <mat-label>Folder Name</mat-label>\r\n                                    <input matInput>\r\n                                </mat-form-field>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n        </mat-card>\r\n\r\n    </mat-tab>\r\n\r\n</mat-tab-group>\r\n\r\n<div fxLayout=\"row wrap\" *ngIf=\"showFinalaFinish && createExtSys1.openToMessage=='Incoming' ||showFinalaFinish && createExtSys1.openToMessage=='OutComing'\">\r\n    <div fxFlex=\"100\">\r\n        \r\n        <div fxFlex=\"50\" fxLayoutGap=\"10px\">\r\n            <button mat-raised-button (click)=\"onfinish()\" color=\"primary\">Finish</button>\r\n            <button mat-raised-button (click)=\"onPreviousToProtocolScreen()\" color=\"accent\" >Previous_</button>\r\n            <button mat-raised-button (click)=\"onClick\" color=\"warn\">Reset</button>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div fxLayout=\"row wrap\" *ngIf=\"showOnlyAllBtn\">\r\n        <div fxFlex=\"100\">\r\n           \r\n            <div fxFlex=\"50\" fxLayoutGap=\"10px\">\r\n                <button mat-raised-button (click)=\"nextStep(0)\" color=\"primary\" *ngIf=\"selectedIndex==0\">Next_Inc</button>\r\n                <button mat-raised-button (click)=\"onPreviousOnlyAllInc()\" *ngIf=\"createExtSys1.openToMessage=='All' && tabText=='Incoming'\" color=\"accent\">Previous_Inc</button>\r\n               \r\n                <button mat-raised-button  color=\"warn\" *ngIf=\"createExtSys1.openToMessage=='All' && tabText=='Incoming'\">Reset</button>\r\n           \r\n               \r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\" fxLayoutGap=\"20px\">\r\n    <div fxFlex=\"50\" fxLayoutGap=\"20px\">\r\n    <div *ngIf=\"onlyAllOut\">\r\n        <button mat-raised-button (click)=\"onPreviousOnlyAllOut()\" color=\"primary\" *ngIf=\"createExtSys1.openToMessage=='All' && tabText=='Outgoing'\">Previous</button>\r\n        <button mat-raised-button (click)=\"onfinish()\" *ngIf=\"createExtSys1.openToMessage=='All' && tabText=='Outgoing'\" color=\"accent\">Finish</button>\r\n        <button mat-raised-button (click)=\"onClick\" color=\"warn\" *ngIf=\"createExtSys1.openToMessage=='All' && tabText=='Outgoing'\">Reset</button>\r\n    </div>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n    <div fxLayout=\"row\" *ngIf=\"showAuditLog\">\r\n        <!-- <div fxFlex></div> -->\r\n        <div fxFlex=\"95\">\r\n          <mat-card style=\"width: 70%;  margin-left:260px;\">\r\n            <mat-card-title>\r\n            </mat-card-title>\r\n            <mat-card-content>\r\n              <div fxLayout=\"row\">\r\n                <table id=\"customers\">\r\n                  <tr>\r\n                    <th>Record Status:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysResp.recordStatus}}</mat-chip>\r\n                    </td>\r\n                    <th>Input By:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysResp.creatorId}}</mat-chip>\r\n                    </td>\r\n                    <th>Verified By:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysResp.verifierId}}</mat-chip>\r\n                    </td>\r\n                    <th>Verified Once:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysResp.verifiedOnce}}</mat-chip>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Modification No:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysResp.version}}</mat-chip>\r\n                    </td>\r\n                    <th>Input Date:</th>\r\n                    <td>\r\n                       <!-- <mat-chip>{{responseOfIcoming.verifiedOnce}}</mat-chip> -->\r\n    \r\n                    </td>\r\n                    <th>Verified Date:</th>\r\n                    <td>\r\n                      <!-- <mat-chip>{{userObj.verifierDtStamp | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip> -->\r\n                    </td>\r\n      \r\n                    <th>Verified Status:</th>\r\n                    <td>\r\n                      <mat-chip>{{addSysResp.verifiedStatus}}</mat-chip>\r\n                    </td>\r\n      \r\n                  </tr>\r\n                </table>\r\n              </div>\r\n            </mat-card-content>\r\n          </mat-card>\r\n        </div>\r\n      </div>\r\n     \r\n  ");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-external-sys/excel-external-sys.component.html":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-external-sys/excel-external-sys.component.html ***!
  \**************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n<mat-toolbar color=\"primary\"  style=\"height:30px; font-size: small;\">\r\n    <span>External System</span>\r\n</mat-toolbar>\r\n<br><br>\r\n<div fxLayout=\"row\">\r\n  <span fxFlex></span>\r\n  <div fxFlex=\"40%\">\r\n    <mat-card style=\"width: 70%;\">\r\n\r\n      <mat-card-title>\r\n       \r\n      </mat-card-title>\r\n\r\n      <mat-card-content style=\"text-align: center\">\r\n        <form #fn=\"ngForm\" novalidate>\r\n          <div fxLayout=\"row\">\r\n\r\n            <div fxFlex=\"100\" class=\"pr-1\">\r\n              <div class=\"pb-1\">\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                  <mat-label>External System Code</mat-label>\r\n                  <input matInput type=\"text\" required [(ngModel)]=\"excelExt.extSysCode\" name=\"extSysCode\"\r\n                    #extSysCode=\"ngModel\" (keyup)=\"fun(excelExt.extSysCode)\">\r\n\r\n                </mat-form-field>\r\n              </div>\r\n\r\n              <div class=\"pb-1\">\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                  <mat-label>External System Name</mat-label>\r\n                  <input matInput type=\"text\" required [(ngModel)]=\"excelExt.extSysName\" name=\"extSysName\"\r\n                    #extSysName=\"ngModel\" (keyup)=\"gun(excelExt.extSysName)\">\r\n\r\n                </mat-form-field>\r\n              </div>\r\n\r\n             \r\n              <div class=\"pb-1\">\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Department</mat-label>\r\n                  <mat-select   required [(ngModel)]=\"excelExt.department\" [ngModelOptions]=\"{standalone: true}\">\r\n                    <mat-option *ngFor=\"let o of allDeptNames\" [value]=\"o\">\r\n                      {{ o }}\r\n                    </mat-option>\r\n                  </mat-select>\r\n                  <!-- <mat-icon matSuffix>bookmark</mat-icon> -->\r\n                </mat-form-field>\r\n                </div>\r\n\r\n            \r\n                <!-- <input type=\"text\" required\r\n                     matInput \r\n                    (keyup)=\"keyPress($event)\" \r\n                    [matAutocomplete]=\"auto\" \r\n                    placeholder=\"department\" \r\n                    name=\"department\" [(ngModel)]=\"excelExt.department\">\r\n                    formControlName=\"department  #department=\"ngModel\">\">\r\n                \r\n                <mat-autocomplete #auto=\"matAutocomplete\"  >\r\n                  <mat-option *ngFor=\"let o of allDeptNames \" [value]=\"o\" >\r\n                    {{ o }} \r\n                  </mat-option>\r\n                </mat-autocomplete> -->\r\n             <!-- </mat-form-field>  -->\r\n            <!-- </div> -->\r\n\r\n            </div>\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\">\r\n            <button type=\"submit\" #saveBtn mat-raised-button color=\"primary\" [disabled]=\"!fn.form.valid||disblesave || !space || !pace ||!excelExt.department\" (click)=\"onSubmit()\">Submit</button>\r\n            <!-- [disabled]=\"!fn.form.valid\" -->\r\n            <button mat-raised-button color=\"warn\" [routerLink]=\"'/sias-v2/ExtSumamry'\">Exit</button>\r\n          </div>\r\n        </form>\r\n\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n  <span fxFlex></span>\r\n</div>\r\n\r\n<br>\r\n<mat-card *ngIf=\"dataext\" style=\"width: 70%;  margin-left:280px;\">\r\n  <mat-card-title>\r\n\r\n  </mat-card-title>\r\n  <mat-card-content>\r\n\r\n\r\n    <table id=\"customers\">\r\n      <tr>\r\n          <th>RECORD STATUS:</th>\r\n          <td>\r\n            <mat-chip>{{excelExt.recordStatus}}</mat-chip>\r\n          </td>\r\n        <th> AUTH STATUS:</th>\r\n        <td>\r\n\r\n          <mat-chip>{{excelExt.authStatus}}</mat-chip>\r\n          <!-- <mat-form-field appearance=\"fill\">\r\n          <mat-label>Status</mat-label>\r\n          <input matInput type=\"text\" placeholder=\"\" #exSys>\r\n          <mat-icon matSuffix>person</mat-icon>\r\n        </mat-form-field> -->\r\n        </td>\r\n        <th>Created By:</th>\r\n        <td>\r\n          <mat-chip>{{excelExt.modifiedBy}}</mat-chip>\r\n        </td>\r\n        <th>Authorized By:</th>\r\n        <td>\r\n          <mat-chip>{{excelExt.authorizedBy}}</mat-chip>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <th>Modification No:</th>\r\n        <td>\r\n          <mat-chip>{{excelExt.version}}</mat-chip>\r\n        </td>\r\n        <th>Creation Date:</th>\r\n        <td>\r\n          <mat-chip>{{excelExt.modifiedTime |  date: 'MM/dd/yyyy, h:mm a' }}</mat-chip>\r\n        </td>\r\n        <th>Authorization Date:</th>\r\n        <td>\r\n          <mat-chip>{{excelExt.authorizedTime |  date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n        </td>\r\n        <!-- added by vidya for isssue id 583 -->\r\n        <th>First Time Auth:</th>\r\n        <td>\r\n          <mat-chip>{{excelExt.verifiedOnce}}</mat-chip>\r\n        </td>\r\n        \r\n      </tr>\r\n    </table>\r\n  </mat-card-content>\r\n</mat-card>\r\n<br><br><br><br><br><br>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-mapping/excel-mapping-summary/excel-mapping-summary.component.html":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-mapping/excel-mapping-summary/excel-mapping-summary.component.html ***!
  \**********************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\" style=\"height:30px; font-size: small;\">\r\n  <span>Excel Mapping Summary</span>\r\n</mat-toolbar>\r\n<br />\r\n<mat-card class=\"navigation\">\r\n  <mat-card-title>\r\n\r\n  </mat-card-title>\r\n  <mat-card-content>\r\n    <div class=\"margin-333\">\r\n      <div fxLayout=\"row\" fxFlex=\"1 1 0%\" fxLayoutAlign=\"end center\" fxLayoutGap=\"5px\">\r\n        <button mat-raised-button color=\"primary\" [routerLink]=\"'/sias-v2/ExcelMapping'\"\r\n          *ngIf=\"roleCodes.new\">{{roleCodes.new.labelDescription}}</button>\r\n        <button mat-raised-button color=\"warn\" [routerLink]=\"'/dashboard'\">Exit</button>\r\n      </div>\r\n    </div>\r\n    <br>\r\n    <!-- *ngIf=\"this.button_permission.newbutton=='T'\" <button (click)=\"exportAsXLSX()\" mat-button color=\"primary\">External System Report <i class=\"material-icons\">\r\n    cloud_download\r\n    </i></button> -->\r\n\r\n    <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\" matSort matSortActive=\"inputDtStamp\"\r\n      matSortDirection=\"desc\">\r\n\r\n      <ng-container matColumnDef=\"extSysCode\">\r\n        <th mat-header-cell *matHeaderCellDef>External System\r\n          Code </th>\r\n        <td mat-cell *matCellDef=\"let element\" style=\"color:blue;\"><a routerLink=\"/sias-v2/updateExcelMappingComponent\"\r\n            (click)=\"getDataFromSummaryToUpdateExcelMapping(element)\">\r\n            {{element.extSysCode}}</a> </td>\r\n      </ng-container>\r\n\r\n      <!-- Name Column -->\r\n      <ng-container matColumnDef=\"extSys\">\r\n        <th mat-header-cell *matHeaderCellDef>External System\r\n          Name </th>\r\n        <td mat-cell *matCellDef=\"let element\"> {{element.extSys}} </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"inputBy\">\r\n        <th mat-header-cell *matHeaderCellDef>Input By </th>\r\n        <td mat-cell *matCellDef=\"let element\"> {{element.inputBy}} </td>\r\n      </ng-container>\r\n         <!-- added authSatus column by vidya for isssue 756 -->\r\n         <ng-container matColumnDef=\"authStatus\">\r\n          <th mat-header-cell *matHeaderCellDef>AuthStatus </th>\r\n          <td mat-cell *matCellDef=\"let element\"> {{element.authStatus}} </td>\r\n        </ng-container>\r\n      <ng-container matColumnDef=\"inputDtStamp\">\r\n        <th mat-header-cell *matHeaderCellDef>Input Date Stamp </th>\r\n        <td mat-cell *matCellDef=\"let element\"> {{element.inputDtStamp | date}} </td>\r\n      </ng-container>\r\n   \r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n    </table>\r\n    <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n\r\n  </mat-card-content>\r\n</mat-card>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-mapping/excel-mapping.component.html":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-mapping/excel-mapping.component.html ***!
  \****************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\" style=\"height:30px; font-size: small;\">\r\n  <span>Excel Mapping</span>\r\n</mat-toolbar>\r\n<br>\r\n<mat-card>\r\n  <mat-card-title></mat-card-title>\r\n  <button type=\"submit\" mat-raised-button class=\"text-center\" color=\"primary\"\r\n    [routerLink]=\"'/sias-v2/updateExcelMappingComponent'\">\r\n    Update Mapping\r\n  </button>&nbsp;\r\n  <button mat-raised-button color=\"warn\" [routerLink]=\"'/sias-v2/ExcelMappingSummary'\">Exit</button>\r\n  <mat-card-content>\r\n    <form #extForm=\"ngForm\" novalidate>\r\n      <div class=\"mt-24\">\r\n        <span class=\"text-muted\" style=\"font-size: 10px\">*select minimum two mandatory row</span>\r\n      </div>\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n        <div fxFlex=\"100\" class=\"pr-1\">\r\n          <div class=\"pb-1\">\r\n            <mat-form-field class=\"full-width\">\r\n              <mat-label>External System</mat-label>\r\n              <mat-select [(ngModel)]=\"extCode\" name=\"ext\" #extSysCode required #ext=\"ngModel\"\r\n                (selectionChange)=\"getProcess(extSysCode.value)\">\r\n                <mat-option *ngFor=\"let topping of extSysData1\" [value]=\"topping\">{{topping}}</mat-option>\r\n              </mat-select>\r\n              <mat-error [hidden]=\"ext.valid || ext.pristine\">\r\n                External System is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <div fxFlex=\"100\" class=\"pr-1\">\r\n          <div class=\"pb-1\">\r\n            <mat-form-field class=\"full-width\">\r\n              <mat-label>Process Code</mat-label>\r\n              <mat-select [(ngModel)]=\"proCode\" name=\"pCode\" #pCode=\"ngModel\" required #processCode\r\n                (selectionChange)=\"getProcessName1(processCode.value,extSysCode.value)\">\r\n                <mat-option *ngFor=\"let topping of processName\" [value]=\"topping\">{{topping}}</mat-option>\r\n              </mat-select>\r\n              <mat-error [hidden]=\"pCode.valid || pCode.pristine\">\r\n                Process Code is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <div fxFlex=\"100\" class=\"pr-1\">\r\n          <div class=\"pb-1\">\r\n            <mat-form-field class=\"full-width\">\r\n              <mat-label>Data Starting Row</mat-label>\r\n              <input type=\"number\" [(ngModel)]=\"starting\" name=\"sRow\" #sRow=\"ngModel\" required matInput value=\"00\">\r\n              <mat-error [hidden]=\"sRow.valid || sRow.pristine\">\r\n                Starting Row is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n          </div>\r\n        </div>\r\n        <div fxFlex=\"100\" class=\"pr-1\">\r\n          <div class=\"pb-1\">\r\n            <mat-form-field class=\"full-width\">\r\n              <mat-label>Currency</mat-label>\r\n              <input type=\"text\" [(ngModel)]=\"currency\" name=\"ccy\" #ccy=\"ngModel\" required matInput>\r\n              <mat-error [hidden]=\"ccy.valid || ccy.pristine\">\r\n                Currency is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n          </div>\r\n        </div>\r\n        <div fxFlex=\"100\" class=\"pr-1\">\r\n          <div class=\"pb-1\">\r\n            <mat-form-field class=\"full-width\">\r\n              <mat-label>Sheet Number</mat-label>\r\n              <input type=\"text\" [(ngModel)]=\"sheetNumber\" name=\"sheetNumber\" #sheetNum=\"ngModel\" required matInput>\r\n              <mat-error [hidden]=\"sheetNum.valid || sheetNum.pristine\">\r\n                Sheet Number\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n          </div>\r\n        </div>\r\n        <div fxFlex=\"100\" class=\"pr-1\">\r\n          <div class=\"pb-1\">\r\n            <mat-checkbox [(ngModel)]=\"isChecked\" value=\"\" name=\"isChecked\">Is Header Present\r\n            </mat-checkbox>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </mat-card-content>\r\n</mat-card>\r\n<mat-card *ngIf=\"addForm\" style=\"width: 200%\">\r\n  <mat-card-content>\r\n    <form [formGroup]=\"addForm\" novalidate>\r\n      <table class=\"forms-table default-bg\">\r\n        <!-- 544 columns added by vidya -->\r\n        <thead>\r\n\r\n          <tr style=\"text-align: center\">\r\n            <th class=\"text-muted\">Name</th>\r\n            <th class=\"text-muted\">Data Type </th>\r\n            <th class=\"text-muted\">Mandatory</th>\r\n            <th class=\"text-muted\">Header Name</th>\r\n            <th class=\"text-muted\">Date Format</th>\r\n            <th class=\"text-muted\">Mapping Column </th>\r\n            <th class=\"text-muted\">Delimeter</th>\r\n            <th class=\"text-muted\">Default Value</th>\r\n            <!-- <th class=\"text-muted\">Repeated Till Next Value</th>\r\n            <th class=\"text-muted\">Delete</th> -->\r\n\r\n\r\n\r\n          </tr>\r\n        </thead>\r\n        <!-- loop throught units -->\r\n        <tbody>\r\n          <ng-container formArrayName=\"subArray\">\r\n            <tr style=\"text-align: center\" *ngFor=\"let item of addForm.controls.subArray.controls; let i=index\">\r\n              <ng-container [formGroupName]=\"i\">\r\n                <td>\r\n                  <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Name</mat-label>\r\n                    <input matInput formControlName=\"columnnName\">\r\n                    <!-- input field error -->\r\n                  </mat-form-field>\r\n                </td>\r\n                <td>\r\n                  <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Data Type</mat-label>\r\n                    <mat-select formControlName=\"dataType\" placeholder=\"Choose DataType\"\r\n                      (selectionChange)=\"checkTypeStatus(i)\">\r\n                      <mat-option *ngFor=\"let item of dataTypes\" [value]=\"item.type\">{{item.type}}</mat-option>\r\n                    </mat-select>\r\n                  </mat-form-field>\r\n                </td>\r\n                <td>\r\n                  <mat-checkbox formControlName=\"mandatory\"> </mat-checkbox>\r\n                </td>\r\n                <td>\r\n                  <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Header Name</mat-label>\r\n                    <input matInput formControlName=\"headerName\">\r\n                    <!-- input field error -->\r\n                    <mat-error></mat-error>\r\n                  </mat-form-field>\r\n                </td>\r\n                <td>\r\n                  <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Date Format</mat-label>\r\n                    <!-- [matDatepicker]=\"picker\" -->\r\n                    <input matInput placeholder=\"Date Format\" formControlName=\"dateFormat\" />\r\n                    <!-- <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                    <mat-datepicker #picker></mat-datepicker> -->\r\n                  </mat-form-field>\r\n                </td>\r\n                <td>\r\n                  <mat-form-field appearance=\"outline\" hintLabel=\"Max 3 characters\">\r\n                    <mat-label>Mapping Column</mat-label>\r\n                    <input matInput #input formControlName=\"mappingColumn\" appUppercase>\r\n                    <!-- input field error -->\r\n                    <mat-error *ngIf=\"item.controls.mappingColumn.errors\">\r\n                      Only Alphabet\r\n                    </mat-error>\r\n                    <mat-hint align=\"end\">{{input.value?.length || 0}}/3</mat-hint>\r\n                  </mat-form-field>\r\n                </td>\r\n                <td>\r\n                  <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Delimeter</mat-label>\r\n                    <input matInput formControlName=\"delimeter\">\r\n                    <!-- input field error -->\r\n                  </mat-form-field>\r\n                </td>\r\n                <td>\r\n                  <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Default Value</mat-label>\r\n                    <input matInput formControlName=\"defaultValue\">\r\n                    <!-- input field error -->\r\n                  </mat-form-field>\r\n                </td>\r\n       \r\n\r\n              </ng-container>\r\n            </tr>\r\n\r\n            <tr>\r\n              <button mat-raised-button class=\"mb-05 text-center\" color=\"primary\" (click)=\"addSubArray()\">\r\n                <mat-icon>add</mat-icon>\r\n              </button>\r\n            </tr>\r\n          </ng-container>\r\n        </tbody>\r\n      </table>\r\n      <br>\r\n      <!-- <div fxLayout=\"row\" fxLayoutAlign=\"end end\" class=\"m-333\"> -->\r\n      <!-- <button mat-raised-button class=\"mb-05 text-center\" color=\"primary\" (click)=\"addSubArray()\">\r\n          <mat-icon>add</mat-icon>\r\n        </button> -->\r\n      <!-- </div> -->\r\n      <div fxLayout=\"row\" fxLayoutGap=\"10px\" class=\"mb-4\" fxFlexAlign=\"start\">\r\n        <button mat-raised-button class=\"text-center\" color=\"primary\" [disabled]=\"addForm.controls.subArray.invalid ||is_edit\"\r\n          (click)=\"finalSubmit(addForm.value,isChecked,starting,sheetNumber)\">Submit</button>\r\n        <button mat-raised-button color=\"warn\" (click)=\"addForm.reset()\">Cancel</button>\r\n      </div>\r\n    </form>\r\n  </mat-card-content>\r\n</mat-card>\r\n<br>\r\n<mat-card *ngIf=\"tempStore\" style=\"width: 60%;  margin-left:280px;\">\r\n  <mat-card-title>\r\n  </mat-card-title>\r\n  <mat-card-content>\r\n    <table id=\"customers\">\r\n      <tr>\r\n        <th>Auth Status:</th>\r\n        <td>\r\n          <mat-chip>{{tempStore?.authStatus}}</mat-chip>\r\n          <!-- <mat-form-field appearance=\"fill\">\r\n              <mat-label>Status</mat-label>\r\n              <input matInput type=\"text\" placeholder=\"\" #exSys>\r\n              <mat-icon matSuffix>person</mat-icon>\r\n            </mat-form-field> -->\r\n        </td>\r\n        <th>Created By:</th>\r\n        <td>\r\n          <mat-chip>{{tempStore?.modifiedBy}}</mat-chip>\r\n        </td>\r\n        <th>Authorized By:</th>\r\n        <td>\r\n          <mat-chip>{{tempStore?.authorizedBy}}</mat-chip>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <th>Modification No:</th>\r\n        <td>\r\n          <mat-chip>{{tempStore?.version}}</mat-chip>\r\n        </td>\r\n        <th>Creation Date:</th>\r\n        <td>\r\n          <mat-chip>{{tempStore?.modifiedTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n        </td>\r\n        <th>Authorization Date:</th>\r\n        <td>\r\n          <mat-chip>{{tempStore?.authorizedTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n        </td>\r\n        <th>Record Status:</th>\r\n        <td>\r\n          <mat-chip>{{tempStore?.recordStatus }}</mat-chip>\r\n        </td>\r\n      </tr>\r\n    </table>\r\n  </mat-card-content>\r\n</mat-card>\r\n<br><br><br><br><br><br><br>\r\n<br><br><br><br><br><br><br>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-mapping/update-excel-mapping/update-excel-mapping.component.html":
/*!********************************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-mapping/update-excel-mapping/update-excel-mapping.component.html ***!
  \********************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\" style=\"height:30px; font-size: medium;\">\r\n  <span>Update/copy mapping</span>\r\n</mat-toolbar>\r\n<br>\r\n<mat-card>\r\n  <mat-card-content>\r\n    <mat-progress-bar mode=\"indeterminate\" *ngIf=\"progress\"></mat-progress-bar>\r\n    <form #formValue=\"ngForm\">\r\n      <!-- <div>\r\n        <span class=\"text-muted\">*select minimum two mandatory row</span>\r\n      </div> -->\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n        <div fxFlex=\"100\" class=\"pr-1\">\r\n          <div class=\"pb-1\">\r\n    \r\n            <!-- <mat-form-field class=\"full-width\">\r\n              <mat-label>External system </mat-label>\r\n              <input type=\"text\" [(ngModel)]=\"extSysCodeFromsummary\" name=\"ext\" #ext=\"ngModel\" required readonly\r\n                matInput>\r\n\r\n            </mat-form-field> -->\r\n            <mat-form-field class=\"full-width\">\r\n              <mat-label>External System</mat-label>\r\n\r\n              <mat-select name=\"ext\" [(ngModel)]=\"extSysCodeFromsummary\"  [disabled]=\"copyData1\" required #ext \r\n                (selectionChange)=\"getProcess(ext.value)\" [ngModelOptions]=\"{standalone: true}\"> \r\n                <mat-option *ngFor=\"let topping of extSysData1\" [value]=\"topping\">{{topping}}</mat-option>\r\n              </mat-select>\r\n              <mat-error [hidden]=\"ext.valid || ext.pristine\">\r\n                External System is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n\r\n        <div fxFlex=\"100\" class=\"pr-1\">\r\n          <div class=\"pb-1\">\r\n            <mat-form-field class=\"full-width\">\r\n              <mat-label>Process Code</mat-label>\r\n              <mat-select  required [(ngModel)]=\"proCode\" #process (selectionChange)=\"getProcessName1(process.value)\"  [ngModelOptions]=\"{standalone: true}\">\r\n                <mat-option *ngFor=\"let topping of dataResp\" [value]=\"topping\">{{topping}}</mat-option>\r\n              </mat-select>\r\n              <mat-error [hidden]=\"process.valid || process.pristine\">\r\n                Process Code is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <!-- <mat-form-field class=\"full-width\">\r\n                <mat-label>External system </mat-label>\r\n                <input type=\"text\" [(ngModel)]=\"processNameFromSummary\" name=\"process\" #process=\"ngModel\" required matInput readonly >\r\n                \r\n              </mat-form-field> -->\r\n          </div>\r\n\r\n        </div>\r\n        <div fxFlex=\"100\" class=\"pr-1\" id = \"muthu\">\r\n          <div class=\"pb-1\">\r\n            <mat-form-field class=\"full-width\">\r\n              <mat-label>Currency</mat-label>\r\n              <mat-select name=\"currency1\"  required [(ngModel)]=\"currency\" (ngModelChange)=\"dataChanged($event, 'currency')\" #ccy>\r\n                <mat-option *ngFor=\"let topping of ccyData\" [value]=\"topping\">{{topping}}</mat-option>\r\n              </mat-select>\r\n              <mat-error [hidden]=\"ccy.valid || ccy.pristine\">\r\n                Currency is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div fxFlex=\"100\" class=\"pr-1\" *ngIf=\"!copyData1\">\r\n          <div class=\"pb-1\">\r\n            <mat-form-field class=\"full-width\">\r\n              <mat-label>Currency</mat-label>\r\n              <input type=\"text\"  [(ngModel)]=\"currency\"   name=\"currency\" #ccy1=\"ngModel\"  required matInput >\r\n              <!-- <input type=\"text\" [(ngModel)]=\"sheetNumber\" name=\"sheetNumber\" #sheetNum=\"ngModel\" required matInput> -->\r\n                <!-- <mat-option *ngFor=\"let topping of ccyData\" [value]=\"topping\">{{topping}}</mat-option>\r\n              </mat-select> -->\r\n              <mat-error [hidden]=\"ccy1.valid || ccy1.pristine\">\r\n                Currency is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"pb-1\">\r\n          <mat-form-field>\r\n            <mat-label>Sheet Number</mat-label>\r\n            <input type=\"text\" [(ngModel)]=\"sheetNumber\" (ngModelChange)=\"dataChanged($event, 'sheet')\" name=\"sheetNumber\" #sheetNum=\"ngModel\" required matInput>\r\n            <mat-error [hidden]=\"sheetNum.valid || sheetNum.pristine\">\r\n              Sheet Number\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <!-- <p>Enter the currency For copy mapping</p> -->\r\n\r\n        <button mat-raised-button color=\"primary\" #fetchBtn (click)=\"getAllMapping(ext && ext.value,process && process.value,ccy && ccy.value)\"\r\n          [disabled]=\"(process && process.value==null)||(ccy && ccy.value==null)||!sheetNumber || disablefetchbtn\" *ngIf=\"copyData1\">\r\n          Fetch\r\n        </button>\r\n        <!-- <button mat-raised-button color=\"primary\" #fetchBtn (click)=\"getAllMapping(ext.value,process.value,c\r\n        [disabled]=\"process.value==null||ccy.value==null||!sheetNumber\" *ngIf=\"copyData1\">\r\n        Fetch\r\n      </button> -->\r\n        &nbsp;&nbsp;\r\n\r\n        <button mat-raised-button color=\"warn\" [routerLink]=\"'/sias-v2/ExcelMappingSummary'\">Exit</button>\r\n      </div>\r\n    </form>\r\n  </mat-card-content>\r\n</mat-card>\r\n<mat-card *ngIf=\"formdata && addForm\">\r\n  <mat-card-title></mat-card-title>\r\n  <mat-card-content>\r\n    <form [formGroup]=\"addForm\" novalidate>\r\n      <div fxLayout=\"row\">\r\n        <div fxFlex=\"30\">\r\n          <div class=\"pb-1\" class=\"pr-1\">\r\n            <mat-form-field class=\"full-width\">\r\n              <mat-label>Data Starting Row</mat-label>\r\n              <input matInput value=\"0\" [(ngModel)]=\"starting\" name=\"startRow\" [ngModelOptions]=\"{standalone: true}\">\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <div fxFlex=\"25\">\r\n          <div class=\"pb-1\">\r\n            <mat-checkbox [(ngModel)]=\"isChecked\" name=\"isHeader\" [ngModelOptions]=\"{standalone: true}\">isHeaderPresent\r\n            </mat-checkbox>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- <div fxFlex=\"45\">\r\n          <div class=\"pb-1\">\r\n            <mat-form-field class=\"full-width\">\r\n              <mat-label>Enter currency</mat-label>\r\n              <input matInput type=\"text\" #currencydata name=\"currencydata\">\r\n            </mat-form-field>\r\n          </div>\r\n        </div> -->\r\n      </div>\r\n\r\n      <table class=\"forms-table default-bg\">\r\n\r\n        <div formArrayName=\"subArray\">\r\n          <thead>\r\n            <!-- 544 issue id columns added by vidya -->\r\n            <tr style=\"text-align: center\">\r\n              <th class=\"text-muted\">Name</th>\r\n              <th class=\"text-muted\" style=\"padding-left: 5%;\">Datatype </th>\r\n              <th class=\"text-muted\">Mandatory</th>\r\n              <th class=\"text-muted\" style=\"padding-right: 3%;\">Header Name</th>\r\n              <th class=\"text-muted\">Date Format</th>\r\n              <th class=\"text-muted\" style=\"padding-left: 2%;\">Mapping Column </th>\r\n              <th class=\"text-muted\" style=\"padding-left: 5%;\">Delimeter</th>\r\n              <th class=\"text-muted\" style=\"padding-left: 4%;\">Default Value</th>\r\n              <th class=\"text-muted\" style=\"padding-left: 6%\">Repeated till next value</th>\r\n              <th class=\"text-muted\" style=\"padding-left: 5%\">Delete</th>\r\n\r\n\r\n\r\n            </tr>\r\n          </thead>\r\n          <!-- loop throught units -->\r\n          <div *ngFor=\"let item of addForm.controls.subArray.controls; let i=index\">\r\n            <tbody>\r\n              <div [formGroupName]=\"i\">\r\n                <tr>\r\n                  <td>\r\n                    <mat-form-field appearance=\"outline\" *ngIf=\"!editafterfetch\">\r\n                      <mat-label>Name</mat-label>\r\n                      <!-- <input matInput formControlName=\"columnnName\" [readonly]=\"!editafterfetch\"> -->\r\n                      <!-- input field error -->\r\n                     <mat-select formControlName=\"columnnName\" [disabled]=\"!editafterfetch\">\r\n                        <mat-option *ngFor=\"let i of fileNames\" [value]=\"i\">{{i}}</mat-option> -->\r\n                      </mat-select>\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"outline\" *ngIf=\"editafterfetch\">\r\n                      <mat-label>Name</mat-label>\r\n                      <div class=\"dropdown\">\r\n                     \r\n                      <input type=\"text\" matInput formControlName=\"columnnName\" [disabled]=\"true\" [matAutocomplete]=\"auto\"\r\n                      >\r\n                      <div class=\"mat-select-arrow-wrapper dropdown-arrow\"><div class=\"mat-select-arrow\"></div></div>\r\n                      </div>\r\n                      <mat-autocomplete #auto=\"matAutocomplete\">\r\n                        <mat-option *ngFor=\"let i of fileNames\" [value]=\"i\">{{i}}</mat-option>\r\n\r\n                      </mat-autocomplete>\r\n                    </mat-form-field>\r\n                  </td>\r\n                  <td>\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <mat-label>dataType</mat-label>\r\n                      <!-- <input matInput formControlName=\"dataType\"> -->\r\n                      <mat-select formControlName=\"dataType\" (selectionChange)=\"checkTypeStatus(i)\"\r\n                        [disabled]=\"!editafterfetch\">\r\n                        <mat-option *ngFor=\"let item of dataTypes\" [value]=\"item.type\">{{item.type}}</mat-option>\r\n                      </mat-select>\r\n                      <!-- input field error -->\r\n                    </mat-form-field>\r\n                  </td>\r\n                  <td>\r\n                    <mat-checkbox formControlName=\"mandatory\" [disabled]=\"!editafterfetch\"></mat-checkbox>\r\n                    <!-- <mat-form-field appearance=\"outline\">\r\n                        <mat-label>mandatory</mat-label>\r\n                        <input matInput formControlName=\"mandatory\" required>\r\n                        <mat-error></mat-error>\r\n                      </mat-form-field> -->\r\n                  </td>&nbsp;&nbsp;\r\n                  <td>\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <mat-label>headerName</mat-label>\r\n                      <input matInput formControlName=\"headerName\" [readonly]=\"!editafterfetch\">\r\n                      <!-- input field error -->\r\n                      <mat-error></mat-error>\r\n                    </mat-form-field>\r\n                  </td>\r\n                  <td>\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <mat-label>dateFormat</mat-label>\r\n                      <input matInput formControlName=\"dateFormat\"\r\n                        [readonly]=\"getSubArrayFormGroup(i).dataType == 'Date' ? false :true\">\r\n                      <!-- input field error -->\r\n                    </mat-form-field>\r\n                  </td>\r\n                  <td>\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <mat-label>excelMappingColumn</mat-label>\r\n                      <input matInput formControlName=\"excelMappingColumn\" appUppercase [readonly]=\"!editafterfetch\">\r\n                      <!-- input field error -->\r\n                      <!-- <mat-error *ngIf=\"myForm.controls.excelMappingColumn.errors\">\r\n                          MappingColumn must be at least 3 characters long.\r\n                        </mat-error> -->\r\n                    </mat-form-field>\r\n                  </td>\r\n                  <td>\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <mat-label>Delimeter</mat-label>\r\n                      <input matInput formControlName=\"delimeter\" [readonly]=\"!editafterfetch\">\r\n                      <!-- input field error -->\r\n                    </mat-form-field>\r\n                  </td>\r\n                  <td>\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <mat-label>DefaultValue</mat-label>\r\n                      <input matInput formControlName=\"defaultValue\" [readonly]=\"!editafterfetch\">\r\n                      <!-- input field error -->\r\n                    </mat-form-field>\r\n                  </td>\r\n                  <td>\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <mat-label>RepeatedTillNextValue</mat-label>\r\n                      <input matInput formControlName=\"repeatedTillNextValue\" [readonly]=\"!editafterfetch\">\r\n                      <!-- input field error -->\r\n                    </mat-form-field>\r\n                  </td>\r\n\r\n                  <td>\r\n                    <button mat-icon-button color=\"warn\" [disabled]=\"!editafterfetch\" (click)=\"removeSubArray(i,item)\">\r\n                      <mat-icon>delete</mat-icon>\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n\r\n              </div>\r\n            </tbody>\r\n\r\n          </div>\r\n          <tr>\r\n            <!-- <div fxLayout=\"row\" fxLayoutAlign=\"end end\" class=\"m-333\"> -->\r\n            <button mat-raised-button color=\"primary\" (click)=\"addSubArray()\">\r\n              <mat-icon>add</mat-icon>\r\n            </button>\r\n            <!-- </div> -->\r\n          </tr>\r\n        </div>\r\n      </table>\r\n\r\n      <!-- <div fxLayout=\"row\" fxLayoutAlign=\"end end\" class=\"m-333\">\r\n        <button mat-raised-button color=\"primary\" (click)=\"addSubArray()\">\r\n          <mat-icon>add</mat-icon>\r\n        </button>\r\n      </div> -->\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"15px\" class=\"mb-4\">\r\n        <button mat-raised-button class=\"text-center\" color=\"warn\" #updateBtn\r\n          [disabled]=\"addForm.controls.subArray.invalid\"\r\n          (click)=\"copyData(addForm.value, addForm.valid, ext.value,process.value,starting,isChecked,ccy.value)\" *ngIf=\"copyData1\">Copy\r\n          Mapping</button>\r\n\r\n        <button mat-raised-button class=\"text-center\" color=\"primary\" #updateBtn\r\n          (click)=\"updateMappingData(addForm.value, addForm.valid, ext.value,process.value,starting,isChecked,ccy.value,sheetNumber)\"\r\n          *ngIf=\"editafterfetch && copyData1\">Update</button>\r\n        <!-- Edit  button added by vidya issue id 540 -->\r\n        <button mat-raised-button color=\"warn\" (click)=\"onEdit()\" *ngIf=\"!editafterfetch  && copyData1\">\r\n          Edit\r\n        </button>&nbsp;&nbsp;\r\n      <button mat-raised-button class=\"text-center\" color=\"primary\"\r\n          (click)=\"onClickOfAuth(addForm.value, addForm.valid, ext.value,process.value,ccy.value)\" *ngIf=\"tempStore.authStatus=='UNAUTHORIZED'  && copyData1\">Auth</button>\r\n        <button mat-raised-button class=\"text-center\" color=\"primary\" *ngIf=\"tempStore.recordStatus=='OPEN'  && copyData1\"\r\n          (click)=\"onClcikOfClose(addForm.value, addForm.valid, ext.value,process.value,ccy.value)\"\r\n          >Close</button>\r\n\r\n        <button mat-raised-button class=\"text-center\" color=\"primary\" *ngIf=\"tempStore.recordStatus=='CLOSED' && copyData1\"\r\n          (click)=\"onClcikOfReopen(addForm.value, addForm.valid, ext.value,process.value,ccy.value)\">Re-Open</button>\r\n        <!-- <button mat-raised-button color=\"warn\" class=\"text-center\">Cancel</button>\r\n                -->\r\n        <!-- <button mat-raised-button color=\"warn\" [routerLink]=\"'/dashboard'\">Exit</button> -->\r\n        <!-- <button mat-raised-button color=\"warn\"  type=\"reset\" >Cancel</button> -->\r\n        <button mat-raised-button class=\"text-center\" color=\"primary\" [disabled]=\"addForm.controls.subArray.invalid\"\r\n        (click)=\"finalSubmit(addForm.value,isChecked,currency,starting,sheetNumber)\" *ngIf=\"!copyData1\">Submit</button>\r\n      </div>\r\n    </form>\r\n  </mat-card-content>\r\n</mat-card>\r\n<br><br><br>\r\n<mat-card *ngIf=\"formdata && addForm\" style=\"width: 60%;  margin-left:280px;\">\r\n  <mat-card-title>\r\n  </mat-card-title>\r\n  <mat-card-content>\r\n    <form>\r\n       <table id=\"customers\">\r\n        <tr>\r\n          <th>Auth Status:</th>\r\n          <td>\r\n            <mat-chip>{{tempStore?.authStatus}}</mat-chip>\r\n            <!-- <mat-form-field appearance=\"fill\">\r\n                  <mat-label>Status</mat-label>\r\n                  <input matInput type=\"text\" placeholder=\"\" #exSys>\r\n                  <mat-icon matSuffix>person</mat-icon>\r\n                </mat-form-field> -->\r\n          </td>\r\n          <th>Created By:</th>\r\n          <td>\r\n            <mat-chip>{{tempStore?.modifiedBy}}</mat-chip>\r\n          </td>\r\n          <th>Authorized By:</th>\r\n          <td>\r\n            <mat-chip>{{tempStore?.authorizedBy}}</mat-chip>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <th>Modification No:</th>\r\n          <td>\r\n            <mat-chip>{{tempStore?.version}}</mat-chip>\r\n          </td>\r\n          <th>Creation Date:</th>\r\n          <td>\r\n            <mat-chip>{{tempStore?.modifiedTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n          </td>\r\n          <th>Authorization Date:</th>\r\n          <td>\r\n            <mat-chip>{{tempStore?.authorizedTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n          </td>\r\n          <th>Record Status:</th>\r\n          <td>\r\n            <mat-chip>{{tempStore?.recordStatus }}</mat-chip>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </form>\r\n  </mat-card-content>\r\n</mat-card>\r\n<mat-card>\r\n  <p>Fetch the mapping you want to copy</p>\r\n  <p>Change to desired process code you want to copy. (that make currency empty)</p>\r\n  <p>Enter currency in currency field</p>\r\n  <p>Submit the form</p>\r\n</mat-card>\r\n<br><br><br><br><br><br>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-processing/excel-processing.component.html":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-processing/excel-processing.component.html ***!
  \**********************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div fxLayout=\"row\">\r\n\r\n  <div fxFlex=\"25%\"></div>\r\n\r\n  <div fxFlex>\r\n    <mat-card>\r\n      <mat-card-title>\r\n        Excel Processing\r\n      </mat-card-title>\r\n      <mat-card-content>\r\n\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n          <div fxFlex=\"100\" fxFlex.gt-xs=\"50\" class=\"pr-1\">\r\n\r\n            <!-- <div class=\"pb-1\">\r\n                <mat-form-field class=\"full-width\">\r\n                  <mat-label>External System</mat-label>\r\n                  <mat-select matNativeControl name=\"extSys\" #extSys1 (change)=\"getProcessName(extSys1.value)\">\r\n                    <mat-option value=\"\" disabled>Select Department</mat-option>\r\n                    <mat-option *ngFor=\"let report of extSysData\" [value]=\"report\">{{report.extSys}}</mat-option>\r\n                  </mat-select>\r\n                </mat-form-field>\r\n              </div> -->\r\n\r\n            <div class=\"pb-1\">\r\n              <mat-form-field class=\"full-width\">\r\n                <mat-label>External System</mat-label>\r\n                <mat-select name=\"ext\" #extSysName (selectionChange)=\"getProcess(extSysName.value)\">\r\n                  <mat-option *ngFor=\"let topping of extSysData1\" [value]=\"topping\">{{topping}}</mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"pb-1\">\r\n              <mat-form-field class=\"full-width\">\r\n                <mat-label>Process Code</mat-label>\r\n                <mat-select #processCode (selectionChange)=\"getProcessName1(processCode.value,extSysName.value)\">\r\n                  <mat-option *ngFor=\"let topping of processName\" [value]=\"topping\">{{topping}}</mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"pb-1\">\r\n\r\n              <mat-form-field class=\"full-width\">\r\n                <input matInput name=\"dateforData\" #dateforData [matDatepicker]=\"appDatepicker\" placeholder=\"Date\">\r\n\r\n                <mat-datepicker-toggle matSuffix [for]=\"appDatepicker\"></mat-datepicker-toggle>\r\n              </mat-form-field>\r\n              <mat-datepicker #appDatepicker></mat-datepicker>\r\n\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\" class=\"mt-4\">\r\n\r\n          <button mat-raised-button color=\"accent\" class=\"text-center full-width\" \r\n            (click)=\"finalSubmit(extSysName.value,processCode.value,dateforData.value)\">Process Data</button>\r\n          <!-- <button mat-raised-button type=\"reset\" color=\"accent\" class=\"text-center full-width\">Cancel</button> -->\r\n\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n\r\n  <div fxFlex=\"25%\"></div>\r\n</div>\r\n<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-upload/excel-upload.component.html":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-upload/excel-upload.component.html ***!
  \**************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div fxLayout=\"row\">\r\n  <span fxFlex></span>\r\n  <div fxFlex=\"40%\">\r\n    <mat-card>\r\n      <mat-card-title></mat-card-title>\r\n      <mat-card-content>\r\n      <form #excelUpload=\"ngForm\" novalidate>\r\n        <div fxLayout=\"row\">\r\n          <div fxFlex=\"100\" class=\"pr-1\">\r\n            <div class=\"pb-1\">\r\n              <mat-form-field class=\"full-width\">\r\n                <mat-label>External System</mat-label>\r\n                <mat-select name=\"ext\" #extSysCode [(ngModel)]=\"selectExt\" #ext=\"ngModel\" (selectionChange)=\"getProcess(extSysCode.value)\" required>\r\n                  <mat-option *ngFor=\"let topping of extSysData1\" [value]=\"topping\">{{topping}}</mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n\r\n          <div fxFlex=\"100\" class=\"pr-1\">\r\n            <div class=\"pb-1\">\r\n              <mat-form-field class=\"full-width\">\r\n                <mat-label>Process Code</mat-label>\r\n                <mat-select #processCode name=\"proCode\" required [(ngModel)]=\"pCode\" #proCode=\"ngModel\"  (selectionChange)=\"getProcessName1(processCode.value,extSysCode.value)\">\r\n                  <mat-option *ngFor=\"let topping of processName\" [value]=\"topping\">{{topping}}</mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n       \r\n          <div fxLayout=\"row\">\r\n            <div fxFlex=\"100\">\r\n              <div class=\"pb-1\">\r\n                Upload File : <input #myInput \r\n                     name=\"fupload\" [(ngModel)]=\"fileData\" #fupload=\"ngModel\"\r\n                     required type=\"file\" (change)=\"selectFile($event)\">\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\">\r\n\r\n            <button type=\"submit\" mat-raised-button color=\"primary\" [disabled]=\"!excelUpload.form.valid\" (click)=\"upload()\">Upload</button>\r\n            <button mat-raised-button color=\"warn\" (click)=\"reset()\">Reset</button>\r\n\r\n          </div>\r\n\r\n        </form>\r\n\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n  <span fxFlex></span>\r\n</div>\r\n<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/ext-sys-list/ext-sys-list.component.html":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/ext-sys-list/ext-sys-list.component.html ***!
  \**************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\"  style=\"height:30px; font-size: small;\">\r\n  <span>Process Code Mapping</span>\r\n</mat-toolbar>\r\n<br />\r\n<mat-card>\r\n  <!-- <mat-card-title>\r\n    External System Maintenance\r\n  </mat-card-title> -->\r\n  <mat-card-content>\r\n\r\n    <div fxLayout=\"row\">\r\n      <!-- filter commented -->\r\n      <!-- <div fxFlex=\"30\">\r\n        <div class=\"mt-12\">\r\n          <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n            <input matInput (keyup)=\"applyFilter($event.target.value)\" placeholder=\"Filter\">\r\n          </mat-form-field>\r\n        </div>\r\n      </div> -->\r\n      <div fxLayout=\"row\" fxFlex=\"1 1 0%\" fxLayoutAlign=\"end center\" fxLayoutGap=\"5px\">\r\n        <button mat-raised-button color=\"primary\" routerLink=\"/sias-v2/extSystem\" *ngIf=\"roleCodes.new\"  >{{roleCodes.new.labelDescription}}</button>\r\n        <!-- <button mat-raised-button color=\"primary\" [routerLink]=\"'/sias/v2/ExcelMapping'\">Home</button> -->\r\n        <button mat-raised-button color=\"warn\" [routerLink]=\"'/dashboard'\">Exit</button>\r\n      </div>\r\n    </div>\r\n<br>\r\n    <div class=\"margin-333\">\r\n      <table mat-table [dataSource]=\"dataSource\" matSort matSortActive=\"creatorDtStamp\" matSortDirection=\"desc\">\r\n\r\n        <!-- Position Column -->\r\n        <ng-container matColumnDef=\"extSysName\">\r\n          <th mat-header-cell *matHeaderCellDef >\r\n            External System Name</th>\r\n          <td mat-cell *matCellDef=\"let element \"  style=\"color:blue;\"> \r\n            <a (click)=\"getExtSys(element)\" routerLink=\"/sias-v2/updateMaintanance\">\r\n              {{element.extSysName}} </a></td>\r\n          <!-- <td mat-cell *matCellDef=\"let element;let i=index;\"><a (click)=\"getExtSys(i)\"> {{element.extSysName}} </a></td> -->\r\n        </ng-container>\r\n\r\n        <!-- Name Column -->\r\n        <ng-container matColumnDef=\"extSysCode\">\r\n          <th mat-header-cell *matHeaderCellDef >\r\n            External System Code </th>\r\n          <td mat-cell *matCellDef=\"let element\" > {{element.extSysCode}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Weight Column -->\r\n        <!-- <ng-container matColumnDef=\"serviceCode\">\r\n          <th mat-header-cell *matHeaderCellDef class=\"text-md-center font-weight-bold text-white border-bottom-0 \">\r\n            Service Code </th>\r\n          <td mat-cell *matCellDef=\"let element\" class=\"text-md-center \"> {{element.serviceCode}} </td>\r\n        </ng-container> -->\r\n        <ng-container matColumnDef=\"processCode\">\r\n          <th mat-header-cell *matHeaderCellDef >\r\n            Process Code </th>\r\n          <td mat-cell *matCellDef=\"let element\" > {{element.processCode}} </td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"authStatus\">\r\n          <th mat-header-cell *matHeaderCellDef >\r\n            Status </th>\r\n          <td mat-cell *matCellDef=\"let element\" > {{element.authStatus}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Symbol Column -->\r\n       <ng-container matColumnDef=\"creatorDtStamp\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n           &nbsp;&nbsp; Date </th>\r\n          <td mat-cell *matCellDef=\"let element\" class=\"text-md-center \"> {{element.creatorDtStamp | date}} </td>\r\n        </ng-container>\r\n\r\n        <!-- <ng-container matColumnDef=\"index\">\r\n                  <mat-header-cell *matHeaderCellDef> Index </mat-header-cell>\r\n                  <mat-cell *matCellDef=\"let element; let i = index;\">{{(pageIndex*pageSize)+i}}</mat-cell>\r\n                </ng-container> -->\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n      </table>\r\n\r\n      <mat-paginator (page)='onPaginateChange($event)' [pageSize]='pageSize' [pageSizeOptions]=\"[5, 10, 20]\"\r\n        showFirstLastButtons></mat-paginator>\r\n\r\n    </div>\r\n  </mat-card-content>\r\n</mat-card>\r\n<br><br><br><br><br><br><br><br><br>\r\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/ext-system/ext-system.component.html":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/ext-system/ext-system.component.html ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\" style=\"height:30px; font-size: small;\">\r\n    <span>Process Code Mapping</span>\r\n  </mat-toolbar>\r\n  <br>\r\n  <form #fn=\"ngForm\" novalidate>\r\n    <mat-card style=\"width: 100%\">\r\n      <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n          <div fxFlex=\"25\">\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                  <mat-label >External System Code</mat-label>\r\n                  <mat-select name=\"extSysCode\" #extSysCode (selectionChange)=\"getProcess(extSysCode.value)\"\r\n                    [(ngModel)]=\"createExtSys1.extSysCode\" #extSysCode=\"ngModel\" required>\r\n                    <mat-option *ngFor=\"let topping of data\" [value]=\"topping\">{{topping.extSysCode}}\r\n                    </mat-option>\r\n                  </mat-select>\r\n                </mat-form-field>\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                    <mat-label >Process Code</mat-label>\r\n                    <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.processCode\" name=\"processCode\" #processCode=\"ngModel\"\r\n                      required  (keyup)=\"fun(createExtSys1.processCode)\">\r\n                  </mat-form-field>\r\n           <br>\r\n           <mat-checkbox (change)=\"treasuryRequired($event)\" >Treasury Reference Required</mat-checkbox>\r\n           <br>\r\n           <mat-checkbox (change)=\"checkCheckBoxvalue1($event)\">Auto Upload</mat-checkbox>\r\n           <br><br>\r\n           <mat-checkbox (change)=\"checkCheckBoxvalue($event)\">Back Dating</mat-checkbox>\r\n           <br><br>\r\n           <mat-checkbox (change)=getValue($event)>Future Dating</mat-checkbox>\r\n           <br><br><br>\r\n           <mat-checkbox (change)=getValueOfFCYrateVariance($event)>FCY Exchange Rate Variance</mat-checkbox>\r\n           <mat-checkbox (change)=getValue2($event)> Cross Financial Transaction.</mat-checkbox>\r\n             \r\n              \r\n               <mat-checkbox (change)=getValueMfI($event)>Mandatory Field Impose</mat-checkbox>\r\n               <div><mat-checkbox (change)=getValueSftp($event)>SFTP Required</mat-checkbox></div>\r\n               <div>\r\n                 <mat-checkbox (change)=\"getwuFileValue($event)\">WU File Upload</mat-checkbox>\r\n               </div>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                  <mat-label style=\"color: black\">External System Name</mat-label>\r\n                  <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.extSysName\" name=\"extSysName\" #extSysName=\"ngModel\"\r\n                    readonly required>\r\n                </mat-form-field>\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                    <mat-label>Maximum Upload Limit</mat-label>\r\n                    <input matInput type=\"number\" [(ngModel)]=\"createExtSys1.maxUploadLimit\" name=\"maxUploadLimit\"\r\n                      #maxUploadLimit=\"ngModel\" required>\r\n                  </mat-form-field>\r\n                  <br><br>\r\n                  <mat-form-field class=\"full-width\" appearance=\"outline\" style=\"color: black\">\r\n                      <mat-label style=\"color: black\">File Name</mat-label>\r\n                      <input matInput type=\"text\" #fileName [(ngModel)]=\"createExtSys1.fileName\" name=\"fileName\"\r\n                        [disabled]=\"!enablefilebrowser\" required>\r\n                    </mat-form-field>\r\n                    <mat-form-field class=\"full-width\" appearance=\"outline\" style=\"color: black\">\r\n                        <mat-label style=\"color: black\">Back Dating</mat-label>\r\n                        <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.bdav\" name=\"bdav\" [disabled]=\"!backdate\" required>\r\n                      </mat-form-field>\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                          <mat-label>Future Dating</mat-label>\r\n                          <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.fdav\" name=\"fdav\" [disabled]=\"!is_edit1\" required>\r\n                        </mat-form-field><br>\r\n                        <mat-form-field class=\"full-width\" appearance=\"outline\" style=\"margin-inline: 150px;\">\r\n                            <mat-label>FCY Exchange Rate Variance percentage</mat-label>\r\n                            <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.fCYPercentage\" name=\"fCYPercentage\"\r\n                              [disabled]=\"!is_edit\" required>\r\n                          </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <div style=\"top: 30%;position: absolute;\">\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\" *ngIf=\"enablefilebrowser\">\r\n                    <mat-label>File Path</mat-label>\r\n                    <input matInput type=\"text\" #filePath [(ngModel)]=\"createExtSys1.filePath\" name=\"filePath\" required>\r\n                  </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div fxFlex=\"25\" *ngIf=\"is_sftp\">\r\n            <div>SFTP Details</div>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                  <mat-label>User Name</mat-label>\r\n                  <input matInput type=\"text\" placeholder=\"Username\" [(ngModel)]=\"createExtSys1.sftpUsername\"\r\n                    name=\"sftpUsername\" required>\r\n                </mat-form-field>\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                    <mat-label>Password</mat-label>\r\n                    <input matInput type=\"text\" placeholder=\"Password\" [(ngModel)]=\"createExtSys1.sftpPassword\"\r\n                      name=\"sftpPassword\" required>\r\n                  </mat-form-field>\r\n                  <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                      <mat-label>IP Address</mat-label>\r\n                      <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.sftpIpaddress\" placeholder=\"IPaddress\"\r\n                        name=\"sftpIpaddress\" required>\r\n                    </mat-form-field>\r\n                    <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Port</mat-label>\r\n                        <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.sftpPort\" name=\"sftpPort\" placeholder=\"Port\"\r\n                          required>\r\n                      </mat-form-field>\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                          <mat-label>Path</mat-label>\r\n                          <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.sftpPath\" name=\"path\" placeholder=\"Path\" required>\r\n                        </mat-form-field>\r\n          </div>\r\n          \r\n        </div>\r\n        <div style=\"margin-left: 50%\">\r\n            <button #saveBtn type=\"submit\" mat-raised-button color=\"primary\" (click)=\"save(extSysCode.value)\"\r\n              [disabled]=\"!fn.form.valid  &&!savebutton ||enablesubmit ||!space\" *ngIf=\"!savebutton||!is_sftp ||enablesubmit||!space\">Save</button>&nbsp;\r\n            <button mat-raised-button color=\"warn\" [routerLink]=\"'/sias-v2/ExtSysList'\">Exit</button>\r\n        </div>\r\n      </div>\r\n    </mat-card>\r\n  </form>\r\n  <!-- <form #fn=\"ngForm\" novalidate>\r\n      <mat-card>\r\n      <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n          <div fxFlex=\"60\">\r\n            <div fxFlex=\"50\">\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                    <mat-label>External System Code</mat-label>\r\n                    <mat-select name=\"extSysCode\" #extSysCode (selectionChange)=\"getProcess(extSysCode.value)\"\r\n                      [(ngModel)]=\"createExtSys1.extSysCode\" #extSysCode=\"ngModel\" required>\r\n                      <mat-option *ngFor=\"let topping of data\" [value]=\"topping\">{{topping.extSysCode}}\r\n                      </mat-option>\r\n                    </mat-select>\r\n                  </mat-form-field>\r\n               <div>\r\n                  <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                      <mat-label>Process code</mat-label>\r\n                      <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.processCode\" name=\"processCode\" #processCode=\"ngModel\"\r\n                        required>\r\n                    </mat-form-field>\r\n               </div>\r\n               <div>\r\n                  <mat-checkbox (change)=\"treasuryRequired($event)\">Treasury Reference Required</mat-checkbox>\r\n               </div>\r\n               <div>\r\n                  <mat-checkbox (change)=\"checkCheckBoxvalue1($event)\">Auto Upload</mat-checkbox>\r\n               </div>\r\n               <br><br><br>\r\n               <div>\r\n                 \r\n                  <mat-checkbox (change)=\"checkCheckBoxvalue($event)\">Back Dating</mat-checkbox>\r\n               </div>\r\n               <br>\r\n               <div>\r\n                  <mat-checkbox (change)=getValue($event)>Future Dating</mat-checkbox>\r\n               </div>\r\n               <br>\r\n               <div>\r\n                  <mat-checkbox (change)=getValueOfFCYrateVariance($event)>FCY Exchange Rate Variance</mat-checkbox>\r\n               </div>\r\n               <mat-checkbox (change)=getValue2($event)> Cross Financial Transaction.</mat-checkbox>\r\n             \r\n              \r\n               <mat-checkbox (change)=getValueMfI($event)>Mandatory Field Impose</mat-checkbox>\r\n               <div><mat-checkbox (change)=getValueSftp($event)>SFTP Required</mat-checkbox></div>\r\n            </div>\r\n            <div fxFlex=\"35\">\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                    <mat-label>External system name</mat-label>\r\n                    <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.extSysName\" name=\"extSysName\" #extSysName=\"ngModel\"\r\n                      readonly required>\r\n                  </mat-form-field>\r\n               \r\n                <div>\r\n                    <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Maximum Upload Limit</mat-label>\r\n                        <input matInput type=\"number\" [(ngModel)]=\"createExtSys1.maxUploadLimit\" name=\"maxUploadLimit\"\r\n                          #maxUploadLimit=\"ngModel\" required>\r\n                      </mat-form-field>\r\n                  </div>\r\n                  <br>\r\n                  <div>\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                          <mat-label>File Name</mat-label>\r\n                          <input matInput type=\"text\" #fileName [(ngModel)]=\"createExtSys1.fileName\" name=\"fileName\"\r\n                            [disabled]=\"!enablefilebrowser\" required>\r\n                        </mat-form-field>\r\n                        <mat-form-field class=\"full-width\" appearance=\"outline\" *ngIf=\"enablefilebrowser\">\r\n                          <mat-label>File Path</mat-label>\r\n                          <input matInput type=\"text\" #filePath [(ngModel)]=\"createExtSys1.filePath\" name=\"filePath\" required>\r\n                        </mat-form-field>\r\n                  </div>\r\n                  <div>\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                          <mat-label>Back Dating</mat-label>\r\n                          <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.bdav\" name=\"bdav\" [disabled]=\"!is_edit\" required>\r\n                        </mat-form-field>\r\n                  </div>\r\n                  <div>\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                          <mat-label>Future Dating</mat-label>\r\n                          <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.fdav\" name=\"fdav\" [disabled]=\"!is_edit1\" required>\r\n                        </mat-form-field>\r\n                  </div>\r\n                  <div>\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\" style=\"margin-inline: 150px;\">\r\n                          <mat-label>FCY Exchange Rate Variance percentage</mat-label>\r\n                          <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.fCYPercentage\" name=\"fCYPercentage\"\r\n                            [disabled]=\"!is_edit1\" required>\r\n                        </mat-form-field>\r\n                  </div>\r\n            </div>\r\n           \r\n            \r\n          </div>\r\n          <div fxFlex=\"20\" fxFlexAlign=\"start\">\r\n            <span style=\"margin-left: 25%\">SFTP Details</span> \r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                  <mat-label>Username</mat-label>\r\n                  <input matInput type=\"text\" placeholder=\"Username\" [(ngModel)]=\"createExtSys1.sftpUsername\"\r\n                    name=\"sftpUsername\" required>\r\n                </mat-form-field>\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                    <mat-label>Password</mat-label>\r\n                    <input matInput type=\"text\" placeholder=\"Password\" [(ngModel)]=\"createExtSys1.sftpPassword\"\r\n                      name=\"sftpPassword\" required>\r\n                  </mat-form-field>\r\n                  <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                      <mat-label>IPaddress</mat-label>\r\n                      <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.sftpIpaddress\" placeholder=\"IPaddress\"\r\n                        name=\"sftpIpaddress\" required>\r\n                    </mat-form-field>\r\n                    <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Port</mat-label>\r\n                        <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.sftpPort\" name=\"sftpPort\" placeholder=\"Port\"\r\n                          required>\r\n                      </mat-form-field>\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                          <mat-label>Path</mat-label>\r\n                          <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.sftpPath\" name=\"path\" placeholder=\"Path\" required>\r\n                        </mat-form-field>\r\n          </div>\r\n        </div>\r\n    \r\n      </div>\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\">\r\n          <button #saveBtn type=\"submit\" mat-raised-button color=\"primary\" (click)=\"save(extSysCode.value)\"\r\n            [disabled]=\"!fn.form.valid\" *ngIf=\"!savebutton||!is_sftp\">Save</button>\r\n          <button mat-raised-button color=\"warn\" [routerLink]=\"'/sias-v2/ExtSysList'\">Exit</button>\r\n      </div>\r\n    </mat-card>\r\n    </form> -->\r\n  <!-- <form #fn=\"ngForm\" novalidate>\r\n      <mat-card >\r\n        \r\n        <div fxLayout=\"row wrap\">\r\n          <div fxFlex=\"20\"></div>\r\n          <div fxFlex=\"100\">\r\n            <div fxFlex=\"30\">\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                    <mat-label>External System Code</mat-label>\r\n                    <mat-select name=\"extSysCode\" #extSysCode (selectionChange)=\"getProcess(extSysCode.value)\"\r\n                      [(ngModel)]=\"createExtSys1.extSysCode\" #extSysCode=\"ngModel\" required>\r\n                      <mat-option *ngFor=\"let topping of data\" [value]=\"topping\">{{topping.extSysCode}}\r\n                      </mat-option>\r\n                    </mat-select>\r\n                  </mat-form-field>\r\n                 \r\n            </div>\r\n            <div fxFlex=\"30\">\r\n              \r\n            <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>External system name</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.extSysName\" name=\"extSysName\" #extSysName=\"ngModel\"\r\n                  readonly required>\r\n              </mat-form-field>\r\n              \r\n\r\n            </div>\r\n            <div fxFlex=\"10\" *ngIf=\"is_sftp\">SFTP Details\r\n                \r\n            </div>\r\n  \r\n          </div>\r\n  \r\n        </div>\r\n        <div fxLayout=\"row wrap\">\r\n            <div fxFlex=\"20\"></div>\r\n            <div fxFlex=\"100\">\r\n              <div fxFlex=\"30\">\r\n                  <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                      <mat-label>Process code</mat-label>\r\n                      <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.processCode\" name=\"processCode\" #processCode=\"ngModel\"\r\n                        required>\r\n                    </mat-form-field>\r\n                   \r\n              </div>\r\n              <div fxFlex=\"30\">\r\n                \r\n                  <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                      <mat-label>Maximum Upload Limit</mat-label>\r\n                      <input matInput type=\"number\" [(ngModel)]=\"createExtSys1.maxUploadLimit\" name=\"maxUploadLimit\"\r\n                        #maxUploadLimit=\"ngModel\" required>\r\n                    </mat-form-field>\r\n                \r\n  \r\n              </div>\r\n              <div fxFlex=\"10\" *ngIf=\"is_sftp\">\r\n                  <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                      <mat-label>Username</mat-label>\r\n                      <input matInput type=\"text\"\r\n                      placeholder=\"Username\"  [(ngModel)]=\"createExtSys1.userName\" name=\"userName\"\r\n                        required>\r\n                    </mat-form-field>\r\n              </div>\r\n    \r\n            </div>\r\n    \r\n          </div>          \r\n          <div fxLayout=\"row wrap\">\r\n              <div fxFlex=\"20\"></div>\r\n              <div fxFlex=\"100\">\r\n                <div fxFlex=\"30\">\r\n                    <mat-checkbox (change)=\"checkCheckBoxvalue1($event)\">Auto Upload</mat-checkbox>\r\n                     \r\n                </div>\r\n                <div fxFlex=\"30\">\r\n                    <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>File Name</mat-label>\r\n                        <input matInput type=\"text\" #fileName [(ngModel)]=\"createExtSys1.fileName\" name=\"fileName\"\r\n                          [disabled]=\"!enablefilebrowser\" required>\r\n                      </mat-form-field>\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\" *ngIf=\"enablefilebrowser\">\r\n                        <mat-label>File Path</mat-label>\r\n                        <input matInput type=\"text\" #filePath [(ngModel)]=\"createExtSys1.filePath\" name=\"filePath\" required>\r\n                      </mat-form-field>\r\n                  \r\n    \r\n                </div>\r\n                <div fxFlex=\"10\" *ngIf=\"is_sftp\">\r\n                    <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Password</mat-label>\r\n                        <input matInput type=\"text\" \r\n                        placeholder=\"Password\" [(ngModel)]=\"createExtSys1.password\" name=\"password\"\r\n                          required>\r\n                      </mat-form-field>\r\n                </div>\r\n      \r\n              </div>\r\n      \r\n            </div>\r\n            <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"20\"></div>\r\n                <div fxFlex=\"100\">\r\n                  <div fxFlex=\"30\">\r\n                      <mat-checkbox (change)=\"checkCheckBoxvalue($event)\">Back Dating</mat-checkbox>\r\n                       \r\n                  </div>\r\n                  <div fxFlex=\"30\">\r\n                    \r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                          <mat-label>Back Dating</mat-label>\r\n                          <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.bdav\" name=\"bdav\" [disabled]=\"!is_edit\" required>\r\n                        </mat-form-field>\r\n                    \r\n      \r\n                  </div>\r\n                  <div fxFlex=\"10\" *ngIf=\"is_sftp\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                          <mat-label>Port</mat-label>\r\n                          <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.sftpPort\" name=\"port\" placeholder=\"Port\" required>\r\n                        </mat-form-field>\r\n                  </div>\r\n        \r\n                </div>\r\n        \r\n              </div>\r\n              <div fxLayout=\"row wrap\">\r\n                  <div fxFlex=\"20\"></div>\r\n                  <div fxFlex=\"100\">\r\n                    <div fxFlex=\"30\">\r\n                        <mat-checkbox (change)=getValue($event)>Future Dating</mat-checkbox>\r\n                         \r\n                    </div>\r\n                    <div fxFlex=\"30\">\r\n                      \r\n                      \r\n        <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n            <mat-label>Future Dating</mat-label>\r\n            <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.fdav\" name=\"fdav\" [disabled]=\"!is_edit1\" required>\r\n          </mat-form-field>\r\n                      \r\n        \r\n                    </div>\r\n                    <div fxFlex=\"10\" *ngIf=\"is_sftp\"> \r\n                        <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                            <mat-label>IP address</mat-label>\r\n                            <input matInput type=\"text\"  [(ngModel)]=\"createExtSys1.ipAddress\"\r\n                            placeholder=\"IP address\" name=\"ipAddress\"\r\n                              required>\r\n                          </mat-form-field>\r\n                    </div>\r\n          \r\n                  </div>\r\n          \r\n                </div>\r\n                <div fxLayout=\"row wrap\">\r\n                    <div fxFlex=\"20\"></div>\r\n                    <div fxFlex=\"100\">\r\n                      <div fxFlex=\"30\">\r\n                          <mat-checkbox (change)=getValueOfFCYrateVariance($event)>FCY Exchange Rate Variance</mat-checkbox>\r\n  \r\n  \r\n  \r\n                           \r\n                      </div>\r\n                      <div fxFlex=\"30\">\r\n                        \r\n                        \r\n                          <mat-form-field class=\"full-width\" appearance=\"outline\" style=\"margin-inline: 150px;\">\r\n                              <mat-label>FCY Exchange Rate Variance percentage</mat-label>\r\n                              <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.fCYPercentage\" name=\"fCYPercentage\"\r\n                                [disabled]=\"!is_edit1\" required>\r\n                            </mat-form-field>\r\n                        \r\n          \r\n                      </div>\r\n                      <div fxFlex=\"10\" *ngIf=\"is_sftp\">\r\n                          <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                              <mat-label>Path</mat-label>\r\n                              <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.sftpPath\" name=\"path\" placeholder=\"Path\" required>\r\n                            </mat-form-field>\r\n                      </div>\r\n            \r\n                    </div>\r\n            \r\n                  </div>\r\n                  <div fxLayout=\"row wrap\">\r\n                      <div fxFlex=\"20\"></div>\r\n                      <div fxFlex=\"100\">\r\n                        <div fxFlex=\"30\">\r\n                            <mat-checkbox (change)=getValue2($event)> Cross Financial Transaction.</mat-checkbox>\r\n                            <mat-checkbox (change)=\"treasuryRequired($event)\">Treasury Reference Required</mat-checkbox>\r\n                           \r\n                            <mat-checkbox (change)=getValueMfI($event)>Mandatory Field Impose</mat-checkbox>\r\n                            <div><mat-checkbox (change)=getValueSftp($event)>SFTP Required</mat-checkbox></div>\r\n                        </div>\r\n                        <div fxFlex=\"30\">\r\n                          \r\n                          \r\n                          \r\n            \r\n                        </div>\r\n                        <div fxFlex=\"10\">\r\n                           \r\n                        </div>\r\n              \r\n                      </div>\r\n              \r\n                    </div>\r\n                    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\">\r\n                        <button #saveBtn type=\"submit\" mat-raised-button color=\"primary\" (click)=\"save(extSysCode.value)\"\r\n                          [disabled]=\"!fn.form.valid\" *ngIf=\"!savebutton||!is_sftp\">Save</button>\r\n                        <button mat-raised-button color=\"warn\" [routerLink]=\"'/sias-v2/ExtSysList'\">Exit</button>\r\n                    </div>\r\n\r\n      </mat-card>\r\n    </form> -->\r\n <!-- <form>\r\n    <mat-card>\r\n      <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"70\">\r\n        <div fxFlex=\"35\">\r\n            <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>External System Code</mat-label>\r\n                <mat-select name=\"extSysCode\" #extSysCode (selectionChange)=\"getProcess(extSysCode.value)\"\r\n                  [(ngModel)]=\"createExtSys1.extSysCode\" #extSysCode=\"ngModel\" required>\r\n                  <mat-option *ngFor=\"let topping of data\" [value]=\"topping\">{{topping.extSysCode}}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                  <mat-label>Process code</mat-label>\r\n                  <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.processCode\" name=\"processCode\" #processCode=\"ngModel\"\r\n                    required>\r\n                </mat-form-field>\r\n                <mat-checkbox (change)=\"treasuryRequired($event)\">Treasury Reference Required</mat-checkbox>\r\n             \r\n              \r\n        </div>\r\n        \r\n        <div fxFlex=\"35\">\r\n            <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>External system name</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.extSysName\" name=\"extSysName\" #extSysName=\"ngModel\"\r\n                  readonly required>\r\n              </mat-form-field>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                  <mat-label>Maximum Upload Limit</mat-label>\r\n                  <input matInput type=\"number\" [(ngModel)]=\"createExtSys1.maxUploadLimit\" name=\"maxUploadLimit\"\r\n                    #maxUploadLimit=\"ngModel\" required>\r\n                </mat-form-field>\r\n               \r\n                 \r\n        </div>\r\n        <div>\r\n          SFTP Details\r\n        </div>\r\n        \r\n       <div>\r\n         \r\n       </div>\r\n        </div>\r\n        <div>\r\n          \r\n        </div>\r\n       \r\n\r\n      </div>\r\n      <div fxLayout=\"row wrap\">\r\n          <div fxFlex=\"70\">\r\n          <div fxFlex=\"35\">\r\n              \r\n                \r\n              <mat-checkbox (change)=\"checkCheckBoxvalue1($event)\">Auto Upload</mat-checkbox>\r\n                 \r\n                \r\n          </div>\r\n          <div fxFlex=\"35\">\r\n            <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>File Name</mat-label>\r\n                <input matInput type=\"text\" #fileName [(ngModel)]=\"createExtSys1.fileName\" name=\"fileName\"\r\n                  [disabled]=\"!enablefilebrowser\" required>\r\n              </mat-form-field>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\" *ngIf=\"enablefilebrowser\">\r\n                <mat-label>File Path</mat-label>\r\n                <input matInput type=\"text\" #filePath [(ngModel)]=\"createExtSys1.filePath\" name=\"filePath\" required>\r\n              </mat-form-field>\r\n                 \r\n                   \r\n          </div>\r\n          \r\n          </div>\r\n          <div>\r\n            \r\n          </div>\r\n          \r\n        </div>\r\n        <div fxLayout=\"row wrap\">\r\n            <div fxFlex=\"70\">\r\n            <div fxFlex=\"35\">\r\n                \r\n                  \r\n                <mat-checkbox (change)=\"checkCheckBoxvalue($event)\">Back Dating</mat-checkbox>\r\n                   \r\n                  \r\n            </div>\r\n            <div fxFlex=\"35\">\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                    <mat-label>Back Dating</mat-label>\r\n                    <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.bdav\" name=\"bdav\" [disabled]=\"!is_edit\" required>\r\n                  </mat-form-field>\r\n                     \r\n            </div>\r\n            </div>\r\n            <div>\r\n              \r\n            </div>\r\n            \r\n          </div>\r\n          <div fxLayout=\"row wrap\">\r\n              <div fxFlex=\"70\">\r\n              <div fxFlex=\"35\">\r\n                  \r\n                    \r\n                  <mat-checkbox (change)=getValue($event)>Future Dating</mat-checkbox>\r\n                     \r\n                    \r\n              </div>\r\n              <div fxFlex=\"35\">\r\n                  <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                      <mat-label>Future Dating</mat-label>\r\n                      <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.fdav\" name=\"fdav\" [disabled]=\"!is_edit1\" required>\r\n                    </mat-form-field>\r\n                       \r\n              </div>\r\n              </div>\r\n              <div>\r\n                \r\n              </div>\r\n              \r\n            </div>\r\n            <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"70\">\r\n                <div fxFlex=\"35\">\r\n                    \r\n                      \r\n                    <mat-checkbox (change)=getValueOfFCYrateVariance($event)>FCY Exchange Rate Variance</mat-checkbox>\r\n                       \r\n                      \r\n                </div>\r\n                <div fxFlex=\"35\">\r\n                    <mat-form-field class=\"full-width\" appearance=\"outline\" style=\"margin-inline: 150px;\">\r\n                        <mat-label>FCY Exchange Rate Variance percentage</mat-label>\r\n                        <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.fCYPercentage\" name=\"fCYPercentage\"\r\n                          [disabled]=\"!is_edit1\" required>\r\n                      </mat-form-field>\r\n                         \r\n                </div>\r\n                </div>\r\n                <div>\r\n                  \r\n                </div>\r\n                \r\n              </div>\r\n              <div fxLayoutGap=\"10\">\r\n              <mat-checkbox (change)=getValue2($event)> Cross Financial Transaction.</mat-checkbox>\r\n              <mat-checkbox (change)=getValueSftp($event)>SFTP Required</mat-checkbox>\r\n              <mat-checkbox (change)=getValueMfI($event)>Mandatory Field Impose</mat-checkbox>\r\n            </div>\r\n \r\n    </mat-card>\r\n  </form>  -->\r\n  <!-- <form #fn=\"ngForm\" novalidate>\r\n    \r\n      <mat-card  >\r\n       \r\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"10\">\r\n   \r\n    <div fxFlex=\"60\" >\r\n      <div>\r\n        <mat-form-field class=\"full-width\" appearance=\"outline\" >\r\n            <mat-label>External System Code</mat-label>\r\n            <mat-select name=\"extSysCode\" #extSysCode (selectionChange)=\"getProcess(extSysCode.value)\"\r\n              [(ngModel)]=\"createExtSys1.extSysCode\" #extSysCode=\"ngModel\" required>\r\n              <mat-option *ngFor=\"let topping of data\" [value]=\"topping\">{{topping.extSysCode}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n          <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n            <mat-label>Process code</mat-label>\r\n            <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.processCode\" name=\"processCode\" #processCode=\"ngModel\"\r\n              required>\r\n          </mat-form-field>\r\n        </div>\r\n        <div>\r\n            <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>External system name</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.extSysName\" name=\"extSysName\" #extSysName=\"ngModel\"\r\n                  readonly required>\r\n              </mat-form-field>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>Maximum Upload Limit</mat-label>\r\n                <input matInput type=\"number\" [(ngModel)]=\"createExtSys1.maxUploadLimit\" name=\"maxUploadLimit\"\r\n                  #maxUploadLimit=\"ngModel\" required>\r\n              </mat-form-field>\r\n        </div>\r\n        <div>\r\n            <mat-checkbox (change)=\"treasuryRequired($event)\">Treasury Reference Required</mat-checkbox>\r\n        </div>\r\n        <div >\r\n            <mat-checkbox (change)=\"checkCheckBoxvalue1($event)\">Auto Upload</mat-checkbox>\r\n            <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>File Name</mat-label>\r\n                <input matInput type=\"text\" #fileName [(ngModel)]=\"createExtSys1.fileName\" name=\"fileName\"\r\n                  [disabled]=\"!enablefilebrowser\" required>\r\n              </mat-form-field>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\" *ngIf=\"enablefilebrowser\">\r\n                <mat-label>File Path</mat-label>\r\n                <input matInput type=\"text\" #filePath [(ngModel)]=\"createExtSys1.filePath\" name=\"filePath\" required>\r\n              </mat-form-field>\r\n        </div>\r\n        <div>\r\n            <mat-checkbox (change)=\"checkCheckBoxvalue($event)\">Back Dating</mat-checkbox>\r\n            <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>Back Dating</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.bdav\" name=\"bdav\" [disabled]=\"!is_edit\" required>\r\n              </mat-form-field>\r\n        </div>\r\n        <div>\r\n            <mat-checkbox (change)=getValue($event)>Future Dating</mat-checkbox>\r\n            <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>Future Dating</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.fdav\" name=\"fdav\" [disabled]=\"!is_edit1\" required>\r\n              </mat-form-field>\r\n        </div>\r\n        <div>\r\n            <mat-checkbox (change)=getValueOfFCYrateVariance($event)>FCY Exchange Rate Variance</mat-checkbox>\r\n            <mat-form-field class=\"full-width\" appearance=\"outline\" style=\"margin-inline: 150px;\">\r\n                <mat-label>FCY Exchange Rate Variance percentage</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.fCYPercentage\" name=\"fCYPercentage\"\r\n                  [disabled]=\"!is_edit1\" required>\r\n              </mat-form-field>\r\n        </div>\r\n        <div>\r\n            <mat-checkbox (change)=getValue2($event)> Cross Financial Transaction.</mat-checkbox>\r\n            <mat-checkbox (change)=getValueSftp($event)>SFTP Required</mat-checkbox>\r\n            <mat-checkbox (change)=getValueMfI($event)>Mandatory Field Impose</mat-checkbox>\r\n        </div>\r\n    </div>\r\n    \r\n    <div fxFlex=\"40\">\r\n        <span>SFTP Details</span>\r\n        <div>\r\n        <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n            <mat-label>UserName</mat-label>\r\n            <input matInput type=\"text\"\r\n            placeholder=\"UserName\"  [(ngModel)]=\"createExtSys1.userName\" name=\"userName\"\r\n              required>\r\n          </mat-form-field>\r\n        </div>\r\n        <div>\r\n          <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n              <mat-label>Password</mat-label>\r\n              <input matInput type=\"text\" \r\n              placeholder=\"Password\" [(ngModel)]=\"createExtSys1.password\" name=\"password\"\r\n                required>\r\n            </mat-form-field>\r\n          </div>\r\n           <div>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>Port</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.sftpPort\" name=\"port\" placeholder=\"Port\" required>\r\n              </mat-form-field>\r\n            </div>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>Path</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.sftpPath\" name=\"path\" placeholder=\"Path\" required>\r\n              </mat-form-field>\r\n              <div>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>IpAddress</mat-label>\r\n                <input matInput type=\"text\"  [(ngModel)]=\"createExtSys1.ipAddress\"\r\n                placeholder=\"IP Address\" name=\"ipAddress\"\r\n                  required>\r\n              </mat-form-field>\r\n            </div>\r\n \r\n    </div>\r\n  </div>\r\n  <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\">\r\n      <button #saveBtn type=\"submit\" mat-raised-button color=\"primary\" (click)=\"save(extSysCode.value)\"\r\n        [disabled]=\"!fn.form.valid\" *ngIf=\"!savebutton||!is_sftp\">Save</button>\r\n      <button mat-raised-button color=\"warn\" [routerLink]=\"'/sias-v2/ExtSysList'\">Exit</button>\r\n    </div>\r\n  </mat-card>\r\n  </form> -->\r\n<!-- <form #fn=\"ngForm\" novalidate>\r\n    \r\n  <mat-card  >\r\n   \r\n   <div fxLayout=\"column wrap\" fxFlex=\"85\">\r\n    <div fxLayout=\"row wrap\" >\r\n        \r\n      <div fxFlex=\"25\">\r\n        <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n          <mat-label>External System Code</mat-label>\r\n          <mat-select name=\"extSysCode\" #extSysCode (selectionChange)=\"getProcess(extSysCode.value)\"\r\n            [(ngModel)]=\"createExtSys1.extSysCode\" #extSysCode=\"ngModel\" required>\r\n            <mat-option *ngFor=\"let topping of data\" [value]=\"topping\">{{topping.extSysCode}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n          <mat-label>Process code</mat-label>\r\n          <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.processCode\" name=\"processCode\" #processCode=\"ngModel\"\r\n            required>\r\n        </mat-form-field>\r\n        <mat-checkbox (change)=\"treasuryRequired($event)\">Treasury Reference Required</mat-checkbox>\r\n        \r\n           \r\n      \r\n      </div>\r\n   \r\n  \r\n      <div fxFlex=\"25\">\r\n        <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n          <mat-label>External system name</mat-label>\r\n          <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.extSysName\" name=\"extSysName\" #extSysName=\"ngModel\"\r\n            readonly required>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n          <mat-label>Maximum Upload Limit</mat-label>\r\n          <input matInput type=\"number\" [(ngModel)]=\"createExtSys1.maxUploadLimit\" name=\"maxUploadLimit\"\r\n            #maxUploadLimit=\"ngModel\" required>\r\n        </mat-form-field>\r\n        \r\n      </div>\r\n      \r\n     \r\n  \r\n    </div>\r\n    <div fxLayout=\"row wrap\" fxLayoutGap=\"10\">\r\n    \r\n      <div fxFlex=\"25\">\r\n        <mat-checkbox (change)=\"checkCheckBoxvalue1($event)\">Auto Upload</mat-checkbox>\r\n  \r\n  \r\n      </div>\r\n  \r\n      <div fxFlex=\"25\">\r\n  \r\n        <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n          <mat-label>File Name</mat-label>\r\n          <input matInput type=\"text\" #fileName [(ngModel)]=\"createExtSys1.fileName\" name=\"fileName\"\r\n            [disabled]=\"!enablefilebrowser\" required>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"full-width\" appearance=\"outline\" *ngIf=\"enablefilebrowser\">\r\n          <mat-label>File Path</mat-label>\r\n          <input matInput type=\"text\" #filePath [(ngModel)]=\"createExtSys1.filePath\" name=\"filePath\" required>\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxFlex=\"25\" *ngIf=\"is_sftp\">\r\n         \r\n          \r\n         \r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\" fxLayoutGap=\"10\">\r\n        \r\n      <div fxFlex=\"25\">\r\n        <mat-checkbox (change)=\"checkCheckBoxvalue($event)\">Back Dating</mat-checkbox>\r\n  \r\n  \r\n  \r\n      </div>\r\n  \r\n      <div fxFlex=\"25\">\r\n  \r\n        <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n          <mat-label>Back Dating</mat-label>\r\n          <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.bdav\" name=\"bdav\" [disabled]=\"!is_edit\" required>\r\n        </mat-form-field>\r\n  \r\n      </div>\r\n  \r\n    </div>\r\n    <div fxLayout=\"row wrap\" fxLayoutGap=\"10\">\r\n       \r\n      <div fxFlex=\"25\">\r\n        <mat-checkbox (change)=getValue($event)>Future Dating</mat-checkbox>\r\n  \r\n  \r\n  \r\n      </div>\r\n  \r\n      <div fxFlex=\"25\">\r\n  \r\n        <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n          <mat-label>Future Dating</mat-label>\r\n          <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.fdav\" name=\"fdav\" [disabled]=\"!is_edit1\" required>\r\n        </mat-form-field>\r\n  \r\n      </div>\r\n  \r\n    </div>\r\n    <div fxLayout=\"row wrap\" fxLayoutGap=\"10\">\r\n       \r\n      <div fxFlex=\"25\">\r\n        <mat-checkbox (change)=getValueOfFCYrateVariance($event)>FCY Exchange Rate Variance</mat-checkbox>\r\n  \r\n  \r\n  \r\n      </div>\r\n  \r\n      <div fxFlex=\"25\">\r\n  \r\n        <mat-form-field class=\"full-width\" appearance=\"outline\" style=\"margin-inline: 150px;\">\r\n          <mat-label>FCY Exchange Rate Variance percentage</mat-label>\r\n          <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.fCYPercentage\" name=\"fCYPercentage\"\r\n            [disabled]=\"!is_edit1\" required>\r\n        </mat-form-field>\r\n  \r\n      </div>\r\n  \r\n    </div>\r\n    <div fxLayout=\"row wrap\" fxLayoutGap=\"10\">\r\n    \r\n      <div fxFlex=\"25\">\r\n    \r\n        <mat-checkbox (change)=getValue2($event)> Cross Financial Transaction.</mat-checkbox>\r\n      </div>\r\n  \r\n      <div fxFlex=\"25\">\r\n  \r\n        <mat-checkbox (change)=getValueSftp($event)>SFTP Required</mat-checkbox>\r\n      </div>\r\n      <div fxFlex=\"25\">\r\n  \r\n        <mat-checkbox (change)=getValueMfI($event)>Mandatory Field Impose</mat-checkbox>\r\n      </div>\r\n  \r\n    </div>\r\n  \r\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\">\r\n        <button #saveBtn type=\"submit\" mat-raised-button color=\"primary\" (click)=\"save(extSysCode.value)\"\r\n          [disabled]=\"!fn.form.valid\" *ngIf=\"!savebutton||!is_sftp\">Save</button>\r\n        <button mat-raised-button color=\"warn\" [routerLink]=\"'/sias-v2/ExtSysList'\">Exit</button>\r\n      </div>\r\n      <div fxLayout=\"column wrap\" fxFlex=\"45\" > \r\n   \r\n          <span>SFTP Details</span>\r\n          <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n              <mat-label>UserName</mat-label>\r\n              <input matInput type=\"text\"\r\n              placeholder=\"UserName\"  [(ngModel)]=\"createExtSys1.userName\" name=\"userName\"\r\n                required>\r\n            </mat-form-field>\r\n            <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>Password</mat-label>\r\n                <input matInput type=\"text\" \r\n                placeholder=\"Password\" [(ngModel)]=\"createExtSys1.password\" name=\"password\"\r\n                  required>\r\n              </mat-form-field>\r\n             \r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                  <mat-label>Port</mat-label>\r\n                  <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.sftpPort\" name=\"port\" placeholder=\"Port\" required>\r\n                </mat-form-field>\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                  <mat-label>Path</mat-label>\r\n                  <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.sftpPath\" name=\"path\" placeholder=\"Path\" required>\r\n                </mat-form-field>\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                  <mat-label>IpAddress</mat-label>\r\n                  <input matInput type=\"text\"  [(ngModel)]=\"createExtSys1.ipAddress\"\r\n                  placeholder=\"IP Address\" name=\"ipAddress\"\r\n                    required>\r\n                </mat-form-field>\r\n          \r\n      </div>\r\n      \r\n    </div>\r\n   \r\n  </mat-card>\r\n  \r\n  </form>  -->\r\n  <br>\r\n  <mat-card *ngIf=\"dataForm\" style=\"width: 60%;  margin-left:200px;\">\r\n      <mat-card-title>\r\n    \r\n      </mat-card-title>\r\n      <mat-card-content>\r\n    \r\n        <table id=\"customers\">\r\n          <tr>\r\n            <th>RECORD STATUS:</th>\r\n            <td>\r\n              <mat-chip>{{dataForm?.recordStatus }}</mat-chip>\r\n            </td>\r\n    \r\n            <th>CREATED BY:</th>\r\n            <td>\r\n              <mat-chip>{{dataForm?.creatorId }}</mat-chip>\r\n            </td>\r\n            <th>AUTHORIZED BY:</th>\r\n            <td>\r\n              <mat-chip>{{dataForm?.verifierId}}</mat-chip>\r\n            </td>\r\n            <!-- added By vidya for 583 issue -->\r\n            <th>First time Auth:</th>\r\n            <td>\r\n              <mat-chip>{{dataForm?.verifiedOnce}}</mat-chip>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <th>MODIFICATION NO:</th>\r\n            <td>\r\n              <mat-chip>{{dataForm?.versionNo}}</mat-chip>\r\n            </td>\r\n            <th>CREATION DATE:</th>\r\n            <td>\r\n              <mat-chip>{{dataForm?.createdAt | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n            </td>\r\n            <th>AUTHORIZATION DATE:</th>\r\n            <td>\r\n              <mat-chip>{{dataForm?.verifierDtStamp | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n            </td>\r\n            <th>STATUS:</th>\r\n            <td>\r\n    \r\n              <mat-chip>{{dataForm?.authStatus}}</mat-chip>\r\n    \r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  <!-- <form #fn=\"ngForm\" novalidate>\r\n      <mat-card style=\"text-align: center;width: 75%;margin-left: 15%\">\r\n        <div fxLayout=\"row\">\r\n    \r\n          <div fxFlex=\"100\">\r\n    \r\n    \r\n    \r\n    \r\n            <div>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>External System Code</mat-label>\r\n                <mat-select name=\"extSysCode\" #extSysCode (selectionChange)=\"getProcess(extSysCode.value)\"\r\n                  [(ngModel)]=\"createExtSys1.extSysCode\" #extSysCode=\"ngModel\" required>\r\n                  <mat-option *ngFor=\"let topping of data\" [value]=\"topping\">{{topping.extSysCode}}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>&nbsp;\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>External system name</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.extSysName\" name=\"extSysName\" #extSysName=\"ngModel\"\r\n                  readonly required>\r\n              </mat-form-field>\r\n            </div>\r\n            <div>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>Process code</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.processCode\" name=\"processCode\"\r\n                  #processCode=\"ngModel\" required>\r\n              </mat-form-field>&nbsp;\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>Maximum Upload Limit</mat-label>\r\n                <input matInput type=\"number\" [(ngModel)]=\"createExtSys1.maxUploadLimit\" name=\"maxUploadLimit\"\r\n                  #maxUploadLimit=\"ngModel\" required>\r\n              </mat-form-field>\r\n            </div>\r\n            <div style=\"margin-right: 21%\">\r\n              <mat-checkbox (change)=\"treasuryRequired($event)\">Treasury Reference Required</mat-checkbox>\r\n          </div>\r\n            <div>\r\n              <mat-checkbox (change)=\"checkCheckBoxvalue1($event)\">Auto Upload</mat-checkbox>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\"style=\"margin-left: 105px\">\r\n                <mat-label>File Name</mat-label>\r\n                <input matInput type=\"text\" #fileName [(ngModel)]=\"createExtSys1.fileName\" name=\"fileName\" [disabled]=\"!enablefilebrowser\" required>\r\n              </mat-form-field>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\" *ngIf=\"enablefilebrowser\">\r\n                <mat-label>File Path</mat-label>\r\n                <input matInput type=\"text\" #filePath [(ngModel)]=\"createExtSys1.filePath\" name=\"filePath\" required>\r\n              </mat-form-field>\r\n            </div>\r\n            <div>\r\n              <mat-checkbox (change)=\"checkCheckBoxvalue($event)\">Back Dating</mat-checkbox>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\" style=\"margin-left: 105px\">\r\n                <mat-label>Back Dating</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.bdav\" name=\"bdav\" [disabled]=\"!is_edit\" required>\r\n              </mat-form-field>\r\n            </div>\r\n            <div>\r\n              <mat-checkbox (change)=getValue($event)>Future Dating</mat-checkbox>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\" style=\"margin-left: 93px\">\r\n                <mat-label>Future Dating</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.fdav\" name=\"fdav\" [disabled]=\"!is_edit1\" required>\r\n              </mat-form-field>\r\n            </div>\r\n            <div>\r\n              <mat-checkbox (change)=getValueOfFCYrateVariance($event) style=\"margin-left: 20px\">FCY Exchange Rate Variance</mat-checkbox>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\" style=\"margin-inline: 150px;\">\r\n                <mat-label>FCY Exchange Rate Variance percentage</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.fCYPercentage\" name=\"fCYPercentage\"\r\n                  [disabled]=\"!is_edit1\" required>\r\n              </mat-form-field>\r\n            </div>\r\n            <div>\r\n              <mat-checkbox (change)=getValue2($event)> Cross Financial Transaction.</mat-checkbox>&nbsp;\r\n              <mat-checkbox (change)=getValueSftp($event)>SFTP Required</mat-checkbox>&nbsp;\r\n              <mat-checkbox (change)=getValueMfI($event)>Mandatory Field Impose</mat-checkbox>\r\n            </div>\r\n    \r\n    \r\n    \r\n    \r\n    \r\n          </div>\r\n    \r\n          <div fxFlex=\"25\" style=\"margin-left: 50px\" *ngIf=\"is_sftp\">\r\n    \r\n    \r\n            <span>SFTP Details</span>\r\n    \r\n    \r\n    \r\n            <div>\r\n    \r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>UserName</mat-label>\r\n                <input matInput type=\"text\" placeholder=\"UserName\" [(ngModel)]=\"createExtSys1.sftpUsername\" name=\"userName\"\r\n                  required>\r\n              </mat-form-field>\r\n    \r\n            </div>\r\n            <div>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>Password</mat-label>\r\n                <input matInput type=\"text\" placeholder=\"Password\" [(ngModel)]=\"createExtSys1.sftpPassword\" name=\"password\"\r\n                  required>\r\n              </mat-form-field>\r\n            </div>\r\n            <div>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>IpAddress</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.sftpIpaddress\" placeholder=\"IP Address\"\r\n                  name=\"ipAddress\" required>\r\n              </mat-form-field>\r\n    \r\n            </div>\r\n            <div>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>Port</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.sftpPort\" name=\"port\" placeholder=\"Port\" required>\r\n              </mat-form-field>\r\n            </div>\r\n            <div>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>Path</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.sftpPath\" name=\"path\" placeholder=\"Path\" required>\r\n              </mat-form-field>\r\n            </div>\r\n    \r\n    \r\n    \r\n    \r\n          </div>\r\n    \r\n        </div>\r\n        <br>\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\">\r\n          <button #saveBtn type=\"submit\" mat-raised-button color=\"primary\" (click)=\"save(extSysCode.value)\"\r\n            [disabled]=\"!fn.form.valid\" *ngIf=\"!savebutton||!is_sftp\">Save</button>\r\n          <button mat-raised-button color=\"warn\" [routerLink]=\"'/sias-v2/ExtSysList'\">Exit</button>\r\n        </div>\r\n      </mat-card>\r\n      <!-- <div fxLayout=\"row\">\r\n          <div fxFlex></div>\r\n          <div fxFlex=\"40\">\r\n            <mat-card style=\"margin-left: 50px\">\r\n           \r\n              <mat-card-content style=\"text-align: center;\">\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"space-between\">\r\n                  <div fxFlex=\"100\" class=\"pr-1\">\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>External System Code</mat-label>\r\n                        <mat-select name=\"extSysCode\" #extSysCode (selectionChange)=\"getProcess(extSysCode.value)\"\r\n                          [(ngModel)]=\"createExtSys1.extSysCode\" #extSysCode=\"ngModel\" required>\r\n                          <mat-option *ngFor=\"let topping of data\" [value]=\"topping\">{{topping.extSysCode}}\r\n                          </mat-option>\r\n                        </mat-select>\r\n                      </mat-form-field>\r\n                    </div>\r\n      \r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>External system name</mat-label>\r\n                        <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.extSysName\" name=\"extSysName\"\r\n                          #extSysName=\"ngModel\" readonly required>\r\n                      </mat-form-field>\r\n                    </div>\r\n      \r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Process code</mat-label>\r\n                        <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.processCode\" name=\"processCode\"\r\n                          #processCode=\"ngModel\" required>\r\n                      </mat-form-field>\r\n                    </div>\r\n                    \r\n      \r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Maximum Upload Limit</mat-label>\r\n                        <input matInput type=\"number\" [(ngModel)]=\"createExtSys1.maxUploadLimit\" name=\"maxUploadLimit\"\r\n                          #maxUploadLimit=\"ngModel\" required>\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-checkbox (change)=\"checkCheckBoxvalue1($event)\">Auto Upload</mat-checkbox>\r\n                    </div>\r\n      \r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>File Name</mat-label>\r\n                        <input matInput type=\"text\" #fileName [(ngModel)]=\"createExtSys1.fileName\" name=\"fileName\" required>\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div class=\"pb-1\" *ngIf=\"enablefilebrowser\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>File Path</mat-label>\r\n                        <input matInput type=\"text\" #filePath [(ngModel)]=\"createExtSys1.filePath\" name=\"filePath\" required>\r\n                      </mat-form-field>\r\n                    </div>\r\n                   \r\n                    <div class=\"pb-1\">\r\n                      <mat-checkbox (change)=\"checkCheckBoxvalue($event)\">Back Dated Allow</mat-checkbox>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Back Dated Allow Value</mat-label>\r\n                        <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.bdav\" name=\"bdav\" [disabled]=\"!is_edit\"\r\n                          required>\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-checkbox (change)=getValue($event)>Future Date Allow</mat-checkbox>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Future Date Allow Value</mat-label>\r\n                        <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.fdav\" name=\"fdav\" [disabled]=\"!is_edit1\"\r\n                          required>\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-checkbox (change)=getValueOfFCYrateVariance($event)  >FCY Rate Variance</mat-checkbox>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>FCY Exchange Rate Variance percentage</mat-label>\r\n                        <input matInput type=\"text\"  [(ngModel)]=\"createExtSys1.fCYPercentage\" name=\"fCYPercentage\"\r\n                          [disabled]=\"!is_edit1\" required>\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-checkbox (change)=getValue2($event)>Allowing cross financial transaction.</mat-checkbox>\r\n                    </div>\r\n                    <mat-toolbar color=\"primary\" style=\"height:30px; font-size: small;\">\r\n                        <span>SFTP Details</span>\r\n                    </mat-toolbar>\r\n                    <div class=\"pb-1\">\r\n                        <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                          <mat-label>UserName</mat-label>\r\n                          <input matInput type=\"text\"\r\n                          placeholder=\"UserName\"  [(ngModel)]=\"createExtSys1.userName\" name=\"userName\"\r\n                            required>\r\n                        </mat-form-field>\r\n                      </div>\r\n                      <div>\r\n                        <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                            <mat-label>Password</mat-label>\r\n                            <input matInput type=\"text\" \r\n                            placeholder=\"Password\" [(ngModel)]=\"createExtSys1.password\" name=\"password\"\r\n                              required>\r\n                          </mat-form-field>\r\n                        </div>\r\n                        <div>\r\n                            <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                                <mat-label>IpAddress</mat-label>\r\n                                <input matInput type=\"text\"  [(ngModel)]=\"createExtSys1.ipAddress\"\r\n                                placeholder=\"IP Address\" name=\"ipAddress\"\r\n                                  required>\r\n                              </mat-form-field>\r\n                            </div>\r\n                            <div>\r\n                                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                                    <mat-label>Port</mat-label>\r\n                                    <input matInput type=\"text\"  [(ngModel)]=\"createExtSys1.port\" name=\"port\" placeholder=\"Port\"\r\n                                      required>\r\n                                  </mat-form-field>\r\n                                </div>\r\n                                <div>\r\n                                    <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                                        <mat-label>Path</mat-label>\r\n                                        <input matInput type=\"text\"  [(ngModel)]=\"createExtSys1.path\" name=\"path\" placeholder=\"Path\"\r\n                                          required>\r\n                                      </mat-form-field>\r\n                                    </div>\r\n                      \r\n                  </div>\r\n                </div>\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\">\r\n                  <button #saveBtn type=\"submit\" mat-raised-button color=\"primary\" (click)=\"save(extSysCode.value)\"\r\n                    [disabled]=\"!fn.form.valid\" *ngIf=\"!savebutton\">Save</button>\r\n                  <button mat-raised-button color=\"warn\" [routerLink]=\"'/sias-v2/ExtSysList'\">Exit</button>\r\n                </div>\r\n              </mat-card-content>\r\n            </mat-card>\r\n          </div>\r\n      \r\n          <div fxFlex></div>\r\n        </div> -->\r\n  \r\n  <!-- <div fxLayout=\"row\" fxLayoutAlign=\"space-between\">\r\n                  <div fxFlex=\"100\" fxFlex.gt-xs=\"50\" class=\"pr-1\">\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>External System Code</mat-label>\r\n                        <mat-select name=\"extSysCode\" #extSysCode (selectionChange)=\"getProcess(extSysCode.value)\"\r\n                          [(ngModel)]=\"createExtSys1.extSysCode\">\r\n                          <mat-option *ngFor=\"let topping of data\" [value]=\"topping\">{{topping.extSysCode}}\r\n                          </mat-option>\r\n                        </mat-select>\r\n                      </mat-form-field>\r\n                    </div>\r\n        \r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>External system name</mat-label>\r\n                        <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.extSysName\" style=\"float: right; \"\r\n                          value=\"{{createExtSys2}}\" name=\"extSysName\">\r\n                      </mat-form-field>\r\n                    </div>\r\n        \r\n                    <div class=\"pb-1\" *ngIf>\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Module code</mat-label>\r\n                        <input matInput type=\"text\" [(ngModel)]=\"createExtSys1.moduleCode\" name=\"moduleCode\">\r\n                      </mat-form-field>\r\n                    </div>\r\n        \r\n                    <div class=\"pb-1\" *ngIf>\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Service code</mat-label>\r\n                        <input matInput type=\"text\" id=\"serviceCode\" [(ngModel)]=\"createExtSys1.serviceCode\" name=\"serviceCode\">\r\n                      </mat-form-field>\r\n                    </div>\r\n        \r\n                    <div class=\"pb-1\" >\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Process code</mat-label>\r\n                        <input matInput type=\"text\" id=\"processCode\" [(ngModel)]=\"createExtSys1.processCode\"\r\n                          style=\"float: right;\" name=\"processCode\">\r\n                      </mat-form-field>\r\n                    </div>\r\n        \r\n                    <div class=\"pb-1\" *ngIf>\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Destination</mat-label>\r\n                        <input matInput type=\"text\" id=\"destination\" [(ngModel)]=\"createExtSys1.destination\"\r\n                          style=\"float: right; \" name=\"destination\">\r\n                      </mat-form-field>\r\n                    </div>\r\n        \r\n                    <div class=\"pb-1\" *ngIf>\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Action</mat-label>\r\n                        <input matInput type=\"text\" id=\"action\" [(ngModel)]=\"createExtSys1.action\" style=\"float: right; \"\r\n                          name=\"action\">\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div class=\"pb-1\" *ngIf>\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>External system tag</mat-label>\r\n                        <input matInput type=\"text\" id=\"extSysTag\" [(ngModel)]=\"createExtSys1.extSysTag\" style=\"float: right; \"\r\n                          name=\"extSysTag\">\r\n                      </mat-form-field>\r\n                    </div>\r\n        \r\n        \r\n                  </div>\r\n        \r\n                  <div fxFlex=\"100\" fxFlex.gt-xs=\"50\" class=\"pr-1\" *ngIf>\r\n        \r\n        \r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Service tag</mat-label>\r\n                        <input matInput type=\"text\" name=\"serviceTag\" [(ngModel)]=\"createExtSys1.serviceTag\">\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Process tag</mat-label>\r\n                        <input matInput type=\"text\" name=\"processTag\" [(ngModel)]=\"createExtSys1.processTag\">\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-checkbox name=\"isExtSysNode\" [(ngModel)]=\"createExtSys1.isExtSysNode\">Is external system node ?\r\n                      </mat-checkbox>\r\n        \r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Module tag</mat-label>\r\n                        <input matInput type=\"text\" name=\"moduleTag\" [(ngModel)]=\"createExtSys1.moduleTag\">\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-checkbox name=\"isModuleNode\" [(ngModel)]=\"createExtSys1.isModuleNode\">Is module node ?</mat-checkbox>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-checkbox name=\"isProcessNode\" [(ngModel)]=\"createExtSys1.isProcessNode\">Is process node?\r\n                      </mat-checkbox>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Destination tag</mat-label>\r\n                        <input matInput type=\"text\" name=\"destinationTag\" [(ngModel)]=\"createExtSys1.destinationTag\">\r\n                      </mat-form-field>\r\n                    </div>\r\n        \r\n                    <div class=\"pb-1\">\r\n                      <mat-checkbox name=\"isDestNode\" [(ngModel)]=\"createExtSys1.isDestNode\">Is destination node?</mat-checkbox>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Message type</mat-label>\r\n                        <input matInput type=\"text\" id=\"messageType\" style=\"float: right; \" name=\"messageType\"\r\n                          [(ngModel)]=\"createExtSys1.messageType\">\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Request tag</mat-label>\r\n                        <input matInput type=\"text\" name=\"requestTag\" [(ngModel)]=\"createExtSys1.requestTag\">\r\n                      </mat-form-field>\r\n                    </div>\r\n        \r\n                  </div>\r\n        \r\n                  <div fxFlex=\"100\" fxFlex.gt-xs=\"50\" class=\"pr-1\" *ngIf>\r\n        \r\n        \r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Message duplication</mat-label>\r\n                        <input matInput type=\"text\" name=\"msgDuplication\" [(ngModel)]=\"createExtSys1.msgDuplication\">\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-select [(value)]=\"createExtSys1.commChannel\" #comm name=\"commChannel\">\r\n                          <mat-option>None</mat-option>\r\n                          <mat-option value=\"EJB\">EJB</mat-option>\r\n                          <mat-option value=\"MDB\">MDB</mat-option>\r\n                          <mat-option value=\"Directory\">Directory</mat-option>\r\n                        </mat-select>\r\n                      </mat-form-field>\r\n                    </div>\r\n        \r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Format type</mat-label>\r\n                        <input matInput type=\"text\" name=\"formatType\" [(ngModel)]=\"createExtSys1.formatType\">\r\n                      </mat-form-field>\r\n                    </div>\r\n        \r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Request schema name</mat-label>\r\n                        <input matInput type=\"text\" name=\"reqSchemaName\" [(ngModel)]=\"createExtSys1.reqSchemaName\">\r\n                      </mat-form-field>\r\n                    </div>\r\n        \r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Resp schema name</mat-label>\r\n                        <input matInput type=\"text\" name=\"respSchemaName\" [(ngModel)]=\"createExtSys1.respSchemaName\">\r\n                      </mat-form-field>\r\n                    </div>\r\n        \r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Error schema name</mat-label>\r\n                        <input matInput type=\"text\" name=\"errSchemaName\" [(ngModel)]=\"createExtSys1.errSchemaName\">\r\n                      </mat-form-field>\r\n        \r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Request queue name</mat-label>\r\n                        <input matInput type=\"text\" name=\"reqQueueName\" [(ngModel)]=\"createExtSys1.reqQueueName\">\r\n                      </mat-form-field>\r\n                    </div>\r\n        \r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Response queue name</mat-label>\r\n                        <input matInput type=\"text\" name=\"respQueueName\" [(ngModel)]=\"createExtSys1.respQueueName\">\r\n                      </mat-form-field>\r\n                    </div>\r\n        \r\n        \r\n        \r\n                  </div>\r\n        \r\n                  <div fxFlex=\"100\" fxFlex.gt-xs=\"50\" class=\"pr-1\" *ngIf>\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Error queue name</mat-label>\r\n                        <input matInput type=\"text\" id=\"errQueueName\" style=\"float: right; \" name=\"errQueueName\"\r\n                          [(ngModel)]=\"createExtSys1.errQueueName\">\r\n                      </mat-form-field>\r\n        \r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Request directory name</mat-label>\r\n                        <input matInput type=\"text\" name=\"reqDirectoryName\" [(ngModel)]=\"createExtSys1.reqDirectoryName\">\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Response directory name</mat-label>\r\n                        <input matInput type=\"text\" name=\"respDirectoryName\" [(ngModel)]=\"createExtSys1.respDirectoryName\">\r\n                      </mat-form-field>\r\n                    </div>\r\n        \r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Error directory name</mat-label>\r\n                        <input matInput type=\"text\" name=\"errDirectoryName\" [(ngModel)]=\"createExtSys1.errDirectoryName\">\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Request xslt name</mat-label>\r\n                        <input matInput type=\"text\" name=\"reqXsltName\" [(ngModel)]=\"createExtSys1.reqXsltName\">\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Response xslt name</mat-label>\r\n                        <input matInput type=\"text\" name=\"respXsltName\" [(ngModel)]=\"createExtSys1.respXsltName\">\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Latest amend number</mat-label>\r\n                        <input matInput type=\"text\" name=\"latestAmendNo\" [(ngModel)]=\"createExtSys1.latestAmendNo\">\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div class=\"pb-1\">\r\n                      <mat-checkbox name=\"errXsltName\" [(ngModel)]=\"createExtSys1.errXsltName\">Error xslt name?</mat-checkbox>\r\n                    </div>\r\n        \r\n                    <div class=\"pb-1\">\r\n                      <mat-label for=\"xsdFile\">Xsd file</mat-label>\r\n                      <input type=\"file\" id=\"xsdFile\" name=\"xsdFile\" [(ngModel)]=\"createExtSys1.xsdFile\">\r\n                    </div>\r\n        \r\n                  </div>\r\n        \r\n                </div> -->\r\n  \r\n  \r\n  <!-- </form>  -->\r\n  <!-- <br>\r\n    <mat-card *ngIf=\"dataForm\" style=\"width: 60%;  margin-left:200px;\">\r\n      <mat-card-title>\r\n    \r\n      </mat-card-title>\r\n      <mat-card-content>\r\n    \r\n        <table id=\"customers\">\r\n          <tr>\r\n            <th>RECORD STATUS:</th>\r\n            <td>\r\n              <mat-chip>{{dataForm?.recordStatus }}</mat-chip>\r\n            </td>\r\n    \r\n            <th>CREATED BY:</th>\r\n            <td>\r\n              <mat-chip>{{dataForm?.creatorId }}</mat-chip>\r\n            </td>\r\n            <th>AUTHORIZED BY:</th>\r\n            <td>\r\n              <mat-chip>{{dataForm?.verifierId}}</mat-chip>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <th>MODIFICATION NO:</th>\r\n            <td>\r\n              <mat-chip>{{dataForm?.versionNo}}</mat-chip>\r\n            </td>\r\n            <th>CREATION DATE:</th>\r\n            <td>\r\n              <mat-chip>{{dataForm?.createdAt | date:'d/M/yy'}}</mat-chip>\r\n            </td>\r\n            <th>AUTHORIZATION DATE:</th>\r\n            <td>\r\n              <mat-chip>{{dataForm?.verifierDtStamp | date:'d/M/yy'}}</mat-chip>\r\n            </td>\r\n            <th>STATUS:</th>\r\n            <td>\r\n    \r\n              <mat-chip>{{dataForm?.authStatus}}</mat-chip>\r\n    \r\n            </td>\r\n          </tr>\r\n        </table>\r\n      </mat-card-content>\r\n    </mat-card> -->\r\n  <br><br><br><br><br><br><br><br><br><br><br><br>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/extsummary/extsummary.component.html":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/extsummary/extsummary.component.html ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\"  style=\"height:30px; font-size: small;\">\r\n  <span>External System</span>\r\n</mat-toolbar>\r\n<br />\r\n<mat-card >\r\n  <mat-card-title>\r\n    <!-- External System -->\r\n  </mat-card-title>\r\n  <mat-card-content >\r\n    <div class=\"margin-333\">\r\n      <div fxLayout=\"row\" fxFlex=\"1 1 0%\" fxLayoutAlign=\"end center\" fxLayoutGap=\"5px\">\r\n        <button mat-raised-button color=\"primary\" *ngIf=\"roleCodes.new\" [routerLink]=\"'/sias-v2/ExcelExternalSys'\"> {{roleCodes.new.labelDescription}}</button>\r\n        <button mat-raised-button color=\"warn\" [routerLink]=\"'/dashboard'\">Exit</button>\r\n      </div>\r\n    </div>\r\n<br>\r\n<!-- <button (click)=\"exportAsXLSX()\" mat-button color=\"primary\">External System Report <i class=\"material-icons\">\r\n  cloud_download\r\n  </i></button> -->\r\n    <div class=\"margin-333\">\r\n      <table mat-table [dataSource]=\"dataSource\" matSort matSortActive=\"modifiedTime\" matSortDirection=\"desc\">\r\n\r\n        <!-- <ng-container matColumnDef=\"id\" hidden>\r\n              <th mat-header-cell *matHeaderCellDef class=\"text-md-center font-weight-bold text-white \">Id </th>\r\n              <td mat-cell *matCellDef=\"let element\" class=\"text-md-center \"> {{element.id}} </td>\r\n            </ng-container> -->\r\n\r\n        <ng-container matColumnDef=\"extSysCode\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>External System\r\n            Code </th>\r\n          <td mat-cell *matCellDef=\"let element\"  style=\"color:blue;\"><a\r\n            routerLink=\"/sias-v2/excelExtSysUpdate\"   (click)=\"getExtSys(element)\">\r\n              {{element.extSysCode}}</a> </td>\r\n        </ng-container>\r\n       \r\n        <!-- Name Column -->\r\n        <ng-container matColumnDef=\"extSysName\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>External System\r\n            Name </th>\r\n          <td mat-cell *matCellDef=\"let element\" > {{element.extSysName}} </td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"authStatus\">\r\n          <th mat-header-cell *matHeaderCellDef>Status</th>\r\n          <td mat-cell *matCellDef=\"let element\" > {{element.authStatus}} </td>\r\n        </ng-container>\r\n\r\n            <ng-container matColumnDef=\"modifiedTime\">\r\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>Date</th>\r\n          <td mat-cell *matCellDef=\"let element\" > {{element.modifiedTime | date}} </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n      </table>\r\n      <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n    </div>\r\n  </mat-card-content>\r\n</mat-card>\r\n<br><br><br><br><br><br><br><br>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/extsummary/updateexcelext/updateexcelext.component.html":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/extsummary/updateexcelext/updateexcelext.component.html ***!
  \*****************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\" style=\"height:30px; font-size: small;\">\r\n  <span>External System</span>\r\n</mat-toolbar>\r\n<br><br>\r\n<div fxLayout=\"row\">\r\n  <span fxFlex></span>\r\n  <div fxFlex=\"50\">\r\n    <mat-card style=\"width: 70%;margin-left:15%\">\r\n      <mat-card-title></mat-card-title>\r\n      <mat-card-content>\r\n\r\n        <form #fn=\"ngForm\" novalidate>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n            <div fxFlex=\"100\" fxFlex.gt-xs=\"50\" class=\"pr-1\">\r\n              <!-- <div class=\"pb-1\">\r\n                <mat-form-field class=\"full-width\">\r\n                  <input matInput type=\"text\" disabled placeholder=\"External System Code\" [(ngModel)]=\"formData.id\"\r\n                    name=\"id\">\r\n                </mat-form-field>\r\n              </div> -->\r\n              <div class=\"pb-1\">\r\n                <mat-form-field class=\"full-width\">\r\n                  <mat-label style=\"color: black\">External System Code</mat-label>\r\n                  <input matInput type=\"text\" placeholder=\"External System Code\" required\r\n                    [(ngModel)]=\"formData.extSysCode\" name=\"extSysCode\" readonly>\r\n                </mat-form-field>\r\n              </div>\r\n\r\n              <div class=\"pb-1\">\r\n                <mat-form-field class=\"full-width\">\r\n                  <mat-label style=\"color: black\">External System Name</mat-label>\r\n                  <input matInput type=\"text\" placeholder=\"External System Name\" required\r\n                    [(ngModel)]=\"formData.extSysName\" name=\"extSysName\"  (keyup)=\"fun(formData.extSysName)\" [readonly]=\"is_edit\">\r\n                </mat-form-field>\r\n              </div>\r\n\r\n              <!-- <div class=\"pb-1\">\r\n                <mat-form-field class=\"full-width\">\r\n                  <input matInput type=\"text\" placeholder=\"Department\" required\r\n                    [(ngModel)]=\"formData.department\" name=\"department\" [disabled]=\"is_edit\">\r\n                </mat-form-field>\r\n              </div> -->\r\n\r\n              <div class=\"pb-1\">\r\n                <mat-form-field class=\"full-width\" style=\"color: black\">\r\n                  <mat-label style=\"color: black\">Department</mat-label>\r\n                  <!-- <mat-label>Department   [(ngModel)]=\"formData.department\"</mat-label> -->\r\n                  <input type=\"text\" matInput style=\"color: black\" (keyup)=\"keyPress($event)\" [matAutocomplete]=\"auto\"\r\n                    [disabled]=\"is_edit\" placeholder=\"Department\" name=\"department\" required [(ngModel)]=\"formData.department\">\r\n\r\n                  <mat-autocomplete #auto=\"matAutocomplete\">\r\n                    <mat-option *ngFor=\"let o of allDeptNames \" [value]=\"o\">\r\n                      <b>{{ o }} </b>\r\n                    </mat-option>\r\n                  </mat-autocomplete>\r\n                </mat-form-field>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n          <!-- <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\r\n              <button mat-raised-button color=\"primary\" *ngIf=\" !editFunction && roleCodes.new\" [routerLink]=\"'/sias-v2/ExcelExternalSys'\">{{roleCodes.new.labelDescription}}</button>\r\n            <button mat-raised-button #updateBtn *ngIf=\"editFunction \"  color=\"primary\" [disabled]=\"savedisable\"\r\n              (click)=\"onSubmit(formData)\">Submit</button>\r\n            <button mat-raised-button color=\"warn\" [routerLink]=\"'/sias-v2/ExtSumamry'\">Exit</button>\r\n            <button mat-raised-button color=\"primary\" (click)=\"changeStatus()\" *ngIf=\"poovar && roleCodes.edit\">{{roleCodes.edit.labelDescription}}</button>\r\n            <button type=\"submit\" mat-raised-button color=\"primary\" *ngIf=\"!editFunction && roleCodes.auth\"\r\n              (click)=\"onClickOfAuth()\">{{roleCodes.auth.labelDescription}}</button> -->\r\n          <!-- <button type=\"button\" mat-raised-button color=\"red\" (click)=\"onClickOfDeleteOfUpdateExecel()\"\r\n              [disabled]=\"disableDeleteButton\">Delete</button> -->\r\n          <!-- <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"onClickOfClose()\"\r\n              *ngIf=\"formData.recordStatus =='OPEN' && !editFunction && roleCodes.close\">{{roleCodes.close.labelDescription}}</button> -->\r\n          <!-- && formData.authStatus !='U'\" give in close -->\r\n          <!-- <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"onClickOfReOpen()\" -->\r\n          <!-- *ngIf=\"formData.recordStatus =='CLOSED' && !editFunction && roleCodes.reopen\">{{roleCodes.reopen.labelDescription}}</button> -->\r\n\r\n\r\n          <!-- </div> -->\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"16px\">\r\n            <button mat-raised-button color=\"primary\" *ngIf=\" !editFunction && roleCodes.new\"\r\n              [routerLink]=\"'/sias-v2/ExcelExternalSys'\">{{roleCodes.new.labelDescription}}</button>\r\n            <button mat-raised-button #updateBtn *ngIf=\"editFunction \" color=\"primary\" [disabled]=\"!fn.form.valid || !space ||savedisable\"\r\n              (click)=\"onSubmit(formData)\">Submit</button>\r\n\r\n            <button mat-raised-button color=\"primary\" (click)=\"changeStatus()\"\r\n              *ngIf=\"poovar && roleCodes.edit && formData.recordStatus=='OPEN'\">{{roleCodes.edit.labelDescription}}</button>\r\n            <button type=\"submit\" mat-raised-button color=\"primary\"\r\n              *ngIf=\"!editFunction && roleCodes.auth && formData.authStatus=='UNAUTHORIZED'\"\r\n              (click)=\"onClickOfAuth()\">{{roleCodes.auth.labelDescription}}</button>\r\n            <!-- <button type=\"button\" mat-raised-button color=\"red\" (click)=\"onClickOfDeleteOfUpdateExecel()\"\r\n              [disabled]=\"disableDeleteButton\">Delete</button> -->\r\n              <!-- <button type=\"button\" mat-raised-button color=\"red\" (click)=\"onClickOfDeleteOfUpdateExecel()\" color=\"warn\" *ngIf=\"formData.verifiedOnce=='NO'\"\r\n              [disabled]=\"disableDeleteButton\">Delete</button>  -->\r\n                <!-- delete button by vidya -->\r\n                <button type=\"button\" mat-raised-button color=\"red\" (click)=\"onClickOfDeleteOfUpdateExecel()\" color=\"warn\" *ngIf=\"formData.verifiedOnce=='NO' &&!editFunction && roleCodes.delete\"\r\n                [disabled]=\"disableDeleteButton\">{{roleCodes.delete.labelDescription}}</button> \r\n            <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"onClickOfClose()\"\r\n              *ngIf=\"formData.recordStatus =='OPEN' && formData.verifiedOnce=='YES' && !editFunction && roleCodes.close\">{{roleCodes.close.labelDescription}}</button>\r\n            <!-- && formData.authStatus !='U'\" give in close -->\r\n            <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"onClickOfReOpen()\"\r\n              *ngIf=\"formData.recordStatus =='CLOSED' && formData.authStatus=='AUTHORIZED'&&!editFunction && roleCodes.reopen\">{{roleCodes.reopen.labelDescription}}</button>\r\n            <button mat-raised-button color=\"warn\" [routerLink]=\"'/sias-v2/ExtSumamry'\">Exit</button>\r\n\r\n          </div>\r\n        </form>\r\n\r\n\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n  <span fxFlex></span>\r\n</div>\r\n<br><br>\r\n<!--vidya starts here-->\r\n<div fxLayout=\"row\">\r\n  <div fxFlex></div>\r\n  <div fxFlex=\"95\">\r\n    <mat-card style=\"width: 70%;  margin-left:20%;\">\r\n      <mat-card-title>\r\n\r\n      </mat-card-title>\r\n      <mat-card-content>\r\n        <div fxLayout=\"row\">\r\n\r\n          <table id=\"customers\">\r\n            <tr>\r\n              <th>Record Status:</th>\r\n              <td>\r\n                <mat-chip>{{formData.recordStatus }}</mat-chip>\r\n              </td>\r\n              <th>Auth Status:</th>\r\n              <td>\r\n\r\n                <mat-chip>{{formData.authStatus}}</mat-chip>\r\n                <!-- <mat-form-field appearance=\"fill\">\r\n                  <mat-label>Status</mat-label>\r\n                  <input matInput type=\"text\" placeholder=\"\" #exSys>\r\n                  <mat-icon matSuffix>person</mat-icon>\r\n                </mat-form-field> -->\r\n              </td>\r\n              <th>Created By:</th>\r\n              <td>\r\n\r\n                <mat-chip>{{formData.modifiedBy}}</mat-chip>\r\n              </td>\r\n              <th>Authorized By:</th>\r\n              <td>\r\n                <mat-chip>{{formData.authorizedBy}}</mat-chip>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th>Modification No:</th>\r\n              <td>\r\n                <mat-chip>{{formData.version}}</mat-chip>\r\n              </td>\r\n              <th>Creation Date:</th>\r\n              <td>\r\n                <mat-chip>{{formData.modifiedTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n              </td>\r\n              <th>Authorized Date:</th>\r\n              <td>\r\n                <mat-chip>{{formData.authorizedTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n              </td>\r\n              <!-- added by vidya for issue id 583 -->\r\n              <th>First Time Auth</th>\r\n              <td>\r\n                <mat-chip>{{formData.verifiedOnce}}</mat-chip>\r\n              </td>\r\n\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n  <div fxFlex></div>\r\n\r\n</div>\r\n<!--ends here-->\r\n<br><br>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/create-rules/create-rules.component.html":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/create-rules/create-rules.component.html ***!
  \********************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\" style=\"height:30px; font-size: small;\">\r\n  <span>Create Rules</span>\r\n\r\n</mat-toolbar>\r\n<br>\r\n<div style=\"width:88%;padding-left: 10%\">\r\n  <mat-card *ngIf=\"!showRuleValidation\">\r\n    <form #createRule=\"ngForm\">\r\n      <div fxLayout=\"row wrap\">\r\n\r\n        <div fxFlex=\"100\">\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Rule Id</mat-label>\r\n              <input matInput type=\"text\" #ruleId=\"ngModel\" name=\"ruleId\" (keyup)=\"ruleIdInvalidOrNot(ruleId.value)\" [disabled]=\"disableSubmit\" required #ruleId #ruleId=\"ngModel\" [(ngModel)]=\"ruleConfig.ruleId\" required>\r\n              <mat-hint class=\"redC\" *ngIf=\"ruleIdInvalid\">Invalid RuleId</mat-hint>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Rule Name</mat-label>\r\n              <input matInput type=\"text\" name=\"ruleName\" [disabled]=\"disableSubmit\" #ruleName #ruleName=\"ngModel\" required\r\n                [(ngModel)]=\"ruleConfig.ruleName\">\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\"></div>\r\n          <div fxFlex=\"25\"></div>\r\n          <div fxFlex=\"10\"></div>\r\n        </div>\r\n      </div>\r\n      <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Source System</mat-label>\r\n\r\n              <input matInput name=\"sourceSystem\" required #sourceSystem [(ngModel)]=\"sourcesystem\"\r\n              (keyup)=\"onsearchingTablName($event)\" [matAutocomplete]=\"autotablName\" [disabled]=\"disableSubmit\">\r\n              <mat-icon matSuffix>arrow_drop_down</mat-icon>\r\n\r\n              <mat-autocomplete #autotablName=\"matAutocomplete\"  (selectionChange)=\"onSlectionExternalSystem($event)\"\r\n              (optionSelected)=\"onSlectionExternalSystem($event)\">\r\n               <mat-option *ngFor=\"let sys of externalsystem\"\r\n                 [value]=\"sys\" [hidden]=\"sys == desSystem || sys==validationData\">{{sys}}</mat-option>\r\n              </mat-autocomplete>\r\n\r\n\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Message Type</mat-label>\r\n              <mat-select (selectionChange)=\"onSelectionOFMessageType($event)\" name=\"messageType\"\r\n              #messageType=\"ngModel\" disabled\r\n              [(ngModel)]=\"sourceSysData.messageType\" required\r\n                (optionSelected)=\"onSelectionOFMessageType($event)\">\r\n                <mat-option value>--Please Select---</mat-option>\r\n                <mat-option value=\"I\">Incoming\r\n                </mat-option>\r\n                <mat-option value=\"O\">OutGoing\r\n                </mat-option>\r\n                <mat-option value=\"A\">All</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Source Service</mat-label>\r\n              <input matInput type=\"text\"  name=\"operationName\" [disabled]=\"disableSubmit\" [(ngModel)]=\"sourceSysData.operationName\" readonly>\r\n              <!-- <mat-select required name=\"operationName\" [(ngModel)]=\"sourceSysData.operationName\">\r\n                  <mat-option value>--Please Select---</mat-option>\r\n                <mat-option *ngFor=\"let serv of sourceService\" [value]=\"serv\">{{serv}}</mat-option>\r\n\r\n              </mat-select> -->\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Source Operation</mat-label>\r\n              <input matInput type=\"text\" name=\"serviceName\" [disabled]=\"disableSubmit\" [(ngModel)]=\"sourceSysData.serviceName\" readonly>\r\n              <!-- <mat-select required name=\"\">\r\n                  <mat-option value>--Please Select---</mat-option>\r\n                <mat-option *ngFor=\"let opt of sourceOperation\" [value]=\"opt.headerValue\">{{opt.headerValue}}</mat-option>\r\n\r\n              </mat-select> -->\r\n\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"10\"></div>\r\n        </div>\r\n      </div>\r\n      <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Destination System</mat-label>\r\n              <input matInput name=\"destinationSystem\"\r\n              (keyup)=\"onsearchingTablName($event)\" [(ngModel)]=\"destination\"\r\n              [matAutocomplete]=\"autotablName1\" #destinationSystem \r\n                 required [disabled]=\"disableSubmit\">\r\n                <mat-icon matSuffix>arrow_drop_down</mat-icon>\r\n\r\n              <mat-autocomplete #autotablName1=\"matAutocomplete\"  (selectionChange)=\"destinaltionSelection($event)\"\r\n              (optionSelected)=\"destinaltionSelection($event)\">\r\n                <mat-option *ngFor=\"let sys of externalsystem\" [value]=sys [hidden]=\"sys === srcSystem || sys ==validationData \">{{sys}}</mat-option>\r\n              </mat-autocomplete>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Message Type</mat-label>\r\n              <mat-select (selectionChange)=\"ondestinationMsgType($event)\"required disabled\r\n              name=\"destinationmessageType\" [(ngModel)]=\"destinationSysData.messageType\" [disabled]=\"disableSubmit\"\r\n                (optionSelected)=\"ondestinationMsgType($event)\">\r\n                <mat-option value>--Please Select---</mat-option>\r\n                <mat-option value=\"I\">Incoming\r\n                </mat-option>\r\n                <mat-option value=\"O\">OutGoing\r\n                </mat-option>\r\n                <mat-option value=\"A\">All</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Destination Service</mat-label>\r\n\r\n               <input matInput type=\"text\" name=\"destinationserviceName\" #ngModel #destServ #destServ=\"ngModel\" [disabled]=\"disableSubmit\"\r\n                [(ngModel)]=\"destinationSysData.serviceName\" readonly>  \r\n                <!-- <mat-select required>\r\n                  <mat-option value>--Please Select---</mat-option>\r\n                  <mat-option *ngFor=\"let serv of destinatioRespService\" [value]=\"serv\">{{serv}}</mat-option>\r\n  \r\n                </mat-select> -->\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Destination Operation</mat-label>\r\n              <!-- <mat-select required>\r\n                  <mat-option value>--Please Select---</mat-option>\r\n                <mat-option *ngFor=\"let opert of destinationRespOperation\" [value]=\"opert\">{{opert}}</mat-option>\r\n\r\n              </mat-select> -->\r\n              <input matInput type=\"text\" name=\"destinationOperation\" [disabled]=\"disableSubmit\" [(ngModel)]=\"destinationSysData.operationName\" readonly>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"10\"></div>\r\n        </div>\r\n      </div>\r\n      <div fxLayout=\"row wrap\"> \r\n        <div fxFlex=\"100\" *ngFor=\"let multiple of multipleValidation;let i=index\">\r\n            <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\">\r\n                  <div fxFlex=\"25\">\r\n                    <mat-form-field appearance=\"outline\">\r\n        \r\n                      <mat-label>Validation System</mat-label>\r\n                      <input matInput required (keyup)=\"onsearchingTablName($event)\"  name=\" validationSystem_{{i}}\"\r\n                      #validationSystem [disabled]=\"disableSubmit\"\r\n                      [matAutocomplete]=\"autotablName2\" \r\n                        #validationSystem=\"ngModel\" [(ngModel)]=\"multiple.validationSystem\">\r\n                        <mat-icon matSuffix>arrow_drop_down</mat-icon>\r\n                        <mat-autocomplete #autotablName2=\"matAutocomplete\"  (selectionChange)=\"onValidtion($event,i)\"\r\n                        (optionSelected)=\"onValidtion($event,i)\">\r\n                        \r\n                        <mat-option *ngFor=\"let sys of externalsystem\" [value]=sys [hidden]=\"issourceSysDisabled(sys)|| sys == desSystem || sys == srcSystem\" >{{sys}}</mat-option>\r\n                      </mat-autocomplete>\r\n                    </mat-form-field>\r\n                  </div>\r\n                  <div fxFlex=\"25\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <mat-label>Message Type</mat-label>\r\n                      <mat-select (selectionChange)=\"onvalidateMsgType($event)\" (optionSelected)=\"onvalidateMsgType($event)\" required name=\"messageType_{{i}}\"\r\n                      [(ngModel)]=\"multiple.messageType\" disabled>\r\n                          <mat-option value>--Please Select---</mat-option>\r\n                        <mat-option value=\"I\">Incoming\r\n                        </mat-option>\r\n                        <mat-option value=\"O\">OutGoing\r\n                        </mat-option>\r\n                        <mat-option value=\"A\">All</mat-option>\r\n                      </mat-select>\r\n                    </mat-form-field>\r\n                  </div>  \r\n                  <div fxFlex=\"25\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <mat-label>Validation Service</mat-label>\r\n                      <input matInput name=\"service_{{i}}\" [(ngModel)]=\"multiple.service\" readonly [disabled]=\"disableSubmit\">\r\n                     <!-- <mat-select required name=\"service_{{i}}\" [(ngModel)]=\"validationTransData.serviceName\">\r\n                        <mat-option value>--Please Select---</mat-option>\r\n                       <mat-option *ngFor=\"let valServ of valService\" [value]=\"valServ\">\r\n                        {{valServ}}\r\n                       </mat-option>\r\n                     </mat-select> -->\r\n                    </mat-form-field>\r\n                  </div>\r\n                  <div fxFlex=\"25\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <mat-label>Validation Operation</mat-label>\r\n                      <input matInput type=\"text\" [(ngModel)]=\"multiple.operation\"  name=\"operation{{i}}\" readonly [disabled]=\"disableSubmit\">\r\n                      <!-- <mat-select required [(ngModel)]=\"validationTransData.operationName\"  name=\"operation{{i}}\">\r\n                          <mat-option value>--Please Select---</mat-option>\r\n                        <mat-option *ngFor=\"let valOpt of valOperation\" [value]=\"valOpt\">\r\n                         {{valOpt}}\r\n                        </mat-option>\r\n                      </mat-select> -->\r\n                    </mat-form-field>\r\n                  </div>\r\n                  <div fxFlex=\"10\">\r\n                      <!-- <button mat-raised-button  color=\"primary\"> -->\r\n                        <mat-icon  (click)=\"removeValidation(i)\" color=\"warn\" style=\"cursor: pointer;margin-top:10px\">delete</mat-icon>\r\n                    <!-- </button> -->\r\n                    </div>\r\n                </div>\r\n              </div>\r\n\r\n        </div>\r\n      </div>\r\n      <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"60\">\r\n                <!-- <button mat-raised-button > -->\r\n                    <mat-icon (click)=\"addValidation()\" color=\"primary\" style=\"cursor: pointer\">add</mat-icon>\r\n                <!-- </button> -->\r\n            </div>\r\n        </div>\r\n      </div>\r\n      <!-- <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n\r\n              <mat-label>Validation System</mat-label>\r\n              <mat-select (selectionChange)=\"onValidtion($event)\" multiple name=\"validationSystem\" #validationSystem\r\n                #validationSystem=\"ngModel\" [(ngModel)]=\"ruleConfig.validationSystems\">\r\n                <mat-option value>--Please Select---</mat-option>\r\n                <mat-option *ngFor=\"let sys of externalsystem\" [value]=sys>{{sys}}</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Message Type</mat-label>\r\n              <mat-select (selectionChange)=\"onvalidateMsgType($event)\" (optionSelected)=\"onvalidateMsgType($event)\">\r\n                  <mat-option value>--Please Select---</mat-option>\r\n                <mat-option value=\"I\">Incoming\r\n                </mat-option>\r\n                <mat-option value=\"O\">OutGoing\r\n                </mat-option>\r\n                <mat-option value=\"A\">All</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Validation Service</mat-label>\r\n             <mat-select>\r\n                <mat-option value>--Please Select---</mat-option>\r\n               <mat-option *ngFor=\"let valServ of valService\" [value]=\"valServ\">\r\n                {{valServ}}\r\n               </mat-option>\r\n             </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Validation Operation</mat-label>\r\n              <input matInput type=\"text\" name=\"validationOperation\">\r\n              <mat-select>\r\n                  <mat-option value>--Please Select---</mat-option>\r\n                <mat-option *ngFor=\"let valOpt of valOperation\" [value]=\"valOpt\">\r\n                 {{valOpt}}\r\n                </mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n      </div> -->\r\n      <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\" fxLayoutGap=\"8px\">\r\n          <div fxFlex=\"40\"></div>\r\n          <div fxFlex=\"10\">\r\n\r\n            <button mat-raised-button (click)=\"onNext()\" color=\"primary\"  [disabled]=\"!createRule.valid || !srcSystem || !desSystem || ruleIdInvalid\">Next</button>\r\n\r\n\r\n          </div>\r\n          <div fxFlex=\"10\">\r\n\r\n            <button mat-raised-button type=\"reset\" color=\"warn\" (click)=\"onReset()\">Reset</button>\r\n          </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n      </div>\r\n    </form>\r\n  \r\n  </mat-card>\r\n  \r\n</div>\r\n<div *ngIf=\"showpBar\">\r\n  <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\r\n</div>\r\n<mat-card *ngIf=\"showRuleValidation\">\r\n    <form #createRule=\"ngForm\">\r\n  <div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\">\r\n      <div fxFlex=\"25\">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-left: 30px\">\r\n          <mat-label>Source System</mat-label>\r\n          <input matInput name=\"sourceSystem\" [(ngModel)]=\"sourcesystem\" required [disabled]=\"disableSubmit\" readonly>\r\n        </mat-form-field>\r\n      </div>\r\n    \r\n    <div fxFlex=\"25\" *ngFor=\"let valiadtion of multipleValidation;let i=index\">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-left: 30px\">\r\n          <mat-label>Validation System</mat-label>\r\n\r\n          <input matInput name=\"validtion_{{i}}\" [(ngModel)]=\"valiadtion.validationSystem\" required [disabled]=\"disableSubmit\" readonly>\r\n\r\n        </mat-form-field>\r\n      </div>\r\n     <div fxFlex=\"25\"></div>\r\n     <div fxFlex=\"25\"></div>\r\n     <div fxFlex=\"10\"></div>\r\n    </div>\r\n  </div>\r\n  <div>\r\n\r\n\r\n  </div>\r\n  <!-- <div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\" fxLayoutGap=\"8px\">\r\n      <div>\r\n      <mat-label *ngIf=\"sourceDetails=='TCP/IP'\" fxFlex=\"25\"><b>Field No</b></mat-label>\r\n      <mat-label *ngIf=\"sourceDetails=='Https/Http'\" fxFlex=\"25\"><b>Tag</b></mat-label>\r\n    </div>\r\n\r\n\r\n      <div *ngFor=\"let c of multipleValidation\">\r\n       \r\n      <mat-label  *ngIf=\"valDeatils=='Https/Http'\" fxFlex=\"25\"><b>Tag</b></mat-label>\r\n      <mat-label  *ngIf=\"valDeatils=='TCP/IP'\" fxFlex=\"25\"><b>Field No</b></mat-label>\r\n    </div> \r\n   \r\n      \r\n    \r\n      <mat-label  fxFlex=\"25\"><b>Validation Method</b></mat-label>\r\n      <mat-label fxFlex=\"25\"><b>Validation Deatils</b></mat-label> \r\n      <mat-label fxFlex=\"10\"></mat-label>\r\n\r\n    </div>\r\n  </div>-->\r\n  <div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\">\r\n      <div fxFlex=\"25\" style=\"margin-left: 30px\">\r\n        <mat-label *ngIf=\"sourceDetails=='TCP/IP'\" ><b></b></mat-label>\r\n        <mat-label *ngIf=\"sourceDetails=='Https/Http'\" ><b></b></mat-label>\r\n      </div>\r\n      <div fxFlex=\"25\" *ngFor=\"let c of multipleValidation\" style=\"margin-left: 30px\">\r\n        <mat-label  *ngIf=\"valDeatils=='Https/Http'\" ><b></b></mat-label>\r\n          <mat-label  *ngIf=\"valDeatils=='TCP/IP'\" ><b></b></mat-label>\r\n      </div>\r\n      <div fxFlex=\"25\" style=\"margin-left: -80px\">\r\n        <!-- <mat-label  ><b>Validation Method</b></mat-label> -->\r\n    \r\n      </div>\r\n      <div fxFlex=\"25\" >\r\n        <!-- <mat-label ><b>Validation Deatils</b></mat-label> -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div fxLayout=\"row wrap\" *ngFor=\"let dataarr of arrRuleValidation;let i=index\" #ruleValidation>\r\n    <div fxFlex=\"100\">\r\n      <div fxFlex=\"25\" *ngIf=\"sourceDetails=='TCP/IP'\">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-left: 30px\">\r\n          <mat-label>Field No</mat-label>\r\n          <mat-select [disabled]=\"disableSubmit\"  name=\"messageKey_{{i}}\" required\r\n          #messageKey=\"ngModel\"\r\n          [(ngModel)]=\"dataarr.messageKey\">\r\n              <mat-option *ngFor=\"let data of messageBasisIso\"  [value]=\"data.messageKey\" required>{{data.messageKey}}<{{data.messageBasis}}</mat-option>\r\n            <!-- <mat-option value=\"data\" *ngFor=\"let data of messageBasisIso\">{{data}}</mat-option> -->\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxFlex=\"25\" *ngIf=\"sourceDetails=='Https/Http'\">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-left: 30px\">\r\n          <mat-label>Tag</mat-label>\r\n          <mat-select [disabled]=\"disableSubmit\"  name=\"messageKey_{{i}}\" required\r\n          #messageKey=\"ngModel\"\r\n          [(ngModel)]=\"dataarr.messageKey\">\r\n            <!-- <mat-option  *ngFor=\"let data of xmlRespData\" value=\"data\">{{data}}</mat-option> -->\r\n            <mat-option  *ngFor=\"let data of messageBasisIso\" [value]=\"data.messageBasis\" required >{{data.messageBasis}}</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n      <div *ngFor=\"let x of multipleValidation;let i=index\">\r\n      <div fxFlex=\"25\" *ngIf=\"valDeatils=='TCP/IP'\">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-left: 30px\">\r\n          <mat-label>Field No</mat-label>\r\n          <mat-select [disabled]=\"disableSubmit\" name=\"messageKey_{{i}}\" required\r\n          #messageKey=\"ngModel\" \r\n          [(ngModel)]=\"x.messageKey\">\r\n            <mat-option *ngFor=\"let data of xmlRespData\" [value]=\"data.messageKey\" required >{{data.messageKey}}<{{data.messageBasis}}</mat-option>\r\n            <!-- <mat-option  *ngFor=\"let data of messageBasisIso\" value=\"data.messageBasis\">{{data.messageBasis}}</mat-option> -->\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxFlex=\"25\" *ngIf=\"valDeatils=='Https/Http'\">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-left: 30px\">\r\n          <mat-label>Tag</mat-label>\r\n          <mat-select [disabled]=\"disableSubmit\" name=\"messageKey_{{i}}\" required\r\n          #messageKey=\"ngModel\" \r\n          [(ngModel)]=\"x.messageKey\">\r\n              <mat-option  *ngFor=\"let data of xmlRespData\" [value]=\"data.messageBasis\" required >{{data.messageBasis}}</mat-option>\r\n            <!-- <mat-option  *ngFor=\"let data of xmlRespData\" value=\"data\">{{data}}</mat-option> -->\r\n            <!-- <mat-option  *ngFor=\"let data of messageBasisIso\" value=\"data.messageBasis\">{{data.messageBasis}}</mat-option> -->\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n    </div>\r\n      <div fxFlex=\"25\">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-left: 20px\">\r\n          <mat-label>Validation Method</mat-label>\r\n          <input type=\"text\" name=\"validationMethod\"\r\n           #validationMethod=\"ngModel\" matInput required [disabled]=\"disableSubmit\"\r\n            [(ngModel)]=\"dataarr.validationMethod\">\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxFlex=\"25\">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-left: 20px\">\r\n          <mat-label>Validation Details</mat-label>\r\n          <input type=\"text\" matInput name=\"validationDetail\" required\r\n          #validationDetail=\"ngModel\" [disabled]=\"disableSubmit\"\r\n          [(ngModel)]=\"dataarr.validationDetail\">\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxFlex=\"10\">\r\n        <!-- <button mat-raised-button  color=\"primary\"> -->\r\n          <mat-icon (click)=\"removeCreateRule(i)\" color=\"warn\" style=\"cursor: pointer;margin-top:10px\" [ngClass]=\"{'readonly-wrapper' : disableSubmit}\">delete</mat-icon>\r\n      <!-- </button> -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\">\r\n    <div fxFlex=\"60\">\r\n        <!-- <button mat-raised-button > -->\r\n            <mat-icon (click)=\"addCreateRule()\" color=\"primary\" style=\"cursor: pointer\" [ngClass]=\"{'readonly-wrapper' : disableSubmit}\">add</mat-icon>\r\n        <!-- </button> -->\r\n    </div>\r\n    </div>\r\n    </div>\r\n    <br>\r\n  <div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\">\r\n      <div fxFlex=\"40\"></div>\r\n      <div fxFlex=\"50\" fxLayoutGap=\"8px\">\r\n       \r\n        <button mat-raised-button (click)=\"Previous()\" color=\"warn\" [disabled]=\"disableSubmit\">Previous</button>\r\n        <button mat-raised-button (click)=\"submittingCreateRule()\" [disabled]=\"!createRule.valid || disableSubmit\"color=\"primary\">Submit</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!-- <div fxLayout=\"row wrap\" *ngFor=\"let valiadtion of ruleValidtionResp\">\r\n      <div fxFlex=\"100\" >\r\n        <div fxFlex=\"16\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Field No</mat-label>\r\n            <input matInput [(ngModel)]=\"valiadtion.fieldNo\">\r\n          </mat-form-field>\r\n        </div>\r\n      <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>Node</mat-label>\r\n               <mat-select name=\"node\" #node #node=\"ngModel\" >\r\n                 <mat-option  *ngFor=\"let node of valiadtion.node;let i=index\"\r\n                 [value]=\"node[i]\">{{node[i]}}</mat-option>\r\n               </mat-select>\r\n              </mat-form-field>\r\n        </div>\r\n        \r\n      </div>\r\n    </div> -->\r\n  </form>\r\n</mat-card>\r\n\r\n<br><br>\r\n<!-- auditlog -->\r\n<div fxLayout=\"row\" *ngIf=\"auditShowStatus\">\r\n  <div fxFlex></div>\r\n  <div fxFlex=\"95\">\r\n    <mat-card style=\"width: 70%;  margin-left:260px;\">\r\n      <mat-card-title>\r\n      </mat-card-title>\r\n      <mat-card-content>\r\n        <div fxLayout=\"row\">\r\n          <table id=\"customers\">\r\n            <tr>\r\n              <th>Record Status:</th>\r\n              <td>\r\n                <mat-chip>{{ruleConfig.recordStatus }}</mat-chip>\r\n              </td>\r\n              <th>Input By:</th>\r\n              <td>\r\n                <mat-chip>{{ruleConfig.creatorId}}</mat-chip>\r\n              </td>\r\n              <th>Verified By:</th>\r\n              <td>\r\n                <mat-chip>{{ruleConfig.approverId}}</mat-chip>\r\n              </td>\r\n              <th>Verified Once:</th>\r\n              <td>\r\n                <mat-chip>{{ruleConfig.approvedEver }}</mat-chip>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th>Modification No:</th>\r\n              <td>\r\n                <!-- <mat-chip>{{ruleResp.version}}</mat-chip> -->\r\n              </td>\r\n              <th>Input Date:</th>\r\n              <td>\r\n                <mat-chip>{{ruleConfig.createdTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n\r\n              </td>\r\n              <th>Verified Date:</th>\r\n              <td>\r\n                <mat-chip>{{ruleConfig.approvedTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n              </td>\r\n\r\n              <th>Verified Status:</th>\r\n              <td>\r\n                <mat-chip>{{ruleConfig.versionNo}}</mat-chip>\r\n              </td>\r\n\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>\r\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/create-rules/edit-rules/edit-rules.component.html":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/create-rules/edit-rules/edit-rules.component.html ***!
  \*****************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\" style=\"height:30px; font-size: small;\">\r\n  <span>Create Rules</span>\r\n\r\n</mat-toolbar>\r\n<br>\r\n<div style=\"width:88%;padding-left: 10%\">\r\n  <mat-card *ngIf=\"!showRuleValidation\">\r\n    <form #createRule createRule=\"ngForm\">\r\n      <div fxLayout=\"row wrap\">\r\n\r\n        <div fxFlex=\"100\">\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Rule Id</mat-label>\r\n              <input matInput type=\"text\" name=\"ruleId\" required #ruleId #ruleId=\"ngModel\" [(ngModel)]=\"ruleConfig.ruleId\" required readonly>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Rule Name</mat-label>\r\n              <input matInput type=\"text\" name=\"ruleName\" #ruleName #ruleName=\"ngModel\" required readonly\r\n                [(ngModel)]=\"ruleConfig.ruleName\">\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\"></div>\r\n          <div fxFlex=\"25\"></div>\r\n          <div fxFlex=\"10\"></div>\r\n        </div>\r\n      </div>\r\n     \r\n      \r\n      <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Source System</mat-label>\r\n              <mat-select name=\"sourceSystem\" required [disabled]=\"!isEdit\"\r\n              #sourceSystem #sourceSystem=\"ngModel\"\r\n               [(ngModel)]=\"sourcedata\"\r\n                (selectionChange)=\"onSlectionExternalSystem($event.value)\"\r\n                (optionSelected)=\"onSlectionExternalSystem($event.value)\">\r\n                <mat-option value>--Please Select---</mat-option>\r\n                <mat-option *ngFor=\"let sys of externalsystem\"\r\n                 [value]=\"sys\" [hidden]=\"sys == destination || sys==validationData\">{{sys}}</mat-option>\r\n\r\n\r\n              </mat-select>\r\n\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Message Type</mat-label>\r\n              <mat-select (selectionChange)=\"onSelectionOFMessageType($event)\" name=\"messageType\"\r\n              #messageType=\"ngModel\" disabled\r\n              [(ngModel)]=\"sourceSysData.messageType\" required\r\n                (optionSelected)=\"onSelectionOFMessageType($event)\">\r\n                <mat-option value>--Please Select---</mat-option>\r\n                <mat-option value=\"I\">Incoming\r\n                </mat-option>\r\n                <mat-option value=\"O\">OutGoing\r\n                </mat-option>\r\n                <mat-option value=\"A\">All</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Source Service</mat-label>\r\n              <input matInput type=\"text\"  name=\"operationName\" [(ngModel)]=\"sourceSysData.serviceName\" readonly>\r\n             \r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Source Operation</mat-label>\r\n              <input matInput type=\"text\" name=\"serviceName\" [(ngModel)]=\"sourceSysData.operationName\" readonly>\r\n             \r\n\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"10\"></div>\r\n        </div>\r\n      </div>\r\n     <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Destination System</mat-label>\r\n              <mat-select name=\"destinationSystem\" [disabled]=\"!isEdit\"\r\n              (selectionChange)=\"destinaltionSelection($event.value)\"\r\n              [(ngModel)]=\"destinationId\"\r\n               #destinationSystem required (optionSelected)=\"destinaltionSelection($event.value)\"\r\n                #destinationSystem=\"ngModel\">\r\n                <mat-option value>--Please Select---</mat-option>\r\n                <mat-option *ngFor=\"let sys of externalsystem\" [value]=sys [hidden]=\"sys === sourcesystem || sys ==validationData \">{{sys}}</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Message Type</mat-label>\r\n              <mat-select (selectionChange)=\"ondestinationMsgType($event)\"required disabled\r\n              name=\"destinationmessageType\" [(ngModel)]=\"destinationSysData.messageType\"\r\n                (optionSelected)=\"ondestinationMsgType($event)\">\r\n                <mat-option value>--Please Select---</mat-option>\r\n                <mat-option value=\"I\">Incoming\r\n                </mat-option>\r\n                <mat-option value=\"O\">OutGoing\r\n                </mat-option>\r\n                <mat-option value=\"A\">All</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Destination Service</mat-label>\r\n\r\n               <input matInput type=\"text\" name=\"destinationserviceName\" #ngModel #destServ #destServ=\"ngModel\"\r\n                [(ngModel)]=\"destinationSysData.serviceName\" readonly>  \r\n              \r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Destination Operation</mat-label>\r\n              \r\n              <input matInput type=\"text\" name=\"destinationOperation\" [(ngModel)]=\"destinationSysData.operationName\" readonly>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"10\"></div>\r\n        </div>\r\n      </div>\r\n      <div fxLayout=\"row wrap\"> \r\n        <div fxFlex=\"100\" *ngFor=\"let multiple of multipleValidationData;let i=index\">\r\n            <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"100\">\r\n                  <div fxFlex=\"25\">\r\n                    <mat-form-field appearance=\"outline\">\r\n        \r\n                      <mat-label>Validation System</mat-label>\r\n                      <mat-select required (selectionChange)=\"onValidtion($event.value,i)\" \r\n                      (optionSelected)=\"onValidtion($event.value,i)\" \r\n                      name=\"validationSystem_{{i}}\" [disabled]=\"!isEdit\"\r\n                      #validationSystem\r\n                        #validationSystem=\"ngModel\" [(ngModel)]=\"multiple.validationSystem\">\r\n                        <mat-option value>--Please Select---</mat-option>\r\n                        <mat-option *ngFor=\"let sys of externalsystem\" [value]=sys [hidden]=\" sys == destination || sys == sourcesystem\">{{sys}}</mat-option>\r\n                      </mat-select>\r\n                    </mat-form-field>\r\n                  </div>\r\n                  <div fxFlex=\"25\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <mat-label>Message Type</mat-label>\r\n                      <mat-select (selectionChange)=\"onvalidateMsgType($event)\" (optionSelected)=\"onvalidateMsgType($event)\" required name=\"messageType_{{i}}\"\r\n                      [(ngModel)]=\"multiple.messageType\" disabled>\r\n                          <mat-option value>--Please Select---</mat-option>\r\n                        <mat-option value=\"I\">Incoming\r\n                        </mat-option>\r\n                        <mat-option value=\"O\">OutGoing\r\n                        </mat-option>\r\n                        <mat-option value=\"A\">All</mat-option>\r\n                      </mat-select>\r\n                    </mat-form-field>\r\n                  </div>  \r\n                  <div fxFlex=\"25\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <mat-label>Validation Service</mat-label>\r\n                      <input matInput name=\"service_{{i}}\" [(ngModel)]=\"multiple.service\" readonly>\r\n              \r\n                    </mat-form-field>\r\n                  </div>\r\n                  <div fxFlex=\"25\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                      <mat-label>Validation Operation</mat-label>\r\n                      <input matInput type=\"text\" [(ngModel)]=\"multiple.operation\"  name=\"operation_{{i}}\" readonly>\r\n              \r\n                    </mat-form-field>\r\n                  </div>\r\n                  <div fxFlex=\"10\">\r\n              \r\n                        <mat-icon (click)=\"removeValidation(i)\" *ngIf=\"isEdit\" color=\"warn\" style=\"cursor: pointer;margin-top:10px\">delete</mat-icon>\r\n              \r\n                    </div>\r\n                </div>\r\n              </div>\r\n\r\n        </div>\r\n      </div> \r\n      <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n            <div fxFlex=\"60\">\r\n              \r\n                    <mat-icon (click)=\"addValidation()\" color=\"primary\" *ngIf=\"isEdit\"  style=\"cursor: pointer\">add</mat-icon>\r\n              \r\n            </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\" fxLayoutGap=\"8px\">\r\n          <div fxFlex=\"40\"></div>\r\n          <div fxFlex=\"60\" fxLayoutGap=\"8px\">\r\n\r\n            <button mat-raised-button (click)=\"onNext()\" color=\"primary\" *ngIf=\"isEdit\">Next</button>\r\n            <button mat-raised-button  (click)=\"onEdit()\" color=\"warn\" *ngIf=\"!isEdit\" [disabled]=\"editBtn\">Edit</button>\r\n            <button mat-raised-button  *ngIf=\"ruleConfig.approvedEver=='N'\" (click)=\"onAuthOfRule()\" color=\"primary\" [disabled]=\"authBtn\" [hidden]=\"authBtnHide\">Auth</button>\r\n            <button mat-raised-button  (click)=\"onCloseOfRule()\" color=\"primary\" *ngIf=\"ruleConfig.recordStatus=='O'\" [disabled]=\"closeBtn\">Close</button>\r\n            <button mat-raised-button  (click)=\"onOpenRule()\" color=\"primary\" *ngIf=\"ruleConfig.recordStatus=='C'\" [hidden]=\"reopenBtn\">Re-Open</button>\r\n            <button mat-raised-button [disabled]=\"deleted\" (click)=\"deleteRule()\" color=\"primary\" *ngIf=\"ruleConfig.approvedEver=='N'\">Delete</button>\r\n            <button mat-raised-button color=\"primary\" [routerLink]=\"'/sias-v2/ruleSummary'\">Exit</button>\r\n\r\n          </div>\r\n          <div fxFlex=\"10\">\r\n\r\n         \r\n          </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n      </div>\r\n    </form>\r\n  \r\n  </mat-card>\r\n  \r\n</div>\r\n<div *ngIf=\"showpBar\">\r\n  <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\r\n</div>\r\n<mat-card *ngIf=\"showRuleValidation\">\r\n  <div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\">\r\n      <div fxFlex=\"25\">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-left: 30px\">\r\n          <mat-label>Source System</mat-label>\r\n          <input matInput name=\"sourceSystem\" [(ngModel)]=\"sourcesystem\" [disabled] = \"ModifyCreateRule\" readonly>\r\n        </mat-form-field>\r\n      </div>\r\n    \r\n    <div fxFlex=\"25\" *ngFor=\"let valiadtion of multipleValidation;let i=index\">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-left: 30px\">\r\n          <mat-label>Validation System</mat-label>\r\n\r\n          <input matInput name=\"validtion\" [(ngModel)]=\"valiadtion.validationSystem\" [disabled] = \"ModifyCreateRule\" readonly>\r\n\r\n        </mat-form-field>\r\n      </div>\r\n     <div fxFlex=\"25\"></div>\r\n     <div fxFlex=\"25\"></div>\r\n     <div fxFlex=\"10\"></div>\r\n    </div>\r\n  </div>\r\n  <div>\r\n\r\n\r\n  </div>\r\n  <!-- <div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\" fxLayoutGap=\"8px\">\r\n      <div>\r\n      <mat-label *ngIf=\"sourceDetails=='TCP/IP'\" fxFlex=\"25\"><b>Field No</b></mat-label>\r\n      <mat-label *ngIf=\"sourceDetails=='Https/Http'\" fxFlex=\"25\"><b>Tag</b></mat-label>\r\n    </div>\r\n\r\n\r\n      <div *ngFor=\"let c of multipleValidation\">\r\n       \r\n      <mat-label  *ngIf=\"valDeatils=='Https/Http'\" fxFlex=\"25\"><b>Tag</b></mat-label>\r\n      <mat-label  *ngIf=\"valDeatils=='TCP/IP'\" fxFlex=\"25\"><b>Field No</b></mat-label>\r\n    </div> \r\n   \r\n      \r\n    \r\n      <mat-label  fxFlex=\"25\"><b>Validation Method</b></mat-label>\r\n      <mat-label fxFlex=\"25\"><b>Validation Deatils</b></mat-label> \r\n      <mat-label fxFlex=\"10\"></mat-label>\r\n\r\n    </div>\r\n  </div>-->\r\n  <div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\">\r\n      <div fxFlex=\"25\" style=\"margin-left: 30px\">\r\n        <mat-label *ngIf=\"sourceDetails=='TCP/IP'\" ><b></b></mat-label>\r\n        <mat-label *ngIf=\"sourceDetails=='Https/Http'\" ><b></b></mat-label>\r\n      </div>\r\n      <div fxFlex=\"25\" *ngFor=\"let c of multipleValidation\" >\r\n        <mat-label  *ngIf=\"valDeatils=='Https/Http'\" ><b></b></mat-label>\r\n          <mat-label  *ngIf=\"valDeatils=='TCP/IP'\" ><b></b></mat-label>\r\n      </div>\r\n      <div fxFlex=\"25\" style=\"margin-left: -80px\">\r\n        <!-- <mat-label  ><b>Validation Method</b></mat-label> -->\r\n    \r\n      </div>\r\n      <div fxFlex=\"25\">\r\n        <!-- <mat-label ><b>Validation Deatils</b></mat-label> -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- <div fxLayout=\"row wrap\" *ngFor=\"let dataarr of arrRuleValidation;let i=index\" #ruleValidation> -->\r\n  <div fxLayout=\"row wrap\" *ngFor=\"let dataarr of arrRuleValidation;let i=index\" #ruleValidation>\r\n    <div fxFlex=\"100\">\r\n      <!-- <div *ngFor=\"let srcData of messageBasisIso\"> -->\r\n      <div fxFlex=\"25\" *ngIf=\"sourceDetails=='TCP/IP'\">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-left: 30px\">\r\n          <mat-label>Field No</mat-label>\r\n          <mat-select [disabled] = \"ModifyCreateRule\" name=\"messageKey_{{i}}\" #messageKey=\"ngModel\" [(ngModel)]=\"dataarr.messageKey\">\r\n              <mat-option *ngFor=\"let data of messageBasisIso\"  [value]=\"data.messageKey\"> \r\n                {{data.messageKey}}<{{data.messageBasis}}\r\n              </mat-option>\r\n            <!-- <mat-option value=\"data\" *ngFor=\"let data of messageBasisIso\">{{data}}</mat-option> -->\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxFlex=\"25\" *ngIf=\"sourceDetails=='Https/Http'\">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-left: 30px\">\r\n          <mat-label>Tag</mat-label>\r\n          <mat-select [disabled] = \"ModifyCreateRule\" name=\"messageKey_{{i}}\" #messageKey=\"ngModel\" [(ngModel)]=\"dataarr.messageKey\">\r\n            <!-- <mat-option  *ngFor=\"let data of xmlRespData\" value=\"data\">{{data}}</mat-option> -->\r\n            <mat-option  *ngFor=\"let data of messageBasisIso\" [value]=\"data.messageBasis\">\r\n              {{data.messageBasis}}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n      <!-- </div> -->\r\n      <div *ngFor=\"let x of multipleValidation;let j=index\">\r\n      <div fxFlex=\"25\" *ngIf=\"valDeatils=='TCP/IP'\">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-left: 30px\">\r\n          <mat-label>Field No</mat-label>\r\n          <mat-select [disabled] = \"ModifyCreateRule\" name=\"messageKey_{{j}}\" #messageKey=\"ngModel\" [(ngModel)]=\"x.messageKey\">\r\n            <mat-option *ngFor=\"let data of xmlRespData\" [value]=\"data.messageKey\"> \r\n               {{data.messageKey}}<{{data.messageBasis}}\r\n              </mat-option>\r\n            <!-- <mat-option  *ngFor=\"let data of messageBasisIso\" value=\"data.messageBasis\">{{data.messageBasis}}</mat-option> -->\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxFlex=\"25\" *ngIf=\"valDeatils=='Https/Http'\">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-left: 30px\">\r\n          <mat-label>Tag</mat-label>\r\n          <mat-select [disabled] = \"ModifyCreateRule\" name=\"messageKey_{{j}}\" #messageKey=\"ngModel\" [(ngModel)]=\"x.messageKey\">\r\n              <mat-option  *ngFor=\"let data of xmlRespData\" [value]=\"data.messageBasis\">\r\n                {{data.messageBasis}}\r\n              </mat-option>\r\n            <!-- <mat-option  *ngFor=\"let data of xmlRespData\" value=\"data\">{{data}}</mat-option> -->\r\n            <!-- <mat-option  *ngFor=\"let data of messageBasisIso\" value=\"data.messageBasis\">{{data.messageBasis}}</mat-option> -->\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n    </div>\r\n      <div fxFlex=\"25\">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-left: 20px\">\r\n          <mat-label>Validation Method</mat-label>\r\n          <input type=\"text\" name=\"validationMethod\"\r\n           #validationMethod=\"ngModel\" matInput\r\n            [(ngModel)]=\"dataarr.validationMethod\" [disabled] = \"ModifyCreateRule\">\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxFlex=\"25\">\r\n        <mat-form-field appearance=\"outline\" style=\"margin-left: 20px\">\r\n          <mat-label>Validation Details</mat-label>\r\n          <input type=\"text\" matInput name=\"validationMethod\" \r\n          #validationMethod=\"ngModel\"\r\n          [(ngModel)]=\"dataarr.validationDetail\" [disabled] = \"ModifyCreateRule\">\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxFlex=\"10\">\r\n        <!-- <button mat-raised-button  color=\"primary\"> -->\r\n          <mat-icon (click)=\"removeCreateRule(i)\" color=\"warn\" style=\"cursor: pointer;margin-top:10px\">delete</mat-icon>\r\n      <!-- </button> -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\">\r\n    <div fxFlex=\"60\">\r\n        <!-- <button mat-raised-button > -->\r\n            <mat-icon (click)=\"addCreateRule()\" color=\"primary\" style=\"cursor: pointer\">add</mat-icon>\r\n        <!-- </button> -->\r\n    </div>\r\n    </div>\r\n    </div>\r\n    <br>\r\n  <div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\">\r\n      <div fxFlex=\"30\"></div>\r\n      <div fxFlex=\"50\" fxLayoutGap=\"8px\">\r\n       \r\n        <button mat-raised-button (click)=\"Previous()\" color=\"warn\" [disabled]=\"ModifyCreateRule || deleted\">Previous</button>\r\n        <button mat-raised-button (click)=\"submittingCreateRule()\" color=\"primary\" [disabled] = \"ModifyCreateRule || deleted\">Update</button>\r\n        <button mat-raised-button [disabled]=\"deleted\" *ngIf=\"!authorizeDone\" (click)=\"onAuthOfRule()\" [hidden]=\"authBtnHide\" color=\"primary\" >Auth</button>\r\n        <button mat-raised-button [disabled]=\"deleted\" (click)=\"onCloseOfRule()\" color=\"primary\" *ngIf=\"ruleConfig.recordStatus=='O'\">Close</button>\r\n        <button mat-raised-button  (click)=\"onOpenRule()\" color=\"primary\" *ngIf=\"ruleConfig.recordStatus=='C'\" [hidden]=\"reopenBtn\">Re-Open</button>\r\n        <button mat-raised-button [disabled]=\"deleted\" (click)=\"deleteRule()\" color=\"primary\" *ngIf=\"ruleConfig.approvedEver=='N'\">Delete</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!-- <div fxLayout=\"row wrap\" *ngFor=\"let valiadtion of ruleValidtionResp\">\r\n      <div fxFlex=\"100\" >\r\n        <div fxFlex=\"16\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Field No</mat-label>\r\n            <input matInput [(ngModel)]=\"valiadtion.fieldNo\">\r\n          </mat-form-field>\r\n        </div>\r\n      <div fxFlex=\"25\">\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>Node</mat-label>\r\n               <mat-select name=\"node\" #node #node=\"ngModel\" >\r\n                 <mat-option  *ngFor=\"let node of valiadtion.node;let i=index\"\r\n                 [value]=\"node[i]\">{{node[i]}}</mat-option>\r\n               </mat-select>\r\n              </mat-form-field>\r\n        </div>\r\n        \r\n      </div>\r\n    </div> -->\r\n</mat-card>\r\n\r\n\r\n<!-- auditlog -->\r\n<br><br>\r\n <div fxLayout=\"row\" >\r\n  <div fxFlex></div>\r\n  <div fxFlex=\"95\">\r\n    <mat-card style=\"width: 70%;  margin-left:150px;\">\r\n      <mat-card-title>\r\n      </mat-card-title>\r\n      <mat-card-content>\r\n        <div fxLayout=\"row\">\r\n          <table id=\"customers\">\r\n            <tr>\r\n              <th>Record Status:</th>\r\n              <td>\r\n                <mat-chip>{{ruleConfig.recordStatus }}</mat-chip>\r\n              </td>\r\n              <th>Input By:</th>\r\n              <td>\r\n                <mat-chip>{{ruleConfig.creatorId}}</mat-chip>\r\n              </td>\r\n              <th>Verified By:</th>\r\n              <td>\r\n                <mat-chip>{{ruleConfig.approverId}}</mat-chip>\r\n              </td>\r\n              <th>Verified Once:</th>\r\n              <td>\r\n                <mat-chip>{{ruleConfig.approvedEver }}</mat-chip>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th>Modification No:</th>\r\n              <td>\r\n                <mat-chip>{{ruleConfig.versionNo}}</mat-chip>\r\n              </td>\r\n              <th>Input Date:</th>\r\n              <td>\r\n                <mat-chip>{{ruleConfig.createdTime| date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n\r\n              </td>\r\n              <th>Verified Date:</th>\r\n              <td>\r\n                <mat-chip>{{ruleConfig.approvedTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n              </td>\r\n\r\n              <th>Verified Status:</th>\r\n              <td>\r\n                <mat-chip>{{ruleConfig.approvedStatus}}</mat-chip>\r\n              </td>\r\n\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>\r\n\r\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rule-summary/rule-summary.component.html":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rule-summary/rule-summary.component.html ***!
  \********************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n<mat-toolbar color=\"primary\"  style=\"height:30px; font-size: small;\">\r\n  <span>Create Rule</span>\r\n</mat-toolbar>\r\n<br />\r\n<div>\r\n    <div fxLayoutAlign=\"end stretch\" fxLayoutGap=\"10px\">\r\n            <div fxLayoutAlign=\"end stretch\">\r\n                    <button mat-raised-button routerLink=\"/sias-v2/createRule\" color=\"primary\"\r\n                    >New </button>\r\n            </div>\r\n        <button mat-raised-button routerLink=\"/dashboard\" color=\"warn\"\r\n        >Exit</button>\r\n</div>\r\n</div>\r\n<br>\r\n<div class=\" mat-elevation-z8\">\r\n    <table mat-table [dataSource]=\"dataSource\"  matSort matSortActive=\"createdTime\" matSortDirection=\"desc\">\r\n\r\n        <!-- code Column -->\r\n        <ng-container matColumnDef=\"ruleId\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Rule Id </th>\r\n          \r\n           <td mat-cell *matCellDef=\"let row\">\r\n                    <a routerLink=\"/sias-v2/editRules/{{row.ruleId}}\" (click)=\"editcreateRule(row)\">{{\r\n                    row.ruleId\r\n                  \r\n                  }}</a>\r\n                  \r\n                  </td> \r\n        </ng-container>\r\n\r\n        <!-- name Column -->\r\n        <ng-container matColumnDef=\"ruleName\">\r\n            <th mat-header-cell *matHeaderCellDef > Rule Name </th>\r\n            <td mat-cell *matCellDef=\"let row\"> {{row.ruleName}} </td>\r\n        </ng-container>\r\n\r\n        <!-- type Column -->\r\n        <ng-container matColumnDef=\"sourceTranslationId\">\r\n            <th mat-header-cell *matHeaderCellDef> Source Id </th>\r\n            <td mat-cell *matCellDef=\"let row\"> {{row.sourceTranslationId}} </td>\r\n        </ng-container>\r\n\r\n        <!-- externalIp Column -->\r\n        <ng-container matColumnDef=\"targetTranslationId\">\r\n            <th mat-header-cell *matHeaderCellDef > Translation Id </th>\r\n            <td mat-cell *matCellDef=\"let row\"> {{row.targetTranslationId}} </td>\r\n        </ng-container>\r\n        <!-- maker -->\r\n        <ng-container matColumnDef=\"creatorId\">\r\n                <th mat-header-cell *matHeaderCellDef > Maker</th>\r\n                <td mat-cell *matCellDef=\"let row\"> {{row.creatorId}} </td>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"createdTime\">\r\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Date</th>\r\n                <td mat-cell *matCellDef=\"let row\"> {{row.createdTime |date}} </td>\r\n            </ng-container>\r\n            \r\n        \r\n\r\n\r\n        \r\n\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n        <!-- Row shown when there is no matching data. -->\r\n        <!-- <tr class=\"mat-row\" *matNoDataRow> -->\r\n        <!-- <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{input.value}}\"</td> -->\r\n        <!-- </tr> -->\r\n    </table>\r\n\r\n    <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n</div>\r\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rule-translation/edit-rule-tarnslation/edit-rule-tarnslation.component.html":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rule-translation/edit-rule-tarnslation/edit-rule-tarnslation.component.html ***!
  \*******************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\" style=\"height:30px; font-size: small;\">\r\n  <span>Rule Translation</span>\r\n\r\n</mat-toolbar>\r\n<br>\r\n\r\n\r\n<mat-card class=\"baiscInfocard\">\r\n  <form>\r\n    <div style=\"flex-direction : row;\" fxLayout=\"row wrap\">\r\n      <div fxFlex=\"100\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"10px\">\r\n        <!--<div fxFlex=\"15\"></div>\r\n        <div fxFlex=\"30\">-->\r\n\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Source system</mat-label>\r\n          <mat-select name=\"systemCode\" #systemCode #systemCode=\"ngModel\"\r\n           [(ngModel)]=\"msgTranslation.systemCode\"\r\n            (selectionChange)=\"onSlectionExternalSystem($event)\" [disabled]=\"!editValue\"\r\n            (optionSelected)=\"onSlectionExternalSystem(msgTranslation.systemCode)\">\r\n            <mat-option *ngFor=\"let extsys of externalSystem\" [value]=\"extsys\">{{extsys}}\r\n            </mat-option>\r\n\r\n\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n\r\n\r\n        <!--</div>\r\n        <div fxFlex=\"10\"></div>\r\n        <div fxFlex=\"30\">-->\r\n\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Message Type</mat-label>\r\n          <mat-select value=\"incoming\" name=\"messageType\" [disabled]=\"!editValue\" (selectionChange)=\"onSelectionOFMessageType($event)\"\r\n            (optionSelected)=\"onSelectionOFMessageType($event)\" #messageType #messageType=\"ngModel\"\r\n            [(ngModel)]=\"msgTranslation.messageType\">\r\n            <mat-option value=\"I\">Incoming</mat-option>\r\n            <mat-option value=\"O\">Outgoing</mat-option>\r\n            <!-- <mat-option value=\"A\">ALL</mat-option> -->\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Operation</mat-label>\r\n          <mat-select value=\"sys1\" name=\"operationName\" [disabled]=\"!editValue\"\r\n          #operationName #ooperationNamept=\"ngModel\"\r\n            [(ngModel)]=\"msgTranslation.operationName\">\r\n            <mat-option *ngFor=\"let opt of translationDataOperation\" [value]=\"opt.headerValue\">{{opt.headerValue}}</mat-option>\r\n\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <mat-form-field appearance=\"outline\">\r\n          <mat-label>Service</mat-label>\r\n          <mat-select value=\"create\" name=\"service\" #serv #serv=\"ngModel\" [disabled]=\"!editValue\"\r\n          [(ngModel)]=\"msgTranslation.serviceName\">\r\n            <mat-option *ngFor=\"let serv of translationDataService\" [value]=\"serv.headerValue\">{{serv.headerValue}}</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n        <div *ngIf=\"showFetch == 'Https/Http'\">\r\n        <input type=\"file\" id=\"chFile\" (change)=\"selectFileFORHTTPXMLIncoming($event)\" [disabled]=\"!editValue\">\r\n        <button mat-raised-button type=\"file\" class=\"btnFile\" [disabled]=\"!editValue\" (click)=\"chooseFile()\" *ngIf=\"showFetch=='Https/Http'\">\r\n          <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n        </button>\r\n        <p>{{fileName}}</p> \r\n      </div>\r\n        <button mat-raised-button (click)=\"onFetch()\" [disabled]=\"!editValue\" color=\"primary\" *ngIf=\"showFetch=='TCP/IP'\">Fetch</button>\r\n        <!--</div>-->\r\n\r\n        <div fxFlex=\"10\"></div>\r\n      </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\">\r\n\r\n\r\n      <!-- for buttons -->\r\n    </div>\r\n\r\n  </form>\r\n</mat-card>\r\n\r\n\r\n<!-- after fetch -->\r\n<br>\r\n\r\n<mat-card >\r\n  \r\n  <div fxLayout=\"row wrap\" *ngFor=\"let iso of translationDeatils;let i=index\">\r\n      <div fxFlex=\"100\" fxLayoutGap=\"10px\">\r\n          <!-- <div fxFlex=\"16\">\r\n            <mat-form-field appearance=\"outline\">\r\n            \r\n              <mat-label>Header</mat-label>\r\n             \r\n              <mat-select name=\"headerTag\" name=\"headerTag\" #headerTag\r\n                #headerTag=\"ngModel\" [(ngModel)]=\"iso.headerTag\">\r\n                <mat-option *ngFor=\"let header of headerTagData\" [value]=\"header.headerTag\">\r\n                  {{header.headerTag}}\r\n                </mat-option>\r\n              </mat-select>\r\n             \r\n    \r\n            </mat-form-field>\r\n          </div> -->\r\n       \r\n          <div fxFlex=\"16\"  *ngIf=\"showFetch=='TCP/IP'\">\r\n            <!-- Field Name -->\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Field No</mat-label>\r\n    \r\n              <mat-select [disabled]=\"!editValue\" name=\"messageKey_{{i}}\" #messageKey=\"ngModel\" [(ngModel)]=\"iso.messageKey\">\r\n                <mat-option *ngFor=\"let mkey of messageBasisData\" [value]=\"mkey.messageKey\">\r\n                  {{mkey.messageKey}}<{{mkey.messageBasis}}\r\n                </mat-option>\r\n              </mat-select>\r\n\r\n             \r\n             \r\n    \r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"16\" *ngIf=\"showFetch=='Https/Http'&&!afterupload\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <!-- Filed No -->\r\n             \r\n              <mat-label >Tag</mat-label>\r\n              <input matInput name=\"messagebasis\" #messagebasis #messagebasis=\"ngModel\" [(ngModel)]=\"iso.messagebasis\" [readonly]=\"!editValue\">\r\n              <!-- <mat-select [disabled]=\"!editValue\" name=\"messagebasis\" #messagebasis #messagebasis=\"ngModel\" [(ngModel)]=\"iso.messagebasis\">\r\n                <mat-option *ngFor=\"let data of messageBasisIso\" [value]=\"data\">\r\n                  {{data}}\r\n                </mat-option>\r\n              </mat-select> -->\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"16\" *ngIf=\"showFetch=='Https/Http' && afterupload\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <!-- Filed No -->\r\n             \r\n              <mat-label >Tag</mat-label>\r\n            \r\n               <mat-select [disabled]=\"!editValue\" name=\"messagebasis\" #messagebasis #messagebasis=\"ngModel\" [(ngModel)]=\"iso.messagebasis\">\r\n                <mat-option *ngFor=\"let data of xmlRespData\" [value]=\"data\">\r\n                  {{data}}\r\n                </mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"16\" *ngIf>\r\n            <mat-form-field appearance=\"outline\">\r\n              <!-- Filed No -->\r\n              <mat-label >Field Name</mat-label>\r\n              \r\n              <mat-select [disabled]=\"!editValue\" name=\"messagebasis\"  #messagebasis=\"ngModel\" [(ngModel)]=\"iso.messagebasis\">\r\n                <mat-option *ngFor=\"let data of messageBasisIso\" [value]=\"data\">\r\n                  {{data}}\r\n                </mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"16\"  *ngIf=\"showFetch=='Https/Http' \">\r\n            <mat-form-field appearance=\"outline\">\r\n              <!-- Data Type -->\r\n              <mat-label>Data Type</mat-label>\r\n            \r\n              <mat-select [disabled]=\"!editValue\" name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"iso.dataType\">\r\n                <mat-option value=\"numeric\">\r\n                  Numeric\r\n                </mat-option>\r\n                <mat-option value=\"alphaNumeric\">\r\n                  Alpha Numeric\r\n                </mat-option>\r\n                <mat-option value=\"date\">\r\n                  Date\r\n                </mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"16\"  *ngIf=\"showFetch=='TCP/IP'\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <!-- Data Type -->\r\n              <mat-label>Data Type</mat-label>\r\n              <input matInput  [disabled]=\"!editValue\" name=\"dataType\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"iso.dataType\">\r\n             \r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"16\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <!-- Default Value -->\r\n              <mat-label>Default Value</mat-label>\r\n              <input matInput [disabled]=\"!editValue\" name=\"headerValue\" #headerValue #headerValue=\"ngModel\"\r\n                [(ngModel)]=\"iso.defaultValue\">\r\n            \r\n            </mat-form-field>\r\n          </div>\r\n    \r\n          <div fxFlex=\"16\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <!-- Encryption Type -->\r\n              <mat-label>Encryption Type</mat-label>\r\n             \r\n              <mat-select [disabled]=\"!editValue\" name=\"encryption\" name=\"encryption\" #encryption #encryption=\"encryption\"\r\n                [(ngModel)]=\"iso.encryption\">\r\n                <mat-option value=\" \">--Select--</mat-option>\r\n                <mat-option value=\"No Encryption\">No Encryption</mat-option>\r\n                <mat-option value=\"BASE64\">\r\n                  BASE64\r\n                </mat-option>\r\n                <mat-option value=\"SHA264\">\r\n                  SHA264\r\n                </mat-option>\r\n                <mat-option value=\"SHA512\">\r\n                  SHA512\r\n                </mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n    \r\n          <div fxFlex=\"2\">\r\n           <!-- <button mat-raised-button  > -->\r\n                        <mat-icon color=\"warn\" *ngIf=\"editValue\" (click)=\"deleteTranslation(i)\" style=\"margin-top:20px;cursor: pointer;\" >delete</mat-icon>\r\n                    <!-- </button>  -->\r\n          </div>\r\n        </div>\r\n  </div>\r\n \r\n  <div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\">\r\n    \r\n      <div fxFlex=\"60\">\r\n        <!-- <button mat-raised-button  > -->\r\n          <mat-icon *ngIf=\"editValue\" (click)=\"addTranlation()\" color=\"primary\" style=\"cursor: pointer;\">add</mat-icon>\r\n        <!-- </button> -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <br>\r\n  <div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\">\r\n      <div fxFlex=\"40\"></div>\r\n      <div fxFlex=\"60\" fxLayoutGap=\"10px\">\r\n        <button mat-raised-button *ngIf=\"!editValue\" color=\"primary\" (click)=\"edit()\" [disabled]=\"editBtn\">Edit</button>\r\n        <button mat-raised-button [disabled]=\"showAuditLog\" *ngIf=\"displaySubmit || onlysubmit\" (click)=\"onSubmit()\" color=\"primary\">Submit</button>\r\n        <button mat-raised-button *ngIf=\"ruleTRespData.approvedEver == 'N'\" (click)=\"authorizeRuleTranslation()\" color=\"primary\" [disabled]=\"authBtn\" [hidden]=\"authBtnHide\">Authorize</button>\r\n  \r\n        <button mat-raised-button *ngIf=\"ruleTRespData.recordStatus == 'C'\" (click)=\"openRuleTranslation()\" color=\"primary\"  [hidden]=\"reopenBtn\">Re-Open</button>\r\n        <button mat-raised-button *ngIf=\"ruleTRespData.recordStatus == 'O'\" (click)=\"closeRuleTranslation()\" color=\"primary\" [disabled]=\"closeBtn\">Close</button>\r\n        <button mat-raised-button *ngIf=\"ruleTRespData.approvedEver == 'N'&&!showdelete\" (click)=\"deleteRuleTranslation()\" [disabled]=\"deleted\" color=\"primary\">Delete</button>\r\n        <button mat-raised-button color=\"primary\" [routerLink]=\"'/sias-v2/tranlationSummary'\">Exit</button>\r\n        <!-- <button mat-raised-button (click)=\"onReset()\" color=\"warn\">Reset</button> -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n</mat-card>\r\n\r\n<br>\r\n<div fxLayout=\"row wrap\">\r\n  <div fxFlex=\"100\">\r\n    <mat-card>\r\n      <mat-card-title>\r\n      </mat-card-title>\r\n      <mat-card-content>\r\n        <div fxLayout=\"row\">\r\n          <table id=\"customers\">\r\n            <tr>\r\n              <th>Record Status:</th>\r\n              <td>\r\n                <mat-chip>{{ruleTRespData.recordStatus}}</mat-chip>\r\n              </td>\r\n              <th>Input By:</th>\r\n              <td>\r\n                <mat-chip>{{ruleTRespData.creatorId}}</mat-chip>\r\n              </td>\r\n              <th>Verified By:</th>\r\n              <td>\r\n                <mat-chip>{{ruleTRespData.approverId}}</mat-chip>\r\n              </td>\r\n              <th>Verified Ever:</th>\r\n              <td>\r\n                <mat-chip>{{ruleTRespData.approvedEver}}</mat-chip>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th>Modification No:</th>\r\n              <td>\r\n                <mat-chip>{{ruleTRespData.versionNo}}</mat-chip>\r\n              </td>\r\n              <th>Input Date:</th>\r\n              <td>\r\n                 <mat-chip>{{ruleTRespData.createdTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n\r\n              </td>\r\n              <th>Verified Date:</th>\r\n              <td>\r\n                <mat-chip>{{ruleTRespData.approvedTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n              </td>\r\n\r\n              <th>Verified Status:</th>\r\n              <td>\r\n                <mat-chip>{{ruleTRespData.verifiedStatus}}</mat-chip>\r\n              </td>\r\n\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rule-translation/rule-translation.component.html":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rule-translation/rule-translation.component.html ***!
  \****************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\" style=\"height:30px; font-size: small;\">\r\n    <span>Rule Translation</span>\r\n  \r\n  </mat-toolbar>\r\n  <br>\r\n  \r\n  \r\n  <mat-card class=\"baiscInfocard\">\r\n    <form>\r\n      <div style=\"flex-direction : row;\" fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\" fxLayoutAlign=\"space-between center\">\r\n          <!--<div fxFlex=\"15\"></div>\r\n          <div fxFlex=\"30\">-->\r\n  \r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Source System</mat-label>\r\n              <input matInput name=\"systemCode\" required #systemCode #systemCode=\"ngModel\" [(ngModel)]=\"msgTranslation.systemCode\"\r\n              (keyup)=\"onsearchingTablName($event)\" [matAutocomplete]=\"autotablName\" [disabled]=\"disableSubmit\">\r\n              <mat-icon matSuffix>arrow_drop_down</mat-icon>\r\n\r\n              <mat-autocomplete #autotablName=\"matAutocomplete\"  (selectionChange)=\"onSlectionExternalSystem($event)\"\r\n              (optionSelected)=\"onSlectionExternalSystem($event)\">\r\n              <mat-option *ngFor=\"let extsys of externalSystem\" [value]=\"extsys\">{{extsys}}\r\n              </mat-option>\r\n              </mat-autocomplete>\r\n            </mat-form-field>\r\n  \r\n  \r\n  \r\n          <!--</div>\r\n          <div fxFlex=\"10\"></div>\r\n          <div fxFlex=\"30\">-->\r\n  \r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Message Type</mat-label>\r\n            <mat-select value=\"incoming\" name=\"messageType\" \r\n              #messageType #messageType=\"ngModel\"  (optionSelected)=\"onSelectionOFMessageType($event)\" (selectionChange)=\"onSelectionOFMessageType($event)\"\r\n              [(ngModel)]=\"msgTranslation.messageType\" [disabled]=\"disableSubmit\">\r\n              <mat-option value=\"null\">--Please Select---</mat-option>\r\n              <mat-option value=\"I\" >Incoming</mat-option>\r\n              <mat-option value=\"O\" >Outgoing</mat-option>\r\n              <!-- <mat-option value=\"A\">ALL</mat-option> -->\r\n            </mat-select>\r\n          </mat-form-field>\r\n  \r\n  \r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Operation</mat-label>\r\n            <mat-select value=\"sys1\" name=\"operationName\" \r\n            #operationName #ooperationNamept=\"ngModel\"\r\n              [(ngModel)]=\"msgTranslation.operationName\" [disabled]=\"disableSubmit\">\r\n              <mat-option value>--Please Select---</mat-option>\r\n              <mat-option *ngFor=\"let opt of translationDataOperation\" [value]=\"opt.headerValue\">{{opt.headerValue}}</mat-option>\r\n  \r\n            </mat-select>\r\n          </mat-form-field>\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Service</mat-label>\r\n            <mat-select value=\"create\" name=\"service\" #serv #serv=\"ngModel\" \r\n            [(ngModel)]=\"msgTranslation.serviceName\" [disabled]=\"disableSubmit\">\r\n            <mat-option value>--Please Select---</mat-option>\r\n              <mat-option *ngFor=\"let serv of translationDataService\" [value]=\"serv.headerValue\">{{serv.headerValue}}</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n  \r\n  \r\n          <input type=\"file\" id=\"chFile\" (change)=\"selectFileFORHTTPXMLIncoming($event)\">\r\n          <button mat-raised-button type=\"file\" class=\"btnFile\" [disabled]=\"disableSubmit\" (click)=\"chooseFile()\" *ngIf=\"showFetch=='Https/Http'\">\r\n            <mat-icon>cloud_upload</mat-icon>&nbsp;&nbsp;File Upload\r\n          </button>\r\n         <p>{{fileName}}</p> \r\n          <button mat-raised-button (click)=\"onFetch()\" color=\"primary\" *ngIf=\"showFetch=='TCP/IP'\">Fetch</button>\r\n          <!--</div>-->\r\n  \r\n          <div fxFlex=\"10\"></div>\r\n        </div>\r\n      </div>\r\n      <div fxLayout=\"row wrap\">\r\n  \r\n  \r\n        <!-- for buttons -->\r\n      </div>\r\n  \r\n    </form>\r\n  </mat-card>\r\n  \r\n  \r\n  <!-- after fetch -->\r\n  <br>\r\n  \r\n  <mat-card *ngIf=\"showRecords\">\r\n    <form #myForm=\"ngForm\">\r\n    <div fxLayout=\"row wrap\" *ngFor=\"let iso of translationDeatils;let i=index\">\r\n      <div fxFlex=\"100\" fxLayoutGap=\"10px\">\r\n      \r\n        <div fxFlex=\"16\"  *ngIf=\"showFetch=='TCP/IP'\">\r\n          <!-- Field Name -->\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Field No</mat-label>\r\n           <!-- // <input matInput name=\"messageKey_{{i}}\"  #messageKey=\"ngModel\" [disabled]=\"disableSubmit\" [(ngModel)]=\"iso.messageKey\" required>  -->\r\n         \r\n            <mat-select name=\"messageKey_{{i}}\"  #messageKey=\"ngModel\"  [(ngModel)]=\"iso.messageKey\" required [disabled]=\"disableSubmit\">\r\n              <mat-option *ngFor=\"let iso2 of translationDeatils\" [value]=\"iso2.messageKey\">\r\n                {{iso2.messageKey}}<{{iso2.messageBasis}}\r\n              </mat-option>\r\n            </mat-select>\r\n\r\n            <!-- <mat-select name=\"sourceKey_{{i}}\" #sourceKey=\"ngModel\" required [(ngModel)]=\"data.sourceKey\" [disabled]=\"disableSubmitBtn\">\r\n              <mat-option *ngFor=\"let tag of sourceData\" [value]=\"tag.messageBasis\">{{tag.messageKey}}:{{tag.messageBasis}}</mat-option>   \r\n            </mat-select> -->\r\n  \r\n          </mat-form-field>\r\n        </div>\r\n        <div fxFlex=\"16\" *ngIf>\r\n          <mat-form-field appearance=\"outline\">\r\n            <!-- Filed No -->\r\n            <mat-label>Field Name</mat-label>\r\n            <!-- <input matInput  name=\"messageBasis_{{i}}\" #messageBasis=\"ngModel\" [disabled]=\"disableSubmit\" [(ngModel)]=\"iso.messageBasis\" required> -->\r\n            <input matInput name=\"messageBasis_{{i}}\" #messageBasis=\"ngModel\" [disabled]=\"disableSubmit\" [(ngModel)]=\"iso.messageBasis\" required>\r\n         \r\n            <!-- <mat-select name=\"messageBasis\" #messageBasis #messageBasis=\"ngModel\" [(ngModel)]=\"iso.messageBasis\">\r\n              <mat-option *ngFor=\"let data of messageBasisIso\" [value]=\"data\">\r\n                {{data}}\r\n              </mat-option>\r\n            </mat-select> -->\r\n  \r\n          </mat-form-field>\r\n        </div>\r\n  \r\n        <div fxFlex=\"16\" *ngIf=\"showFetch=='Https/Http'\">\r\n           \r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>Tag</mat-label>\r\n                \r\n                <mat-select name=\"messagebasis\" #messagebasis #messagebasis=\"ngModel\" [(ngModel)]=\"iso.messagebasis\"\r\n               (selectionChange)=\"onselectingTag($event,i)\" [disabled]=\"disableSubmit\"\r\n                (optionSelected)=\"onselectingTag($event,i)\"\r\n              >\r\n                    <mat-option [hidden]=\"shouldDisableTagOption(data)\" *ngFor=\"let data of messageBasisIso\" [value]=\"data\">\r\n                      {{data}}\r\n                    </mat-option>\r\n                  </mat-select>\r\n      \r\n              </mat-form-field>\r\n        </div>\r\n        <div fxFlex=\"16\" *ngIf=\"showFetch=='TCP/IP'\">\r\n           \r\n          <mat-form-field appearance=\"outline\">\r\n              <mat-label>Data Type</mat-label>\r\n            <input matInput [(ngModel)]=\"iso.dataType\" name=\"dataType_{{i}}\" [disabled]=\"disableSubmit\" #dataType #dataType=\"ngModel\" required>\r\n        \r\n              <!-- <mat-select name=\"messageBasis\" #messageBasis #messageBasis=\"ngModel\" [(ngModel)]=\"iso.messageBasis\">\r\n                  <mat-option *ngFor=\"let data of messageBasisIso\" [value]=\"data\">\r\n                    {{data}}\r\n                  </mat-option>\r\n                </mat-select> -->\r\n    \r\n            </mat-form-field>\r\n      </div>\r\n        <div fxFlex=\"16\"  *ngIf=\"showFetch=='Https/Http'\">\r\n          <mat-form-field appearance=\"outline\" >\r\n            <!-- Data Type -->\r\n            <mat-label>Data Type</mat-label>\r\n          \r\n            <mat-select name=\"dataType_{{i}}\" #dataType #dataType=\"ngModel\" [disabled]=\"disableSubmit\" [(ngModel)]=\"iso.dataType\" required>\r\n            \r\n              <mat-option value=\"numeric\">\r\n                Numeric\r\n              </mat-option>\r\n              <mat-option value=\"alphaNumeric\">\r\n                Alpha Numeric\r\n              </mat-option>\r\n              <mat-option value=\"date\">\r\n                Date\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n        <div fxFlex=\"16\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <!-- Default Value -->\r\n            <mat-label>Default Value</mat-label>\r\n            <input name=\"defaultValue_{{i}}\" matInput #defaultValue #defaultValue=\"ngModel\"\r\n              [(ngModel)]=\"iso.defaultValue\"  [disabled]=\"disableSubmit\">\r\n          \r\n          </mat-form-field>\r\n        </div>\r\n  \r\n        <div fxFlex=\"16\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <!-- Encryption Type -->\r\n            <mat-label>Encryption Type</mat-label>\r\n           \r\n            <mat-select name=\"encryption\" name=\"encryption_{{i}}\" #encryption #encryption=\"encryption\"\r\n              [(ngModel)]=\"iso.encryption\" [disabled]=\"disableSubmit\">\r\n              <mat-option avlue=\" \">--Select--</mat-option>\r\n              <mat-option value=\"No Encryption\">No Encryption</mat-option>\r\n              <mat-option value=\"BASE64\">\r\n                BASE64\r\n              </mat-option>\r\n              <mat-option value=\"SHA264\">\r\n                SHA264\r\n              </mat-option>\r\n              <mat-option value=\"SHA512\">\r\n                SHA512\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n  \r\n        <div fxFlex=\"2\">\r\n         <!-- <button mat-raised-button  > -->\r\n                      <mat-icon color=\"warn\" *ngIf=\"!recordSaved\" (click)=\"deleteTranslation(i)\" style=\"margin-top:20px;cursor: pointer;\">delete</mat-icon>\r\n                  <!-- </button>  -->\r\n        </div>\r\n      </div>\r\n    </div>\r\n   \r\n    <div fxLayout=\"row wrap\">\r\n      <div fxFlex=\"100\">\r\n        <div fxFlex=\"60\">\r\n          <!-- <button mat-raised-button  > -->\r\n            <mat-icon color=\"primary\" (click)=\"addTranlation()\" style=\"cursor: pointer\" color=\"primary\">add</mat-icon>\r\n          <!-- </button> -->\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <br>\r\n    <div fxLayout=\"row wrap\">\r\n      <div fxFlex=\"100\">\r\n          <div fxFlex=\"40\"></div>\r\n        <div fxFlex=\"60\" fxLayoutGap=\"10px\">\r\n         \r\n          <button mat-raised-button (click)=\"onSubmit()\" color=\"primary\" [disabled]=\"!myForm.valid || disableSubmit\">Submit</button>\r\n          <button mat-raised-button (click)=\"onReset()\" [disabled]=\"disableReset\" color=\"warn\">Reset</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </form>\r\n  </mat-card>\r\n  \r\n  \r\n  \r\n\r\n  <!-- For Message type is All -->\r\n  <mat-card *ngIf>\r\n      <div fxLayout=\"row wrap\" *ngFor=\"let iso of translationDeatils;let i=index\">\r\n          <div fxFlex=\"100\" fxLayoutGap=\"10px\">\r\n            <!-- <div fxFlex=\"16\">\r\n              <mat-form-field appearance=\"outline\">\r\n               \r\n                <mat-label>Header</mat-label>\r\n               \r\n                <mat-select name=\"headerTag\" name=\"headerTag\" #headerTag\r\n                  #headerTag=\"ngModel\" [(ngModel)]=\"iso.headerTag\">\r\n                  <mat-option *ngFor=\"let header of headerTagData\" [value]=\"header.headerTag\">\r\n                    {{header.headerTag}}\r\n                  </mat-option>\r\n                </mat-select>\r\n               \r\n      \r\n              </mat-form-field>\r\n            </div> -->\r\n         \r\n            <div fxFlex=\"16\"  *ngIf=\"showFetch=='TCP/IP'\">\r\n              <!-- Field Name -->\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Field No</mat-label>\r\n      \r\n                <mat-select name=\"messageKey_{{i}}\" #messageKey=\"ngModel\" [(ngModel)]=\"iso.messageKey\">\r\n                  <mat-option *ngFor=\"let mkey of messageKeyIso\" [value]=\"mkey\">\r\n                    {{mkey}}\r\n                  </mat-option>\r\n                </mat-select>\r\n      \r\n              </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"16\" *ngIf=\"showFetch=='TCP/IP'\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <!-- Filed No -->\r\n                <mat-label>Field Name</mat-label>\r\n      \r\n                <mat-select name=\"messageBasis_{{i}}\" #messageBasis=\"ngModel\" [(ngModel)]=\"iso.messageBasis\">\r\n                  <mat-option *ngFor=\"let data of messageBasisIso\" [value]=\"data\">\r\n                    {{data}}\r\n                  </mat-option>\r\n                </mat-select>\r\n      \r\n              </mat-form-field>\r\n            </div>\r\n      \r\n            <div fxFlex=\"16\" *ngIf=\"showFetch=='Https/Http'\">\r\n               \r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Tag</mat-label>\r\n        \r\n                    <mat-select name=\"messageBasis_{{i}}\"  #messageBasis #messageBasis=\"ngModel\" [(ngModel)]=\"iso.messageBasis\"   (selectionChange)=\"check($event)\">\r\n                        <mat-option [hidden]=\"shouldDisableTagOption(data)\" *ngFor=\"let data of messageBasisIso\" [value]=\"data\">\r\n                          {{data}}\r\n                        </mat-option>\r\n                      </mat-select>\r\n          \r\n                  </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"16\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <!-- Data Type -->\r\n                <mat-label>Data Type</mat-label>\r\n              \r\n                <mat-select name=\"dataType_{{i}}\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"iso.dataType\">\r\n                  <mat-option value=\"numeric\">\r\n                    Numeric\r\n                  </mat-option>\r\n                  <mat-option value=\"alphaNumeric\">\r\n                    Alpha Numeric\r\n                  </mat-option>\r\n                  <mat-option value=\"date\">\r\n                    Date\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"16\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <!-- Default Value -->\r\n                <mat-label>Default Value</mat-label>\r\n                <input name=\"messageBasis-{{i}}\" matInput name=\"headerValue\" #headerValue #headerValue=\"ngModel\"\r\n                  [(ngModel)]=\"iso.headerValue\">\r\n              \r\n              </mat-form-field>\r\n            </div>\r\n      \r\n            <div fxFlex=\"16\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <!-- Encryption Type -->\r\n                <mat-label>Encryption Type</mat-label>\r\n               \r\n                <mat-select name=\"encryption_{{i}}\" name=\"encryption\" #encryption #encryption=\"encryption\"\r\n                  [(ngModel)]=\"iso.encryption\">\r\n                  <mat-option>--Select--</mat-option>\r\n                  <mat-option value=\"No Encryption\">No Encryption</mat-option>\r\n                  <mat-option value=\"BASE64\">\r\n                    BASE64\r\n                  </mat-option>\r\n                  <mat-option value=\"SHA264\">\r\n                    SHA264\r\n                  </mat-option>\r\n                  <mat-option value=\"SHA512\">\r\n                    SHA512\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n      \r\n            <div fxFlex=\"2\">\r\n             <!-- <button mat-raised-button  > -->\r\n                          <mat-icon color=\"warn\" (click)=\"deleteTranslation(i)\" *ngIf=\"!recordSaved\" style=\"margin-top:20px;cursor: pointer;\">delete</mat-icon>\r\n                      <!-- </button>  -->\r\n            </div>\r\n          </div>\r\n        </div>\r\n       \r\n        <div fxLayout=\"row wrap\">\r\n          <div fxFlex=\"100\">\r\n            <div fxFlex=\"60\">\r\n              <!-- <button mat-raised-button  > -->\r\n                <mat-icon color=\"primary\" (click)=\"addTranlation()\" style=\"cursor: pointer\" color=\"primary\">add</mat-icon>\r\n              <!-- </button> -->\r\n            </div>\r\n          </div>\r\n        </div>\r\n  </mat-card>\r\n  <br>\r\n  <mat-card *ngIf=\"msgTranslation.messageType=='A'\">\r\n      <div fxLayout=\"row wrap\" *ngFor=\"let iso of translationDeatils;let i=index\">\r\n          <div fxFlex=\"100\" fxLayoutGap=\"10px\">\r\n            <!-- <div fxFlex=\"16\">\r\n              <mat-form-field appearance=\"outline\">\r\n               \r\n                <mat-label>Header</mat-label>\r\n               \r\n                <mat-select name=\"headerTag\" name=\"headerTag\" #headerTag\r\n                  #headerTag=\"ngModel\" [(ngModel)]=\"iso.headerTag\">\r\n                  <mat-option *ngFor=\"let header of headerTagData\" [value]=\"header.headerTag\">\r\n                    {{header.headerTag}}\r\n                  </mat-option>\r\n                </mat-select>\r\n               \r\n      \r\n              </mat-form-field>\r\n            </div> -->\r\n         \r\n            <div fxFlex=\"16\"  *ngIf=\"showFetch=='TCP/IP'\">\r\n              <!-- Field Name -->\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Field No</mat-label>\r\n      \r\n                <mat-select name=\"messageKey_{{i}}\" #messageKey=\"ngModel\" [(ngModel)]=\"iso.messageKey\">\r\n                  <mat-option *ngFor=\"let mkey of messageKeyIso\" [value]=\"mkey\">\r\n                    {{mkey}}\r\n                  </mat-option>\r\n                </mat-select>\r\n      \r\n              </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"16\" *ngIf=\"showFetch=='TCP/IP'\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <!-- Filed No -->\r\n                <mat-label>Field Name</mat-label>\r\n      \r\n                <mat-select name=\"messageBasis_{{i}}\" #messageBasis=\"ngModel\" [(ngModel)]=\"iso.messageBasis\">\r\n                  <mat-option *ngFor=\"let data of messageBasisIso\" [value]=\"data\">\r\n                    {{data}}\r\n                  </mat-option>\r\n                </mat-select>\r\n      \r\n              </mat-form-field>\r\n            </div>\r\n      \r\n            <div fxFlex=\"16\" *ngIf=\"showFetch=='Https/Http'\">\r\n               \r\n                <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Tag</mat-label>\r\n         \r\n                    <mat-select name=\"messageBasis_{{i}}\" #messageBasis #messageBasis=\"ngModel\" [(ngModel)]=\"iso.messageBasis\" (selectionChange)=\"check($event)\">\r\n                        <mat-option [hidden]=\"shouldDisableTagOption(data)\" *ngFor=\"let data of messageBasisIso\" [value]=\"data\">\r\n                          {{data}}\r\n                        </mat-option>\r\n                      </mat-select>\r\n          \r\n                  </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"16\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <!-- Data Type -->\r\n                <mat-label>Data Type</mat-label>\r\n              \r\n                <mat-select name=\"dataType_{{i}}\" #dataType #dataType=\"ngModel\" [(ngModel)]=\"iso.dataType\">\r\n                  <mat-option value=\"numeric\">\r\n                    Numeric\r\n                  </mat-option>\r\n                  <mat-option value=\"alphaNumeric\">\r\n                    Alpha Numeric\r\n                  </mat-option>\r\n                  <mat-option value=\"date\">\r\n                    Date\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"16\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <!-- Default Value -->\r\n                <mat-label>Default Value</mat-label>\r\n                <input name=\"messageBasis_{{i}}\" matInput name=\"headerValue\" #headerValue #headerValue=\"ngModel\"\r\n                  [(ngModel)]=\"iso.headerValue\">\r\n              \r\n              </mat-form-field>\r\n            </div>\r\n      \r\n            <div fxFlex=\"16\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <!-- Encryption Type -->\r\n                <mat-label>Encryption Type</mat-label>\r\n               \r\n                <mat-select name=\"encryption_{{i}}\" name=\"encryption\" #encryption #encryption=\"encryption\"\r\n                  [(ngModel)]=\"iso.encryption\">\r\n                  <mat-option>--Select--</mat-option>\r\n                  <mat-option value=\"No Encryption\">No Encryption</mat-option>\r\n                  <mat-option value=\"BASE64\">\r\n                    BASE64\r\n                  </mat-option>\r\n                  <mat-option value=\"SHA264\">\r\n                    SHA264\r\n                  </mat-option>\r\n                  <mat-option value=\"SHA512\">\r\n                    SHA512\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n            </div>\r\n      \r\n            <div fxFlex=\"2\">\r\n             <!-- <button mat-raised-button  > -->\r\n                          <mat-icon color=\"warn\" *ngIf=\"!recordSaved\" (click)=\"deleteTranslation(i)\" style=\"margin-top:20px;cursor: pointer;\">delete</mat-icon>\r\n                      <!-- </button>  -->\r\n            </div>\r\n          </div>\r\n        </div>\r\n       \r\n        <div fxLayout=\"row wrap\">\r\n          <div fxFlex=\"100\">\r\n            <div fxFlex=\"60\">\r\n              <!-- <button mat-raised-button  > -->\r\n                <mat-icon color=\"primary\" (click)=\"addTranlation()\" style=\"cursor: pointer\" color=\"primary\">add</mat-icon>\r\n              <!-- </button> -->\r\n            </div>\r\n          </div>\r\n        </div>\r\n  \r\n      </mat-card>\r\n  <br>\r\n  <div fxLayout=\"row\" *ngIf=\"showAuditLog\">\r\n      <!-- <div fxFlex></div> -->\r\n      <div fxFlex=\"95\">\r\n        <mat-card style=\"width: 70%;  margin-left:260px;\">\r\n          <mat-card-title>\r\n          </mat-card-title>\r\n          <mat-card-content>\r\n            <div fxLayout=\"row\">\r\n              <table id=\"customers\">\r\n                <tr>\r\n                  <th>Record Status:</th>\r\n                  <td>\r\n                    <mat-chip>{{translationResp.recordStatus}}</mat-chip>\r\n                  </td>\r\n                  <th>Input By:</th>\r\n                  <td>\r\n                    <mat-chip>{{translationResp.creatorId}}</mat-chip>\r\n                  </td>\r\n                  <th>Verified By:</th>\r\n                  <td>\r\n                    <mat-chip>{{translationResp.approverId}}</mat-chip>\r\n                  </td>\r\n                  <th>Verified Once:</th>\r\n                  <td>\r\n                    <mat-chip>{{translationResp.approvedEver}}</mat-chip>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>Modification No:</th>\r\n                  <td>\r\n                    <mat-chip>{{translationResp.versionNo}}</mat-chip>\r\n                  </td>\r\n                  <th>Input Date:</th>\r\n                  <td>\r\n                     <mat-chip>{{translationResp.createdTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n  \r\n                  </td>\r\n                  <th>Verified Date:</th>\r\n                  <td>\r\n                    <mat-chip>{{translationResp.approvedTime | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n                  </td>\r\n    \r\n                  <th>Verified Status:</th>\r\n                  <td>\r\n                    <mat-chip>{{translationResp.verifiedStatus}}</mat-chip>\r\n                  </td>\r\n    \r\n                </tr>\r\n              </table>\r\n            </div>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </div>\r\n    </div>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rule-translationsummary/rule-translationsummary.component.html":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rule-translationsummary/rule-translationsummary.component.html ***!
  \******************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n<mat-toolbar color=\"primary\"  style=\"height:30px; font-size: small;\">\r\n    <span>Rule Translation</span>\r\n  </mat-toolbar>\r\n  <br />\r\n  <div>\r\n      <div fxLayoutAlign=\"end stretch\" fxLayoutGap=\"10px\">\r\n              <div fxLayoutAlign=\"end stretch\">\r\n                      <button mat-raised-button routerLink=\"/sias-v2/ruleTranslation\" color=\"primary\"\r\n                      >New </button>\r\n              </div>\r\n          <button mat-raised-button routerLink=\"/dashboard\" color=\"warn\"\r\n          >Exit</button>\r\n  </div>\r\n  </div>\r\n  <br>\r\n  <div class=\"mat-elevation-z8\">\r\n      <table mat-table [dataSource]=\"dataSource\" matSort \r\n      matSort matSortActive=\"createdTime\" matSortDirection=\"desc\">\r\n  \r\n          <!-- code Column -->\r\n          <ng-container matColumnDef=\"id\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header> Id </th>\r\n            \r\n             <td mat-cell *matCellDef=\"let row\">\r\n                      <a routerLink=\"/sias-v2/editTranslation/{{row.transId}}\" (click)=\"oneditBasedOnId(row)\">{{\r\n                      row.transId\r\n                    }}</a>\r\n                    </td> \r\n          </ng-container>\r\n  \r\n          <!-- name Column -->\r\n          <ng-container matColumnDef=\"systemCode\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>System Code </th>\r\n              <td mat-cell *matCellDef=\"let row\"> {{row.systemCode}} </td>\r\n          </ng-container>\r\n  \r\n          <!-- type Column -->\r\n          <ng-container matColumnDef=\"operationName\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Operation Name</th>\r\n              <td mat-cell *matCellDef=\"let row\"> {{row.operationName}} </td>\r\n          </ng-container>\r\n  \r\n          <!-- externalIp Column -->\r\n          <ng-container matColumnDef=\"serviceName\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header> Service Name </th>\r\n              <td mat-cell *matCellDef=\"let row\"> {{row.serviceName}} </td>\r\n          </ng-container>\r\n  \r\n          <!-- externalPort Column -->\r\n          <ng-container matColumnDef=\"creatorId\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header> Maker </th>\r\n              <td mat-cell *matCellDef=\"let row\"> {{row.creatorId}} </td>\r\n          </ng-container>\r\n          <ng-container matColumnDef=\"createdTime\">\r\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Date </th>\r\n            <td mat-cell *matCellDef=\"let row\"> {{row.createdTime |date}} </td>\r\n        </ng-container>\r\n\r\n  \r\n          \r\n  \r\n  \r\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  \r\n          <!-- Row shown when there is no matching data. -->\r\n          <!-- <tr class=\"mat-row\" *matNoDataRow> -->\r\n          <!-- <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{input.value}}\"</td> -->\r\n          <!-- </tr> -->\r\n      </table>\r\n  \r\n      <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n  </div>\r\n  ");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rule-validation/rule-validation.component.html":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rule-validation/rule-validation.component.html ***!
  \**************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n<mat-toolbar color=\"primary\" style=\"height:30px; font-size: small;\">\r\n    <span >Rule Validation</span>\r\n   \r\n  </mat-toolbar>\r\n  \r\n\r\n \r\n  <mat-card style=\"overflow: hidden\">\r\n      <div fxLayout=\"column wrap\">\r\n          <div fxFlex=\"100\" fxLayoutGap=\"10px\">\r\n            <div fxFlex=\"20\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Source system</mat-label>\r\n              <mat-select  >\r\n                  <mat-option value=\"extsys1\">sys1</mat-option>\r\n                  <mat-option value=\"extsys1\">sys1</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Destination system</mat-label>\r\n                <mat-select  >\r\n                    <mat-option value=\"extsys1\">sys1</mat-option>\r\n                    <mat-option value=\"extsys1\">sys1</mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n              </div>\r\n            \r\n              \r\n          </div>\r\n        </div>\r\n    <div fxLayout=\"column wrap\">\r\n        <div fxFlex=\"100\" *ngFor=\"let rule of ruleBValidationData;let i=index\" fxLayoutGap=\"10px\">\r\n          <div fxFlex=\"20\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Field No</mat-label>\r\n              <input matInput [(ngModel)]=\"rule.fieldNo\">\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"20\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Node</mat-label>\r\n                <input matInput [(ngModel)]=\"rule.node\">\r\n              </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"20\">\r\n                <mat-form-field appearance=\"outline\">\r\n                  <mat-label>Key </mat-label>\r\n                  <input matInput [(ngModel)]=\"rule.key\">\r\n                </mat-form-field>\r\n              </div>\r\n              <div fxFlex=\"20\">\r\n                  <mat-form-field appearance=\"outline\">\r\n                    <mat-label>Object Name</mat-label>\r\n                    <input matInput [(ngModel)]=\"rule.objectName\">\r\n                  </mat-form-field>\r\n                </div>\r\n          <div fxFlex=\"20\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Validation Method</mat-label>\r\n                <input matInput [(ngModel)]=\"rule.validationMethod\">\r\n              </mat-form-field>\r\n            </div>\r\n          <div fxFlex=\"20\">\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Validtion Details</mat-label>\r\n                <input matInput [(ngModel)]=\"rule.validationDetails\">\r\n              </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"3\">\r\n                <button mat-icon-button color=\"warn\" (click)=\"deleteRuleVlidtion(i)\">\r\n                           \r\n                    <mat-icon >delete</mat-icon>\r\n                  \r\n                  </button>\r\n            </div>\r\n            <!-- <div fxFlex=\"3\">\r\n                <button mat-icon-button color=\"warn\" >\r\n                           \r\n                    <mat-icon >check_circle_outline</mat-icon>\r\n                  \r\n                  </button>\r\n            </div> -->\r\n            <!-- <div>\r\n              <button mat-icon-button color=\"warn\" (click)=\"ruleTranslation()\">\r\n                           \r\n                      <mat-icon >edit</mat-icon>\r\n                    \r\n                    </button>\r\n            </div> -->\r\n        </div>\r\n    </div>\r\n    <div fxLayout=\"row wrap\">\r\n      <div fxFlex=\"100\">\r\n        <button mat-raised-button (click)=\"addRuleValidtion()\" color=\"primary\"><mat-icon>add</mat-icon></button>\r\n      </div>\r\n    </div>\r\n<br>\r\n    <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\" fxLayoutGap=\"10px\">\r\n          <button mat-raised-button (click)=\"moveToruletranslation()\" color=\"primary\">Next</button>\r\n          <button mat-raised-button [routerLink]=\"'/sias-v2/createRule'\" color=\"primary\">Previous</button>\r\n          <button mat-raised-button  color=\"warn\">Reset</button>\r\n        </div>\r\n      </div>\r\n  </mat-card>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rules.component.html":
/*!************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rules.component.html ***!
  \************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<p>rules works!</p>\r\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/source-destination-system-validation/source-destination-system-validation.component.html":
/*!**************************************************************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/source-destination-system-validation/source-destination-system-validation.component.html ***!
  \**************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-card *ngIf=\"isSourceDestination\">\r\n  <mat-toolbar color=\"primary\" style=\"height:30px; font-size: large;\">\r\n      Source Destination System\r\n  </mat-toolbar>\r\n\r\n  <form [formGroup]=\"sourceDestinationSystemForm\" novalidate #formDirective=\"ngForm\" class=\"top\">\r\n      <mat-card-content>\r\n          <div fxLayout=\"row\" fxLayoutGap=\"15px\">\r\n              <div fxFlex=\"40\"></div>\r\n              <div fxFlex=\"40\">\r\n                  <div class=\"pb-1\">\r\n                      <mat-form-field appearance=\"outline\">\r\n                          <mat-label>Source System</mat-label>\r\n                          <input type=\"text\" placeholder=\"Pick one\"  matInput\r\n                              formControlName=\"sourceSystem\" [matAutocomplete]=\"auto\">\r\n                          <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\">\r\n                              <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\r\n                                  {{option}}\r\n                              </mat-option>\r\n                          </mat-autocomplete>\r\n                      </mat-form-field>\r\n                  </div>\r\n\r\n                  <div class=\"pb-1\">\r\n                      <mat-form-field appearance=\"outline\">\r\n                          <mat-label>Destination System</mat-label>\r\n                          <input type=\"text\" placeholder=\"Pick one\" aria-label=\"destinationSystem\" matInput\r\n                              formControlName=\"destinationSystem\" [matAutocomplete]=\"autoCom\">\r\n                          <mat-autocomplete autoActiveFirstOption #autoCom=\"matAutocomplete\">\r\n                              <mat-option *ngFor=\"let option1 of filteredOptions1 | async\" [value]=\"option1\">\r\n                                  {{option1}}\r\n                              </mat-option>\r\n                          </mat-autocomplete>\r\n                      </mat-form-field>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n      </mat-card-content>\r\n      <mat-card-actions align=\"right\" fxLayoutGap=\"10px\">\r\n          <button mat-raised-button (click)=\"submit(sourceDestinationSystemForm.value)\" color=\"primary\">Next</button>\r\n          <button mat-raised-button  color=\"warn\" [routerLink]=\"'/dashboard'\">Exit</button>\r\n      </mat-card-actions>\r\n  </form>\r\n</mat-card>\r\n\r\n<mat-card *ngIf=\"isSrcDestValidation\">\r\n  <mat-toolbar color=\"primary\" style=\"height:30px; font-size: large;\">\r\n      Source Destination System Validation\r\n  </mat-toolbar>\r\n\r\n  \r\n\r\n  <div class=\"Div_card\">\r\n      <mat-card class=\"tabb\">\r\n        <!-- <div class=\"inputWithIcon inputIconBg\">\r\n          <input type=\"text\" class=\"form-control\" name=\"searchString\" placeholder=\"Search\" [(ngModel)]=\"searchField\"\r\n            (keyup)=\"applyFilter($event.target.value)\" />\r\n          <i class=\"fa fa-search fa-lg fa-fw\" aria-hidden=\"true\"></i>\r\n          <button *ngIf=\"searchField\" class=\"searchicon\" matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"clearSearchField()\">\r\n            <mat-icon class=\"closicon\">close</mat-icon>\r\n          </button>\r\n        </div> -->\r\n        <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z0\">\r\n          <ng-container matColumnDef=\"source\">\r\n            <th mat-header-cell *matHeaderCellDef>Source System</th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.source}} </td>\r\n          </ng-container>\r\n          <ng-container matColumnDef=\"destination\">\r\n            <th mat-header-cell *matHeaderCellDef> Destination System</th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.destination}} </td>\r\n          </ng-container>\r\n          <ng-container matColumnDef=\"validationMethod\">\r\n            <th mat-header-cell *matHeaderCellDef>Validation Method</th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.validationMethod}} </td>\r\n          </ng-container>\r\n          <ng-container matColumnDef=\"details\">\r\n            <th mat-header-cell *matHeaderCellDef> Details</th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.details}} </td>\r\n          </ng-container>\r\n          <ng-container matColumnDef=\"values\">\r\n            <th mat-header-cell *matHeaderCellDef> Values</th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.values}} </td>\r\n          </ng-container>\r\n     \r\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n        </table>\r\n        <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n      </mat-card>\r\n\r\n    </div>\r\n\r\n</mat-card>");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/update-extsys/update-extsys.component.html":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/update-extsys/update-extsys.component.html ***!
  \****************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-toolbar color=\"primary\" style=\"height:30px; font-size: small;\">\r\n  <span>Process Code Mapping</span>\r\n</mat-toolbar>\r\n<br>\r\n<form #fn=\"ngForm\" novalidate>\r\n    <mat-card>\r\n      <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"100\">\r\n          <div fxFlex=\"30\">\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                  <mat-label>External System Code</mat-label>\r\n                  <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.extSysCode\" name=\"extSysCode\" readonly>\r\n                </mat-form-field>\r\n               \r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                    <mat-label>Process code</mat-label>\r\n                    <input matInput type=\"text\" #pcode [(ngModel)]=\"modifyRoleObject.processCode\" required name=\"processCode\"\r\n                      [readonly]=\"!editFunction\" (keyup)=\"fun(modifyRoleObject.processCode)\">\r\n                  </mat-form-field>\r\n           <br>\r\n           <mat-checkbox (change)=\"treasuryRequired($event)\" name=\"treasuryrefRequired\"\r\n           [(ngModel)]=\"modifyRoleObject.treasuryrefRequired\"\r\n[disabled]=\"!editFunction\" >Treasury Reference Required</mat-checkbox>\r\n          \r\n           <br>\r\n           <mat-checkbox (change)=\"checkCheckBoxvalueUpload($event)\" name=\"autoUpload\"\r\n           [(ngModel)]=\"modifyRoleObject.autoUpload\" [disabled]=\"!editFunction\">Auto Upload</mat-checkbox>\r\n           <br><br>\r\n           <mat-checkbox (change)=\"checkCheckBoxvalueBDA($event)\" name=\"backDateAllow\" \r\n           [checked]=\"modifyRoleObject.backDateAllow\" [disabled]=\"!editFunction\">Back Dating</mat-checkbox>\r\n           <br><br>\r\n           <mat-checkbox (change)=getValue($event) name=\"futureDateAllow\" [checked]=\"modifyRoleObject.futureDateAllow\" \r\n           [disabled]=\"!editFunction\">Future Dating</mat-checkbox>\r\n           <br><br><br>\r\n           <mat-checkbox (change)=getValueOfFCYrateVariance($event) name=\"fCYRateVariance\" \r\n              [checked]=\"modifyRoleObject.fCYRateVariance\" [disabled]=\"!editFunction\"  style=\"color: black\">FCY Exchange Rate Variance percentage</mat-checkbox>\r\n   \r\n              <mat-checkbox (change)=getValue2($event) name=\"acft\" [checked]=\"modifyRoleObject.acft\"\r\n              [disabled]=\"!editFunction\">\r\n              Cross Financial Transaction.</mat-checkbox>\r\n             \r\n              \r\n              <mat-checkbox (change)=getValueMfI($event) [checked]=\"modifyRoleObject.mandatoryFieldImposed\"\r\n              [disabled]=\"!editFunction\" class=\"disabled\">Mandatory Field \r\n              Impose</mat-checkbox>\r\n               <div>\r\n                  <mat-checkbox (change)=getValueSftp($event) [checked]=\"modifyRoleObject.sftpRequired\"\r\n                  [disabled]=\"!editFunction\">SFTP Required\r\n                </mat-checkbox>\r\n               </div>\r\n               <div>\r\n                <mat-checkbox (change)=getwuFileValue($event) [checked]=\"modifyRoleObject.wuFile\"\r\n                [disabled]=\"!editFunction\" class=\"disabled\">WU File Upload</mat-checkbox>\r\n                <!-- <mat-checkbox (change)=getValueMfI($event) [checked]=\"modifyRoleObject.mandatoryFieldImposed\"\r\n                [disabled]=\"!editFunction\" class=\"disabled\">Mandatory Field \r\n                Impose</mat-checkbox> -->\r\n               </div>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                  <mat-label>External System Name</mat-label>\r\n                  <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.extSysName\" name=\"extSysName\" #extSysName=\"ngModel\"\r\n                    readonly required>\r\n                </mat-form-field>\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                    <mat-label>Maximum Upload Limit</mat-label>\r\n                    <input matInput type=\"number\" #maxUpload [(ngModel)]=\"modifyRoleObject.maxUploadLimit\" required name=\"maxUploadLimit\"\r\n                      [readonly]=\"!editFunction\">\r\n                  </mat-form-field>\r\n                  <br><br>\r\n                  <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                      <mat-label>File Name</mat-label>\r\n                      <input matInput type=\"text\" #fileName [(ngModel)]=\"modifyRoleObject.fileName\" name=\"fileName\" [readonly]=\"!editFunction\" [disabled]=\"!enablefilebrowser\" required>\r\n                    </mat-form-field>\r\n                    <!-- <mat-form-field class=\"full-width\" appearance=\"outline\" style=\"color: black\">\r\n                      <mat-label style=\"color: black\">File Name</mat-label>\r\n                      <input matInput type=\"text\" #fileName [(ngModel)]=\"createExtSys1.fileName\" name=\"fileName\"\r\n                        [disabled]=\"!enablefilebrowser\" required>\r\n                    </mat-form-field> -->\r\n                    <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Back Dating</mat-label>\r\n                        <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.bdav\" name=\"bdav\" [readonly]=\"!editFunction\" [disabled]=\"!modifyRoleObject.backDateAllow\"\r\n                          required >\r\n                      </mat-form-field>\r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\" >\r\n                          <mat-label>Future Dating</mat-label>\r\n                          <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.fdav\" name=\"fdav\" [readonly]=\"!editFunction\" [disabled]=\"!modifyRoleObject.futureDateAllow\"\r\n                            required>\r\n                        </mat-form-field>\r\n                        <mat-form-field class=\"full-width\" appearance=\"outline\" >\r\n                            <mat-label>FCY Exchange Rate Variance percentage</mat-label>\r\n                            <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.fCYPercentage\" name=\"fCYPercentage\" [disabled]=\"!modifyRoleObject.fCYRateVariance\"\r\n                              [readonly]=\"!editFunction\" required>\r\n                          </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"25\">\r\n            <div style=\"top: 30%;position: absolute;\">\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\" *ngIf=\"enablefilebrowser\">\r\n                    <mat-label>File Path</mat-label>\r\n                    <input matInput type=\"text\" #filePath [(ngModel)]=\"modifyRoleObject.filePath\" name=\"filePath\" required [readonly]=\"!editFunction\">\r\n                  </mat-form-field>\r\n              \r\n            </div>\r\n          </div>\r\n          <div fxFlex=\"25\" *ngIf=\"is_sftp\">\r\n            <div>SFTP Details</div>\r\n            <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>User Name</mat-label>\r\n                <input matInput type=\"text\" placeholder=\"UserName\" [(ngModel)]=\"modifyRoleObject.sftpUsername\"\r\n                  name=\"sftpUsername\" required>\r\n              </mat-form-field>\r\n      \r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                  <mat-label>Password</mat-label>\r\n                  <input matInput type=\"text\" placeholder=\"Password\" [(ngModel)]=\"modifyRoleObject.sftpPassword\"\r\n                    name=\"sftpPassword\" required>\r\n                </mat-form-field>\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                    <mat-label>IP Address</mat-label>\r\n                    <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.sftpIpaddress\" placeholder=\"IPaddress\"\r\n                      name=\"sftpIpaddress\" required>\r\n                  </mat-form-field>\r\n                  <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                      <mat-label>Port</mat-label>\r\n                      <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.sftpPort\" name=\"sftpPort\" placeholder=\"Port\"\r\n                        required>\r\n                    </mat-form-field>\r\n                    <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Path</mat-label>\r\n                        <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.sftpPath\" name=\"path\" placeholder=\"Path\" required>\r\n                      </mat-form-field>\r\n          </div>\r\n          \r\n        </div>\r\n        <!-- <div style=\"margin-left: 30%\">\r\n            <button mat-raised-button color=\"primary\" routerLink=\"/sias-v2/extSystem\"\r\n            *ngIf=\"!editFunction && roleCodes.new\">{{roleCodes.new.labelDescription}}</button>&nbsp;\r\n          <button mat-raised-button color=\"primary\" #updateBtn *ngIf=\"editFunction\"\r\n            (click)=\"modifyExt(modifyRoleObject)\" [disabled]=\"!fn.form.valid\">Submit</button>&nbsp;\r\n          <button mat-raised-button color=\"warn\" [routerLink]=\"'/sias-v2/ExtSysList'\">Exit</button>&nbsp;\r\n          <button mat-raised-button color=\"primary\" (click)=\"changeStatus()\"\r\n            *ngIf=\"poovar && roleCodes.edit\">{{roleCodes.edit.labelDescription}}</button>&nbsp; -->\r\n          <!-- <button type=\"submit\" mat-raised-button color=\"primary\" *ngIf=\"!editFunction && roleCodes.auth\"\r\n            (click)=\"onClickOfAuth(modifyRoleObject)\">{{roleCodes.auth.labelDescription}}</button>&nbsp; -->\r\n            <!-- <button type=\"submit\" mat-raised-button color=\"primary\" *ngIf=\"!editFunction && roleCodes.auth &&  modifyRoleObject.authStatus=='UNAUTHORIZED'\"\r\n            (click)=\"onClickOfAuth(modifyRoleObject)\">{{roleCodes.auth.labelDescription}}</button>&nbsp;\r\n            <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"onClickOfClose()\"\r\n            *ngIf=\"modifyRoleObject.recordStatus =='OPEN' && !editFunction && roleCodes.close\">{{roleCodes.close.labelDescription}}</button>&nbsp;\r\n          <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"onClickOfReOpen(modifyRoleObject)\"\r\n            *ngIf=\"modifyRoleObject.recordStatus =='CLOSED' && !editFunction && roleCodes.reopen\">{{roleCodes.reopen.labelDescription}}</button>&nbsp;\r\n        </div> -->\r\n\r\n<!-- BUTTONS AlIGNMENT AND DELETE BUTTON ADDE BY VIDYA FOR ISSUE 583 -->\r\n        <div style=\"margin-left: 30%\">\r\n          <button mat-raised-button color=\"primary\" routerLink=\"/sias-v2/extSystem\"\r\n          *ngIf=\"!editFunction && roleCodes.new\">{{roleCodes.new.labelDescription}}</button>&nbsp;\r\n        <button mat-raised-button color=\"primary\" #updateBtn *ngIf=\"editFunction\"\r\n          (click)=\"modifyExt(modifyRoleObject)\" [disabled]=\"!fn.form.valid ||enableSubmit || !space\">Submit</button>&nbsp;\r\n        \r\n        <button mat-raised-button color=\"primary\" (click)=\"changeStatus()\"\r\n          *ngIf=\"poovar && roleCodes.edit &&  modifyRoleObject.recordStatus=='OPEN'\">{{roleCodes.edit.labelDescription}}</button>&nbsp;\r\n        <!-- <button type=\"submit\" mat-raised-button color=\"primary\" *ngIf=\"!editFunction && roleCodes.auth\"\r\n          (click)=\"onClickOfAuth(modifyRoleObject)\">{{roleCodes.auth.labelDescription}}</button>&nbsp; -->\r\n        \r\n          <button type=\"submit\" mat-raised-button color=\"primary\" *ngIf=\"!editFunction && roleCodes.auth &&  modifyRoleObject.authStatus=='UNAUTHORIZED'\"\r\n          (click)=\"onClickOfAuth(modifyRoleObject)\">{{roleCodes.auth.labelDescription}}</button>&nbsp;\r\n        \r\n          <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"onClickOfClose()\"\r\n          *ngIf=\"modifyRoleObject.recordStatus =='OPEN' && modifyRoleObject.verifiedOnce=='YES' && !editFunction && roleCodes.close \">{{roleCodes.close.labelDescription}}</button>&nbsp;\r\n        \r\n          <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"onClickOfReOpen(modifyRoleObject)\"\r\n          *ngIf=\"modifyRoleObject.recordStatus =='CLOSED' && !editFunction && roleCodes.reopen &&modifyRoleObject.authStatus=='AUTHORIZED'\">{{roleCodes.reopen.labelDescription}}</button>&nbsp;\r\n\r\n          <button type=\"button\" mat-raised-button color=\"warn\" (click)=\"onDeleteOfProcessCodeMapping(modifyRoleObject)\"\r\n        *ngIf=\" !editFunction && roleCodes.delete && modifyRoleObject.verifiedOnce =='NO'\"\r\n        >{{roleCodes.delete.labelDescription}}</button>&nbsp; \r\n\r\n          <button mat-raised-button color=\"warn\" [routerLink]=\"'/sias-v2/ExtSysList'\">Exit</button>&nbsp;\r\n      </div>\r\n      </div>\r\n    </mat-card>\r\n  </form>\r\n<!-- <form #fn=\"ngForm\" novalidate>\r\n  <mat-card>\r\n  <div fxLayout=\"row wrap\">\r\n    <div fxFlex=\"100\">\r\n      <div fxFlex=\"60\">\r\n        <div fxFlex=\"50\">\r\n            <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>External System Code</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.extSysCode\" name=\"extSysCode\" readonly>\r\n              </mat-form-field>\r\n           <div>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                  <mat-label>Process code</mat-label>\r\n                  <input matInput type=\"text\" #pcode [(ngModel)]=\"modifyRoleObject.processCode\" name=\"processCode\"\r\n                    [readonly]=\"!editFunction\">\r\n                </mat-form-field>\r\n           </div>\r\n           <div><mat-checkbox (change)=\"treasuryRequired($event)\" \r\n            [checked]=\"modifyRoleObject.treasuryrefRequired\"\r\n[disabled]=\"!editFunction\">Treasury Reference Required</mat-checkbox></div>\r\n           <div>\r\n              <mat-checkbox (change)=\"checkCheckBoxvalueUpload($event)\" name=\"autoUpload\"\r\n              [(ngModel)]=\"modifyRoleObject.autoUpload\" [disabled]=\"!editFunction\">Auto Upload</mat-checkbox>\r\n           </div>\r\n           <br><br><br>\r\n           <div>\r\n              <mat-checkbox (change)=\"checkCheckBoxvalueBDA($event)\" name=\"backDateAllow\"\r\n            [checked]=\"modifyRoleObject.backDateAllow\" [disabled]=\"!editFunction\">Back Dating</mat-checkbox>\r\n                     \r\n           </div>\r\n           <br>\r\n           <div>\r\n              <mat-checkbox (change)=getValue($event) name=\"futureDateAllow\" [checked]=\"modifyRoleObject.futureDateAllow\" \r\n              [disabled]=\"!editFunction\">Future Dating</mat-checkbox>\r\n           </div>\r\n           <br>\r\n           <div>\r\n              <mat-checkbox (change)=getValueOfFCYrateVariance($event) name=\"fCYRateVariance\" \r\n              [checked]=\"modifyRoleObject.fCYRateVariance\" [disabled]=\"!editFunction\"  >FCY Exchange Rate Variance percentage</mat-checkbox>\r\n           </div>\r\n           <mat-checkbox (change)=getValue2($event) name=\"acft\" [checked]=\"modifyRoleObject.acft\"\r\n           [disabled]=\"!editFunction\">\r\n           Cross Financial Transaction.</mat-checkbox>\r\n         \r\n          \r\n           <mat-checkbox (change)=getValueMfI($event) [checked]=\"modifyRoleObject.mandatoryFieldImposed\"\r\n[disabled]=\"!editFunction\">Mandatory Field\r\nImpose</mat-checkbox>\r\n           <mat-checkbox (change)=getValueSftp($event) [checked]=\"modifyRoleObject.sftpRequired\"\r\n           [disabled]=\"!editFunction\">SFTP Required\r\n         </mat-checkbox>\r\n        </div>\r\n        <div fxFlex=\"35\">\r\n            <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>External system name</mat-label>\r\n                <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.extSysName\" name=\"extSysName\" #extSysName=\"ngModel\"\r\n                  readonly required>\r\n              </mat-form-field>\r\n           \r\n            <div>\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                    <mat-label>Maximum Upload Limit</mat-label>\r\n                    <input matInput type=\"number\" #maxUpload [(ngModel)]=\"modifyRoleObject.maxUploadLimit\" name=\"maxUploadLimit\"\r\n                      [readonly]=\"!editFunction\">\r\n                  </mat-form-field>\r\n              </div>\r\n              <br>\r\n              <div>\r\n                  <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                      <mat-label>File Name</mat-label>\r\n                      <input matInput type=\"text\" #fileName [(ngModel)]=\"modifyRoleObject.fileName\" name=\"fileName\" required [readonly]=\"!editFunction\">\r\n                    </mat-form-field>\r\n                   \r\n              </div>\r\n              \r\n              <div>\r\n                  <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                      <mat-label>Back Dating</mat-label>\r\n                      <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.bdav\" name=\"bdav\" [readonly]=\"!editFunction\"\r\n                        required >\r\n                    </mat-form-field>\r\n              </div>\r\n              <div>\r\n                  <mat-form-field class=\"full-width\" appearance=\"outline\" >\r\n                      <mat-label>Future Dating</mat-label>\r\n                      <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.fdav\" name=\"fdav\" [readonly]=\"!editFunction\"\r\n                        required>\r\n                    </mat-form-field>\r\n              </div>\r\n              <div>\r\n                  <mat-form-field class=\"full-width\" appearance=\"outline\" >\r\n                      <mat-label>FCY Exchange Rate Variance percentage</mat-label>\r\n                      <input matInput type=\"number\" [(ngModel)]=\"modifyRoleObject.fCYPercentage\" name=\"fCYPercentage\"\r\n                        [readonly]=\"!editFunction\" required>\r\n                    </mat-form-field>\r\n              </div>\r\n        </div>\r\n       \r\n        \r\n      </div>\r\n      <div fxFlex=\"20\" fxFlexAlign=\"start\">\r\n        <span style=\"margin-left: 25%\">SFTP Details</span> \r\n          <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n              <mat-label>Username</mat-label>\r\n              <input matInput type=\"text\" placeholder=\"Username\" [(ngModel)]=\"modifyRoleObject.sftpUsername\"\r\n                name=\"sftpUsername\" required>\r\n            </mat-form-field>\r\n            <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                <mat-label>Password</mat-label>\r\n                <input matInput type=\"text\" placeholder=\"Password\" [(ngModel)]=\"modifyRoleObject.sftpPassword\"\r\n                  name=\"sftpPassword\" required>\r\n              </mat-form-field>\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                  <mat-label>IPaddress</mat-label>\r\n                  <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.sftpIpaddress\" placeholder=\"IPaddress\"\r\n                    name=\"sftpIpaddress\" required>\r\n                </mat-form-field>\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                    <mat-label>Port</mat-label>\r\n                    <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.sftpPort\" name=\"sftpPort\" placeholder=\"Port\"\r\n                      required>\r\n                  </mat-form-field>\r\n                  <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                      <mat-label>Path</mat-label>\r\n                      <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.sftpPath\" name=\"path\" placeholder=\"Path\" required>\r\n                    </mat-form-field>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n  <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\" >\r\n      <button mat-raised-button color=\"primary\" routerLink=\"/sias-v2/extSystem\"\r\n      *ngIf=\"!editFunction && roleCodes.new\">{{roleCodes.new.labelDescription}}</button>\r\n    <button mat-raised-button color=\"primary\" #updateBtn *ngIf=\"editFunction\"\r\n      (click)=\"modifyExt(modifyRoleObject)\">Submit</button>\r\n    <button mat-raised-button color=\"warn\" [routerLink]=\"'/sias-v2/ExtSysList'\">Exit</button>\r\n    <button mat-raised-button color=\"primary\" (click)=\"changeStatus()\"\r\n      *ngIf=\"poovar && roleCodes.edit\">{{roleCodes.edit.labelDescription}}</button>\r\n    <button type=\"submit\" mat-raised-button color=\"primary\" *ngIf=\"!editFunction && roleCodes.auth\"\r\n      (click)=\"onClickOfAuth(modifyRoleObject)\">{{roleCodes.auth.labelDescription}}</button>\r\n      <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"onClickOfClose()\"\r\n      *ngIf=\"modifyRoleObject.recordStatus =='OPEN' && !editFunction && roleCodes.close\">{{roleCodes.close.labelDescription}}</button>\r\n    <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"onClickOfReOpen(modifyRoleObject)\"\r\n      *ngIf=\"modifyRoleObject.recordStatus =='CLOSED' && !editFunction && roleCodes.reopen\">{{roleCodes.reopen.labelDescription}}</button>\r\n  </div>\r\n</mat-card>\r\n</form> -->\r\n<!-- <form #fn=\"ngForm\" novalidate>\r\n    <mat-card >\r\n      \r\n      <div fxLayout=\"row wrap\">\r\n        <div fxFlex=\"20\"></div>\r\n        <div fxFlex=\"100\">\r\n          <div fxFlex=\"30\">\r\n              <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                  <mat-label>External System Code</mat-label>\r\n                  <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.extSysCode\" name=\"extSysCode\" readonly>\r\n                </mat-form-field>\r\n               \r\n          </div>\r\n          <div fxFlex=\"30\">\r\n            \r\n          <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n              <mat-label>External system name</mat-label>\r\n              <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.extSysName\" name=\"extSysName\" #extSysName=\"ngModel\"\r\n                readonly required>\r\n            </mat-form-field>\r\n            \r\n\r\n          </div>\r\n          <div fxFlex=\"10\" *ngIf=\"is_sftp\">SFTP Details\r\n              \r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n      <div fxLayout=\"row wrap\">\r\n          <div fxFlex=\"20\"></div>\r\n          <div fxFlex=\"100\">\r\n            <div fxFlex=\"30\">\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                    <mat-label>Process code</mat-label>\r\n                    <input matInput type=\"text\" #pcode [(ngModel)]=\"modifyRoleObject.processCode\" name=\"processCode\"\r\n                      [readonly]=\"!editFunction\">\r\n                  </mat-form-field>\r\n                 \r\n            </div>\r\n            <div fxFlex=\"30\">\r\n              \r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                    <mat-label>Maximum Upload Limit</mat-label>\r\n                    <input matInput type=\"number\" #maxUpload [(ngModel)]=\"modifyRoleObject.maxUploadLimit\" name=\"maxUploadLimit\"\r\n                      [readonly]=\"!editFunction\">\r\n                  </mat-form-field>\r\n              \r\n\r\n            </div>\r\n            <div fxFlex=\"10\" *ngIf=\"is_sftp\">\r\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                    <mat-label>UserName</mat-label>\r\n                    <input matInput type=\"text\" placeholder=\"UserName\" [(ngModel)]=\"modifyRoleObject.sftpUsername\"\r\n                      name=\"sftpUsername\" required [readonly]=\"!editFunction\">\r\n                  </mat-form-field>\r\n          \r\n            </div>\r\n  \r\n          </div>\r\n  \r\n        </div>          \r\n        <div fxLayout=\"row wrap\">\r\n            <div fxFlex=\"20\"></div>\r\n            <div fxFlex=\"100\">\r\n              <div fxFlex=\"30\">\r\n                  <mat-checkbox (change)=\"checkCheckBoxvalueUpload($event)\" name=\"autoUpload\"\r\n                  [(ngModel)]=\"modifyRoleObject.autoUpload\" [disabled]=\"!editFunction\">Auto Upload</mat-checkbox>\r\n                   \r\n              </div>\r\n              <div fxFlex=\"30\">\r\n                  <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                      <mat-label>File Name</mat-label>\r\n                      <input matInput type=\"text\" #fileName [(ngModel)]=\"modifyRoleObject.fileName\" name=\"fileName\" required [readonly]=\"!editFunction\">\r\n                    </mat-form-field>\r\n                    <mat-form-field class=\"full-width\" appearance=\"outline\" *ngIf=\"enablefilebrowser\">\r\n                      <mat-label>File Path</mat-label>\r\n                      <input matInput type=\"text\" #filePath [(ngModel)]=\"modifyRoleObject.filePath\" name=\"filePath\" required [readonly]=\"!editFunction\">\r\n                    </mat-form-field>\r\n                \r\n  \r\n              </div>\r\n              <div fxFlex=\"10\" *ngIf=\"is_sftp\">\r\n                  <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                      <mat-label>Password</mat-label>\r\n                      <input matInput type=\"text\" placeholder=\"Password\" [(ngModel)]=\"modifyRoleObject.sftpPassword\"\r\n                        name=\"sftpPassword\" required [readonly]=\"!editFunction\">\r\n                    </mat-form-field>\r\n              </div>\r\n    \r\n            </div>\r\n    \r\n          </div>\r\n          <div fxLayout=\"row wrap\">\r\n              <div fxFlex=\"20\"></div>\r\n              <div fxFlex=\"100\">\r\n                <div fxFlex=\"30\">\r\n                    <mat-checkbox (change)=\"checkCheckBoxvalueBDA($event)\" name=\"backDateAllow\"\r\n            [checked]=\"modifyRoleObject.backDateAllow\" [disabled]=\"!editFunction\">Back Dated Allow</mat-checkbox>\r\n                     \r\n                </div>\r\n                <div fxFlex=\"30\">\r\n                  \r\n                    <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Back Dated Allow Value</mat-label>\r\n                        <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.bdav\" name=\"bdav\" [readonly]=\"!editFunction\"\r\n                          required >\r\n                      </mat-form-field>\r\n                  \r\n    \r\n                </div>\r\n                <div fxFlex=\"10\" *ngIf=\"is_sftp\">\r\n                    <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Port</mat-label>\r\n                        <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.sftpPort\" name=\"sftpPort\" placeholder=\"Port\"\r\n                          required [readonly]=\"!editFunction\">\r\n                      </mat-form-field>\r\n                </div>\r\n      \r\n              </div>\r\n      \r\n            </div>\r\n            <div fxLayout=\"row wrap\">\r\n                <div fxFlex=\"20\"></div>\r\n                <div fxFlex=\"100\">\r\n                  <div fxFlex=\"30\">\r\n                      <mat-checkbox (change)=getValue($event) name=\"futureDateAllow\" [checked]=\"modifyRoleObject.futureDateAllow\" \r\n                      [disabled]=\"!editFunction\">Future Dating</mat-checkbox>\r\n                       \r\n                  </div>\r\n                  <div fxFlex=\"30\">\r\n                    \r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\" >\r\n                          <mat-label>Future Date Allow Value</mat-label>\r\n                          <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.fdav\" name=\"fdav\" [readonly]=\"!editFunction\"\r\n                            required>\r\n                        </mat-form-field>\r\n                    \r\n      \r\n                  </div>\r\n                  <div fxFlex=\"10\" *ngIf=\"is_sftp\"> \r\n                      <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                          <mat-label>IpAddress</mat-label>\r\n                          <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.sftpIpaddress\" placeholder=\"IP Address\"\r\n                            name=\"sftpIpaddress\" required [readonly]=\"!editFunction\">\r\n                        </mat-form-field>\r\n                  </div>\r\n        \r\n                </div>\r\n        \r\n              </div>\r\n              <div fxLayout=\"row wrap\">\r\n                  <div fxFlex=\"20\"></div>\r\n                  <div fxFlex=\"100\">\r\n                    <div fxFlex=\"30\">\r\n                        <mat-checkbox (change)=getValueOfFCYrateVariance($event) name=\"fCYRateVariance\" \r\n                        [checked]=\"modifyRoleObject.fCYRateVariance\" [disabled]=\"!editFunction\"  >FCY Exchange Rate Variance percentage</mat-checkbox>\r\n\r\n\r\n\r\n                         \r\n                    </div>\r\n                    <div fxFlex=\"30\">\r\n                        <mat-form-field class=\"full-width\" appearance=\"outline\" >\r\n                            <mat-label>FCY Exchange Rate Variance percentage</mat-label>\r\n                            <input matInput type=\"number\" [(ngModel)]=\"modifyRoleObject.fCYPercentage\" name=\"fCYPercentage\"\r\n                              [readonly]=\"!editFunction\" required>\r\n                          </mat-form-field>\r\n        \r\n                    </div>\r\n                    <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n                        <mat-label>Path</mat-label>\r\n                        <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.sftpPath\" name=\"path\" placeholder=\"Path\" required>\r\n                      </mat-form-field>\r\n          \r\n                  </div>\r\n          \r\n                </div>\r\n                <div fxLayout=\"row wrap\">\r\n                    <div fxFlex=\"20\"></div>\r\n                    <div fxFlex=\"100\">\r\n                      <div fxFlex=\"30\">\r\n                         \r\n                          <mat-checkbox (change)=getValue2($event) name=\"acft\" [checked]=\"modifyRoleObject.acft\"\r\n                          [disabled]=\"!editFunction\">\r\n                          Cross Financial Transaction.</mat-checkbox>\r\n                          <mat-checkbox (change)=\"treasuryRequired($event)\" \r\n                          [checked]=\"modifyRoleObject.treasuryrefRequired\"\r\n            [disabled]=\"!editFunction\">Treasury Reference Required</mat-checkbox>\r\n                         \r\n                          <mat-checkbox (change)=getValueMfI($event) [checked]=\"modifyRoleObject.mandatoryFieldImposed\"\r\n            [disabled]=\"!editFunction\">Mandatory Field\r\n            Impose</mat-checkbox>\r\n                          <mat-checkbox (change)=getValueSftp($event) [checked]=\"modifyRoleObject.sftpRequired\"\r\n                          [disabled]=\"!editFunction\">SFTP Required\r\n                        </mat-checkbox>\r\n                      </div>\r\n                      <div fxFlex=\"30\">\r\n                        \r\n                        \r\n                        \r\n          \r\n                      </div>\r\n                      <div fxFlex=\"10\">\r\n                         \r\n                      </div>\r\n            \r\n                    </div>\r\n            \r\n                  </div>\r\n                 \r\n\r\n    </mat-card>\r\n    \r\n  </form> -->\r\n<!-- <form #fn=\"ngForm\" novalidate>\r\n  <mat-card style=\"text-align: center;width: 75%;margin-left: 15%\">\r\n    <div fxLayout=\"column\">\r\n\r\n      <div fxFlex=\"100\">\r\n      \r\n        <div>\r\n          <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n            <mat-label>External System Code</mat-label>\r\n            <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.extSysCode\" name=\"extSysCode\" readonly>\r\n          </mat-form-field>\r\n          <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n            <mat-label>External System Code</mat-label>\r\n            <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.extSysCode\" name=\"extSysCode\" readonly>\r\n          </mat-form-field>\r\n        </div>\r\n        <div>\r\n          <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n            <mat-label>Process code</mat-label>\r\n            <input matInput type=\"text\" #pcode [(ngModel)]=\"modifyRoleObject.processCode\" name=\"processCode\"\r\n              [disabled]=\"!editFunction\">\r\n          </mat-form-field>\r\n          <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n            <mat-label>Maximum Upload Limit</mat-label>\r\n            <input matInput type=\"number\" #maxUpload [(ngModel)]=\"modifyRoleObject.maxUploadLimit\" name=\"maxUploadLimit\"\r\n              [disabled]=\"!editFunction\">\r\n          </mat-form-field>\r\n        </div>\r\n        <div>\r\n            <mat-checkbox (change)=\"treasuryRequired($event)\" name=\"treasuryRef\" style=\"margin-right: 29.5%\"\r\n            [(ngModel)]=\"modifyRoleObject.treasuryrefRequired\" [disabled]=\"!editFunction\">Treasury Reference Required</mat-checkbox>\r\n        </div>\r\n        <div>\r\n          <mat-checkbox (change)=\"checkCheckBoxvalueUpload($event)\" name=\"autoUpload\"style=\"margin-right: 14%\"\r\n            [(ngModel)]=\"modifyRoleObject.autoUpload\" [disabled]=\"!editFunction\">Auto Upload</mat-checkbox>\r\n          <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n            <mat-label>File Name</mat-label>\r\n            <input matInput type=\"text\" #fileName [(ngModel)]=\"modifyRoleObject.fileName\" name=\"fileName\" required>\r\n          </mat-form-field>\r\n          <mat-form-field class=\"full-width\" appearance=\"outline\" *ngIf=\"enablefilebrowser\" style=\"margin-left: 37%\">\r\n            <mat-label>File Path</mat-label>\r\n            <input matInput type=\"text\" #filePath [(ngModel)]=\"modifyRoleObject.filePath\" name=\"filePath\" required>\r\n          </mat-form-field>\r\n        </div>\r\n        <div>\r\n          <mat-checkbox (change)=\"checkCheckBoxvalueBDA($event)\" name=\"backDateAllow\" style=\"margin-right: 6%\"\r\n            [checked]=\"modifyRoleObject.backDateAllow\" [disabled]=\"!editFunction\">Back Dated Allow</mat-checkbox>\r\n          <mat-form-field class=\"full-width\" appearance=\"outline\" style=\"margin-left: 20px\">\r\n            <mat-label>Back Dated Allow Value</mat-label>\r\n            <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.bdav\" name=\"bdav\" [disabled]=\"!editFunction\"\r\n              required>\r\n          </mat-form-field>\r\n        </div>\r\n        <div>\r\n          <mat-checkbox (change)=getValue($event) name=\"futureDateAllow\" [checked]=\"modifyRoleObject.futureDateAllow\" style=\"margin-right: 6%\"\r\n            [disabled]=\"!editFunction\">Future Date Allow</mat-checkbox>\r\n          <mat-form-field class=\"full-width\" appearance=\"outline\" style=\"margin-left: 20px\">\r\n            <mat-label>Future Date Allow Value</mat-label>\r\n            <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.fdav\" name=\"fdav\" [disabled]=\"!editFunction\"\r\n              required>\r\n          </mat-form-field>\r\n        </div>\r\n        <div>\r\n          <mat-checkbox (change)=getValueOfFCYrateVariance($event) name=\"fCYRateVariance\" style=\"margin-right: 16%\"\r\n            [checked]=\"modifyRoleObject.fCYRateVariance\" [disabled]=\"!editFunction\"  >FCY Exchange Rate Variance percentage</mat-checkbox>\r\n        <div>\r\n            <mat-form-field class=\"full-width\" appearance=\"outline\" >\r\n            <mat-label>FCY Exchange Rate Variance percentage</mat-label>\r\n            <input matInput type=\"number\" [(ngModel)]=\"modifyRoleObject.fCYPercentage\" name=\"fCYPercentage\"\r\n              [disabled]=\"!editFunction\" required>\r\n          </mat-form-field>\r\n        </div>\r\n        </div>\r\n        <div>\r\n          <mat-checkbox (change)=getValue2($event) name=\"acft\" [checked]=\"modifyRoleObject.acft\"\r\n            [disabled]=\"!editFunction\">Allowing\r\n            cross financial transaction.</mat-checkbox>\r\n          <mat-checkbox (change)=getValueSftp($event) [checked]=\"modifyRoleObject.sftpRequired\"\r\n            [disabled]=\"!editFunction\">SFTP Required\r\n          </mat-checkbox>\r\n          <mat-checkbox (change)=getValueMfI($event) [checked]=\"modifyRoleObject.mandatoryFieldImposed\"\r\n            [disabled]=\"!editFunction\">Mandatory Field\r\n            Impose</mat-checkbox>\r\n        </div>\r\n       \r\n      </div>\r\n    </div>\r\n    <div fxFlex=\"5\"></div>\r\n    <div fxFlex=\"25\" *ngIf=\"is_sftp\">\r\n      \r\n      <span>SFTP Details</span>\r\n      \r\n\r\n      \r\n      <div>\r\n\r\n        <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n          <mat-label>UserName</mat-label>\r\n          <input matInput type=\"text\" placeholder=\"UserName\" [(ngModel)]=\"modifyRoleObject.sftpUsername\"\r\n            name=\"sftpUsername\" required>\r\n        </mat-form-field>\r\n\r\n      </div>\r\n      <div>\r\n        <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n          <mat-label>Password</mat-label>\r\n          <input matInput type=\"text\" placeholder=\"Password\" [(ngModel)]=\"modifyRoleObject.sftpPassword\"\r\n            name=\"sftpPassword\" required>\r\n        </mat-form-field>\r\n      </div>\r\n      <div>\r\n        <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n          <mat-label>IpAddress</mat-label>\r\n          <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.sftpIpaddress\" placeholder=\"IP Address\"\r\n            name=\"sftpIpaddress\" required>\r\n        </mat-form-field>\r\n\r\n      </div>\r\n      <div>\r\n        <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n          <mat-label>Port</mat-label>\r\n          <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.sftpPort\" name=\"sftpPort\" placeholder=\"Port\"\r\n            required>\r\n        </mat-form-field>\r\n      </div>\r\n      <div>\r\n        <mat-form-field class=\"full-width\" appearance=\"outline\">\r\n          <mat-label>Path</mat-label>\r\n          <input matInput type=\"text\" [(ngModel)]=\"modifyRoleObject.sftpPath\" name=\"path\" placeholder=\"Path\" required>\r\n        </mat-form-field>\r\n      </div>\r\n     \r\n\r\n     \r\n    </div>\r\n\r\n  </mat-card>\r\n  <br>\r\n  <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\" class=\"mt-12\">\r\n    <button mat-raised-button color=\"primary\" routerLink=\"/sias-v2/extSystem\"\r\n      *ngIf=\"!editFunction && roleCodes.new\">{{roleCodes.new.labelDescription}}</button>\r\n    <button mat-raised-button color=\"primary\" #updateBtn *ngIf=\"editFunction\"\r\n      (click)=\"modifyExt(modifyRoleObject)\">Submit</button>\r\n    <button mat-raised-button color=\"warn\" [routerLink]=\"'/sias-v2/ExtSysList'\">Exit</button>\r\n    <button mat-raised-button color=\"primary\" (click)=\"changeStatus()\"\r\n      *ngIf=\"poovar && roleCodes.edit\">{{roleCodes.edit.labelDescription}}</button>\r\n    <button type=\"submit\" mat-raised-button color=\"primary\" *ngIf=\"!editFunction && roleCodes.auth\"\r\n      (click)=\"onClickOfAuth(modifyRoleObject)\">{{roleCodes.auth.labelDescription}}</button>\r\n    <!-- <button type=\"button\" mat-raised-button color=\"red\" *ngIf=\"this.button_permission.deletebutton=='T'\"\r\n              (clcik)=\"onClcikOfDelete()\">Delete</button> -->\r\n    <!-- <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"onClickOfClose()\"\r\n      *ngIf=\"modifyRoleObject.recordStatus =='OPEN' && !editFunction && roleCodes.close\">{{roleCodes.close.labelDescription}}</button>\r\n    <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"onClickOfReOpen(modifyRoleObject)\"\r\n      *ngIf=\"modifyRoleObject.recordStatus =='CLOSED' && !editFunction && roleCodes.reopen\">{{roleCodes.reopen.labelDescription}}</button>\r\n  </div>\r\n</form> --> \r\n\r\n\r\n<br>\r\n<div fxLayout=\"row\">\r\n  <div fxFlex></div>\r\n  <div fxFlex=\"95\">\r\n    <mat-card style=\"width: 70%;  margin-left:20%;\">\r\n   \r\n      <mat-card-content>\r\n        <div fxLayout=\"row\">\r\n\r\n          <table id=\"customers\">\r\n            <tr>\r\n              <th>Record Status:</th>\r\n              <td>\r\n                <mat-chip>{{modifyRoleObject.recordStatus }}</mat-chip>\r\n              </td>\r\n              <th>Auth Status:</th>\r\n              <td>\r\n\r\n                <mat-chip>{{modifyRoleObject.authStatus}}</mat-chip>\r\n                <!-- <mat-form-field appearance=\"fill\">\r\n                  <mat-label>Status</mat-label>\r\n                  <input matInput type=\"text\" placeholder=\"\" #exSys>\r\n                  <mat-icon matSuffix>person</mat-icon>\r\n                </mat-form-field> -->\r\n              </td>\r\n              <th>Created By:</th>\r\n              <td>\r\n                <mat-chip>{{modifyRoleObject.creatorId }}</mat-chip>\r\n              </td>\r\n              <th>Authorized By:</th>\r\n              <td>\r\n                <mat-chip>{{modifyRoleObject.verifierId}}</mat-chip>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th>Modification No:</th>\r\n              <td>\r\n                <mat-chip>{{modifyRoleObject.versionNo}}</mat-chip>\r\n              </td>\r\n              <th>Creation Date:</th>\r\n              <td>\r\n                <mat-chip>{{modifyRoleObject.creatorDtStamp | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n              </td>\r\n              <th>Authorization Date:</th>\r\n              <td>\r\n                <mat-chip>{{modifyRoleObject.verifierDtStamp | date: 'MM/dd/yyyy, h:mm a'}}</mat-chip>\r\n              </td>\r\n               <!-- added by vidya  -->\r\n               <th>Firts Time Auth:</th>\r\n               <td>\r\n                 <mat-chip>{{modifyRoleObject.verifiedOnce}}</mat-chip>\r\n               </td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n  <div fxFlex></div>\r\n\r\n  <br><br><br><br><br><br><br><br>");

/***/ }),

/***/ "./src/app/shared/services/addSys/add-system.service.ts":
/*!**************************************************************!*\
  !*** ./src/app/shared/services/addSys/add-system.service.ts ***!
  \**************************************************************/
/*! exports provided: API_URL, AddSystemService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "API_URL", function() { return API_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddSystemService", function() { return AddSystemService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var src_app_shared_config_app_constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/config/app.constant */ "./src/app/shared/config/app.constant.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");





const API_URL = src_app_shared_config_app_constant__WEBPACK_IMPORTED_MODULE_3__["AppConstants"].baseURL;
let AddSystemService = class AddSystemService {
    constructor(http) {
        this.http = http;
        this.subject = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
        this.paramSource = new rxjs__WEBPACK_IMPORTED_MODULE_4__["BehaviorSubject"]({});
        this.getNavParam = this.paramSource.asObservable();
    }
    // Post
    submittingAddSystem(addSsytem, user) {
        return this.http.post(`${API_URL}/newExtApi/create/${user}`, addSsytem);
    }
    //geting external System
    fecthingAddSystem() {
        return this.http.get(`${API_URL}/newExtApi/getAllExternalSys`);
    }
    //update
    editaddsystem(operation, currentUser, addSsytem) {
        return this.http.put(`${API_URL}/newExtApi/${operation}/${currentUser}`, addSsytem);
    }
    //fetching addsystem based on id
    fetchingAddSysBasedonId(id) {
        return this.http.get(`${API_URL}/newExtApi/getExternalSysDetails/${id}`);
    }
    // delete
    deleteingAddSystem() {
        return this.http.delete(`${API_URL}//`);
    }
    // sendingAddSystemDataToEditScreen
    sendingAddSystemDataToEditScreen(params) {
        this.subject.next(params);
    }
    editruleTranslation(operation, userIdLoggedIn, messageTranslationDto) {
        return this.http.put(`${API_URL}/msgApi/${operation}/${userIdLoggedIn}`, messageTranslationDto);
    }
    deleteRuleTranslation(userIdLoggedIn, transId) {
        let transIddel = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]();
        transId = transIddel.append('transId', transId);
        console.log("tra", transId);
        return this.http.delete(`${API_URL}/msgApi/deleteRecord/${userIdLoggedIn}`, {
            params: transId
        });
    }
    deleteAddSystem(userIdLoggedIn, systemId) {
        return this.http.delete(`${API_URL}/newExtApi/delete/${userIdLoggedIn}?systemId=${systemId}`);
    }
    getEditOfAddSystem() {
        return this.subject.asObservable();
    }
    sendNavParam(params) {
        this.paramSource.next(params);
    }
    // Audit log methods--->add System starts
    onAuthofAddSystem(addSsytem, userIdLoggedIn) {
        return this.http.put(`${API_URL}/newExtApi/authorizetherecord/${userIdLoggedIn}`, addSsytem);
    }
    onCloseOfAddSystem(addSsytem, userIdLoggedIn) {
        return this.http.put(`${API_URL}/newExtApi/toClosingTheRecord/${userIdLoggedIn}`, addSsytem);
    }
    onopenOfAddSystem(addSsytem, userIdLoggedIn) {
        return this.http.put(`${API_URL}/newExtApi/closeRecord/${userIdLoggedIn}`, addSsytem);
    }
    onDeleteAddSystem(addSsytem, userIdLoggedIn) {
        return this.http.put(`${API_URL}/newExtApi/delete/${userIdLoggedIn}`, addSsytem);
    }
    // Audit log methods--->add System ends
    // http and xml incoming
    //add system screen uplaod xml
    gettingHederofXMl(files) {
        var formData = new FormData();
        let key = 'header';
        formData.append('file', files);
        formData.append('key', key);
        console.log(formData);
        return this.http.post(`${API_URL}/convertMsg/convertXmlToNodeTagList`, formData);
    }
    gettingBodyOfXml(files) {
        var formData = new FormData();
        let key = 'body';
        formData.append('file', files);
        formData.append('key', key);
        console.log(formData);
        return this.http.post(`${API_URL}/convertMsg/convertXmlToNodeTagList`, formData);
    }
    // For rule transaltion upload xml
    selectFileFORHTTPXMLIncoming(files) {
        var formData = new FormData();
        formData.append('file', files);
        return this.http.post(`${API_URL}/file/getHeaders`, formData);
    }
    fetchingXMLandHttp() {
        return this.http.get(`${API_URL}/msgApi/getXmlMsgField`);
    }
    fetchingIsoForTcp() {
        return this.http.get(`${API_URL}/msgApi/getIsoMsgField`);
    }
    gettinXMLmsgIncoming() {
        return this.http.get(`${API_URL}/msgApi/getXmlMsgField`);
    }
    // db cnnection-->credentials api
    pingDataSource(url, driverClassName, username, password) {
        return this.http.get(`${API_URL}/db/ping/${url}/${driverClassName}/${username}/${password}`);
    }
    // db connection -->column name
    coulmnNameBasedonTableName(url, driverClassName, username, password, tablename) {
        return this.http.get(`${API_URL}/db/ping/${url}/${driverClassName}/${username}/${password}/${tablename}`);
    }
    //fetching header tag
    fetchingHeaderTag() {
        return this.http.get(`${API_URL}/newExtApi/getAllHeadTag`);
    }
    validateCode(code) {
        return this.http.get(`${API_URL}/newExtApi/addSystem/validateCode/${code}`);
    }
};
AddSystemService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
];
AddSystemService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"]])
], AddSystemService);



/***/ }),

/***/ "./src/app/shared/services/rules/rules.service.ts":
/*!********************************************************!*\
  !*** ./src/app/shared/services/rules/rules.service.ts ***!
  \********************************************************/
/*! exports provided: API_URL, RulesService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "API_URL", function() { return API_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RulesService", function() { return RulesService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var src_app_shared_config_app_constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/config/app.constant */ "./src/app/shared/config/app.constant.ts");




const API_URL = src_app_shared_config_app_constant__WEBPACK_IMPORTED_MODULE_3__["AppConstants"].baseURL;
let RulesService = class RulesService {
    constructor(http) {
        this.http = http;
    }
    //post method
    submittingCreateRules(createruleData, userIdLoggedIn) {
        return this.http.post(`${API_URL}/ruleConfig/newRecord/${userIdLoggedIn}`, createruleData);
    }
    gettingCreateRuleById(id) {
        return this.http.get(`${API_URL}/ruleConfig/getRuleValidationSummary/${id}`);
    }
    //get method
    fetchingRules() {
        return this.http.get(`${API_URL}/ruleConfig/getRuleConfigSummary`);
    }
    //put method
    updateingRules(updatingruleData) {
        return this.http.put(`${API_URL}//`, updatingruleData);
    }
    //delete method
    deleteingRules() {
        return this.http.delete(`${API_URL}//`);
    }
    // rule translation
    editruleTranslation(operation, userIdLoggedIn, messageTranslationDto) {
        return this.http.put(`${API_URL}/msgApi/${operation}/${userIdLoggedIn}`, messageTranslationDto);
    }
    submittingruleTranslation(userIdLoggedIn, messageTranslationDto) {
        return this.http.post(`${API_URL}/msgApi/createRecord/${userIdLoggedIn}`, messageTranslationDto);
    }
    //get method
    fetchingruleTranslation() {
        return this.http.get(`${API_URL}/msgApi/getTranslation`);
    }
    //getting rule transtion based on id
    ruleTranslationBasedonId(id) {
        return this.http.get(`${API_URL}/msgApi/getTranslationDetails/${id}`);
    }
    //get rule trnasltion
    gettingoperationAndService(extSys, msgType, userIdLoggedIn) {
        console.log(extSys, msgType);
        return this.http.get(`${API_URL}/newExtApi/getServiceOperation/${extSys}/${msgType}/${userIdLoggedIn}`);
    }
    //put method
    updatingruleTranslation(updateruletranslationData) {
        return this.http.put(`${API_URL}//`, updateruletranslationData);
    }
    //delete method
    deletingruleTranslation() {
        return this.http.delete(`${API_URL}`);
    }
    //rule validation
    //post method
    submittingruleValidation(createrulevalidateData) {
        return this.http.post(`${API_URL}//`, createrulevalidateData);
    }
    //get method
    fetchingruleValidation() {
        return this.http.get(`${API_URL}//`);
    }
    //put method
    updatingruleValidation(updaterulevalidateData) {
        return this.http.put(`${API_URL}//`, updaterulevalidateData);
    }
    //delete method
    deletingruleValidation() {
        return this.http.delete(`${API_URL}//`);
    }
    // Rule Mapping
    //post method
    submittingruleMapping(createrulemappingData, userIdLoggedIn) {
        return this.http.post(`${API_URL}/msgApi/createMappingNew/${userIdLoggedIn}`, createrulemappingData);
    }
    updatingRuleMapping(updateMappingNewData, userIdLoggedIn) {
        return this.http.put(`${API_URL}/msgApi/msgMapping/update/${userIdLoggedIn}`, updateMappingNewData);
    }
    editRuleMapping(opeation, userIdLoggedIn, ruleMappingDto) {
        return this.http.put(`${API_URL}/msgApi/msgMapping/${opeation}/${userIdLoggedIn}`, ruleMappingDto);
    }
    ondeleteMapping(ruleMappingId, userIdLoggedIn) {
        return this.http.delete(`${API_URL}/msgApi/deleteMapping/${userIdLoggedIn}?id=${ruleMappingId}`);
    }
    // getting rulemapping edit data absed on id
    getruleMappingById(id, mappingId) {
        return this.http.get(`${API_URL}/msgApi/getMappingDetails/${id}/${mappingId}`);
    }
    //get method
    fetchingruleMapping() {
        return this.http.get(`${API_URL}/msgApi/getAllMapping`);
    }
    //put method
    updatingruleMapping(updaterulemappingData) {
        return this.http.put(`${API_URL}//`, updaterulemappingData);
    }
    //delete method
    deletingruleMapping() {
        return this.http.delete(`${API_URL}//`);
    }
    // getting ext sys
    gettingExternalsystem() {
        return this.http.get(`${API_URL}/newExtApi/getExternalSys`);
    }
    // Audit log methods--->add System starts
    onDeleteRuleCongif(ruleId, userIdLoggedIn) {
        return this.http.delete(`${API_URL}/ruleConfig/deleteRule/${userIdLoggedIn}?sysRuleId=${ruleId}`);
    }
    // Audit log methods--->add System ends
    gettingISoBasedonExtsys() {
        return this.http.get(`${API_URL}/msgApi/getIsoMsgFieldbyextsys`);
    }
    xmlbasedonExternalsystem() {
        return this.http.get(`${API_URL}/msgApi/getXmlMsgFieldByExtSys`);
    }
    saveRuleconfig(ruleDto, userIdLoggedIn) {
        return this.http.post(`${API_URL}/ruleConfig/create/${userIdLoggedIn}`, ruleDto);
    }
    editRuleConfig(operation, ruleDto, userIdLoggedIn) {
        return this.http.put(`${API_URL}/ruleConfig/${operation}/${userIdLoggedIn}`, ruleDto);
    }
    gettingTranslationData(sysCode) {
        return this.http.get(`${API_URL}/msgApi/getTranslation/${sysCode}`);
    }
    getAddSystem(sysCode) {
        return this.http.get(`${API_URL}/newExtApi/getRuleTransInfo/${sysCode}`);
    }
    gettingSysCode(transid) {
        return this.http.get(`${API_URL}/msgApi/getSystemCode/${transid}`);
    }
};
RulesService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
];
RulesService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"]])
], RulesService);



/***/ }),

/***/ "./src/app/shared/services/sias2-services/ExcelApiService.ts":
/*!*******************************************************************!*\
  !*** ./src/app/shared/services/sias2-services/ExcelApiService.ts ***!
  \*******************************************************************/
/*! exports provided: ExcelApiService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExcelApiService", function() { return ExcelApiService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var src_app_shared_services_sias2_services_excel_api_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/services/sias2-services/excel.api.service */ "./src/app/shared/services/sias2-services/excel.api.service.ts");





//import * as AppConst from './app.const';
const httpOptions = {
    headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpHeaders"]({ 'Content-Type': 'application/json' })
};
let ExcelApiService = class ExcelApiService {
    constructor(http) {
        this.http = http;
        // For Behavior -- by sakthi
        this.externalSystem = new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"]([]);
        this.externalSystem$ = this.externalSystem.asObservable();
        //   private uri = AppConst.median + '/api';
        //   private uriForExt = AppConst.median + '/extsys';
        //   private uriTag = AppConst.median + '/tag';
        this.uri = src_app_shared_services_sias2_services_excel_api_service__WEBPACK_IMPORTED_MODULE_4__["median"] + '/api';
        this.uriForExt = src_app_shared_services_sias2_services_excel_api_service__WEBPACK_IMPORTED_MODULE_4__["median"] + '/extsys';
        this.uriTag = src_app_shared_services_sias2_services_excel_api_service__WEBPACK_IMPORTED_MODULE_4__["median"] + '/tag';
        this.uriForProcessProcedure = src_app_shared_services_sias2_services_excel_api_service__WEBPACK_IMPORTED_MODULE_4__["median"] + '/excelProcessPackage';
        this.uriForMap = src_app_shared_services_sias2_services_excel_api_service__WEBPACK_IMPORTED_MODULE_4__["median"] + '/excelmap';
    }
    callProcedureService(extSysName, processCode, dateforData) {
        return this.http.get(`${this.uriForProcessProcedure}/callProcess/${extSysName}/${processCode}/${dateforData}`);
    }
    // audit Logs
    getAllAuditData() {
        return this.http.get(`${this.uri}` + '/auditsList');
    }
    getAllAuditDataByDate(from, to) {
        return this.http.get(`${this.uri}/dataauditsList/${from}/${to}`);
    }
    getProcessNameWithExtSys(extSysName) {
        return this.http.get(`${this.uriForExt}/processCode/${extSysName}`);
    }
    // ------------------Pooja---------------5th sept--------------
    // ----------------start-------------------
    // To get all processcode by ext sys code
    getAllExtCode() {
        return this.http.get(`${this.uriForExt}` + '/getAllExtCode');
    }
    getProcessNameByExtSysCode(extSysCode) {
        return this.http.get(`${this.uriForExt}/processCodeByExtCode/${extSysCode}`);
    }
    //---------------17th sept---------------START---------------
    // -----------------FOR UPDATE SCREEN--------------------
    getAllExtCodeForUpdateMapping() {
        return this.http.get(`${this.uriForMap}` + '/getAllExtCode');
    }
    getProcessNameByExtSysCodeForUpdateMapping(extSysCode) {
        return this.http.get(`${this.uriForMap}/processCodeByExtCode/${extSysCode}`);
    }
    //---------------17th sept---------------END---------------
    getExtSysNameByExtSysCode(extSysCode) {
        return this.http.get(`${this.uriForMap}/getExtsysByExtCode/${extSysCode}`, { responseType: 'text' });
    }
    updateMappingData(model, extNameValue, processCode, extSysCode, starting, isChecked, modifiedBy, ccy, sheetNumber) {
        return this.http.put(`${this.uriForMap}/updateMapping/${extNameValue}/${processCode}/${extSysCode}/${starting}/${isChecked}/${modifiedBy}/${ccy}/${sheetNumber}`, model);
    }
    copyData(model, extNameValue, processCode, extSysCode, starting, isChecked, modifiedBy, ccy) {
        // let body = JSON.stringify(model);
        return this.http.post(`${this.uriForMap}/copyMapping/${extNameValue}/${processCode}/${extSysCode}/${starting}/${isChecked}/${modifiedBy}/${ccy}`, model);
    }
    deleteMappingRow(id) {
        return this.http.delete(`${this.uriForMap}/deleteMappingRow/${id}`);
    }
    getAllExtsysNameAndProcessCodeOnAuthStatus() {
        return this.http.get(`${this.uriForExt}/gettingExtsysNameAndProcessCodeOnAuthStatus`);
    }
    // --------------End----------------------------
    // dashboard
    // getAllDashboard(): Observable<any> {
    //   return this.http.get(`${this.uri}` + '/dashboardchartdata');
    // }
    // external system
    getAllExtSys() {
        return this.http.get(`${this.uriForExt}` + '/extsysdata');
    }
    getAllExtSysName() {
        return this.http.get(`${this.uriForExt}` + '/extsysName');
    }
    fetchAllAuthExternalSystem() {
        return this.http.get(`${this.uriForExt}` + '/fetchAuthExtSystem');
    }
    createExtSys(extSys) {
        return this.http.post(`${this.uriForExt}` + '/createExtSys', extSys);
    }
    modifyExtSysService(modifyextSys) {
        return this.http.put(`${this.uriForExt}` + `/modifyextSys`, modifyextSys);
    }
    verifyExtSys(extSysName, userIdLoggedIn) {
        return this.http.get(`${this.uriForExt}/verify/${extSysName}/${userIdLoggedIn}`);
    }
    deleteExtSys(extSysName, userIdLoggedIn) {
        return this.http.delete(`${this.uriForExt}/${extSysName}/${userIdLoggedIn}`, { responseType: 'text' });
    }
    closelockRecordExtSys(extSysName, userIdLoggedIn) {
        return this.http.get(`${this.uriForExt}/close/${extSysName}/${userIdLoggedIn}`);
    }
    reopenRecordExtSys(extSysName, userIdLoggedIn) {
        return this.http.get(`${this.uriForExt}/reOpen/${extSysName}/${userIdLoggedIn}`);
    }
    // authorizingTheRecord(extsobj: ExtsysClass) {
    //     return this.http.post<ExtsysClass>(`${this.uriForExt}` + '/authorizetherecordOfExteranlSystem', extsobj)
    // }
    // closingTheRecordOfProcessCodeMapping(closeobj: ExtsysClass) {
    //     return this.http.post<ExtsysClass>(`${this.uriForExt}` + '/onClcikOfCloseOFExtsys', closeobj)
    // }
    // reopeningTheRecordOfProcessCodeMapping(reopenobj: ExtsysClass) {
    //     return this.http.post<ExtsysClass>(`${this.uriForExt}` + '/reopeningTheRecord', reopenobj)
    // }
    // ------------------------------------------------------
    authorizingTheRecord(extsobj, name) {
        return this.http.put(`${this.uriForExt}` + `/authorizetherecordOfExteranlSystem/${name}`, extsobj);
    }
    closingTheRecordOfProcessCodeMapping(closeobj) {
        return this.http.put(`${this.uriForExt}` + '/onClcikOfCloseOFExtsys', closeobj);
    }
    reopeningTheRecordOfProcessCodeMapping(reopenobj) {
        return this.http.put(`${this.uriForExt}` + '/reopeningTheRecord', reopenobj);
    }
    // --------------------------------------------------------
    // tag service
    getAllTags() {
        return this.http.get(`${this.uriTag}` + '/tagdata');
    }
    fetchAllAuthTags() {
        return this.http.get(`${this.uriTag}` + '/fetchAuthTags');
    }
    createTag(tags) {
        return this.http.post(`${this.uriTag}` + '/createTag', tags);
    }
    modifyTagService(modifytag) {
        return this.http.put(`${this.uriTag}` + `/modifytag`, modifytag);
    }
    verifyTag(tagName, userIdLoggedIn) {
        return this.http.get(`${this.uriTag}/verify/${tagName}/${userIdLoggedIn}`);
    }
    deleteTag(tagName, userIdLoggedIn) {
        return this.http.delete(`${this.uriTag}/${tagName}/${userIdLoggedIn}`, { responseType: 'text' });
    }
    closelockTag(tagName, userIdLoggedIn) {
        return this.http.get(`${this.uriTag}/close/${tagName}/${userIdLoggedIn}`);
    }
    reopenRecordTag(tagName, userIdLoggedIn) {
        return this.http.get(`${this.uriTag}/reOpen/${tagName}/${userIdLoggedIn}`);
    }
    // ----------------------pooja-----------------------------//
    //----------------------START-----------------------------//
    getProcessNameWithExtSysForMapping(extSysName) {
        return this.http.get(`${this.uriForMap}/fetchAllProcessCode/${extSysName}`);
    }
    getAllExtSysForUpdateMapping() {
        return this.http.get(`${this.uriForMap}/fetchAllExt`);
    }
    getAllMappingByExtSysAndProcessCode(externalSystem, processCode, ccy, sheetNumber) {
        return this.http.get(`${this.uriForMap}/fetchAllMapping/${externalSystem}/${processCode}/${ccy}/${sheetNumber}`);
    }
    fetchAllName(externalSystem, processCode, ccy) {
        return this.http.get(`${this.uriForMap}/fetchAllName/${externalSystem}/${processCode}/${ccy}`);
    }
    // onAuthorizingTheRecordOfExcelMApping(objOfAudit: ExcelMappingAuditLog) {
    //     return this.http.post(`${this.uriForMap}/authrizingTheRecordOfExcelMapping`, objOfAudit);
    // }
    // onClcikOFCloseOfUpdateExcelMApping(objOfAuditclose: ExcelMappingAuditLog) {
    //     return this.http.post(`${this.uriForMap}/closeTheRecordOfExcelMapping`, objOfAuditclose);
    // }
    // onClcikOfReopenOfUpdateExcelMapping(objOfAuditReopen: ExcelMappingAuditLog) {
    //     return this.http.post(`${this.uriForMap}/reopenninTheRecordOfExcelMapping`, objOfAuditReopen);
    // }
    // updateMapping(model, isValid,extSysName: string, processCode:string){
    //     return this.http.put(`${this.uriForMap}/`);
    // }
    onAuthorizingTheRecordOfExcelMApping(model, extNameValue, processCode, extSysCode, userId, ccy) {
        return this.http.put(`${this.uriForMap}/authOfRecord/${extNameValue}/${processCode}/${extSysCode}/${userId}/${ccy}`, model);
    }
    onClcikOFCloseOfUpdateExcelMApping(model, extNameValue, processCode, extSysCode, ccy) {
        return this.http.put(`${this.uriForMap}/closeOfRecord/${extNameValue}/${processCode}/${extSysCode}/${ccy}`, model);
    }
    onClcikOfReopenOfUpdateExcelMapping(model, extNameValue, processCode, extSysCode, ccy) {
        return this.http.put(`${this.uriForMap}/reOpenOfRecord/${extNameValue}/${processCode}/${extSysCode}/${ccy}`, model);
    }
    getCurrencyOnExtNameAndProcssCode(extSysCode, processCode, extNameValue) {
        return this.http.get(`${this.uriForMap}/gettingCurrency/${extSysCode}/${processCode}/${extNameValue}`);
    }
    // added by vidya for delete Process code mapping
    onDeleteOfProcessCodeMapping(deleteData) {
        return this.http.post(`${this.uriForExt}/delete`, deleteData);
    }
};
ExcelApiService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpClient"] }
];
ExcelApiService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpClient"]])
], ExcelApiService);



/***/ }),

/***/ "./src/app/shared/services/sias2-services/excel-processing.service.ts":
/*!****************************************************************************!*\
  !*** ./src/app/shared/services/sias2-services/excel-processing.service.ts ***!
  \****************************************************************************/
/*! exports provided: ExcelProcessingService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExcelProcessingService", function() { return ExcelProcessingService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
/* harmony import */ var src_app_shared_services_sias2_services_excel_api_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/services/sias2-services/excel.api.service */ "./src/app/shared/services/sias2-services/excel.api.service.ts");





//import * as AppConst from './../app.const';
let ExcelProcessingService = class ExcelProcessingService {
    constructor(http) {
        this.http = http;
        //private uri = AppConst.dist + '/excel';
        this.excelfile = src_app_shared_services_sias2_services_excel_api_service__WEBPACK_IMPORTED_MODULE_4__["median"] + '/excelfile';
        this.url = src_app_shared_services_sias2_services_excel_api_service__WEBPACK_IMPORTED_MODULE_4__["median"] + '/excelcolumns';
        this.excelprocess = src_app_shared_services_sias2_services_excel_api_service__WEBPACK_IMPORTED_MODULE_4__["median"] + '/excelprocess';
        this.url3 = src_app_shared_services_sias2_services_excel_api_service__WEBPACK_IMPORTED_MODULE_4__["median"] + '/excelstatic';
        this.urlforexcelmaster = src_app_shared_services_sias2_services_excel_api_service__WEBPACK_IMPORTED_MODULE_4__["median"] + '/excelmaster';
        this.url1 = src_app_shared_services_sias2_services_excel_api_service__WEBPACK_IMPORTED_MODULE_4__["median"] + '/extsys';
        this.ext = src_app_shared_services_sias2_services_excel_api_service__WEBPACK_IMPORTED_MODULE_4__["median"] + '/excelExt';
        // createRoles(formdata: Object): Observable<Object> {
        this.excelExtSys = src_app_shared_services_sias2_services_excel_api_service__WEBPACK_IMPORTED_MODULE_4__["median"] + '/excelmaster';
        this.httpHeader = { header: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({ 'Content-type': 'application/json' }) };
        this.FILE_URL = "";
        this.excelmap = src_app_shared_services_sias2_services_excel_api_service__WEBPACK_IMPORTED_MODULE_4__["median"] + '/excelmap';
        // return this.http.post(`${this.url}` + '/postColumnMapping', formdata);
        // }
        this.externalSystemData = new rxjs__WEBPACK_IMPORTED_MODULE_3__["BehaviorSubject"]('');
        this.externalSystemDataViewType = new rxjs__WEBPACK_IMPORTED_MODULE_3__["BehaviorSubject"]('');
    }
    sendSystemData(data, type) {
        this.externalSystemData.next(data);
        this.externalSystemDataViewType.next(type);
    }
    columnData(role, extSys, processName, headerRepeated, startingRow, extCode, currency, userId, sheetNumber) {
        // let body = JSON.stringify(role);
        // //console.log("Body : "+ body)
        return this.http.post(`${this.excelmap}/postColumnMapping/${extSys}/${processName}/${headerRepeated}/${startingRow}/${extCode}/${currency}/${userId}/${sheetNumber}`, role);
    }
    getMappingSummary() {
        return this.http.get(`${this.excelmap}/fetchAllMappingData/`);
    }
    showDetails(processName) {
        return this.http.post(`${this.urlforexcelmaster}/findByCondition/`, processName);
    }
    processData(extSys, processName, postexcelMasterData) {
        return this.http.get(`${this.excelprocess}/processData/${extSys}/${processName}/${postexcelMasterData}`, processName);
    }
    getAllExcelColumn() {
        return this.http.get(`${this.url3}` + '/findAll');
    }
    getAllExternalSystem() {
        return this.http.get(`${this.excelExtSys}` + '/findAllExtSys');
    }
    getProcessNameWithExtSys(extSys1) {
        return this.http.get(`${this.excelExtSys}/findProcess/${extSys1}`);
    }
    getProcessDataMethod() {
        return this.http.get(`${this.url}` + '/processData');
    }
    pushFileToStorage(extSystem, processName, file, extSysCode) {
        const formdata = new FormData();
        formdata.append('file', file);
        const req = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('POST', `${this.excelfile}/process/${extSystem}/${processName}/${extSysCode}`, formdata, {
            reportProgress: true,
            responseType: 'text'
        });
        return this.http.request(req);
    }
    callProcedureService(extSys1, processData, dateforData) {
        //console.log("calling procedure");
        return this.http.get(`${this.excelExtSys}/procedureCall/${extSys1}/${processData}/${dateforData}`);
    }
    ///from here new methods
    getAllExt() {
        return this.http.get(`${this.ext}` + '/getExt');
    }
    getAllExtSysCode() {
        return this.http.get(`${this.ext}` + '/getExtSysCodeaa');
    }
    modifyExtSys(formData) {
        return this.http.put(`${this.ext}` + `/update`, formData);
    }
    // getProcessNameWithExtSys(extSysName): Observable<any> {
    // return this.http.get(`${this.url}/findProcess/${extSysName}`);
    // }
    getCustomer(id) {
        return this.http.get(`${this.ext}/${id}`);
    }
    createExt(customer) {
        return this.http.post(`${this.ext}` + `/create`, customer);
    }
    getAllDept() {
        //return this.http.get(`${this._baseURL}` + '/roles');
        return this.http.get(`${this.ext}` + '/getAllAuthDepts');
    }
    updateCustomer(id, value) {
        return this.http.put(`${this.ext}/${id}`, value);
    }
    deleteCustomer(id) {
        return this.http.delete(`${this.ext}/${id}`, { responseType: 'text' });
    }
    getCustomersList() {
        return this.http.get(`${this.ext}`);
    }
    getCustomersByAge(age) {
        return this.http.get(`${this.ext}/age/${age}`);
    }
    deleteAll() {
        return this.http.delete(`${this.ext}` + `/delete`, { responseType: 'text' });
    }
    // AUDIT LOG FOR - External system
    //-------------------START--------
    // -------By vidya----------------
    authorizingTheRecord(obj, name) {
        return this.http.put(`${this.ext}` + `/authorizetherecord/${name}`, obj);
    }
    ClosingTheRecord(objClose) {
        return this.http.put(`${this.ext}` + `/toClosingTheRecord`, objClose);
    }
    reopeningTheRecord(reopening) {
        return this.http.put(`${this.ext}` + `/reopeningTheRecord`, reopening);
    }
    //added by vidya delete button
    onClickOfDeleteOfUpdateExecel(deleting) {
        return this.http.put(`${this.ext}` + `/delete`, deleting);
    }
    // ---------End-----------------------
    getAuthorizedExt() {
        return this.http.get(`${this.ext}/gettingExtsysCodeonAuthSatus`);
    }
};
ExcelProcessingService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
];
ExcelProcessingService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"]])
], ExcelProcessingService);



/***/ }),

/***/ "./src/app/shared/services/sias2-services/excel.api.service.ts":
/*!*********************************************************************!*\
  !*** ./src/app/shared/services/sias2-services/excel.api.service.ts ***!
  \*********************************************************************/
/*! exports provided: median, API_URL, ApiService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "median", function() { return median; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "API_URL", function() { return API_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApiService", function() { return ApiService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _config_app_constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config/app.constant */ "./src/app/shared/config/app.constant.ts");




//export const median = 'http://localhost:9191';
//export const median = 'http://192.168.0.119:9191';
const median = _config_app_constant__WEBPACK_IMPORTED_MODULE_3__["AppConstants"].baseURL;
// export const median = 'http://10.148.34.13:9123/excel';
const API_URL = 'http://localhost:8889';
let ApiService = class ApiService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.FILE_URL = 'http://localhost:8777';
        this.VMEXTSYSTEMS = 'http://localhost:8080/batchcontroller/start';
    }
    pushFileToStorage(file) {
        const formdata = new FormData();
        formdata.append('file', file);
        const req = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('POST', `${this.FILE_URL}/upload`, formdata, {
            reportProgress: true,
            responseType: 'text'
        });
        return this.httpClient.request(req);
    }
    pushFileToStorageQueueStatus(file) {
        const formdata = new FormData();
        formdata.append('file', file);
        const req = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('POST', `${this.FILE_URL}/editedFile`, formdata, {
            reportProgress: true,
            responseType: 'text'
        });
        return this.httpClient.request(req);
    }
    financeUploadService(file, reportName, Exec_Date) {
        const formdata = new FormData();
        formdata.append('file', file);
        const req = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpRequest"]('POST', `${this.FILE_URL}/financeUpload/${reportName}/${Exec_Date}`, formdata, {
            reportProgress: true,
            responseType: 'text'
        });
        return this.httpClient.request(req);
    }
    financeDownloadService(reportName, Exec_Date) {
        return this.httpClient.get(`${this.FILE_URL}/financeDownload/${reportName}/${Exec_Date}`);
    }
    dynamicReportService(reportName, Exec_Date) {
        return this.httpClient.get(`${this.FILE_URL}/financeDownload3d/${reportName}/${Exec_Date}`);
    }
};
ApiService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
];
ApiService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
        providedIn: 'root'
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"]])
], ApiService);



/***/ }),

/***/ "./src/app/views/sias-v2/add-system-incoming-message-tcp/add-system-incoming-message-tcp.component.css":
/*!*************************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/add-system-incoming-message-tcp/add-system-incoming-message-tcp.component.css ***!
  \*************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".example-container {\r\n  height: 250px;\r\n  overflow: auto;\r\n}\r\n.mat-raised-button {\r\n  width: -webkit-fit-content;\r\n  width: -moz-fit-content;\r\n  width: fit-content;\r\n  height: 20px;\r\n  line-height: 27px;\r\n  min-height: 27px;\r\n  vertical-align: top;\r\n  font-size: 11px;\r\n  padding: 0 0;\r\n  margin: 0;\r\n  }\r\n#customers {\r\n      font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\r\n      border-collapse: collapse;\r\n      width: 100%;\r\n      }\r\n#customers td, #customers th {\r\n      border: 1px solid #ddd;\r\n      padding: 8px;\r\n      text-align: center;\r\n      \r\n      }\r\n#customers tr:nth-child(even){background-color: #f2f2f2;}\r\n#customers th {\r\n      padding-top: 12px;\r\n      padding-bottom: 12px;\r\n      text-align: left;\r\n      background-color:rgb(97, 178, 216);\r\n      color: white;\r\n      }\r\n.baiscInfocard\r\n{\r\n  width: 63%;\r\n margin-left: 15%;\r\n}\r\n::ng-deep .mat-form-field-flex > .mat-form-field-infix { padding: 0.5em 0px !important;}\r\nmat-form-field{\r\n  width: 100%;\r\n  \r\n}\r\n#chFile{\r\n  display: none;\r\n  }\r\n.btnFile{\r\n  background-color: rgb(130, 130, 173);\r\n  margin-right: 30px;\r\n  width: 110px;\r\n  }\r\ntable {\r\n    border-collapse: initial;\r\n    width:100%;\r\n    text-align: center !important;\r\n  }\r\n:host ::ng-deep .mat-sort-header-container { \r\n    display: flex;  \r\n    justify-content: center; \r\n  }\r\nth.mat-header-cell, td.mat-cell { \r\n    text-align: center; \r\n  }\r\n.mat-header-cell {\r\n    text-align: center;\r\n    height: 25px !important;\r\n  \r\n  }\r\n.mat-cell {\r\n    text-align: center;\r\n    height: 25px !important;\r\n  \r\n  }\r\n.red{\r\n    color: red;\r\n  }\r\ntr:nth-child(even) {\r\n    height: 25px !important;\r\n  }\r\nth {\r\n    font-weight: small;\r\n    height: 25px !important;\r\n    text-align: center;\r\n  }\r\ntr {\r\n    font-weight: small;\r\n    height: 25px !important;\r\n    text-align: center;\r\n  }\r\nmat-paginator {\r\n    width: auto !important;\r\n    height: 40px !important;\r\n  }\r\nmd-pagination-wrapper {\r\n    width: auto !important;\r\n    height: 40px !important;\r\n  }\r\n.readonly-wrapper {\r\n    pointer-events:none;\r\n  }\r\n.readonly-wrapper .readonly-block {\r\n    pointer-events: none;\r\n  }  \r\n  \r\n  \r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9hZGQtc3lzdGVtLWluY29taW5nLW1lc3NhZ2UtdGNwL2FkZC1zeXN0ZW0taW5jb21pbmctbWVzc2FnZS10Y3AuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQWE7RUFDYixjQUFjO0FBQ2hCO0FBQ0E7RUFDRSwwQkFBa0I7RUFBbEIsdUJBQWtCO0VBQWxCLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osaUJBQWlCO0VBQ2pCLGdCQUFnQjtFQUNoQixtQkFBbUI7RUFDbkIsZUFBZTtFQUNmLFlBQVk7RUFDWixTQUFTO0VBQ1Q7QUFFQTtNQUNJLHlEQUF5RDtNQUN6RCx5QkFBeUI7TUFDekIsV0FBVztNQUNYO0FBQ0E7TUFDQSxzQkFBc0I7TUFDdEIsWUFBWTtNQUNaLGtCQUFrQjs7TUFFbEI7QUFFQSw4QkFBOEIseUJBQXlCLENBQUM7QUFFeEQ7TUFDQSxpQkFBaUI7TUFDakIsb0JBQW9CO01BQ3BCLGdCQUFnQjtNQUNoQixrQ0FBa0M7TUFDbEMsWUFBWTtNQUNaO0FBRU47O0VBRUUsVUFBVTtDQUNYLGdCQUFnQjtBQUNqQjtBQUVBLHlEQUF5RCw2QkFBNkIsQ0FBQztBQUd2RjtFQUNFLFdBQVc7O0FBRWI7QUFFQTtFQUNFLGFBQWE7RUFDYjtBQUNBO0VBQ0Esb0NBQW9DO0VBQ3BDLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1o7QUFDQTtJQUNFLHdCQUF3QjtJQUN4QixVQUFVO0lBQ1YsNkJBQTZCO0VBQy9CO0FBQ0E7SUFDRSxhQUFhO0lBQ2IsdUJBQXVCO0VBQ3pCO0FBRUE7SUFDRSxrQkFBa0I7RUFDcEI7QUFFQTtJQUNFLGtCQUFrQjtJQUNsQix1QkFBdUI7O0VBRXpCO0FBRUE7SUFDRSxrQkFBa0I7SUFDbEIsdUJBQXVCOztFQUV6QjtBQUVBO0lBQ0UsVUFBVTtFQUNaO0FBR0E7SUFDRSx1QkFBdUI7RUFDekI7QUFFQTtJQUNFLGtCQUFrQjtJQUNsQix1QkFBdUI7SUFDdkIsa0JBQWtCO0VBQ3BCO0FBQ0E7SUFDRSxrQkFBa0I7SUFDbEIsdUJBQXVCO0lBQ3ZCLGtCQUFrQjtFQUNwQjtBQUNBO0lBQ0Usc0JBQXNCO0lBQ3RCLHVCQUF1QjtFQUN6QjtBQUVBO0lBQ0Usc0JBQXNCO0lBQ3RCLHVCQUF1QjtFQUN6QjtBQUNBO0lBQ0UsbUJBQW1CO0VBQ3JCO0FBRUE7SUFDRSxvQkFBb0I7RUFDdEIiLCJmaWxlIjoic3JjL2FwcC92aWV3cy9zaWFzLXYyL2FkZC1zeXN0ZW0taW5jb21pbmctbWVzc2FnZS10Y3AvYWRkLXN5c3RlbS1pbmNvbWluZy1tZXNzYWdlLXRjcC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmV4YW1wbGUtY29udGFpbmVyIHtcclxuICBoZWlnaHQ6IDI1MHB4O1xyXG4gIG92ZXJmbG93OiBhdXRvO1xyXG59XHJcbi5tYXQtcmFpc2VkLWJ1dHRvbiB7XHJcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG4gIGhlaWdodDogMjBweDtcclxuICBsaW5lLWhlaWdodDogMjdweDtcclxuICBtaW4taGVpZ2h0OiAyN3B4O1xyXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XHJcbiAgZm9udC1zaXplOiAxMXB4O1xyXG4gIHBhZGRpbmc6IDAgMDtcclxuICBtYXJnaW46IDA7XHJcbiAgfVxyXG4gIFxyXG4gICNjdXN0b21lcnMge1xyXG4gICAgICBmb250LWZhbWlseTogXCJUcmVidWNoZXQgTVNcIiwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcclxuICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIH1cclxuICAgICAgI2N1c3RvbWVycyB0ZCwgI2N1c3RvbWVycyB0aCB7XHJcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XHJcbiAgICAgIHBhZGRpbmc6IDhweDtcclxuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICBcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgI2N1c3RvbWVycyB0cjpudGgtY2hpbGQoZXZlbil7YmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjt9XHJcbiAgICAgIFxyXG4gICAgICAjY3VzdG9tZXJzIHRoIHtcclxuICAgICAgcGFkZGluZy10b3A6IDEycHg7XHJcbiAgICAgIHBhZGRpbmctYm90dG9tOiAxMnB4O1xyXG4gICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOnJnYig5NywgMTc4LCAyMTYpO1xyXG4gICAgICBjb2xvcjogd2hpdGU7XHJcbiAgICAgIH1cclxuICAgICBcclxuLmJhaXNjSW5mb2NhcmRcclxue1xyXG4gIHdpZHRoOiA2MyU7XHJcbiBtYXJnaW4tbGVmdDogMTUlO1xyXG59XHJcblxyXG46Om5nLWRlZXAgLm1hdC1mb3JtLWZpZWxkLWZsZXggPiAubWF0LWZvcm0tZmllbGQtaW5maXggeyBwYWRkaW5nOiAwLjVlbSAwcHggIWltcG9ydGFudDt9XHJcblxyXG5cclxubWF0LWZvcm0tZmllbGR7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgXHJcbn1cclxuICBcclxuI2NoRmlsZXtcclxuICBkaXNwbGF5OiBub25lO1xyXG4gIH1cclxuICAuYnRuRmlsZXtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTMwLCAxMzAsIDE3Myk7XHJcbiAgbWFyZ2luLXJpZ2h0OiAzMHB4O1xyXG4gIHdpZHRoOiAxMTBweDtcclxuICB9XHJcbiAgdGFibGUge1xyXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBpbml0aWFsO1xyXG4gICAgd2lkdGg6MTAwJTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xyXG4gIH1cclxuICA6aG9zdCA6Om5nLWRlZXAgLm1hdC1zb3J0LWhlYWRlci1jb250YWluZXIgeyBcclxuICAgIGRpc3BsYXk6IGZsZXg7ICBcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOyBcclxuICB9XHJcbiAgXHJcbiAgdGgubWF0LWhlYWRlci1jZWxsLCB0ZC5tYXQtY2VsbCB7IFxyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyOyBcclxuICB9XHJcbiAgXHJcbiAgLm1hdC1oZWFkZXItY2VsbCB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcclxuICBcclxuICB9XHJcbiAgXHJcbiAgLm1hdC1jZWxsIHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xyXG4gIFxyXG4gIH1cclxuXHJcbiAgLnJlZHtcclxuICAgIGNvbG9yOiByZWQ7XHJcbiAgfVxyXG4gIFxyXG4gIFxyXG4gIHRyOm50aC1jaGlsZChldmVuKSB7XHJcbiAgICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcclxuICB9XHJcbiAgXHJcbiAgdGgge1xyXG4gICAgZm9udC13ZWlnaHQ6IHNtYWxsO1xyXG4gICAgaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgfVxyXG4gIHRyIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBzbWFsbDtcclxuICAgIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuICBtYXQtcGFnaW5hdG9yIHtcclxuICAgIHdpZHRoOiBhdXRvICFpbXBvcnRhbnQ7XHJcbiAgICBoZWlnaHQ6IDQwcHggIWltcG9ydGFudDtcclxuICB9XHJcbiAgXHJcbiAgbWQtcGFnaW5hdGlvbi13cmFwcGVyIHtcclxuICAgIHdpZHRoOiBhdXRvICFpbXBvcnRhbnQ7XHJcbiAgICBoZWlnaHQ6IDQwcHggIWltcG9ydGFudDtcclxuICB9XHJcbiAgLnJlYWRvbmx5LXdyYXBwZXIge1xyXG4gICAgcG9pbnRlci1ldmVudHM6bm9uZTtcclxuICB9XHJcbiAgXHJcbiAgLnJlYWRvbmx5LXdyYXBwZXIgLnJlYWRvbmx5LWJsb2NrIHtcclxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG4gIH0gIFxyXG4gIFxyXG4gIFxyXG4iXX0= */");

/***/ }),

/***/ "./src/app/views/sias-v2/add-system-incoming-message-tcp/add-system-incoming-message-tcp.component.ts":
/*!************************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/add-system-incoming-message-tcp/add-system-incoming-message-tcp.component.ts ***!
  \************************************************************************************************************/
/*! exports provided: AddSystemIncomingMessageTcpComponent, AddSystemNew, MdmtSystemChannel, MdmtSystemService, MdmtSystemDto */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddSystemIncomingMessageTcpComponent", function() { return AddSystemIncomingMessageTcpComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddSystemNew", function() { return AddSystemNew; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MdmtSystemChannel", function() { return MdmtSystemChannel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MdmtSystemService", function() { return MdmtSystemService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MdmtSystemDto", function() { return MdmtSystemDto; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/services/addSys/add-system.service */ "./src/app/shared/services/addSys/add-system.service.ts");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var ip_address__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ip-address */ "./node_modules/ip-address/dist/esm/ip-address.js");





// export var ipv4 = IpAddress.Address4;
// export var ipv6 = IpAddress.Address6;
let AddSystemIncomingMessageTcpComponent = class AddSystemIncomingMessageTcpComponent {
    constructor(addSystem, elRef, renderer) {
        this.addSystem = addSystem;
        this.elRef = elRef;
        this.renderer = renderer;
        this.tabText = "Incoming";
        this.mdbQueueInc = ['IBM', 'JMS'];
        this.addSysBasic = new AddSystemNew(); //basic info object
        this.channelService = new MdmtSystemChannel;
        this.mdmtSystemChannel = []; //both incoming and outgoing
        // mdmtSystemChannelIncAll:any;
        this.mdmtSystemChannelIncAll = []; //only for all-->incoming protocol
        this.mdmtSystemChannelOutAll = []; //only for all-->incoming protocol
        // sending to backedn
        this.mdmtSystemDto = new MdmtSystemDto();
        this.incomingIntegrationProtocol = [];
        this.mdmtSystemService = []; //this is same for iso,xml and json every thing
        this.mdmtSystemServiceAllInc = []; //only aLl Incoming service(3rd)screen
        this.mdmtSystemServiceAllOut = []; //only All outgoing service(3rd )screen
        // chceking
        this.protocolForBothIncOut = new MdmtSystemChannel();
        this.protocolAllInc = new MdmtSystemChannel; //only All outgoing service(3rd )screen
        this.protocolAllOut = new MdmtSystemChannel; //only All Inc service(3rd )screen
        this.selectedIndex = 0;
        this.messageBasisIso = [];
        this.isoRespData = [];
        this.selectedDocumentTypes2 = [];
        this.headerTagData1 = [];
        this.selectedDocumentTypes2Out = [];
        this.headerTagDataOut = [];
        this.headerTagData1out = [];
        this.clickedFinishButton = false;
        this.isSysCodeAlreadyExist = false;
        this.desSystem = [];
        this.tempArrayList = [];
        // unamePattern = "^[a-z0-9_-]{8,15}$";
        this.unamePattern = "^(?=\d+\.\d+\.\d+\.\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.?){4}$";
        this.invalidIp = true;
        this.invalidIp1 = true;
        this.issourceSysDisabled = (value) => {
            return this.headerTagData1.includes(value);
        };
        this.issourceSysDisabledOut = (value) => {
            return this.headerTagData1out.includes(value);
        };
    }
    ngOnInit() {
        this.currentUser = localStorage.getItem('userFromLogin');
        this.addSysBasic.messsageType = "null";
        this.protocolAllInc.messageChannel = "null";
        this.protocolAllOut.messageChannel = "null";
        this.protocolForBothIncOut.messageChannel = "null";
        this.mdmtSystemService.push({ dataType: '', headerValue: '', id: '', messageBasis: '', messageKey: '', systemChannelId: '', encryption: 'No Encryption', headerTag: '' });
        this.mdmtSystemServiceAllOut.push({ id: '', dataType: '', headerValue: '', messageBasis: '', messageKey: '', systemChannelId: '', headerTag: '', encryption: 'No Encryption' });
        this.mdmtSystemServiceAllInc.push({ id: '', dataType: '', headerValue: '', messageBasis: '', messageKey: '', systemChannelId: '', encryption: 'No Encryption', headerTag: '' });
        this.fetchingHeadertag();
    }
    allowNumbersOnly(n) {
        const pattern = /[0-9\+\-\ ]/;
        let inputChar = String.fromCharCode(n.charCode);
        if (!pattern.test(inputChar) && n.charCode != '0') {
            n.preventDefault();
        }
    }
    onNextOfBasicInfo() {
        if (this.addSysBasic.medianIp === this.addSysBasic.sourceIp) {
            sweetalert2__WEBPACK_IMPORTED_MODULE_3___default.a.fire({ text: 'Median IP and External IP should not be same' });
            return;
        }
        if (this.addSysBasic.medianPort === this.addSysBasic.sourcePort) {
            sweetalert2__WEBPACK_IMPORTED_MODULE_3___default.a.fire({ text: 'Median Port and External Port should not be same' });
            return;
        }
        this.checkCode(this.addSysBasic.systemCode);
        if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
            this.hideBasic = true;
            this.showProtocol = true;
            this.showTab = false;
        }
        else if (this.addSysBasic.messsageType == 'A') {
            this.showTab = true;
            this.hideBasic = true;
            this.showProtocol = false;
            this.showProtocolForAllInc = true;
        }
    }
    onsystemMessageSelection(event) {
        if (event == 'I') {
            event = "Incoming";
            this.msgType = event;
        }
        else if (event == 'O') {
            event = "Outgoing";
            this.msgType = event;
        }
    }
    reset() {
        console.log("enter inside reset");
        this.outProtocol = '';
        this.OutDataType = '';
        this.incProtocol = '';
        this.incDataType = '';
        // incProtocol
        // incDataType=''
    }
    // Protocol sceltion
    onProtocalSlection(protocol) {
        console.log(protocol);
        this.incDataType = '';
        this.dataType = [];
        this.incProtocol = protocol;
        this.protocolForBothIncOut.messageFormat = '';
        if (protocol == 'TCP/IP') {
            this.dataType = ['ISO 8583 1987', 'ISO 8583 1993', 'ISO 8583 2003'];
        }
        else if (protocol == 'Https/Http') {
            this.dataType = [];
            this.dataType = ['XML', 'JSON'];
        }
        else if (protocol == 'MDB') {
            this.dataType = [];
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
        else if (protocol == 'EJB') {
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
        else if (protocol == 'DB Connection') {
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
    }
    onProtocalSlectionOutgoing(protocol) {
        console.log(protocol);
        this.OutDataType = '';
        this.dataType = [];
        this.outProtocol = protocol;
        if (protocol == 'TCP/IP') {
            this.dataType = ['ISO 8583 1987', 'ISO 8583 1993', 'ISO 8583 2003'];
        }
        else if (protocol == 'Https/Http') {
            this.dataType = [];
            this.dataType = ['XML', 'JSON'];
        }
        else if (protocol == 'MDB') {
            this.dataType = [];
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
        else if (protocol == 'EJB') {
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
        else if (protocol == 'DB Connection') {
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
    }
    incomingDataypeSelection(dataType) {
        console.log(dataType);
        this.incDataType = dataType;
    }
    OutgoingDataypeSelection(dataType) {
        console.log(dataType);
        this.OutDataType = dataType;
    }
    onPreviousToBasic() {
        this.showProtocol = false;
        this.hideBasic = false;
        this.showTab = false;
    }
    tabChanged(event) {
        console.log(event);
        this.tabText = event.tab.textLabel;
        console.log("tabText", this.tabText);
        this.showProtocolForAllOut = true;
    }
    nextToServcieFromInc(protocol) {
        console.log("next");
        this.showProtocolForAllInc = false;
        if (protocol.messageChannel == "TCP/IP" && protocol.messageFormat == "ISO 8583 1987" || protocol.messageFormat == "ISO 8583 1993" || protocol.messageFormat == 'ISO 8583 2003') {
            this.fetchingIso();
            this.matLabel_header = "Header";
            this.matLabel1 = "Field No";
            this.matLabel2 = "Field Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default Value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "Https/Http" && protocol.messageFormat == "XML") {
            this.showServiceScreen = true;
            // this.fetchingXMl();
            debugger;
            this.matLabel1 = "null";
            this.matLabel_header = "Header";
            this.matLabel2 = "Tag ";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default Value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "Https/Http" && protocol.messageFormat == "JSON") {
            this.showServiceScreen = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel_header = "Header";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "XML") {
            this.showServiceScreen = true;
            this.matLabel1 = "Node";
            this.matLabel2 = "Tag Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "JSON") {
            this.showServiceScreen = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "CSV/EXCEL") {
            this.showServiceScreen = true;
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "FLATFILE") {
            this.showServiceScreen = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "XML") {
            this.showServiceScreen = true;
            this.matLabel1 = "Node";
            this.matLabel2 = "Tag Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "JSON") {
            this.showServiceScreen = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "FLATFILE") {
            this.showServiceScreen = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "CSV/EXCEL") {
            this.showServiceScreen = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "JSON") {
            this.showServiceScreen = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "XML") {
            this.showServiceScreen = true;
            this.matLabel1 = null;
            this.matLabel2 = "Column Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "JSON") {
            this.showServiceScreen = true;
            this.matLabel1 = null;
            this.matLabel2 = "Column Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "CSV/EXCEL") {
            this.showServiceScreen = true;
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "FLATFILE") {
            this.showServiceScreen = true;
        }
    }
    // For Incoming and outgoing --->
    onNextOfProtocol(protocol) {
        console.log(protocol);
        console.log(this.addSysBasic);
        //  if(this.addSysBasic.messsageType=='I' ||this.addSysBasic.messsageType=='O'){
        this.showProtocol = false;
        if (protocol.messageChannel == "TCP/IP" && protocol.messageFormat == "ISO 8583 1993" || (protocol.messageChannel == "TCP/IP" && protocol.messageFormat == "ISO 8583 1987") || (protocol.messageChannel == "TCP/IP" && protocol.messageFormat == "ISO 8583 2003")) {
            console.log("this if1");
            this.fetchingIso();
            this.onlyInc = true;
            this.matLabel_header = "Header";
            this.matLabel1 = "Field No";
            this.matLabel2 = "Field Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default Value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "Https/Http" && protocol.messageFormat == "XML") {
            console.log("her xml");
            this.onlyInc = true;
            // this.fetchingXMl();
            this.matLabel1 = "null";
            this.matLabel2 = "Tag";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default Value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "Https/Http" && protocol.messageFormat == "JSON") {
            console.log(protocol.messageChannel, protocol.messageFormat);
            this.onlyInc = true;
            this.matLabel1 = null;
            this.matLabel2 = "Tag";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "XML") {
            this.onlyInc = true;
            this.matLabel1 = "Node";
            this.matLabel2 = "Tag Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "JSON") {
            this.onlyInc = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "CSV/EXCEL") {
            this.onlyInc = true;
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "FLATFILE") {
            this.onlyInc = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "XML") {
            this.onlyInc = true;
            this.matLabel1 = "Node";
            this.matLabel2 = "Tag Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "JSON") {
            this.onlyInc = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "FLATFILE") {
            this.onlyInc = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "CSV/EXCEL") {
            this.onlyInc = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "JSON") {
            this.onlyInc = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "XML") {
            this.onlyInc = true;
            this.matLabel1 = null;
            this.matLabel2 = "Column Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "JSON") {
            this.onlyInc = true;
            this.matLabel1 = null;
            this.matLabel2 = "Column Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "CSV/EXCEL") {
            this.onlyInc = true;
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "FLATFILE") {
            this.onlyInc = true;
        }
        // }
    }
    // all 
    nextStep(tabIndex) {
        console.log(tabIndex);
        if (this.selectedIndex < 2) {
            this.selectedIndex = tabIndex + 1;
        }
    }
    checkCode(code) {
        if (code) {
            this.addSystem.validateCode(code).subscribe((result) => {
                console.log(result);
                this.isSysCodeAlreadyExist = result.exists;
                this.sysCodeError = result.response;
            });
        }
        else {
            this.isSysCodeAlreadyExist = true;
            this.sysCodeError = "";
        }
    }
    previousStep(tabIndex) {
        console.log(tabIndex);
        if (this.selectedIndex > 0) {
            this.selectedIndex = tabIndex - 2;
        }
    }
    // All out
    onNextOfProtocolAllOut(protocol) {
        console.log(protocol);
        this.showProtocolForAllOut = false;
        if (protocol.messageChannel == "TCP/IP" && protocol.messageFormat == "ISO 8583 1987" || protocol.messageFormat == "ISO 8583 1993" || protocol.messageFormat == 'ISO 8583 2003') {
            this.fetchingIso();
            this.matLabel_header = "Header";
            this.matLabel1 = "Field No";
            this.matLabel2 = "Field Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default Value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "Https/Http" && protocol.messageFormat == "XML") {
            //  this.fetchingXMl();
            this.showServiceScreeAllOut = true;
            this.matLabel1 = "null";
            this.matLabel_header = "Header";
            this.matLabel2 = "Tag";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default Value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "Https/Http" && protocol.messageFormat == "JSON") {
            this.showServiceScreeAllOut = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "XML") {
            this.showServiceScreeAllOut = true;
            this.matLabel1 = "Node";
            this.matLabel2 = "Tag Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "JSON") {
            this.showServiceScreeAllOut = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "CSV/EXCEL") {
            this.showServiceScreeAllOut = true;
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "FLATFILE") {
            this.showServiceScreeAllOut = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "XML") {
            this.showServiceScreeAllOut = true;
            this.matLabel1 = "Node";
            this.matLabel2 = "Tag Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "JSON") {
            this.showServiceScreeAllOut = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "FLATFILE") {
            this.showServiceScreeAllOut = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "CSV/EXCEL") {
            this.showServiceScreeAllOut = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "JSON") {
            this.showServiceScreeAllOut = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "XML") {
            this.showServiceScreeAllOut = true;
            this.matLabel1 = null;
            this.matLabel2 = "Column Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "JSON") {
            this.showServiceScreeAllOut = true;
            this.matLabel1 = null;
            this.matLabel2 = "Column Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "CSV/EXCEL") {
            this.showServiceScreeAllOut = true;
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "FLATFILE") {
            this.showServiceScreeAllOut = true;
        }
    }
    moveToProtocol() {
        this.onlyInc = false;
        this.showProtocol = true;
        this.showAuditLog = false;
    }
    moveIncProtocolAll() {
        this.showProtocolForAllInc = true;
        this.showServiceScreen = false;
    }
    moveToProtocolAllOut() {
        this.showProtocolForAllOut = true;
        this.showServiceScreeAllOut = false;
    }
    onResetOfProtocol(protocolAllForReset) {
        console.log("on reset of Inc all", protocolAllForReset);
        if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
            console.log("here in 1 if");
            this.protocolForBothIncOut.messageChannel = " ";
            this.protocolForBothIncOut.messageFormat = " ";
        }
        else if (this.addSysBasic.messsageType == 'A' && this.tabText == "Incoming") {
            console.log("here inc and all");
            this.protocolAllInc.messageChannel = " ";
            this.protocolAllInc.messageFormat = " ";
        }
        else if (this.addSysBasic.messsageType == 'A' && this.tabText == "Outgoing") {
            this.protocolAllOut.messageFormat = " ";
            this.protocolAllOut.messageChannel = " ";
        }
        // this.protocolAllInc=new MdmtSystemChannel()
    }
    onResetOFAllInc() {
        this.mdmtSystemServiceAllInc.forEach(element => {
            element.dataType = '',
                element.headerValue = '',
                element.id = '',
                element.messageBasis = '',
                element.messageKey = '',
                element.systemChannelId = '';
            element.headerTag = '',
                element.encryption = 'No Encryption';
        });
    }
    addOfIncAll() {
        this.mdmtSystemServiceAllInc.push({ id: '', headerValue: '', messageKey: '', systemChannelId: '', dataType: '', messageBasis: '', headerTag: '', encryption: 'No Encryption' });
    }
    onDeleteOFAllInc(i) {
        this.mdmtSystemServiceAllInc.splice(i, 1);
    }
    onResetOfProtocolAllOut() {
        this.protocolAllOut = new MdmtSystemChannel;
    }
    add() {
        // let row =new MdmtSystemService();
        // this.mdmtSystemService.push(row);
        // console.log(this.mdmtSystemService);
        this.mdmtSystemService.push({
            dataType: '',
            headerValue: '',
            id: '',
            messageBasis: '',
            messageKey: '',
            systemChannelId: '',
            encryption: 'No Encryption',
            headerTag: ''
        });
    }
    onMdbQueue(event) {
        this.queueType = event.value;
    }
    onFisnih() {
        if (this.mdmtSystemService.some(mdmtSystemService => mdmtSystemService['headerTag'] === 'OPERATION') && this.mdmtSystemService.some(mdmtSystemService => mdmtSystemService['headerTag'] === 'SERVICE')) {
            console.log("enter inside finish");
            this.afterFinish = true;
            if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
                this.mdmtSystemChannel.push(this.protocolForBothIncOut);
                console.log("in if", this.mdmtSystemService);
                this.addSysBasic.sysChannel = this.mdmtSystemChannel;
                this.addSysBasic.sysChannel[0].messageType = this.addSysBasic.messsageType;
                this.addSysBasic.sysChannel.forEach(element => {
                    element.sysService = this.mdmtSystemService;
                });
                console.log("complete data", this.addSysBasic);
                console.log("serv", this.channelService.sysService);
                // this.mdmtSystemChannel.push(this.protocolForBothIncOut);
                // this.mdmtSystemDto.mdmtSystemService=this.mdmtSystemService;
                // this.mdmtSystemDto.mdmtSystemChannel=this.mdmtSystemChannel;
                // this.mdmtSystemDto.mdmtSystem=this.addSysBasic;
                console.log("this.mdmtSystemDto.mdmtSystemService", this.mdmtSystemDto.mdmtSystemService);
            }
            else {
                console.log("in else");
                // this.mdmtSystemDto.mdmtSystem=this.addSysBasic;
                this.mdmtSystemChannel.push(this.protocolAllInc);
                this.mdmtSystemChannel.push(this.protocolAllOut);
                this.addSysBasic.sysChannel = this.mdmtSystemChannel;
                this.addSysBasic.sysChannel[0].messageType = "I";
                this.addSysBasic.sysChannel[1].messageType = "O";
                this.addSysBasic.sysChannel[0].sysService = this.mdmtSystemServiceAllInc;
                this.addSysBasic.sysChannel[1].sysService = this.mdmtSystemServiceAllOut;
                // this.addSysBasic.sysChannel[0].sysService.splice(0,0,this.mdmtSystemServiceAllInc)
                // this.addSysBasic.sysChannel[0].sysService.concat(this.mdmtSystemServiceAllInc)
                // this.addSysBasic.sysChannel[1].sysService.concat(this.mdmtSystemServiceAllOut)
                // this.addSysBasic.sysChannel[0].sysService.splice(0,0,this.mdmtSystemServiceAllInc);
                // this.addSysBasic.sysChannel[0].sysService.push(this.mdmtSystemServiceAllInc)
                // this.mdmtSystemService.push(...this.mdmtSystemServiceAllInc,...this.mdmtSystemServiceAllOut);
                console.log("all", this.mdmtSystemService);
                //  this.addSysBasic.sysChannel.map(el=>{el.sysService=this.mdmtSystemService});
                console.log("complete data", this.addSysBasic);
                // this.mdmtSystemDto.mdmtSystemService=this.mdmtSystemService;
                // this.mdmtSystemDto.mdmtSystemChannel=this.mdmtSystemChannel;
            }
            this.addSystem.submittingAddSystem(this.addSysBasic, this.currentUser).subscribe(addSysResp => {
                console.log("resp", addSysResp);
                if (addSysResp) {
                    this.clickedFinishButton = true;
                    this.showAuditLog = true;
                    this.addSysRespData = addSysResp;
                    sweetalert2__WEBPACK_IMPORTED_MODULE_3___default.a.fire({ text: 'Record saved successfully' });
                }
                this.showFinishallOut = true;
            }, (err => {
                sweetalert2__WEBPACK_IMPORTED_MODULE_3___default.a.fire({ text: 'Server Error' });
                this.afterFinish = false;
            }));
        }
        else if (this.mdmtSystemServiceAllOut.some(mdmtSystemServiceAllOut => mdmtSystemServiceAllOut['headerTag'] === 'OPERATION') && this.mdmtSystemServiceAllOut.some(mdmtSystemServiceAllOut => mdmtSystemServiceAllOut['headerTag'] === 'SERVICE')) {
            console.log("enter inside finish");
            this.afterFinish = true;
            if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
                this.mdmtSystemChannel.push(this.protocolForBothIncOut);
                console.log("in if", this.mdmtSystemService);
                this.addSysBasic.sysChannel = this.mdmtSystemChannel;
                this.addSysBasic.sysChannel[0].messageType = this.addSysBasic.messsageType;
                this.addSysBasic.sysChannel.forEach(element => {
                    element.sysService = this.mdmtSystemService;
                });
                console.log("complete data", this.addSysBasic);
                console.log("serv", this.channelService.sysService);
                // this.mdmtSystemChannel.push(this.protocolForBothIncOut);
                // this.mdmtSystemDto.mdmtSystemService=this.mdmtSystemService;
                // this.mdmtSystemDto.mdmtSystemChannel=this.mdmtSystemChannel;
                // this.mdmtSystemDto.mdmtSystem=this.addSysBasic;
                console.log("this.mdmtSystemDto.mdmtSystemService", this.mdmtSystemDto.mdmtSystemService);
            }
            else {
                console.log("in else");
                // this.mdmtSystemDto.mdmtSystem=this.addSysBasic;
                this.mdmtSystemChannel.push(this.protocolAllInc);
                this.mdmtSystemChannel.push(this.protocolAllOut);
                this.addSysBasic.sysChannel = this.mdmtSystemChannel;
                this.addSysBasic.sysChannel[0].messageType = "I";
                this.addSysBasic.sysChannel[1].messageType = "O";
                this.addSysBasic.sysChannel[0].sysService = this.mdmtSystemServiceAllInc;
                this.addSysBasic.sysChannel[1].sysService = this.mdmtSystemServiceAllOut;
                // this.addSysBasic.sysChannel[0].sysService.splice(0,0,this.mdmtSystemServiceAllInc)
                // this.addSysBasic.sysChannel[0].sysService.concat(this.mdmtSystemServiceAllInc)
                // this.addSysBasic.sysChannel[1].sysService.concat(this.mdmtSystemServiceAllOut)
                // this.addSysBasic.sysChannel[0].sysService.splice(0,0,this.mdmtSystemServiceAllInc);
                // this.addSysBasic.sysChannel[0].sysService.push(this.mdmtSystemServiceAllInc)
                // this.mdmtSystemService.push(...this.mdmtSystemServiceAllInc,...this.mdmtSystemServiceAllOut);
                console.log("all", this.mdmtSystemService);
                //  this.addSysBasic.sysChannel.map(el=>{el.sysService=this.mdmtSystemService});
                console.log("complete data", this.addSysBasic);
                // this.mdmtSystemDto.mdmtSystemService=this.mdmtSystemService;
                // this.mdmtSystemDto.mdmtSystemChannel=this.mdmtSystemChannel;
            }
            this.addSystem.submittingAddSystem(this.addSysBasic, this.currentUser).subscribe(addSysResp => {
                console.log("resp", addSysResp);
                if (addSysResp) {
                    this.clickedFinishButton = true;
                    this.showAuditLog = true;
                    this.addSysRespData = addSysResp;
                    sweetalert2__WEBPACK_IMPORTED_MODULE_3___default.a.fire({ text: 'Record saved successfully' });
                }
                this.showFinishallOut = true;
            }, (err => {
                sweetalert2__WEBPACK_IMPORTED_MODULE_3___default.a.fire({ text: 'Server Error' });
                this.afterFinish = false;
            }));
        }
        else {
            sweetalert2__WEBPACK_IMPORTED_MODULE_3___default.a.fire({ text: 'Header value OPERATION and SERVICE are mandatory !' });
        }
    }
    onResetOfAllOut() {
        this.mdmtSystemServiceAllOut.forEach(element => {
            element.dataType = '',
                element.headerValue = '',
                element.id = '',
                element.messageBasis = '',
                element.messageKey = '',
                element.headerTag = ' ',
                element.systemChannelId = '';
        });
    }
    onReset() {
        console.log("this si reset");
        this.mdmtSystemService.forEach(element => {
            element.dataType = '',
                element.headerValue = '',
                element.id = '',
                element.messageBasis = '',
                element.messageKey = '',
                element.systemChannelId = '';
            element.headerTag = '';
        });
    }
    onDelete(i) {
        this.mdmtSystemService.splice(i, 1);
        debugger;
        this.headerTagData1 = this.headerTagData1.filter((val, index) => index !== i);
    }
    // Api for xml,iso and others
    // gettingIso/Tcp record
    fetchingIso() {
        this.showProgressbar = true;
        this.addSystem.fetchingIsoForTcp().subscribe(isoResp => {
            this.isoRespData = isoResp;
            if (isoResp) {
                if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
                    this.onlyInc = true;
                    this.showProgressbar = false;
                    // for dropdown 2
                    this.messageBasisIso = isoResp.map((data) => {
                        return data.fieldName;
                    });
                    // for dropdown 1
                    this.messageKeyIso = isoResp.map((data) => {
                        return data.fieldNo;
                    });
                    this.typeDataIso = isoResp.map((data) => {
                        return data.dataType;
                    });
                    this.headerValueIso = isoResp.map((data) => {
                        return data.headerValue;
                    });
                }
                else if (this.addSysBasic.messsageType == 'A' && this.tabText == 'Incoming') {
                    this.showServiceScreen = true;
                    this.showProgressbar = false;
                    this.onlyInc = false;
                    this.messageBasisIso = isoResp.map((data) => {
                        return data.fieldName;
                    });
                    // for dropdown 2
                    this.messageKeyIso = isoResp.map((data) => {
                        return data.fieldNo;
                    });
                    this.typeDataIso = isoResp.map((data) => {
                        return data.dataType;
                    });
                    this.headerValueIso = isoResp.map((data) => {
                        return data.headerValue;
                    });
                    // this.mdmtSystemServiceAllInc=isoResp;
                }
                else if (this.addSysBasic.messsageType == 'A' && this.tabText == 'Outgoing') {
                    console.log("this is  all out ");
                    this.showServiceScreeAllOut = true;
                    this.showProgressbar = false;
                    this.onlyInc = false;
                    this.messageBasisIso = isoResp.map((data) => {
                        return data.fieldName;
                    });
                    // for dropdown 2
                    this.messageKeyIso = isoResp.map((data) => {
                        return data.fieldNo;
                    });
                    this.typeDataIso = isoResp.map((data) => {
                        return data.dataType;
                    });
                    this.headerValueIso = isoResp.map((data) => {
                        return data.headerValue;
                    });
                    // this.mdmtSystemServiceAllOut=isoResp;
                }
            }
        });
    }
    //gettingxml records
    fetchingXMl() {
        this.addSystem.gettinXMLmsgIncoming().subscribe(xmlResp => {
            console.log(xmlResp);
            this.xmlRespData = xmlResp;
            if (xmlResp) {
                if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
                    this.onlyInc = true;
                    this.showProgressbar = false;
                    // for dropdown 1
                    this.messageBasisIso = xmlResp.map((data) => {
                        return data.messageBasis;
                    });
                    // for dropdown 2
                    this.messageKeyIso = xmlResp.map((data) => {
                        return data.messageKey;
                    });
                    //dopdwon3
                    this.typeDataIso = xmlResp.map((data) => {
                        return data.dataType;
                    });
                    this.headerValueIso = xmlResp.map((data) => {
                        return data.headerValue;
                    });
                }
                else if (this.addSysBasic.messsageType == 'A' && this.tabText == 'Incoming') {
                    this.showServiceScreen = true;
                    this.showProgressbar = false;
                    this.onlyInc = false;
                    this.messageBasisIso = xmlResp.map((data) => {
                        return data.messageBasis;
                    });
                    // for dropdown 2
                    this.messageKeyIso = xmlResp.map((data) => {
                        return data.messageKey;
                    });
                    // this.nodeAndTagName.push({node:this.messageBasisIso,tagName:this.messageKeyIso});
                    this.typeDataIso = xmlResp.map((data) => {
                        return data.dataType;
                    });
                    this.headerValueIso = xmlResp.map((data) => {
                        return data.headerValue;
                    });
                }
                else if (this.addSysBasic.messsageType == 'A' && this.tabText == 'Outgoing') {
                    this.showServiceScreeAllOut = true;
                    this.showProgressbar = false;
                    this.onlyInc = false;
                    this.messageBasisIso = xmlResp.map((data) => {
                        return data.messageBasis;
                    });
                    // for dropdown 2
                    this.messageKeyIso = xmlResp.map((data) => {
                        return data.messageKey;
                    });
                    this.typeDataIso = xmlResp.map((data) => {
                        return data.dataType;
                    });
                    this.headerValueIso = xmlResp.map((data) => {
                        return data.headerValue;
                    });
                }
            }
        });
    }
    // upload Excel
    chooseFile() {
        document.getElementById('chFile').click();
    }
    // ------------File Uplaod Methods-----------
    uploadFileXml(event) {
        this.selectedFiles = event.target.files;
        this.sizeOfFile = this.selectedFiles.item(0).size;
        this.currentFileUpload = this.selectedFiles.item(0);
        this.fileName = this.currentFileUpload.name;
        this.addSystem.gettingHederofXMl(this.currentFileUpload).subscribe(xmlResp => {
            console.log(xmlResp);
            if (xmlResp) {
                this.uploadXmlResp = xmlResp;
                this.messageBasisIso = xmlResp.nodeTagList;
                sweetalert2__WEBPACK_IMPORTED_MODULE_3___default.a.fire({ text: 'File Uploaded Successfully' });
            }
        }, (err) => {
            console.log(err);
            sweetalert2__WEBPACK_IMPORTED_MODULE_3___default.a.fire({ text: 'Invalid Xml file provided' });
        });
    }
    uploadFileXmlOut(event) {
        this.selectedFiles = event.target.files;
        this.sizeOfFile = this.selectedFiles.item(0).size;
        this.currentFileUpload = this.selectedFiles.item(0);
        this.fileNameOut = this.currentFileUpload.name;
        this.addSystem.gettingHederofXMl(this.currentFileUpload).subscribe(xmlResp => {
            console.log(xmlResp);
            if (xmlResp) {
                this.uploadXmlResp = xmlResp;
                this.messageBasisIso = xmlResp.nodeTagList;
                sweetalert2__WEBPACK_IMPORTED_MODULE_3___default.a.fire({ text: 'File Uploaded Successfully' });
            }
        }, (err) => {
            console.log(err);
            sweetalert2__WEBPACK_IMPORTED_MODULE_3___default.a.fire({ text: 'Invalid Xml file provided' });
        });
    }
    onselectingTag(event, i) {
        this.desSystem.push(event.value);
        console.log(event);
        console.log(this.uploadXmlResp);
        var result = Object.keys(this.uploadXmlResp.nodeValueMap).map((key) => [(key), this.uploadXmlResp.nodeValueMap[key]]);
        var x = result.find(item => item[0] == event.value);
        console.log(x);
        if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
            this.mdmtSystemService[i].headerValue = x[1];
        }
        else if (this.addSysBasic.messsageType == 'A' && this.tabText == 'Incoming') {
            this.mdmtSystemServiceAllInc[i].headerValue = x[1];
        }
        else if (this.addSysBasic.messsageType == 'A' && this.tabText == 'Outgoing') {
            this.mdmtSystemServiceAllOut[i].headerValue = x[1];
        }
        // this.mdmtSystemService[i].dataType=x.dataType;
        // this.check(event,i);
    }
    addOfAllOut() {
        this.mdmtSystemServiceAllOut.push({ id: '', dataType: '', headerValue: '', messageBasis: '', messageKey: '', systemChannelId: '', headerTag: '', encryption: 'No Encryption' });
    }
    onDeleteOfAllOut(i) {
        this.mdmtSystemServiceAllOut.splice(i, 1);
    }
    onResetOfBasicInfo() {
        this.addSysBasic = new AddSystemNew();
        this.clickedFinishButton = true;
    }
    onSelectingMessageBasis(event, i) {
        console.log("option for fieldno", event.value);
        console.log(event.value);
        if (this.tempArrayList[i]) {
            this.tempArrayList[i] = event.value;
        }
        else {
            this.tempArrayList.push(event.value);
        }
        // both Incoming and outgoing
        if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
            if (this.protocolForBothIncOut.messageChannel == 'TCP/IP' && this.protocolForBothIncOut.messageFormat == 'ISO 8583 1987' || this.protocolForBothIncOut.messageFormat == 'ISO 8583 1993' || this.protocolForBothIncOut.messageFormat == 'ISO 8583 2003') {
                var x = this.isoRespData.find(item => item.fieldNo == event.value);
                this.mdmtSystemService[i].messageBasis = x.fieldName;
                this.mdmtSystemService[i].dataType = x.dataType;
            }
            else if (this.protocolForBothIncOut.messageChannel == 'Https/Http' && this.protocolForBothIncOut.messageFormat == 'XML') {
                var xmldata = this.xmlRespData.find(item => item.messageBasis == event.value);
                {
                    this.mdmtSystemService[i].messageKey = xmldata.messageKey;
                    this.mdmtSystemService[i].dataType = xmldata.dataType;
                }
            }
        }
        // All Incoming
        else if (this.addSysBasic.messsageType == 'A' && this.tabText == 'Incoming') {
            console.log("coming in atb inc, All");
            if (this.protocolAllInc.messageChannel == 'TCP/IP' && this.protocolAllInc.messageFormat == 'ISO 8583 1987' || this.protocolAllInc.messageFormat == 'ISO 8583 1993' || this.protocolAllInc.messageFormat == 'ISO 8583 2003') {
                var x = this.isoRespData.find(item => item.fieldNo == event.value);
                console.log(x);
                console.log("this.mdmtSystemServiceAllInc[i].messageKey", this.mdmtSystemServiceAllInc[i].messageKey);
                this.mdmtSystemServiceAllInc[i].messageBasis = x.fieldName;
                this.mdmtSystemServiceAllInc[i].dataType = x.dataType;
            }
            else if (this.protocolAllInc.messageChannel == 'Https/Http' && this.protocolAllInc.messageFormat == 'XML') {
                var xmldata = this.xmlRespData.find(item => item.messageBasis == event.value);
                {
                    this.mdmtSystemServiceAllInc[i].messageKey = x.messageKey;
                    this.mdmtSystemServiceAllInc[i].dataType = x.dataType;
                }
            }
        }
        // All outgoing
        else if (this.addSysBasic.messsageType == 'A' && this.tabText == 'Outgoing') {
            console.log("coming in atb inc, All");
            if (this.protocolAllOut.messageChannel == 'TCP/IP' && this.protocolAllOut.messageFormat == 'ISO 8583 1987' || this.protocolAllOut.messageFormat == 'ISO 8583 1993' || this.protocolAllOut.messageFormat == 'ISO 8583 2003') {
                var x = this.isoRespData.find(item => item.fieldNo == event.value);
                this.mdmtSystemServiceAllOut[i].messageBasis = x.fieldName;
                this.mdmtSystemServiceAllOut[i].dataType = x.dataType;
            }
            else if (this.protocolAllOut.messageChannel == 'Https/Http' && this.protocolAllOut.messageFormat == 'XML') {
                var xmldata = this.xmlRespData.find(item => item.messageBasis == event.value);
                {
                    this.mdmtSystemServiceAllOut[i].messageKey = x.messageKey;
                    this.mdmtSystemServiceAllOut[i].dataType = x.dataType;
                }
            }
        }
    }
    //getting hedaer tag
    fetchingHeadertag() {
        this.addSystem.fetchingHeaderTag().subscribe(resp => {
            console.log("res", resp);
            this.headerTagData = resp;
            this.headerTagDataOut = resp;
        });
    }
    isValidIpv4Addr(event) {
        this.invalidIp = /^(?=\d+\.\d+\.\d+\.\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.?){4}$/.test(event.target.value);
        return /^(?=\d+\.\d+\.\d+\.\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.?){4}$/.test(event.target.value);
    }
    isValidIpv4Addr1(event) {
        this.invalidIp1 = /^(?=\d+\.\d+\.\d+\.\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.?){4}$/.test(event.target.value);
        return /^(?=\d+\.\d+\.\d+\.\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.?){4}$/.test(event.target.value);
    }
    changeValue2(value, index) {
        console.log(index);
        if (this.selectedDocumentTypes2[index]) {
            this.headerTagData1 = this.headerTagData1.filter(val => val !== this.selectedDocumentTypes2[index]);
        }
        this.selectedDocumentTypes2[index] = value;
        this.headerTagData1.push(value);
        // this.arrayDocumentType = this.arrayDocumentType.filter(document => document !== value);
    }
    changeValueOut(value, index) {
        console.log(index);
        if (this.selectedDocumentTypes2Out[index]) {
            this.headerTagData1out = this.headerTagData1.filter(val => val !== this.selectedDocumentTypes2Out[index]);
        }
        this.selectedDocumentTypes2Out[index] = value;
        this.headerTagData1out.push(value);
        // this.arrayDocumentType = this.arrayDocumentType.filter(document => document !== value);
    }
    shouldDisableTagOption(option) {
        return this.desSystem.includes(option);
    }
    try(value, i) {
        if (this.tempArrayList.includes(value)) {
            return true;
        }
        else {
            return false;
        }
    }
    check(event, value) {
        console.log("ev", event.value);
        this.desSystem.push(event.value);
        // this.destination=event.value;
        // this.addSystem.gettingHederofXMl(this.currentFileUpload).subscribe(xmlResp=>{
        //   console.log(xmlResp);
        //   if(xmlResp)
        //   {
        //   this.messageBasisIso=xmlResp;
        //   Swal.fire({text:'File Uploaded Successfully'});
        //   }
        // },(err)=>{
        //   console.log(err);
        //   Swal.fire({text:'Invalid Xml file provided'});
        // })
    }
    validateIp(value) {
        debugger;
        var address = new ip_address__WEBPACK_IMPORTED_MODULE_4__["Address4"](value.target.value);
        console.log("address", address);
        if (address.isCorrect) {
            // do work
        }
    }
};
AddSystemIncomingMessageTcpComponent.ctorParameters = () => [
    { type: src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_2__["AddSystemService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"] }
];
AddSystemIncomingMessageTcpComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-add-system-incoming-message-tcp',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./add-system-incoming-message-tcp.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/add-system-incoming-message-tcp.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./add-system-incoming-message-tcp.component.css */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/add-system-incoming-message-tcp.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_2__["AddSystemService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]])
], AddSystemIncomingMessageTcpComponent);

class AddSystemNew {
}
// protocol screen
class MdmtSystemChannel {
}
//3rd screen
class MdmtSystemService {
}
class MdmtSystemDto {
}


/***/ }),

/***/ "./src/app/views/sias-v2/add-system-incoming-message-tcp/add-system.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/views/sias-v2/add-system-incoming-message-tcp/add-system.ts ***!
  \*****************************************************************************/
/*! exports provided: AddSystemBasicInformation, IncomingMessageConfigTCP, OutGoingMessageConfigTCP, IncomingMessageConfigHttp, IncomingQueueMDBXML, IncomingMDBExcelFlatCsv, IncDBCredenatils, Incomingibmqueue, Incomingijmsueue, IncomingMessageConfigHttpXML, OutGoingMessageConfigHttp, MDB, IncomingMDBJSOn, IncomingMDBXML, OutGoingMDB, DBConnection, DBConnetionXML, IncomingDbConntionJson, OutGoingDBConnection, AddSystemIntegrationProtocol, AddSystemIntegrationProtocolOutgoing, HttpJSON, OutgoingHttpMessageConfigJSON, DboutgoingJson, MDBoutingXMl, DboutgoingXMl, eJBXMLincoming, ejbXMloutgoing, EjboutgoingJson, MDBoutJSon, incomingEJBJSOn, GenericAddSystemModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddSystemBasicInformation", function() { return AddSystemBasicInformation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IncomingMessageConfigTCP", function() { return IncomingMessageConfigTCP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OutGoingMessageConfigTCP", function() { return OutGoingMessageConfigTCP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IncomingMessageConfigHttp", function() { return IncomingMessageConfigHttp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IncomingQueueMDBXML", function() { return IncomingQueueMDBXML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IncomingMDBExcelFlatCsv", function() { return IncomingMDBExcelFlatCsv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IncDBCredenatils", function() { return IncDBCredenatils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Incomingibmqueue", function() { return Incomingibmqueue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Incomingijmsueue", function() { return Incomingijmsueue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IncomingMessageConfigHttpXML", function() { return IncomingMessageConfigHttpXML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OutGoingMessageConfigHttp", function() { return OutGoingMessageConfigHttp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDB", function() { return MDB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IncomingMDBJSOn", function() { return IncomingMDBJSOn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IncomingMDBXML", function() { return IncomingMDBXML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OutGoingMDB", function() { return OutGoingMDB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DBConnection", function() { return DBConnection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DBConnetionXML", function() { return DBConnetionXML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IncomingDbConntionJson", function() { return IncomingDbConntionJson; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OutGoingDBConnection", function() { return OutGoingDBConnection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddSystemIntegrationProtocol", function() { return AddSystemIntegrationProtocol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddSystemIntegrationProtocolOutgoing", function() { return AddSystemIntegrationProtocolOutgoing; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpJSON", function() { return HttpJSON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OutgoingHttpMessageConfigJSON", function() { return OutgoingHttpMessageConfigJSON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DboutgoingJson", function() { return DboutgoingJson; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDBoutingXMl", function() { return MDBoutingXMl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DboutgoingXMl", function() { return DboutgoingXMl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eJBXMLincoming", function() { return eJBXMLincoming; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ejbXMloutgoing", function() { return ejbXMloutgoing; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EjboutgoingJson", function() { return EjboutgoingJson; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MDBoutJSon", function() { return MDBoutJSon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "incomingEJBJSOn", function() { return incomingEJBJSOn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GenericAddSystemModel", function() { return GenericAddSystemModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class AddSystemBasicInformation {
}
class IncomingMessageConfigTCP {
}
class OutGoingMessageConfigTCP {
}
class IncomingMessageConfigHttp {
}
class IncomingQueueMDBXML {
}
class IncomingMDBExcelFlatCsv {
}
class IncDBCredenatils {
}
class Incomingibmqueue {
}
class Incomingijmsueue {
}
class IncomingMessageConfigHttpXML {
}
class OutGoingMessageConfigHttp {
}
class MDB {
}
class IncomingMDBJSOn {
}
class IncomingMDBXML {
}
class OutGoingMDB {
}
class DBConnection {
}
class DBConnetionXML {
}
class IncomingDbConntionJson {
}
class OutGoingDBConnection {
}
class AddSystemIntegrationProtocol {
}
class AddSystemIntegrationProtocolOutgoing {
}
class HttpJSON {
}
class OutgoingHttpMessageConfigJSON {
}
class DboutgoingJson {
}
class MDBoutingXMl {
}
class DboutgoingXMl {
}
class eJBXMLincoming {
}
class ejbXMloutgoing {
}
class EjboutgoingJson {
}
class MDBoutJSon {
}
class incomingEJBJSOn {
}
class GenericAddSystemModel {
}


/***/ }),

/***/ "./src/app/views/sias-v2/add-system-incoming-message-tcp/external-system-matenance-summary/external-system-matenance-summary.component.css":
/*!*************************************************************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/add-system-incoming-message-tcp/external-system-matenance-summary/external-system-matenance-summary.component.css ***!
  \*************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("table {\r\n    border-collapse: initial;\r\n    width:100%;\r\n    text-align: center !important;\r\n  }\r\n  :host ::ng-deep .mat-sort-header-container { \r\n    display: flex;  \r\n    justify-content: center; \r\n  }\r\n  th.mat-header-cell, td.mat-cell { \r\n    text-align: center; \r\n  }\r\n  .mat-header-cell {\r\n    text-align: center;\r\n    height: 25px !important;\r\n  \r\n  }\r\n  .mat-cell {\r\n    text-align: center;\r\n    height: 25px !important;\r\n  \r\n  }\r\n  tr:nth-child(even) {\r\n    height: 25px !important;\r\n  }\r\n  th {\r\n    font-weight: small;\r\n    height: 25px !important;\r\n    text-align: center;\r\n  }\r\n  tr {\r\n    font-weight: small;\r\n    height: 25px !important;\r\n    text-align: center;\r\n  }\r\n  mat-paginator {\r\n    width: auto !important;\r\n    height: 40px !important;\r\n  }\r\n  md-pagination-wrapper {\r\n    width: auto !important;\r\n    height: 40px !important;\r\n  }\r\n  .mat-raised-button {\r\n    width: -webkit-fit-content;\r\n    width: -moz-fit-content;\r\n    width: fit-content;\r\n    height: 20px;\r\n    line-height: 27px;\r\n    min-height: 27px;\r\n    vertical-align: top;\r\n    font-size: 11px;\r\n    padding: 0 0;\r\n    margin: 0;\r\n  }\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9hZGQtc3lzdGVtLWluY29taW5nLW1lc3NhZ2UtdGNwL2V4dGVybmFsLXN5c3RlbS1tYXRlbmFuY2Utc3VtbWFyeS9leHRlcm5hbC1zeXN0ZW0tbWF0ZW5hbmNlLXN1bW1hcnkuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLHdCQUF3QjtJQUN4QixVQUFVO0lBQ1YsNkJBQTZCO0VBQy9CO0VBQ0E7SUFDRSxhQUFhO0lBQ2IsdUJBQXVCO0VBQ3pCO0VBRUE7SUFDRSxrQkFBa0I7RUFDcEI7RUFFQTtJQUNFLGtCQUFrQjtJQUNsQix1QkFBdUI7O0VBRXpCO0VBRUE7SUFDRSxrQkFBa0I7SUFDbEIsdUJBQXVCOztFQUV6QjtFQUdBO0lBQ0UsdUJBQXVCO0VBQ3pCO0VBRUE7SUFDRSxrQkFBa0I7SUFDbEIsdUJBQXVCO0lBQ3ZCLGtCQUFrQjtFQUNwQjtFQUNBO0lBQ0Usa0JBQWtCO0lBQ2xCLHVCQUF1QjtJQUN2QixrQkFBa0I7RUFDcEI7RUFDQTtJQUNFLHNCQUFzQjtJQUN0Qix1QkFBdUI7RUFDekI7RUFFQTtJQUNFLHNCQUFzQjtJQUN0Qix1QkFBdUI7RUFDekI7RUFLRjtJQUNJLDBCQUFrQjtJQUFsQix1QkFBa0I7SUFBbEIsa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQixlQUFlO0lBQ2YsWUFBWTtJQUNaLFNBQVM7RUFDWCIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL3NpYXMtdjIvYWRkLXN5c3RlbS1pbmNvbWluZy1tZXNzYWdlLXRjcC9leHRlcm5hbC1zeXN0ZW0tbWF0ZW5hbmNlLXN1bW1hcnkvZXh0ZXJuYWwtc3lzdGVtLW1hdGVuYW5jZS1zdW1tYXJ5LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB7XHJcbiAgICBib3JkZXItY29sbGFwc2U6IGluaXRpYWw7XHJcbiAgICB3aWR0aDoxMDAlO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7XHJcbiAgfVxyXG4gIDpob3N0IDo6bmctZGVlcCAubWF0LXNvcnQtaGVhZGVyLWNvbnRhaW5lciB7IFxyXG4gICAgZGlzcGxheTogZmxleDsgIFxyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IFxyXG4gIH1cclxuICBcclxuICB0aC5tYXQtaGVhZGVyLWNlbGwsIHRkLm1hdC1jZWxsIHsgXHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7IFxyXG4gIH1cclxuICBcclxuICAubWF0LWhlYWRlci1jZWxsIHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xyXG4gIFxyXG4gIH1cclxuICBcclxuICAubWF0LWNlbGwge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7XHJcbiAgXHJcbiAgfVxyXG4gIFxyXG4gIFxyXG4gIHRyOm50aC1jaGlsZChldmVuKSB7XHJcbiAgICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcclxuICB9XHJcbiAgXHJcbiAgdGgge1xyXG4gICAgZm9udC13ZWlnaHQ6IHNtYWxsO1xyXG4gICAgaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgfVxyXG4gIHRyIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBzbWFsbDtcclxuICAgIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuICBtYXQtcGFnaW5hdG9yIHtcclxuICAgIHdpZHRoOiBhdXRvICFpbXBvcnRhbnQ7XHJcbiAgICBoZWlnaHQ6IDQwcHggIWltcG9ydGFudDtcclxuICB9XHJcbiAgXHJcbiAgbWQtcGFnaW5hdGlvbi13cmFwcGVyIHtcclxuICAgIHdpZHRoOiBhdXRvICFpbXBvcnRhbnQ7XHJcbiAgICBoZWlnaHQ6IDQwcHggIWltcG9ydGFudDtcclxuICB9XHJcbiAgXHJcbiAgXHJcbiAgXHJcbiAgXHJcbi5tYXQtcmFpc2VkLWJ1dHRvbiB7XHJcbiAgICB3aWR0aDogZml0LWNvbnRlbnQ7XHJcbiAgICBoZWlnaHQ6IDIwcHg7XHJcbiAgICBsaW5lLWhlaWdodDogMjdweDtcclxuICAgIG1pbi1oZWlnaHQ6IDI3cHg7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xyXG4gICAgZm9udC1zaXplOiAxMXB4O1xyXG4gICAgcGFkZGluZzogMCAwO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gIH0iXX0= */");

/***/ }),

/***/ "./src/app/views/sias-v2/add-system-incoming-message-tcp/external-system-matenance-summary/external-system-matenance-summary.component.ts":
/*!************************************************************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/add-system-incoming-message-tcp/external-system-matenance-summary/external-system-matenance-summary.component.ts ***!
  \************************************************************************************************************************************************/
/*! exports provided: ExternalSystemMatenanceSummaryComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExternalSystemMatenanceSummaryComponent", function() { return ExternalSystemMatenanceSummaryComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
/* harmony import */ var src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/services/sias2-services/excel-processing.service */ "./src/app/shared/services/sias2-services/excel-processing.service.ts");
/* harmony import */ var _angular_material_paginator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/paginator */ "./node_modules/@angular/material/esm2015/paginator.js");
/* harmony import */ var src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/shared/services/addSys/add-system.service */ "./src/app/shared/services/addSys/add-system.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_8__);









let ExternalSystemMatenanceSummaryComponent = class ExternalSystemMatenanceSummaryComponent {
    constructor(fb, addSystem, cdr, router, excelProcessingService, dialog) {
        this.fb = fb;
        this.addSystem = addSystem;
        this.cdr = cdr;
        this.router = router;
        this.excelProcessingService = excelProcessingService;
        this.dialog = dialog;
        this.isData = false;
        this.displayedColumns = ['systemId', 'code', 'name', 'type', 'externalIp',
            'externalPort', 'createdTime'];
    }
    ngOnInit() {
        // this.sumaData = [
        //   {
        //     "code": "83",
        //     "externalIp": "9876",
        //     "externalPort": "389",
        //     "incomingDbConnection": [
        //       {
        //         "ObjectType": "db1",
        //         "objectName": "db"
        //       }
        //     ],
        //     "incomingIntegrationProtocol": [
        //       {
        //         "dataType": "ISO 8583 1993",
        //         "typeOfProtocol": "TCP/IP"
        //       }
        //     ],
        //     "incomingMdb": [
        //       {
        //         "variables": "ISO 8583 1993",
        //         "values": "TCP/IP"
        //       }
        //     ],
        //     "incomingMessageConfigurationHttp": [
        //       {
        //         "node": "sys1",
        //         "tagName": "sys2",
        //         "tagValue": "mapp12",
        //         "type": "mapping"
        //       },
        //       {
        //         "node": "sys2",
        //         "tagName": "sys3",
        //         "tagValue": "mappingAccount",
        //         "type": "mapping2"
        //       }
        //     ],
        //     "incomingMessageConfigurationTcp": [
        //       {
        //         "fieldName": "123",
        //         "fieldNo": "678",
        //         "type": "678",
        //         "value": "678"
        //       },
        //       {
        //         "fieldName": "678",
        //         "fieldNo": "789",
        //         "type": "789",
        //         "value": "89"
        //       },
        //       {
        //         "fieldName": "123",
        //         "fieldNo": "678",
        //         "type": "678",
        //         "value": "678"
        //       },
        //       {
        //         "fieldName": "678",
        //         "fieldNo": "789",
        //         "type": "789",
        //         "value": "89"
        //       }
        //     ],
        //     "medianIp": "78654",
        //     "medianPort": "78567",
        //     "name": "Vidya",
        //     "openToMessage": "All",
        //     "type":"median",
        //     "outgoingDbConnection": [{
        //       "objectName": "dbOut",
        //       "ObjectType": "dbOut"
        //     }],
        //     "outgoingIntegrationProtocol": [{
        //       "typeOfProtocol": "Https/Http",
        //       "dataType": "JSON"
        //     }],
        //     "outgoingMdb": [],
        //     "outgoingMessageConfigurationHttp": [
        //       {"node":"noo",
        //       "tagName":"tagName",
        //       "tagValue":"tagV",
        //       "type":"type"}
        //     ],
        //     "outgoingMessageConfigurationTcp": [
        //       {
        //         "fieldNo": "678",
        //         "fieldName": "123",
        //         "type": "678",
        //         "value": "678"
        //       },
        //       {
        //         "fieldNo": "789",
        //         "fieldName": "678",
        //         "type": "789",
        //         "value": "89"
        //       },
        //       {
        //         "fieldNo": "678",
        //         "fieldName": "123",
        //         "type": "678",
        //         "value": "678"
        //       },
        //       {
        //         "fieldNo": "789",
        //         "fieldName": "678",
        //         "type": "789",
        //         "value": "89"
        //       }
        //     ]
        //   },
        //   {
        //     "code": "84",
        //     "externalIp": "9876",
        //     "externalPort": "389",
        //     "incomingDbConnection": [
        //       {
        //         "ObjectType": "db1",
        //         "objectName": "db"
        //       }
        //     ],
        //     "incomingIntegrationProtocol": [
        //       {
        //         "dataType": "XML",
        //         "typeOfProtocol": "Https/Http"
        //       }
        //     ],
        //     "incomingMdb": [],
        //     "incomingMessageConfigurationHttp": [
        //       {
        //         "node": "sys1",
        //         "tagName": "sys2",
        //         "tagValue": "mapp12",
        //         "type": "mapping"
        //       },
        //       {
        //         "node": "sys2",
        //         "tagName": "sys3",
        //         "tagValue": "mappingAccount",
        //         "type": "mapping2"
        //       }
        //     ],
        //     "incomingMessageConfigurationTcp": [
        //       // {
        //         // "fieldName": "123",
        //         // "fieldNo": "678",
        //         // "type": "678",
        //         // "value": "678"
        //       // },
        //       // {
        //       //   "fieldName": "678",
        //       //   "fieldNo": "789",
        //       //   "type": "789",
        //       //   "value": "89"
        //       // },
        //       // {
        //       //   "fieldName": "123",
        //       //   "fieldNo": "678",
        //       //   "type": "678",
        //       //   "value": "678"
        //       // },
        //       // {
        //       //   "fieldName": "678",
        //       //   "fieldNo": "789",
        //       //   "type": "789",
        //       //   "value": "89"
        //       // }
        //     ],
        //     "medianIp": "78654",
        //     "medianPort": "78567",
        //     "name": "ABC",
        //     "openToMessage": "Incoming",
        //     "type":"median",
        //     "outgoingDbConnection": [{
        //       "objectName": "dbOut",
        //       "ObjectType": "dbOut"
        //     }],
        //     "outgoingIntegrationProtocol": [{
        //       "typeOfProtocol": "Https/Http",
        //       "dataType": "JSON"
        //     }],
        //     "outgoingMdb": [],
        //     "outgoingMessageConfigurationHttp": [{"node":"noo",
        //     "tagName":"tagName",
        //     "tagValue":"tagV",
        //     "type":"type"}],
        //     "outgoingMessageConfigurationTcp": [
        //       {
        //         "fieldNo": "678",
        //         "fieldName": "123",
        //         "type": "678",
        //         "value": "678"
        //       },
        //       {
        //         "fieldNo": "789",
        //         "fieldName": "678",
        //         "type": "789",
        //         "value": "89"
        //       },
        //       {
        //         "fieldNo": "678",
        //         "fieldName": "123",
        //         "type": "678",
        //         "value": "678"
        //       },
        //       {
        //         "fieldNo": "789",
        //         "fieldName": "678",
        //         "type": "789",
        //         "value": "89"
        //       }
        //     ]
        //   },
        //   {
        //     "code": "85",
        //     "externalIp": "9876",
        //     "externalPort": "389",
        //     "incomingDbConnection": [
        //       {
        //         "ObjectType": "db1",
        //         "objectName": "db"
        //       }
        //     ],
        //     "incomingIntegrationProtocol": [
        //       {
        //         "dataType": "ISO 8583 1993",
        //         "typeOfProtocol": "TCP/IP"
        //       }
        //     ],
        //     "incomingMdb": [],
        //     "incomingMessageConfigurationHttp": [
        //       {
        //         "node": "sys1",
        //         "tagName": "sys2",
        //         "tagValue": "mapp12",
        //         "type": "mapping"
        //       },
        //       {
        //         "node": "sys2",
        //         "tagName": "sys3",
        //         "tagValue": "mappingAccount",
        //         "type": "mapping2"
        //       }
        //     ],
        //     "incomingMessageConfigurationTcp": [
        //       {
        //         "fieldName": "123",
        //         "fieldNo": "678",
        //         "type": "678",
        //         "value": "678"
        //       },
        //       {
        //         "fieldName": "678",
        //         "fieldNo": "789",
        //         "type": "789",
        //         "value": "89"
        //       },
        //       {
        //         "fieldName": "123",
        //         "fieldNo": "678",
        //         "type": "678",
        //         "value": "678"
        //       },
        //       {
        //         "fieldName": "678",
        //         "fieldNo": "789",
        //         "type": "789",
        //         "value": "89"
        //       }
        //     ],
        //     "medianIp": "78654",
        //     "medianPort": "78567",
        //     "name": "XYZ",
        //     "openToMessage": "OutComing",
        //     "type":"median",
        //     "outgoingDbConnection": [{
        //       "objectName": "dbOut",
        //       "ObjectType": "dbOut"
        //     }],
        //     "outgoingIntegrationProtocol": [{
        //       "typeOfProtocol": "TCP/IP",
        //       "dataType": "ISO 8583 1993"
        //     }],
        //     "outgoingMdb": [],
        //     "outgoingMessageConfigurationHttp": [{
        //       "node":"noo",
        //       "tagName":"tagName",
        //       "tagValue":"tagV",
        //       "type":"type"
        //     }],
        //     "outgoingMessageConfigurationTcp": [
        //       {
        //         "fieldNo": "678",
        //         "fieldName": "123",
        //         "type": "678",
        //         "value": "678"
        //       },
        //       {
        //         "fieldNo": "789",
        //         "fieldName": "678",
        //         "type": "789",
        //         "value": "89"
        //       },
        //       {
        //         "fieldNo": "678",
        //         "fieldName": "123",
        //         "type": "678",
        //         "value": "678"
        //       },
        //       {
        //         "fieldNo": "789",
        //         "fieldName": "678",
        //         "type": "789",
        //         "value": "89"
        //       }
        //     ]
        //   }
        // ]
        console.log(this.sumaData);
        this.getExternalSummarydata();
    }
    getExternalSummarydata() {
        // here displying dummy data
        // setTimeout(() => this.dataSource.paginator = this.paginator);
        // this.dataSource.sort = this.sort;
        this.cdr.markForCheck();
        this.cdr.detectChanges();
        console.log(this.dataSource);
        // this.dataSource = new MatTableDataSource(this.sumaData);
        // here calling api
        this.addSystem.fecthingAddSystem().subscribe(summaryResp => {
            console.log(summaryResp);
            this.sumaData = summaryResp;
            this.sumaData.forEach(el => {
            });
            // this.setForm(this.sumaData);
            this.dataSource = new _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatTableDataSource"](this.sumaData);
            this.dataSource.sort = this.sort;
            this.dataSource.paginator = this.paginator;
        }, (err) => {
            console.log("err", err);
            sweetalert2__WEBPACK_IMPORTED_MODULE_8___default.a.fire({
                type: 'error',
                text: 'Server error ',
            });
        });
        // this.dataSource = new MatTableDataSource(this.sumaData);
    }
    // ngAfterViewInit() {
    // setTimeout(() => this.dataSource.paginator = this.paginator);
    // this.dataSource.sort = this.sort;
    // }
    ongettingAddSystem(resp) {
        let queryParams = {
            'systemCode': resp.systemCode,
            'systemName': resp.systemName,
            'serviceType': resp.serviceType,
            'sourceIp': resp.sourceIp,
            'sourcePort': resp.sourcePort,
            'medianIp': resp.medianIp,
            'medianPort': resp.medianPort,
            'messsageType': resp.messsageType,
            'approvedEver': resp.approvedEver,
            'approvedStatus': resp.approvedStatus,
            'approvedTime': resp.approvedTime,
            'approverId': resp.approverId,
            'createdTime': resp.createdTime,
            'creatorId': resp.creatorId,
            'versionNo': resp.versionNo,
            'sysChannel': resp.sysChannel,
            'recordStatus': resp.recordStatus,
            'systemId': resp.systemId
            // 'messChannel':resp.mdmtSystemChannel,
            // 'messageChannel':resp.mdmtSystemChannel[0].messageChannel,
            // 'messageFormat':resp.mdmtSystemChannel[0].messageFormat,
            // 'mdmtSystemService':resp.mdmtSystemService,
            // 'mdmtSystem': resp.mdmtSystem
        };
        console.log(queryParams);
        // this.addSystem.fetchingAddSysBasedonId(row.systemId).subscribe(resp=>{
        //   console.log(resp);
        this.addSystem.sendNavParam(queryParams);
        this.router.navigateByUrl('/sias-v2/viewOrEditSystem');
        // });
    }
};
ExternalSystemMatenanceSummaryComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"] },
    { type: src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_6__["AddSystemService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_7__["Router"] },
    { type: src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_4__["ExcelProcessingService"] },
    { type: _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDialog"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSort"], { static: false }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSort"])
], ExternalSystemMatenanceSummaryComponent.prototype, "sort", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_angular_material_paginator__WEBPACK_IMPORTED_MODULE_5__["MatPaginator"], { static: true }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material_paginator__WEBPACK_IMPORTED_MODULE_5__["MatPaginator"])
], ExternalSystemMatenanceSummaryComponent.prototype, "paginator", void 0);
ExternalSystemMatenanceSummaryComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-external-system-matenance-summary',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./external-system-matenance-summary.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/external-system-matenance-summary/external-system-matenance-summary.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./external-system-matenance-summary.component.css */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/external-system-matenance-summary/external-system-matenance-summary.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"],
        src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_6__["AddSystemService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],
        _angular_router__WEBPACK_IMPORTED_MODULE_7__["Router"],
        src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_4__["ExcelProcessingService"],
        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDialog"]])
], ExternalSystemMatenanceSummaryComponent);



/***/ }),

/***/ "./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/edit-rule-mapping/edit-rule-mapping.component.css":
/*!******************************************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/edit-rule-mapping/edit-rule-mapping.component.css ***!
  \******************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/* ::ng-deep .mat-form-field-flex > .mat-form-field-infix { padding: 0.4em 0px !important;}\r\n::ng-deep .mat-form-field-label-wrapper { top: -1.5em; }\r\n\r\n::ng-deep .mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label {\r\n    transform: translateY(-1.1em) scale(.75);\r\n    width: 80.33333%;\r\n} */\r\n/* ::ng-deep .mat-form-field-flex > .mat-form-field-infix { width: 30% !important;} */\r\n::ng-deep.mat-form-field-appearance-outline .mat-form-field-flex\r\n{\r\n    width: 170px !important;\r\n    height: 50px !important;\r\n}\r\n.mat-raised-button {\r\n    width: -webkit-fit-content;\r\n    width: -moz-fit-content;\r\n    width: fit-content;\r\n    height: 20px;\r\n    line-height: 27px;\r\n    min-height: 27px;\r\n    vertical-align: top;\r\n    font-size: 11px;\r\n    padding: 0 0;\r\n    margin: 0;\r\n    }\r\n#customers {\r\n        font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\r\n        border-collapse: collapse;\r\n        width: 100%;\r\n      }\r\n#customers td, #customers th {\r\n        border: 1px solid #ddd;\r\n        padding: 8px;\r\n        text-align: center;\r\n        \r\n      }\r\n#customers tr:nth-child(even){background-color: #f2f2f2;}\r\n#customers th {\r\n        padding-top: 12px;\r\n        padding-bottom: 12px;\r\n        text-align: left;\r\n        background-color:rgb(97, 178, 216);\r\n        color: white;\r\n      }\r\n     \r\n      \r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9hZGQtc3lzdGVtLWluY29taW5nLW1lc3NhZ2UtdGNwL3J1bGUtbWFwcGluZy9lZGl0LXJ1bGUtbWFwcGluZy9lZGl0LXJ1bGUtbWFwcGluZy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUNILHFGQUFxRjtBQUNyRjs7SUFFSSx1QkFBdUI7SUFDdkIsdUJBQXVCO0FBQzNCO0FBQ0E7SUFDSSwwQkFBa0I7SUFBbEIsdUJBQWtCO0lBQWxCLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLFlBQVk7SUFDWixTQUFTO0lBQ1Q7QUFDQTtRQUNJLHlEQUF5RDtRQUN6RCx5QkFBeUI7UUFDekIsV0FBVztNQUNiO0FBQ0E7UUFDRSxzQkFBc0I7UUFDdEIsWUFBWTtRQUNaLGtCQUFrQjs7TUFFcEI7QUFFQSw4QkFBOEIseUJBQXlCLENBQUM7QUFFeEQ7UUFDRSxpQkFBaUI7UUFDakIsb0JBQW9CO1FBQ3BCLGdCQUFnQjtRQUNoQixrQ0FBa0M7UUFDbEMsWUFBWTtNQUNkIiwiZmlsZSI6InNyYy9hcHAvdmlld3Mvc2lhcy12Mi9hZGQtc3lzdGVtLWluY29taW5nLW1lc3NhZ2UtdGNwL3J1bGUtbWFwcGluZy9lZGl0LXJ1bGUtbWFwcGluZy9lZGl0LXJ1bGUtbWFwcGluZy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyogOjpuZy1kZWVwIC5tYXQtZm9ybS1maWVsZC1mbGV4ID4gLm1hdC1mb3JtLWZpZWxkLWluZml4IHsgcGFkZGluZzogMC40ZW0gMHB4ICFpbXBvcnRhbnQ7fVxyXG46Om5nLWRlZXAgLm1hdC1mb3JtLWZpZWxkLWxhYmVsLXdyYXBwZXIgeyB0b3A6IC0xLjVlbTsgfVxyXG5cclxuOjpuZy1kZWVwIC5tYXQtZm9ybS1maWVsZC1hcHBlYXJhbmNlLW91dGxpbmUubWF0LWZvcm0tZmllbGQtY2FuLWZsb2F0Lm1hdC1mb3JtLWZpZWxkLXNob3VsZC1mbG9hdCAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xLjFlbSkgc2NhbGUoLjc1KTtcclxuICAgIHdpZHRoOiA4MC4zMzMzMyU7XHJcbn0gKi9cclxuLyogOjpuZy1kZWVwIC5tYXQtZm9ybS1maWVsZC1mbGV4ID4gLm1hdC1mb3JtLWZpZWxkLWluZml4IHsgd2lkdGg6IDMwJSAhaW1wb3J0YW50O30gKi9cclxuOjpuZy1kZWVwLm1hdC1mb3JtLWZpZWxkLWFwcGVhcmFuY2Utb3V0bGluZSAubWF0LWZvcm0tZmllbGQtZmxleFxyXG57XHJcbiAgICB3aWR0aDogMTcwcHggIWltcG9ydGFudDtcclxuICAgIGhlaWdodDogNTBweCAhaW1wb3J0YW50O1xyXG59XHJcbi5tYXQtcmFpc2VkLWJ1dHRvbiB7XHJcbiAgICB3aWR0aDogZml0LWNvbnRlbnQ7XHJcbiAgICBoZWlnaHQ6IDIwcHg7XHJcbiAgICBsaW5lLWhlaWdodDogMjdweDtcclxuICAgIG1pbi1oZWlnaHQ6IDI3cHg7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xyXG4gICAgZm9udC1zaXplOiAxMXB4O1xyXG4gICAgcGFkZGluZzogMCAwO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgfVxyXG4gICAgI2N1c3RvbWVycyB7XHJcbiAgICAgICAgZm9udC1mYW1pbHk6IFwiVHJlYnVjaGV0IE1TXCIsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XHJcbiAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgfVxyXG4gICAgICAjY3VzdG9tZXJzIHRkLCAjY3VzdG9tZXJzIHRoIHtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xyXG4gICAgICAgIHBhZGRpbmc6IDhweDtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgICNjdXN0b21lcnMgdHI6bnRoLWNoaWxkKGV2ZW4pe2JhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7fVxyXG4gICAgICBcclxuICAgICAgI2N1c3RvbWVycyB0aCB7XHJcbiAgICAgICAgcGFkZGluZy10b3A6IDEycHg7XHJcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDEycHg7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOnJnYig5NywgMTc4LCAyMTYpO1xyXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgICAgfVxyXG4gICAgIFxyXG4gICAgICAiXX0= */");

/***/ }),

/***/ "./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/edit-rule-mapping/edit-rule-mapping.component.ts":
/*!*****************************************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/edit-rule-mapping/edit-rule-mapping.component.ts ***!
  \*****************************************************************************************************************************/
/*! exports provided: EditRuleMappingComponent, MdmtMessageMapping, MdmtMessageMappingDet, ruleMapDto */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditRuleMappingComponent", function() { return EditRuleMappingComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MdmtMessageMapping", function() { return MdmtMessageMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MdmtMessageMappingDet", function() { return MdmtMessageMappingDet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ruleMapDto", function() { return ruleMapDto; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/services/rules/rules.service */ "./src/app/shared/services/rules/rules.service.ts");
/* harmony import */ var src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/services/addSys/add-system.service */ "./src/app/shared/services/addSys/add-system.service.ts");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");






let EditRuleMappingComponent = class EditRuleMappingComponent {
    constructor(rulemap, router, addSystem) {
        this.rulemap = rulemap;
        this.router = router;
        this.addSystem = addSystem;
        this.fieldNoData = [];
        this.disableFetchBtn = false;
        this.disableSubmitBtn = false;
        this.deleted = false;
        this.authorizeDone = false;
        this.fieldValueData = [];
        this.showFieldNoValue = 1;
        this.xmlLength = [];
        this.rulemappingDetail = [];
        this.rulemapping = new MdmtMessageMapping();
        this.rulemappingdest = new MdmtMessageMapping();
        this.ruleDto = new ruleMapDto();
    }
    ngOnInit() {
        this.currentUser = localStorage.getItem('userFromLogin');
        this.gettingExternalsystem();
        this.rulemappingDetail.push({ id: '', defaultValue: '', messageMappingId: '', sourceTransDetId: '', targetTransDetId: '', sourceKey: '', destinationKey: '' });
        this.fetchingIso();
        this.navSubscription = this.addSystem.getNavParam.subscribe(data => this.editruleMappingResp = data);
        this.ruleMappingDataForPayload = this.editruleMappingResp["responseData"];
        this.addSysRespData = this.ruleMappingDataForPayload;
        this.rulemapping.sourceTranslationId = this.editruleMappingResp["sourceTransDetId"];
        if (this.rulemapping.sourceTranslationId) {
            this.gettingTranslationData(this.rulemapping.sourceTranslationId);
        }
        this.rulemapping.targetTranslationId = this.editruleMappingResp["targetTransDetId"];
        if (this.rulemapping.targetTranslationId) {
            this.gettingTranslationDataForDest(this.rulemapping.targetTranslationId);
        }
        if (this.addSysRespData.recordStatus == "C") {
            console.log(this.addSysRespData.recordStatus);
            this.reopenBtn = false;
            this.authBtnHide = true;
        }
        this.rulemappingDetail = this.ruleMappingDataForPayload.msgMappingDetails;
        console.log("from sum", this.rulemapping);
    }
    gettingExternalsystem() {
        this.rulemap.gettingExternalsystem().subscribe(extSysResp => {
            console.log(extSysResp);
            this.externalSystem = extSysResp;
        }, (err) => {
            console.log("err", err);
        });
    }
    EditFetch() {
        this.editFetch = true;
        console.log("edit");
        if (this.addSysRespData.recordStatus == "C") {
            this.editFetch = false;
            sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire("Closed record can't be edited.");
        }
    }
    Edit() {
        console.log("edit");
        if (this.addSysRespData.approvedStatus == "U") {
            this.edit = false;
            sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire("UnAuthorized record can't be  edited.");
        }
        if (this.addSysRespData.recordStatus == "C") {
            this.edit = false;
            sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire("Closed record can't be edited.");
        }
        this.edit = true;
    }
    gettingTranslationData(sourseSys) {
        this.sourseSys = sourseSys;
        this.rulemap.gettingTranslationData(this.sourseSys).subscribe(resp => {
            console.log(resp);
            this.rulemapping = resp;
            this.gettingoperationAandserv(resp.systemCode, resp.messageType);
            this.rulemapping.sourceTranslationId = resp.systemCode;
        });
    }
    gettingTranslationDataForDest(destSys) {
        this.rulemap.gettingTranslationData(destSys).subscribe(resp => {
            console.log(resp);
            this.rulemappingdest = resp;
            this.gettingmsgTypeAndDestination(resp.systemCode, resp.messageType);
            this.rulemappingdest.targetTranslationId = resp.systemCode;
        });
    }
    onAuthOfRuleMapping() {
        if (this.currentUser == this.addSysRespData.creatorId) {
            sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire('Maker cannot authorize!');
        }
        else {
            let payloadObj = {};
            payloadObj = this.ruleMappingDataForPayload;
            payloadObj.msgMappingDetails = this.rulemappingDetail;
            this.rulemap.editRuleMapping("auth", this.currentUser, payloadObj).subscribe((resp) => {
                this.authorizeDone = true;
                this.addSysRespData = resp;
                sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire({ text: 'Record Authorized!' });
            });
        }
    }
    onCloseOfRuleMapping() {
        let payloadObj = {};
        payloadObj = this.ruleMappingDataForPayload;
        payloadObj.msgMappingDetails = this.rulemappingDetail;
        this.rulemap.editRuleMapping("close", this.currentUser, payloadObj).subscribe((resp) => {
            this.addSysRespData = resp;
            this.editBtn = true;
            this.authBtn = true;
            this.deleted = false;
            this.reopenBtn = false;
            sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire({ text: 'Record Closed!' });
        });
    }
    onOpenRuleMapping() {
        let payloadObj = {};
        payloadObj = this.ruleMappingDataForPayload;
        payloadObj.msgMappingDetails = this.rulemappingDetail;
        this.rulemap.editRuleMapping("open", this.currentUser, payloadObj).subscribe((resp) => {
            this.addSysRespData = resp;
            this.authBtnHide = false;
            this.editBtn = false;
            this.authBtn = false;
            sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire({ text: 'Record Opened!' });
        });
    }
    deleteRuleMapping() {
        this.rulemap.ondeleteMapping(this.addSysRespData.mappingId, this.currentUser).subscribe((resp) => {
            if (resp) {
                this.deleted = true;
                this.editBtn = true;
                this.authBtn = true;
                this.closeBtn = true;
                sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire({ title: 'Deleted Successfully!',
                    confirmButtonText: 'Ok'
                }).then((result) => {
                    if (result) {
                        this.router.navigateByUrl('/sias-v2/litsRuleMapping');
                    }
                });
            }
            else {
                sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire("Failed to delete the reocrd");
            }
        });
    }
    fetchDestination() {
        console.log(this.rulemapping);
        this.disableFetchBtn = true;
        this.showDestination = true;
        this.showSource = true;
    }
    onFieldNameChange(event) {
        console.log(event.value);
        let value = event.value;
        if (event.value) {
            var item = this.sourceIsoResp.find(element => element.fieldValue == value);
            console.log(item);
            this.showFieldNoValue = item.fieldNo;
            console.log("ssss", this.showFieldNoValue);
        }
    }
    onSubmittingRuleMapping() {
        console.log("submit");
    }
    add() {
        this.rulemappingDetail.push({ id: '', defaultValue: '', messageMappingId: '', sourceTransDetId: '', targetTransDetId: '', sourceKey: '', destinationKey: '' });
    }
    delete(i) {
        this.rulemappingDetail.splice(i, 1);
    }
    fetchingIso() {
        this.addSystem.fetchingIsoForTcp().subscribe(isoResp => {
            console.log("iss", isoResp);
            this.isoRespData = isoResp;
            // this.fieldNoData=isoResp;
            this.messageBasisIso = isoResp.map((data) => {
                return data.messageBasis;
            });
            this.fieldNoData = isoResp.map((data) => {
                return data.messageBasis;
            });
            this.fieldValueData = isoResp.map((data) => {
                return data.messageKey;
            });
        });
    }
    onSourseSelection(event) {
        console.log(event);
        this.sourseSys = event.value;
    }
    onSelectionOFMessageType(source, event) {
        console.log("e", event);
        this.sourseSys = source;
        this.gettingoperationAandserv(this.sourseSys, event.value);
    }
    gettingoperationAandserv(system, msgtype) {
        console.log(system);
        this.rulemap.gettingoperationAndService(system, msgtype, this.currentUser).subscribe(sourceResp => {
            console.log(sourceResp);
            this.sourceoperation = sourceResp.OPERATION;
            this.sourceService = sourceResp.SERVICE;
            this.sourceData = sourceResp.MdmtSystemService;
            this.sourceLabel = sourceResp.MdmtSystemChannel[0].messageChannel;
            console.log(this.sourceLabel);
            if (this.sourceLabel == 'Https/Http') {
                this.matlabelSource1 = "Node";
                this.matlabelSource2 = "TagName";
            }
            if (this.sourceLabel == 'TCP/IP') {
                this.matlabelSource1 = "Filed No";
                this.matlabelSource2 = "Filed Name";
            }
            // this.translationData=translationResp;
        }, (err => {
            console.log(err);
        }));
    }
    ondestinationSource(event) {
        console.log(event.value);
        this.destinationSource = event.value;
    }
    msgTypeOfDestination(event) {
        console.log(event.value);
        this.gettingmsgTypeAndDestination(this.destinationSource, event.value);
    }
    gettingmsgTypeAndDestination(destinationSource, msgtype) {
        this.rulemap.gettingoperationAndService(destinationSource, msgtype, this.currentUser).subscribe(destinationResp => {
            console.log(destinationResp);
            this.destinationOperation = destinationResp.OPERATION;
            this.destinationService = destinationResp.SERVICE;
            this.destinationData = destinationResp.MdmtSystemService;
            this.labelsDestination = destinationResp.MdmtSystemChannel[0].messageChannel;
            console.log(this.labelsDestination);
            if (this.labelsDestination == 'Https/Http') {
                this.matLabel = "Node";
                this.matLabel2 = "Tag Name";
            }
            else if (this.labelsDestination == 'TCP/IP') {
                this.matLabel = "Filed No";
                this.matLabel2 = "Filed Name";
            }
            // this.rulemappingData=[...this.sourceData,...this.destinationData]
            console.log(this.rulemappingData);
            // this.translationData=translationResp;
        }, (err => {
            console.log(err);
        }));
    }
    onSelectingMessageBasis(event) {
        console.log("option for fieldno", event.value);
        console.log(event.value);
        var x = this.isoRespData.find(item => item.messageBasis == event.value);
        this.isoRespData.forEach((data) => {
            data.messageKey = x.messageKey;
            this.tagName = data.messageKey;
            data.dataType = x.dataType;
        });
    }
    onsaveRuleMapping() {
        let payloadObj = {};
        payloadObj = this.ruleMappingDataForPayload;
        payloadObj.creatorId = this.currentUser;
        payloadObj.msgMappingDetails = this.rulemappingDetail;
        this.rulemap.updatingRuleMapping(payloadObj, this.currentUser).subscribe(resp => {
            console.log(resp);
            if (resp) {
                this.addSysRespData = resp;
                this.disableSubmitBtn = true;
                sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire({ text: 'Record Updated SuccessFully' });
            }
        });
    }
};
EditRuleMappingComponent.ctorParameters = () => [
    { type: src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__["RulesService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"] },
    { type: src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__["AddSystemService"] }
];
EditRuleMappingComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-edit-rule-mapping',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./edit-rule-mapping.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/edit-rule-mapping/edit-rule-mapping.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./edit-rule-mapping.component.css */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/edit-rule-mapping/edit-rule-mapping.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__["RulesService"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"],
        src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__["AddSystemService"]])
], EditRuleMappingComponent);

class MdmtMessageMapping {
}
class MdmtMessageMappingDet {
}
class ruleMapDto {
}


/***/ }),

/***/ "./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/list-rule-mapping/list-rule-mapping.component.css":
/*!******************************************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/list-rule-mapping/list-rule-mapping.component.css ***!
  \******************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("table {\r\n  border-collapse: initial;\r\n  width:100%;\r\n  text-align: center !important;\r\n}\r\n:host ::ng-deep .mat-sort-header-container { \r\n  display: flex;  \r\n  justify-content: center; \r\n}\r\nth.mat-header-cell, td.mat-cell { \r\n  text-align: center; \r\n}\r\n.mat-header-cell {\r\n  text-align: center;\r\n  height: 25px !important;\r\n\r\n}\r\n.mat-cell {\r\n  text-align: center;\r\n  height: 25px !important;\r\n\r\n}\r\ntr:nth-child(even) {\r\n  height: 25px !important;\r\n}\r\nth {\r\n  font-weight: small;\r\n  height: 25px !important;\r\n  text-align: center;\r\n}\r\ntr {\r\n  font-weight: small;\r\n  height: 25px !important;\r\n  text-align: center;\r\n}\r\nmat-paginator {\r\n  width: auto !important;\r\n  height: 40px !important;\r\n}\r\nmd-pagination-wrapper {\r\n  width: auto !important;\r\n  height: 40px !important;\r\n}\r\n.mat-raised-button {\r\n  width: -webkit-fit-content;\r\n  width: -moz-fit-content;\r\n  width: fit-content;\r\n  height: 20px;\r\n  line-height: 27px;\r\n  min-height: 27px;\r\n  vertical-align: top;\r\n  font-size: 11px;\r\n  padding: 0 0;\r\n  margin: 0;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9hZGQtc3lzdGVtLWluY29taW5nLW1lc3NhZ2UtdGNwL3J1bGUtbWFwcGluZy9saXN0LXJ1bGUtbWFwcGluZy9saXN0LXJ1bGUtbWFwcGluZy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0Usd0JBQXdCO0VBQ3hCLFVBQVU7RUFDViw2QkFBNkI7QUFDL0I7QUFDQTtFQUNFLGFBQWE7RUFDYix1QkFBdUI7QUFDekI7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjtBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLHVCQUF1Qjs7QUFFekI7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQix1QkFBdUI7O0FBRXpCO0FBR0E7RUFDRSx1QkFBdUI7QUFDekI7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQix1QkFBdUI7RUFDdkIsa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxrQkFBa0I7RUFDbEIsdUJBQXVCO0VBQ3ZCLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0Usc0JBQXNCO0VBQ3RCLHVCQUF1QjtBQUN6QjtBQUVBO0VBQ0Usc0JBQXNCO0VBQ3RCLHVCQUF1QjtBQUN6QjtBQUtBO0VBQ0UsMEJBQWtCO0VBQWxCLHVCQUFrQjtFQUFsQixrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLGlCQUFpQjtFQUNqQixnQkFBZ0I7RUFDaEIsbUJBQW1CO0VBQ25CLGVBQWU7RUFDZixZQUFZO0VBQ1osU0FBUztBQUNYIiwiZmlsZSI6InNyYy9hcHAvdmlld3Mvc2lhcy12Mi9hZGQtc3lzdGVtLWluY29taW5nLW1lc3NhZ2UtdGNwL3J1bGUtbWFwcGluZy9saXN0LXJ1bGUtbWFwcGluZy9saXN0LXJ1bGUtbWFwcGluZy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsidGFibGUge1xyXG4gIGJvcmRlci1jb2xsYXBzZTogaW5pdGlhbDtcclxuICB3aWR0aDoxMDAlO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xyXG59XHJcbjpob3N0IDo6bmctZGVlcCAubWF0LXNvcnQtaGVhZGVyLWNvbnRhaW5lciB7IFxyXG4gIGRpc3BsYXk6IGZsZXg7ICBcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgXHJcbn1cclxuXHJcbnRoLm1hdC1oZWFkZXItY2VsbCwgdGQubWF0LWNlbGwgeyBcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7IFxyXG59XHJcblxyXG4ubWF0LWhlYWRlci1jZWxsIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7XHJcblxyXG59XHJcblxyXG4ubWF0LWNlbGwge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcclxuXHJcbn1cclxuXHJcblxyXG50cjpudGgtY2hpbGQoZXZlbikge1xyXG4gIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG50aCB7XHJcbiAgZm9udC13ZWlnaHQ6IHNtYWxsO1xyXG4gIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG50ciB7XHJcbiAgZm9udC13ZWlnaHQ6IHNtYWxsO1xyXG4gIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5tYXQtcGFnaW5hdG9yIHtcclxuICB3aWR0aDogYXV0byAhaW1wb3J0YW50O1xyXG4gIGhlaWdodDogNDBweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5tZC1wYWdpbmF0aW9uLXdyYXBwZXIge1xyXG4gIHdpZHRoOiBhdXRvICFpbXBvcnRhbnQ7XHJcbiAgaGVpZ2h0OiA0MHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbi5tYXQtcmFpc2VkLWJ1dHRvbiB7XHJcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG4gIGhlaWdodDogMjBweDtcclxuICBsaW5lLWhlaWdodDogMjdweDtcclxuICBtaW4taGVpZ2h0OiAyN3B4O1xyXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XHJcbiAgZm9udC1zaXplOiAxMXB4O1xyXG4gIHBhZGRpbmc6IDAgMDtcclxuICBtYXJnaW46IDA7XHJcbn0iXX0= */");

/***/ }),

/***/ "./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/list-rule-mapping/list-rule-mapping.component.ts":
/*!*****************************************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/list-rule-mapping/list-rule-mapping.component.ts ***!
  \*****************************************************************************************************************************/
/*! exports provided: ListRuleMappingComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListRuleMappingComponent", function() { return ListRuleMappingComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
/* harmony import */ var src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/services/rules/rules.service */ "./src/app/shared/services/rules/rules.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/shared/services/addSys/add-system.service */ "./src/app/shared/services/addSys/add-system.service.ts");






let ListRuleMappingComponent = class ListRuleMappingComponent {
    constructor(rulelist, router, addSystem) {
        this.rulelist = rulelist;
        this.router = router;
        this.addSystem = addSystem;
        this.displayedColumns = ['sourceId', 'targetTranslationId', 'recordStatus', 'creatorId', 'createdTime'];
    }
    ngOnInit() {
        this.fetchinglistRuleMapping();
    }
    fetchinglistRuleMapping() {
        this.rulelist.fetchingruleMapping().subscribe(resp => {
            console.log(resp);
            this.ruleMappingListResp = resp;
            // this.setForm(this.sumaData);
            this.dataSource = new _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatTableDataSource"](this.ruleMappingListResp);
            this.dataSource.paginator = this.paginator;
            this.dataSource.sort = this.sort;
        });
    }
    ruleMappingEdit(row) {
        console.log(row);
        let id = 0;
        if (row.msgMappingDetails.length > 0) {
            id = row.msgMappingDetails[0].messageMappingId;
        }
        this.rulelist.getruleMappingById(id, row.mappingId).subscribe(resp => {
            console.log(resp);
            let queryParams = {
                'sourceTransDetId': resp.sourceTransDetId,
                'targetTransDetId': resp.targetTransDetId,
                'mdmtMessageMappingDet': resp.mdmtMessageMappingDet,
                'responseData': row
            };
            console.log(queryParams);
            this.addSystem.sendNavParam(queryParams);
            this.router.navigateByUrl('/sias-v2/editRuleMapping');
        });
    }
};
ListRuleMappingComponent.ctorParameters = () => [
    { type: src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_3__["RulesService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"] },
    { type: src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_5__["AddSystemService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_angular_material__WEBPACK_IMPORTED_MODULE_2__["MatPaginator"], { static: true }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatPaginator"])
], ListRuleMappingComponent.prototype, "paginator", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_angular_material__WEBPACK_IMPORTED_MODULE_2__["MatSort"], { static: false }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatSort"])
], ListRuleMappingComponent.prototype, "sort", void 0);
ListRuleMappingComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-list-rule-mapping',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./list-rule-mapping.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/list-rule-mapping/list-rule-mapping.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./list-rule-mapping.component.css */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/list-rule-mapping/list-rule-mapping.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_3__["RulesService"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"], src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_5__["AddSystemService"]])
], ListRuleMappingComponent);



/***/ }),

/***/ "./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/rule-mapping.component.css":
/*!*******************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/rule-mapping.component.css ***!
  \*******************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/* ::ng-deep .mat-form-field-flex > .mat-form-field-infix { padding: 0.4em 0px !important;}\r\n::ng-deep .mat-form-field-label-wrapper { top: -1.5em; }\r\n\r\n::ng-deep .mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label {\r\n    transform: translateY(-1.1em) scale(.75);\r\n    width: 80.33333%;\r\n} */\r\n/* ::ng-deep .mat-form-field-flex > .mat-form-field-infix { width: 30% !important;} */\r\n::ng-deep.mat-form-field-appearance-outline .mat-form-field-flex\r\n{\r\n    width: 170px !important;\r\n    height: 50px !important;\r\n}\r\n.mat-raised-button {\r\n    width: -webkit-fit-content;\r\n    width: -moz-fit-content;\r\n    width: fit-content;\r\n    height: 20px;\r\n    line-height: 27px;\r\n    min-height: 27px;\r\n    vertical-align: top;\r\n    font-size: 11px;\r\n    padding: 0 0;\r\n    margin: 0;\r\n    }\r\n#customers {\r\n        font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\r\n        border-collapse: collapse;\r\n        width: 100%;\r\n      }\r\n#customers td, #customers th {\r\n        border: 1px solid #ddd;\r\n        padding: 8px;\r\n        text-align: center;\r\n        \r\n      }\r\n#customers tr:nth-child(even){background-color: #f2f2f2;}\r\n#customers th {\r\n        padding-top: 12px;\r\n        padding-bottom: 12px;\r\n        text-align: left;\r\n        background-color:rgb(97, 178, 216);\r\n        color: white;\r\n      }\r\n.readonly-wrapper {\r\n        pointer-events:none;\r\n      }\r\n.readonly-wrapper .readonly-block {\r\n        pointer-events: none;\r\n      }\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9hZGQtc3lzdGVtLWluY29taW5nLW1lc3NhZ2UtdGNwL3J1bGUtbWFwcGluZy9ydWxlLW1hcHBpbmcuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFDSCxxRkFBcUY7QUFDckY7O0lBRUksdUJBQXVCO0lBQ3ZCLHVCQUF1QjtBQUMzQjtBQUNBO0lBQ0ksMEJBQWtCO0lBQWxCLHVCQUFrQjtJQUFsQixrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLGVBQWU7SUFDZixZQUFZO0lBQ1osU0FBUztJQUNUO0FBQ0E7UUFDSSx5REFBeUQ7UUFDekQseUJBQXlCO1FBQ3pCLFdBQVc7TUFDYjtBQUNBO1FBQ0Usc0JBQXNCO1FBQ3RCLFlBQVk7UUFDWixrQkFBa0I7O01BRXBCO0FBRUEsOEJBQThCLHlCQUF5QixDQUFDO0FBRXhEO1FBQ0UsaUJBQWlCO1FBQ2pCLG9CQUFvQjtRQUNwQixnQkFBZ0I7UUFDaEIsa0NBQWtDO1FBQ2xDLFlBQVk7TUFDZDtBQUVBO1FBQ0UsbUJBQW1CO01BQ3JCO0FBRUE7UUFDRSxvQkFBb0I7TUFDdEIiLCJmaWxlIjoic3JjL2FwcC92aWV3cy9zaWFzLXYyL2FkZC1zeXN0ZW0taW5jb21pbmctbWVzc2FnZS10Y3AvcnVsZS1tYXBwaW5nL3J1bGUtbWFwcGluZy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyogOjpuZy1kZWVwIC5tYXQtZm9ybS1maWVsZC1mbGV4ID4gLm1hdC1mb3JtLWZpZWxkLWluZml4IHsgcGFkZGluZzogMC40ZW0gMHB4ICFpbXBvcnRhbnQ7fVxyXG46Om5nLWRlZXAgLm1hdC1mb3JtLWZpZWxkLWxhYmVsLXdyYXBwZXIgeyB0b3A6IC0xLjVlbTsgfVxyXG5cclxuOjpuZy1kZWVwIC5tYXQtZm9ybS1maWVsZC1hcHBlYXJhbmNlLW91dGxpbmUubWF0LWZvcm0tZmllbGQtY2FuLWZsb2F0Lm1hdC1mb3JtLWZpZWxkLXNob3VsZC1mbG9hdCAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xLjFlbSkgc2NhbGUoLjc1KTtcclxuICAgIHdpZHRoOiA4MC4zMzMzMyU7XHJcbn0gKi9cclxuLyogOjpuZy1kZWVwIC5tYXQtZm9ybS1maWVsZC1mbGV4ID4gLm1hdC1mb3JtLWZpZWxkLWluZml4IHsgd2lkdGg6IDMwJSAhaW1wb3J0YW50O30gKi9cclxuOjpuZy1kZWVwLm1hdC1mb3JtLWZpZWxkLWFwcGVhcmFuY2Utb3V0bGluZSAubWF0LWZvcm0tZmllbGQtZmxleFxyXG57XHJcbiAgICB3aWR0aDogMTcwcHggIWltcG9ydGFudDtcclxuICAgIGhlaWdodDogNTBweCAhaW1wb3J0YW50O1xyXG59XHJcbi5tYXQtcmFpc2VkLWJ1dHRvbiB7XHJcbiAgICB3aWR0aDogZml0LWNvbnRlbnQ7XHJcbiAgICBoZWlnaHQ6IDIwcHg7XHJcbiAgICBsaW5lLWhlaWdodDogMjdweDtcclxuICAgIG1pbi1oZWlnaHQ6IDI3cHg7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xyXG4gICAgZm9udC1zaXplOiAxMXB4O1xyXG4gICAgcGFkZGluZzogMCAwO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgfVxyXG4gICAgI2N1c3RvbWVycyB7XHJcbiAgICAgICAgZm9udC1mYW1pbHk6IFwiVHJlYnVjaGV0IE1TXCIsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XHJcbiAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgfVxyXG4gICAgICAjY3VzdG9tZXJzIHRkLCAjY3VzdG9tZXJzIHRoIHtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xyXG4gICAgICAgIHBhZGRpbmc6IDhweDtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgICNjdXN0b21lcnMgdHI6bnRoLWNoaWxkKGV2ZW4pe2JhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7fVxyXG4gICAgICBcclxuICAgICAgI2N1c3RvbWVycyB0aCB7XHJcbiAgICAgICAgcGFkZGluZy10b3A6IDEycHg7XHJcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDEycHg7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOnJnYig5NywgMTc4LCAyMTYpO1xyXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgICAgfVxyXG4gICAgIFxyXG4gICAgICAucmVhZG9ubHktd3JhcHBlciB7XHJcbiAgICAgICAgcG9pbnRlci1ldmVudHM6bm9uZTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLnJlYWRvbmx5LXdyYXBwZXIgLnJlYWRvbmx5LWJsb2NrIHtcclxuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcclxuICAgICAgfSJdfQ== */");

/***/ }),

/***/ "./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/rule-mapping.component.ts":
/*!******************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/rule-mapping.component.ts ***!
  \******************************************************************************************************/
/*! exports provided: RuleMappingComponent, MdmtMessageMapping, MdmtMessageMappingDet, ruleMapDto */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleMappingComponent", function() { return RuleMappingComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MdmtMessageMapping", function() { return MdmtMessageMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MdmtMessageMappingDet", function() { return MdmtMessageMappingDet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ruleMapDto", function() { return ruleMapDto; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/services/rules/rules.service */ "./src/app/shared/services/rules/rules.service.ts");
/* harmony import */ var src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/services/addSys/add-system.service */ "./src/app/shared/services/addSys/add-system.service.ts");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");







let RuleMappingComponent = class RuleMappingComponent {
    constructor(rulemap, fb, snack, addSystem) {
        this.rulemap = rulemap;
        this.fb = fb;
        this.snack = snack;
        this.addSystem = addSystem;
        this.fieldNoData = [];
        this.disableFetchBtn = false;
        this.disableSubmitBtn = false;
        this.disableResetBtn = false;
        this.showAuditLog = false;
        this.fieldValueData = [];
        this.showFieldNoValue = 1;
        this.xmlLength = [];
        this.temparray = [];
        this.rulemappingDetail = [];
        this.rulemapping = new MdmtMessageMapping();
        this.rulemappingDest = new MdmtMessageMapping();
        this.mappingObj = new MdmtMessageMapping();
        this.ruleDto = new ruleMapDto();
        this.afterSubmit = false;
    }
    ngOnInit() {
        this.currentUser = localStorage.getItem('userFromLogin');
        this.gettingExternalsystem();
        this.rulemappingDetail.push({ id: '', defaultValue: '', messageMappingId: '', sourceTransDetId: '', targetTransDetId: '', sourceKey: '', destinationKey: '' });
        this.fetchingIso();
    }
    gettingExternalsystem() {
        this.rulemap.gettingExternalsystem().subscribe(extSysResp => {
            console.log(extSysResp);
            this.externalSystem = extSysResp;
            this.sourcesysdata = this.externalSystem;
            this.temparray = this.externalSystem;
        }, (err) => {
            console.log("err", err);
        });
    }
    fetchDestination() {
        console.log(this.rulemapping);
        this.disableFetchBtn = true;
        this.showfetchAll = true;
        this.showDestination = true;
        this.showSource = true;
    }
    onFieldNameChange(event) {
        console.log(event.value);
        let value = event.value;
        if (event.value) {
            var item = this.sourceIsoResp.find(element => element.fieldValue == value);
            console.log(item);
            this.showFieldNoValue = item.fieldNo;
            console.log("ssss", this.showFieldNoValue);
        }
    }
    add() {
        this.rulemappingDetail.push({ id: '', defaultValue: '', messageMappingId: '', sourceTransDetId: '', targetTransDetId: '', sourceKey: '', destinationKey: '' });
    }
    delete(i) {
        this.rulemappingDetail.splice(i, 1);
    }
    fetchingIso() {
        this.addSystem.fetchingIsoForTcp().subscribe(isoResp => {
            console.log("iss", isoResp);
            this.isoRespData = isoResp;
            // this.fieldNoData=isoResp;
            this.messageBasisIso = isoResp.map((data) => {
                return data.messageBasis;
            });
            this.fieldNoData = isoResp.map((data) => {
                return data.messageBasis;
            });
            this.fieldValueData = isoResp.map((data) => {
                return data.messageKey;
            });
        });
    }
    onSourseSelection(event) {
        console.log(event);
        this.sourseSys = event.option.value;
        this.showSource = false;
        this.showDestination = false;
        this.rulemap.gettingTranslationData(this.sourseSys).subscribe(resp => {
            console.log(resp);
            if (resp != null) {
                this.showfetchAll = false;
                this.rulemapping = resp;
                this.sourcesysdata = resp;
                this.gettingoperationAandserv(resp.systemCode, resp.messageType);
                this.rulemapping.sourceTranslationId = resp.transId;
                // this.rulemappingDetail=resp.msgTransDetails;
                resp.msgTransDetails.map(el => {
                    this.sourceTransDetId = el.translationId;
                });
            }
            else {
                this.showfetchAll = true;
            }
        }, (err) => {
            this.showfetchAll = true;
        });
        this.externalSystem = this.temparray;
    }
    onsearchingTablName(event) {
        console.log(event.target.value);
        console.log("this is arr", this.sourcesysdata);
        if (this.sourcesysdata) {
            let data = this.sourcesysdata.filter(function (e) {
                let extValue = e.toLowerCase();
                let value = event.target.value.toLowerCase();
                console.log(extValue, value);
                // return !extValue.indexOf(value);//changed this for 1192
                return extValue.search(value) > -1;
            });
            console.log(data);
            this.externalSystem = data;
        }
    }
    onSelectionOFMessageType(event) {
        console.log("e", event);
        this.showSource = false;
        this.showDestination = false;
        this.gettingoperationAandserv(this.sourseSys, event.value);
    }
    gettingoperationAandserv(system, msgtype) {
        console.log(system);
        this.rulemap.gettingoperationAndService(system, msgtype, this.currentUser).subscribe(sourceResp => {
            console.log(sourceResp);
            this.showfetchAll = false;
            this.sourceoperation = sourceResp.OPERATION;
            this.sourceService = sourceResp.SERVICE;
            this.sourceData = sourceResp.MdmtSystemService;
            this.sourceLabel = sourceResp.MdmtSystemChannel[0].messageChannel;
            if (this.sourceLabel == 'Https/Http') {
                this.matlabelSource1 = "Tag";
                this.matlabelSource2 = null;
            }
            if (this.sourceLabel == 'TCP/IP') {
                this.matlabelSource1 = "Filed No";
                this.matlabelSource2 = "Filed Name";
            }
            // this.translationData=translationResp;
        }, (err => {
            console.log(err);
            sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire({ text: 'External system data not present.' });
            this.showfetchAll = true;
        }));
    }
    ondestinationSource(event) {
        console.log(event.value);
        this.showSource = false;
        this.showDestination = false;
        this.destinationSource = event.option.value;
        this.rulemap.gettingTranslationData(this.destinationSource).subscribe(resp => {
            console.log(resp);
            if (resp != null) {
                this.showfetchAll = false;
                this.rulemappingDest = resp;
                this.rulemapping.targetTranslationId = resp.transId;
                resp.msgTransDetails.map(el => {
                    this.targetTransDetId = el.translationId;
                });
                this.gettingmsgTypeAndDestination(resp.systemCode, resp.messageType);
            }
            else {
                this.showfetchAll = true;
            }
        }, (err) => {
            this.showfetchAll = true;
        });
        this.externalSystem = this.temparray;
    }
    msgTypeOfDestination(event) {
        console.log(event.value);
        this.showDestination = false;
        this.showSource = false;
        this.gettingmsgTypeAndDestination(this.destinationSource, event.value);
    }
    gettingmsgTypeAndDestination(destinationSource, msgtype) {
        this.rulemap.gettingoperationAndService(destinationSource, msgtype, this.currentUser).subscribe(destinationResp => {
            console.log(destinationResp);
            this.showfetchAll = false;
            this.destinationOperation = destinationResp.OPERATION;
            this.destinationService = destinationResp.SERVICE;
            this.destinationData = destinationResp.MdmtSystemService;
            this.labelsDestination = destinationResp.MdmtSystemChannel[0].messageChannel;
            if (this.labelsDestination == 'Https/Http') {
                this.matLabel = "Tag";
                this.matLabel2 = null;
            }
            else if (this.labelsDestination == 'TCP/IP') {
                this.matLabel = "Filed No";
                this.matLabel2 = "Filed Name";
            }
            // this.rulemappingData=[...this.sourceData,...this.destinationData]
            console.log(this.rulemappingData);
            // this.translationData=translationResp;
        }, (err => {
            console.log(err);
            sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire({ text: 'External system data not present.' });
            this.showfetchAll = true;
        }));
    }
    onReset() {
        this.disableSubmitBtn = false;
    }
    onsaveRuleMapping() {
        console.log(this.rulemappingDetail);
        // 
        // console.log(this.rulemapping);
        this.mappingObj.msgMappingDetails = this.rulemappingDetail;
        this.mappingObj.sourceTranslationId = this.rulemapping.sourceTranslationId;
        this.mappingObj.targetTranslationId = this.rulemapping.targetTranslationId;
        this.mappingObj.creatorId = this.currentUser;
        console.log(this.mappingObj);
        this.rulemap.submittingruleMapping(this.mappingObj, this.currentUser).subscribe(resp => {
            console.log(resp);
            if (resp) {
                this.addSysRespData = resp;
                this.showAuditLog = true;
                this.afterSubmit = true;
                this.disableSubmitBtn = true;
                this.disableResetBtn = true;
                sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire({ text: 'Record Saved SuccessFully' });
            }
        }, (err => {
            console.log(err.error.text);
            // Swal.fire({text:'Internal Server Error'});
            sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire({ text: 'Rule mapping data already present for source and destination systems.' });
            // Swal.fire({text:err.error.text});
        }));
    }
};
RuleMappingComponent.ctorParameters = () => [
    { type: src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__["RulesService"] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormBuilder"] },
    { type: _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatSnackBar"] },
    { type: src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__["AddSystemService"] }
];
RuleMappingComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-rule-mapping',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./rule-mapping.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/rule-mapping.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./rule-mapping.component.css */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/rule-mapping.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__["RulesService"],
        _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormBuilder"],
        _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatSnackBar"], src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__["AddSystemService"]])
], RuleMappingComponent);

class MdmtMessageMapping {
}
class MdmtMessageMappingDet {
}
class ruleMapDto {
}


/***/ }),

/***/ "./src/app/views/sias-v2/add-system-incoming-message-tcp/view-or-edit-external-system/view-or-edit-external-system.component.css":
/*!***************************************************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/add-system-incoming-message-tcp/view-or-edit-external-system/view-or-edit-external-system.component.css ***!
  \***************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".example-container {\r\n    height: 250px;\r\n    overflow: auto;\r\n  }\r\n  .mat-raised-button {\r\n    width: -webkit-fit-content;\r\n    width: -moz-fit-content;\r\n    width: fit-content;\r\n    height: 20px;\r\n    line-height: 27px;\r\n    min-height: 27px;\r\n    vertical-align: top;\r\n    font-size: 11px;\r\n    padding: 0 0;\r\n    margin: 0;\r\n    }\r\n  #customers {\r\n        font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\r\n        border-collapse: collapse;\r\n        width: 100%;\r\n        }\r\n  #customers td, #customers th {\r\n        border: 1px solid #ddd;\r\n        padding: 8px;\r\n        text-align: center;\r\n        \r\n        }\r\n  #customers tr:nth-child(even){background-color: #f2f2f2;}\r\n  #customers th {\r\n        padding-top: 12px;\r\n        padding-bottom: 12px;\r\n        text-align: left;\r\n        background-color:rgb(97, 178, 216);\r\n        color: white;\r\n        }\r\n  .baiscInfocard\r\n  {\r\n    width: 63%;\r\n   margin-left: 15%;\r\n  }\r\n  ::ng-deep .mat-form-field-flex > .mat-form-field-infix { padding: 0.5em 0px !important;}\r\n  mat-form-field{\r\n    width: 100%;\r\n    \r\n  }\r\n  #chFile{\r\n    display: none;\r\n    }\r\n  .btnFile{\r\n    background-color: rgb(130, 130, 173);\r\n    margin-right: 30px;\r\n    width: 110px;\r\n    }\r\n  table {\r\n      border-collapse: initial;\r\n      width:100%;\r\n      text-align: center !important;\r\n    }\r\n  tr:nth-child(even) {\r\n      height: 25px !important;\r\n    }\r\n  th {\r\n      font-weight: small;\r\n      height: 25px !important;\r\n      text-align: center;\r\n    }\r\n  tr {\r\n      font-weight: small;\r\n      height: 25px !important;\r\n      text-align: center;\r\n    }\r\n  .readonly-wrapper {\r\n      pointer-events:none;\r\n    }\r\n  .readonly-wrapper .readonly-block {\r\n      pointer-events: none;\r\n    }\r\n    \r\n  \r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9hZGQtc3lzdGVtLWluY29taW5nLW1lc3NhZ2UtdGNwL3ZpZXctb3ItZWRpdC1leHRlcm5hbC1zeXN0ZW0vdmlldy1vci1lZGl0LWV4dGVybmFsLXN5c3RlbS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksYUFBYTtJQUNiLGNBQWM7RUFDaEI7RUFDQTtJQUNFLDBCQUFrQjtJQUFsQix1QkFBa0I7SUFBbEIsa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQixlQUFlO0lBQ2YsWUFBWTtJQUNaLFNBQVM7SUFDVDtFQUNBO1FBQ0kseURBQXlEO1FBQ3pELHlCQUF5QjtRQUN6QixXQUFXO1FBQ1g7RUFDQTtRQUNBLHNCQUFzQjtRQUN0QixZQUFZO1FBQ1osa0JBQWtCOztRQUVsQjtFQUVBLDhCQUE4Qix5QkFBeUIsQ0FBQztFQUV4RDtRQUNBLGlCQUFpQjtRQUNqQixvQkFBb0I7UUFDcEIsZ0JBQWdCO1FBQ2hCLGtDQUFrQztRQUNsQyxZQUFZO1FBQ1o7RUFFTjs7SUFFRSxVQUFVO0dBQ1gsZ0JBQWdCO0VBQ2pCO0VBRUEseURBQXlELDZCQUE2QixDQUFDO0VBR3ZGO0lBQ0UsV0FBVzs7RUFFYjtFQUVBO0lBQ0UsYUFBYTtJQUNiO0VBQ0E7SUFDQSxvQ0FBb0M7SUFDcEMsa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWjtFQUNBO01BQ0Usd0JBQXdCO01BQ3hCLFVBQVU7TUFDViw2QkFBNkI7SUFDL0I7RUFJQTtNQUNFLHVCQUF1QjtJQUN6QjtFQUVBO01BQ0Usa0JBQWtCO01BQ2xCLHVCQUF1QjtNQUN2QixrQkFBa0I7SUFDcEI7RUFDQTtNQUNFLGtCQUFrQjtNQUNsQix1QkFBdUI7TUFDdkIsa0JBQWtCO0lBQ3BCO0VBRUE7TUFDRSxtQkFBbUI7SUFDckI7RUFFQTtNQUNFLG9CQUFvQjtJQUN0QiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL3NpYXMtdjIvYWRkLXN5c3RlbS1pbmNvbWluZy1tZXNzYWdlLXRjcC92aWV3LW9yLWVkaXQtZXh0ZXJuYWwtc3lzdGVtL3ZpZXctb3ItZWRpdC1leHRlcm5hbC1zeXN0ZW0uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5leGFtcGxlLWNvbnRhaW5lciB7XHJcbiAgICBoZWlnaHQ6IDI1MHB4O1xyXG4gICAgb3ZlcmZsb3c6IGF1dG87XHJcbiAgfVxyXG4gIC5tYXQtcmFpc2VkLWJ1dHRvbiB7XHJcbiAgICB3aWR0aDogZml0LWNvbnRlbnQ7XHJcbiAgICBoZWlnaHQ6IDIwcHg7XHJcbiAgICBsaW5lLWhlaWdodDogMjdweDtcclxuICAgIG1pbi1oZWlnaHQ6IDI3cHg7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xyXG4gICAgZm9udC1zaXplOiAxMXB4O1xyXG4gICAgcGFkZGluZzogMCAwO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgfVxyXG4gICAgI2N1c3RvbWVycyB7XHJcbiAgICAgICAgZm9udC1mYW1pbHk6IFwiVHJlYnVjaGV0IE1TXCIsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XHJcbiAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICB9XHJcbiAgICAgICAgI2N1c3RvbWVycyB0ZCwgI2N1c3RvbWVycyB0aCB7XHJcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2RkZDtcclxuICAgICAgICBwYWRkaW5nOiA4cHg7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAjY3VzdG9tZXJzIHRyOm50aC1jaGlsZChldmVuKXtiYWNrZ3JvdW5kLWNvbG9yOiAjZjJmMmYyO31cclxuICAgICAgICBcclxuICAgICAgICAjY3VzdG9tZXJzIHRoIHtcclxuICAgICAgICBwYWRkaW5nLXRvcDogMTJweDtcclxuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMTJweDtcclxuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6cmdiKDk3LCAxNzgsIDIxNik7XHJcbiAgICAgICAgY29sb3I6IHdoaXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgIFxyXG4gIC5iYWlzY0luZm9jYXJkXHJcbiAge1xyXG4gICAgd2lkdGg6IDYzJTtcclxuICAgbWFyZ2luLWxlZnQ6IDE1JTtcclxuICB9XHJcbiAgXHJcbiAgOjpuZy1kZWVwIC5tYXQtZm9ybS1maWVsZC1mbGV4ID4gLm1hdC1mb3JtLWZpZWxkLWluZml4IHsgcGFkZGluZzogMC41ZW0gMHB4ICFpbXBvcnRhbnQ7fVxyXG4gIFxyXG4gIFxyXG4gIG1hdC1mb3JtLWZpZWxke1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBcclxuICB9XHJcbiAgICBcclxuICAjY2hGaWxle1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuICAgIC5idG5GaWxle1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDEzMCwgMTMwLCAxNzMpO1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAzMHB4O1xyXG4gICAgd2lkdGg6IDExMHB4O1xyXG4gICAgfVxyXG4gICAgdGFibGUge1xyXG4gICAgICBib3JkZXItY29sbGFwc2U6IGluaXRpYWw7XHJcbiAgICAgIHdpZHRoOjEwMCU7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG4gIFxyXG4gICAgXHJcbiAgICBcclxuICAgIHRyOm50aC1jaGlsZChldmVuKSB7XHJcbiAgICAgIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0aCB7XHJcbiAgICAgIGZvbnQtd2VpZ2h0OiBzbWFsbDtcclxuICAgICAgaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuICAgIHRyIHtcclxuICAgICAgZm9udC13ZWlnaHQ6IHNtYWxsO1xyXG4gICAgICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcclxuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAucmVhZG9ubHktd3JhcHBlciB7XHJcbiAgICAgIHBvaW50ZXItZXZlbnRzOm5vbmU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC5yZWFkb25seS13cmFwcGVyIC5yZWFkb25seS1ibG9jayB7XHJcbiAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgIl19 */");

/***/ }),

/***/ "./src/app/views/sias-v2/add-system-incoming-message-tcp/view-or-edit-external-system/view-or-edit-external-system.component.ts":
/*!**************************************************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/add-system-incoming-message-tcp/view-or-edit-external-system/view-or-edit-external-system.component.ts ***!
  \**************************************************************************************************************************************/
/*! exports provided: ViewOrEditExternalSystemComponent, AddSystemNew, MdmtSystemChannel, MdmtSystemService, MdmtSystemDto */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewOrEditExternalSystemComponent", function() { return ViewOrEditExternalSystemComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddSystemNew", function() { return AddSystemNew; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MdmtSystemChannel", function() { return MdmtSystemChannel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MdmtSystemService", function() { return MdmtSystemService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MdmtSystemDto", function() { return MdmtSystemDto; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/services/addSys/add-system.service */ "./src/app/shared/services/addSys/add-system.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");





let ViewOrEditExternalSystemComponent = class ViewOrEditExternalSystemComponent {
    // nodeAndTagName:[]=[{'node':'','tagName':''}]
    constructor(addSystem, cdr, router) {
        this.addSystem = addSystem;
        this.cdr = cdr;
        this.router = router;
        this.tabText = "Incoming";
        this.mdbQueueInc = ['IBM', 'JMS'];
        this.deleted = false;
        this.authorizeDone = false;
        this.addSysBasic = new AddSystemNew(); //basic info object
        this.mdmtSystemChannel = []; //both incoming and outgoing
        this.mdmtSystemChannelIncAll = []; //only for all-->incoming protocol
        this.mdmtSystemChannelOutAll = []; //only for all-->incoming protocol
        // sending to backedn
        this.mdmtSystemDto = new MdmtSystemDto();
        this.incomingIntegrationProtocol = [];
        this.mdmtSystemService = []; //this is same for iso,xml and json every thing
        this.mdmtSystemServiceAllInc = []; //only aLl Incoming service(3rd)screen
        this.mdmtSystemServiceAllOut = []; //only All outgoing service(3rd )screen
        // chceking
        this.protocolForBothIncOut = new MdmtSystemChannel();
        this.protocolAllInc = new MdmtSystemChannel; //only All outgoing service(3rd )screen
        this.protocolAllOut = new MdmtSystemChannel; //only All Inc service(3rd )screen
        this.selectedIndex = 0;
        this.messageBasisIso = [];
        this.invalidIp = true;
        this.invalidIp1 = true;
        this.isoRespData = [];
        this.isEdit = true;
        this.desSystem = [];
        this.messageBasisIsoAllOut = [];
        this.disableupdtae = false;
    }
    ngOnInit() {
        this.currentUser = localStorage.getItem('userFromLogin');
        this.navSubscription = this.addSystem.getNavParam.subscribe(data => this.editAddSysResp = data);
        console.log(this.editAddSysResp);
        this.mdmtSystemService.push({ dataType: '', headerValue: '', id: '', messageBasis: '', messageKey: '', systemChannelId: '', encryption: '', headerTag: '' });
        this.mdmtSystemServiceAllOut.push({ id: '', dataType: '', headerValue: '', messageBasis: '', messageKey: '', systemChannelId: '', headerTag: '', encryption: '' });
        this.mdmtSystemServiceAllInc.push({ id: '', dataType: '', headerValue: '', messageBasis: '', messageKey: '', systemChannelId: '', encryption: '', headerTag: '' });
        this.fetchingHeadertag();
        this.currentUser = localStorage.getItem('userFromLogin');
        this.addSysBasic.systemCode = this.editAddSysResp["systemCode"];
        this.addSysBasic.systemName = this.editAddSysResp["systemName"];
        this.addSysBasic.serviceType = this.editAddSysResp["serviceType"];
        this.addSysBasic.sourceIp = this.editAddSysResp["sourceIp"];
        this.addSysBasic.sourcePort = this.editAddSysResp["sourcePort"];
        this.addSysBasic.medianIp = this.editAddSysResp["medianIp"];
        this.addSysBasic.medianPort = this.editAddSysResp["medianPort"];
        this.addSysBasic.messsageType = this.editAddSysResp["messsageType"];
        this.addSysBasic.systemId = this.editAddSysResp["systemId"];
        // audit log
        this.addSysBasic.approvedEver = this.editAddSysResp["approvedEver"];
        this.addSysBasic.recordStatus = this.editAddSysResp["recordStatus"];
        this.addSysBasic.approvedStatus = this.editAddSysResp["approvedStatus"];
        this.addSysBasic.approvedTime = this.editAddSysResp["approvedTime"];
        this.addSysBasic.approverId = this.editAddSysResp["approverId"];
        this.addSysBasic.createdTime = this.editAddSysResp["createdTime"];
        this.addSysBasic.creatorId = this.editAddSysResp["creatorId"];
        this.addSysBasic.versionNo = this.editAddSysResp["versionNo"];
        this.addSysBasic.recordStatus = this.editAddSysResp["recordStatus"];
        console.log(this.addSysBasic.recordStatus);
        if (this.addSysBasic.recordStatus == "C") {
            console.log(this.addSysBasic.recordStatus);
            this.reopenBtn = false;
            this.authBtnHide = true;
        }
        console.log("chhh", this.editAddSysResp['sysChannel'][0].sysService);
        // this.protocolForBothIncOut.messageChannel=this.editAddSysResp["sysChannel"][0].messageChannel;
        this.msgType = this.addSysBasic.messsageType;
        if (this.msgType == 'I') {
            this.msgType = 'Incoming';
        }
        else if (this.msgType == 'O') {
            this.msgType = 'Outgoing';
        }
        // this.protocolForBothIncOut.messageChannel=this.editAddSysResp["sysChannel"][0]
        // this.cdr.markForCheck();
        if (this.editAddSysResp["sysChannel"][0]) {
            console.log("in if");
            this.protocolForBothIncOut.messageChannel = this.editAddSysResp["sysChannel"][0].messageChannel;
            this.protocolForBothIncOut.systemId = this.addSysBasic.systemId;
            this.onProtocalSlection(this.protocolForBothIncOut.messageChannel);
            this.protocolForBothIncOut.messageFormat = this.editAddSysResp["sysChannel"][0].messageFormat;
            this.protocolForBothIncOut.channelId = this.editAddSysResp["sysChannel"][0].channelId;
            this.incDataType = this.protocolForBothIncOut.messageFormat;
            this.protocolAllInc.messageChannel = this.editAddSysResp["sysChannel"][0].messageChannel;
            this.protocolAllInc.messageFormat = this.editAddSysResp["sysChannel"][0].messageFormat;
            this.protocolAllInc.systemId = this.addSysBasic.systemId;
            this.onProtocalSlectionIncoming(this.protocolAllInc.messageChannel);
            this.incomingDataypeSelection(this.protocolAllInc.messageChannel);
            this.protocolAllInc.channelId = this.editAddSysResp["sysChannel"][0].channelId;
            this.mdmtSystemService = this.editAddSysResp["sysChannel"][0].sysService;
            this.mdmtSystemService.map(el => {
                if (el.messageKey != null) {
                    return el.messageKey = el.messageKey.toString() + "<" + el.messageBasis.toString();
                }
            });
            this.mdmtSystemServiceAllInc.map(el => {
                if (el.messageKey != null) {
                    return el.messageKey = el.messageKey.toString() + "<" + el.messageBasis.toString();
                }
            });
            this.mdmtSystemServiceAllInc = this.editAddSysResp["sysChannel"][0].sysService;
            this.messageBasisIso = this.mdmtSystemServiceAllInc.map(el => el.messageBasis);
            console.log("serv", this.mdmtSystemService);
        }
        if (this.editAddSysResp["sysChannel"][1]) {
            console.log("in else if");
            // this.protocolAllInc.messageChannel=this.editAddSysResp["sysChannel"][0].messageChannel;
            // this.protocolAllInc.messageFormat=this.editAddSysResp["sysChannel"][0].messageFormat;
            this.protocolAllOut.channelId = this.editAddSysResp["sysChannel"][1].channelId;
            this.protocolAllOut.systemId = this.addSysBasic.systemId;
            this.protocolAllOut.messageChannel = this.editAddSysResp["sysChannel"][1].messageChannel;
            this.protocolAllOut.messageFormat = this.editAddSysResp["sysChannel"][1].messageFormat;
            this.mdmtSystemServiceAllOut = this.editAddSysResp["sysChannel"][1].sysService;
            this.mdmtSystemServiceAllOut.map(el => {
                if (el.messageKey != null) {
                    return el.messageKey = el.messageKey.toString() + "<" + el.messageBasis.toString();
                }
            });
            this.messageBasisIsoAllOut = this.mdmtSystemServiceAllOut.map(el => el.messageBasis);
            this.onProtocalSlectionOutGoing(this.protocolAllOut.messageChannel);
        }
        // this.mdmtSystemService=this.editAddSysResp["mdmtSystemService"];
        // // this.addSysRespData = this.editAddSysResp["mdmtSystem"];
        console.log(this.currentUser, this.addSysBasic.creatorId);
        // this.onProtocalSlection(this.editAddSysResp["sysChannel"][0].messageChannel);
        this.cdr.markForCheck();
        // this.onProtocalSlectionOutGoing(this.protocolAllOut.messageChannel);
    }
    onNextOfBasicInfo() {
        if (this.addSysBasic.medianIp === this.addSysBasic.sourceIp) {
            sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a.fire({ text: 'Median IP and External IP should not be same' });
            return;
        }
        if (this.addSysBasic.medianPort === this.addSysBasic.sourcePort) {
            sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a.fire({ text: 'Median Port and External Port should not be same' });
            return;
        }
        if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
            this.hideBasic = true;
            this.showProtocol = true;
            this.showTab = false;
        }
        else if (this.addSysBasic.messsageType == 'A') {
            this.showTab = true;
            this.hideBasic = true;
            this.showProtocol = false;
            this.showProtocolForAllInc = true;
        }
    }
    isValidIpv4Addr(event) {
        this.invalidIp = /^(?=\d+\.\d+\.\d+\.\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.?){4}$/.test(event.target.value);
        return /^(?=\d+\.\d+\.\d+\.\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.?){4}$/.test(event.target.value);
    }
    isValidIpv4Addr1(event) {
        this.invalidIp1 = /^(?=\d+\.\d+\.\d+\.\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.?){4}$/.test(event.target.value);
        return /^(?=\d+\.\d+\.\d+\.\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.?){4}$/.test(event.target.value);
    }
    onProtocalSlectionIncoming(protocol) {
        console.log(protocol);
        this.dataType = [];
        this.incProtocol = protocol;
        if (protocol == 'TCP/IP') {
            this.dataType = ['ISO 8583 1987', 'ISO 8583 1993', 'ISO 8583 2003'];
        }
        else if (protocol == 'Https/Http') {
            this.dataType = [];
            this.dataType = ['XML', 'JSON'];
        }
        else if (protocol == 'MDB') {
            this.dataType = [];
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
        else if (protocol == 'EJB') {
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
        else if (protocol == 'DB Connection') {
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
    }
    onsystemMessageSelection(event) {
        if (event == 'I') {
            event = "Incoming";
            this.msgType = event;
        }
        else if (event == 'O') {
            event = "Outgoing";
            this.msgType = event;
        }
    }
    // Protocol sceltion
    onProtocalSlection(protocol) {
        console.log(protocol);
        this.dataType = [];
        this.incProtocol = protocol;
        if (protocol == 'TCP/IP') {
            this.dataType = ['ISO 8583 1987', 'ISO 8583 1993', 'ISO 8583 2003'];
        }
        else if (protocol == 'Https/Http') {
            this.dataType = [];
            this.dataType = ['XML', 'JSON'];
        }
        else if (protocol == 'MDB') {
            this.dataType = [];
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
        else if (protocol == 'EJB') {
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
        else if (protocol == 'DB Connection') {
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
    }
    allowNumbersOnly(n) {
        const pattern = /[0-9\+\-\ ]/;
        let inputChar = String.fromCharCode(n.charCode);
        if (!pattern.test(inputChar) && n.charCode != '0') {
            n.preventDefault();
        }
    }
    // protocol selection outgoing
    onProtocalSlectionOutGoing(protocol) {
        console.log(protocol);
        this.dataType = [];
        this.incProtocol = protocol;
        if (protocol == 'TCP/IP') {
            this.dataType = ['ISO 8583 1987', 'ISO 8583 1993', 'ISO 8583 2003'];
        }
        else if (protocol == 'Https/Http') {
            this.dataType = [];
            this.dataType = ['XML', 'JSON'];
        }
        else if (protocol == 'MDB') {
            this.dataType = [];
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
        else if (protocol == 'EJB') {
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
        else if (protocol == 'DB Connection') {
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
    }
    incomingDataypeSelection(dataType) {
        console.log(dataType);
        this.dataTypeOfIncAll = [];
        // this.dataTypeOfIncAll=dataType;
        this.incProtocol = dataType;
        if (dataType == 'TCP/IP') {
            this.dataTypeOfIncAll = ['ISO 8583 1987', 'ISO 8583 1993', 'ISO 8583 2003'];
        }
        else if (dataType == 'Https/Http') {
            this.dataTypeOfIncAll = [];
            this.dataTypeOfIncAll = ['XML', 'JSON'];
        }
        else if (dataType == 'MDB') {
            this.dataTypeOfIncAll = [];
            this.dataTypeOfIncAll = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
        else if (dataType == 'EJB') {
            this.dataTypeOfIncAll = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
        else if (dataType == 'DB Connection') {
            this.dataTypeOfIncAll = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
    }
    onPreviousToBasic() {
        this.showProtocol = false;
        this.hideBasic = false;
        this.showTab = false;
    }
    tabChanged(event) {
        console.log(event);
        this.tabText = event.tab.textLabel;
        console.log("tabText", this.tabText);
        this.showProtocolForAllOut = true;
    }
    nextToServcieFromInc(protocol) {
        console.log("next");
        this.showProtocolForAllInc = false;
        if (protocol.messageChannel == "TCP/IP" && protocol.messageFormat == "ISO 8583 1987" || protocol.messageFormat == "ISO 8583 1993" || protocol.messageFormat == 'ISO 8583 2003') {
            this.fetchingIso();
            this.matLabel_header = "Header";
            this.matLabel1 = "Field No";
            this.matLabel2 = "Field Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default Value";
            this.matLabel5 = "Encryption";
        }
        else if (protocol.messageChannel == "Https/Http" && protocol.messageFormat == "XML") {
            this.showServiceScreen = true;
            // this.fetchingXMl();
            this.matLabel1 = "null";
            this.matLabel_header = "Header";
            this.matLabel2 = "Tag";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default Value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "Https/Http" && protocol.messageFormat == "JSON") {
            this.showServiceScreen = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel_header = "Header";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "XML") {
            this.showServiceScreen = true;
            this.matLabel1 = "Node";
            this.matLabel2 = "Tag Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "JSON") {
            this.showServiceScreen = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "CSV/EXCEL") {
            this.showServiceScreen = true;
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "FLATFILE") {
            this.showServiceScreen = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "XML") {
            this.showServiceScreen = true;
            this.matLabel1 = "Node";
            this.matLabel2 = "Tag Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "JSON") {
            this.showServiceScreen = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "FLATFILE") {
            this.showServiceScreen = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "CSV/EXCEL") {
            this.showServiceScreen = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "JSON") {
            this.showServiceScreen = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "XML") {
            this.showServiceScreen = true;
            this.matLabel1 = null;
            this.matLabel2 = "Column Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "JSON") {
            this.showServiceScreen = true;
            this.matLabel1 = null;
            this.matLabel2 = "Column Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "CSV/EXCEL") {
            this.showServiceScreen = true;
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "FLATFILE") {
            this.showServiceScreen = true;
        }
    }
    // For Incoming and outgoing --->
    onNextOfProtocol(protocol) {
        console.log(protocol);
        console.log(this.addSysBasic);
        //  if(this.addSysBasic.messsageType=='I' ||this.addSysBasic.messsageType=='O'){
        this.showProtocol = false;
        if (protocol.messageChannel == "TCP/IP" && protocol.messageFormat == "ISO 8583 1993" || (protocol.messageChannel == "TCP/IP" && protocol.messageFormat == "ISO 8583 1987") || (protocol.messageChannel == "TCP/IP" && protocol.messageFormat == "ISO 8583 2003")) {
            console.log("this if1");
            this.fetchingIso();
            this.onlyInc = true;
            this.matLabel_header = "Header";
            this.matLabel1 = "Field No";
            this.matLabel2 = "Field Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default Value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "Https/Http" && protocol.messageFormat == "XML") {
            console.log("her xml");
            this.onlyInc = true;
            // this.fetchingXMl();
            this.matLabel_header = "Header";
            this.matLabel1 = "null";
            this.matLabel2 = "Tag";
            this.matLabel3 = "Data Type";
            this.matLabel5 = "Encryption Type";
            this.matLabel4 = "Default Value";
        }
        else if (protocol.messageChannel == "Https/Http" && protocol.messageFormat == "JSON") {
            console.log(protocol.messageChannel, protocol.messageFormat);
            this.onlyInc = true;
            this.matLabel1 = null;
            this.matLabel2 = "Tag";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "XML") {
            this.onlyInc = true;
            this.matLabel1 = "Node";
            this.matLabel2 = "Tag Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "JSON") {
            this.onlyInc = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "CSV/EXCEL") {
            this.onlyInc = true;
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "FLATFILE") {
            this.onlyInc = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "XML") {
            this.onlyInc = true;
            this.matLabel1 = "Node";
            this.matLabel2 = "Tag Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "JSON") {
            this.onlyInc = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "FLATFILE") {
            this.onlyInc = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "CSV/EXCEL") {
            this.onlyInc = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "JSON") {
            this.onlyInc = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "XML") {
            this.onlyInc = true;
            this.matLabel1 = null;
            this.matLabel2 = "Column Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "JSON") {
            this.onlyInc = true;
            this.matLabel1 = null;
            this.matLabel2 = "Column Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "CSV/EXCEL") {
            this.onlyInc = true;
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "FLATFILE") {
            this.onlyInc = true;
        }
        // }
    }
    // all 
    nextStep(tabIndex) {
        console.log(tabIndex);
        if (this.selectedIndex < 2) {
            this.selectedIndex = tabIndex + 1;
        }
    }
    previousStep(tabIndex) {
        console.log(tabIndex);
        if (this.selectedIndex > 0) {
            this.selectedIndex = tabIndex - 2;
        }
    }
    // All out
    onNextOfProtocolAllOut(protocol) {
        console.log(protocol);
        this.showProtocolForAllOut = false;
        if (protocol.messageChannel == "TCP/IP" && protocol.messageFormat == "ISO 8583 1987" || protocol.messageFormat == "ISO 8583 1993" || protocol.messageFormat == 'ISO 8583 2003') {
            this.fetchingIso();
            this.matLabel_header = "Header";
            this.matLabel1 = "Field No";
            this.matLabel2 = "Field Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default Value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "Https/Http" && protocol.messageFormat == "XML") {
            //  this.fetchingXMl();
            this.showServiceScreeAllOut = true;
            this.matLabel1 = "null";
            this.matLabel_header = "Header";
            this.matLabel2 = "Tag";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default Value";
            this.matLabel5 = "Encryption Type";
        }
        else if (protocol.messageChannel == "Https/Http" && protocol.messageFormat == "JSON") {
            this.showServiceScreeAllOut = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "XML") {
            this.showServiceScreeAllOut = true;
            this.matLabel1 = "Node";
            this.matLabel2 = "Tag Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "JSON") {
            this.showServiceScreeAllOut = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "CSV/EXCEL") {
            this.showServiceScreeAllOut = true;
        }
        else if (protocol.messageChannel == "MDB" && protocol.messageFormat == "FLATFILE") {
            this.showServiceScreeAllOut = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "XML") {
            this.showServiceScreeAllOut = true;
            this.matLabel1 = "Node";
            this.matLabel2 = "Tag Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "JSON") {
            this.showServiceScreeAllOut = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "FLATFILE") {
            this.showServiceScreeAllOut = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "CSV/EXCEL") {
            this.showServiceScreeAllOut = true;
        }
        else if (protocol.messageChannel == "EJB" && protocol.messageFormat == "JSON") {
            this.showServiceScreeAllOut = true;
            this.matLabel1 = null;
            this.matLabel2 = "Key";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "XML") {
            this.showServiceScreeAllOut = true;
            this.matLabel1 = null;
            this.matLabel2 = "Column Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "JSON") {
            this.showServiceScreeAllOut = true;
            this.matLabel1 = null;
            this.matLabel2 = "Column Name";
            this.matLabel3 = "Data Type";
            this.matLabel4 = "Default value";
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "CSV/EXCEL") {
            this.showServiceScreeAllOut = true;
        }
        else if (protocol.messageChannel == "DB Connection" && protocol.messageFormat == "FLATFILE") {
            this.showServiceScreeAllOut = true;
        }
    }
    moveToProtocol() {
        this.onlyInc = false;
        this.showProtocol = true;
        this.showAuditLog = false;
    }
    moveIncProtocolAll() {
        this.showProtocolForAllInc = true;
        this.showServiceScreen = false;
    }
    moveToProtocolAllOut() {
        this.showProtocolForAllOut = true;
        this.showServiceScreeAllOut = false;
    }
    onResetOfProtocol(protocolAllForReset) {
        console.log("on reset of Inc all", protocolAllForReset);
        if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
            console.log("here in 1 if");
            this.protocolForBothIncOut.messageChannel = " ";
            this.protocolForBothIncOut.messageFormat = " ";
        }
        else if (this.addSysBasic.messsageType == 'A' && this.tabText == "Incoming") {
            console.log("here inc and all");
            this.protocolAllInc.messageChannel = " ";
            this.protocolAllInc.messageFormat = " ";
        }
        else if (this.addSysBasic.messsageType == 'A' && this.tabText == "Outgoing") {
            this.protocolAllOut.messageFormat = " ";
            this.protocolAllOut.messageChannel = " ";
        }
        // this.protocolAllInc=new MdmtSystemChannel()
    }
    onResetOFAllInc() {
        this.mdmtSystemServiceAllInc.forEach(element => {
            element.dataType = '',
                element.headerValue = '',
                element.id = '',
                element.messageBasis = '',
                element.messageKey = '',
                element.headerTag = '',
                element.encryption = 'No Encryption';
            element.systemChannelId = '';
        });
    }
    addOfIncAll() {
        this.mdmtSystemServiceAllInc.push({ id: '', headerValue: '', messageKey: '', systemChannelId: '', dataType: '', messageBasis: '', headerTag: '', encryption: 'No Encryption' });
    }
    onDeleteOFAllInc(i) {
        this.mdmtSystemServiceAllInc.splice(i, 1);
    }
    onResetOfProtocolAllOut() {
        this.protocolAllOut = new MdmtSystemChannel;
    }
    add() {
        //  this.mdmtSystemService.push({dataType:'',encryption:'',headerTag:'',headerValue:'',id:'',messageBasis:'',messageKey:'',systemChannelId:''});
        this.mdmtSystemService.push({ id: '', dataType: '', headerValue: '', messageBasis: '', messageKey: '', systemChannelId: '', headerTag: '', encryption: 'No Encryption' });
    }
    onMdbQueue(event) {
        this.queueType = event.value;
    }
    onFisnih() {
        // console.log(onFisnih.value);
        // this.afterFinish=true;
        // this.mdmtSystemService.map(el=>{
        //   console.log(el.messageKey);
        // el.messageKey.split("<")[0];
        //   // console.log(el.messageKey);
        // })
        for (let i = 0; i < this.mdmtSystemService.length; i++) {
            if (this.mdmtSystemService[i].messageKey != null) {
                this.mdmtSystemService[i].messageKey = this.mdmtSystemService[i].messageKey.split("<")[0];
            }
        }
        for (let j = 0; j < this.mdmtSystemServiceAllInc.length; j++) {
            if (this.mdmtSystemServiceAllInc[j].messageKey != null) {
                this.mdmtSystemServiceAllInc[j].messageKey = this.mdmtSystemServiceAllInc[j].messageKey.split("<")[0];
            }
        }
        for (let k = 0; k < this.mdmtSystemServiceAllOut.length; k++) {
            if (this.mdmtSystemServiceAllOut[k].messageKey != null) {
                this.mdmtSystemServiceAllOut[k].messageKey = this.mdmtSystemServiceAllOut[k].messageKey.split("<")[0];
            }
        }
        if (this.mdmtSystemService.some(mdmtSystemService => mdmtSystemService['headerTag'] === 'OPERATION') && this.mdmtSystemService.some(mdmtSystemService => mdmtSystemService['headerTag'] === 'SERVICE')) {
            if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
                this.mdmtSystemChannel.push(this.protocolForBothIncOut);
                console.log("in if", this.mdmtSystemService);
                this.addSysBasic.sysChannel = this.mdmtSystemChannel;
                this.addSysBasic.sysChannel[0].messageType = this.addSysBasic.messsageType;
                this.addSysBasic.sysChannel[0].systemId = this.addSysBasic.systemId;
                this.addSysBasic.sysChannel.forEach(element => {
                    element.sysService = this.mdmtSystemService;
                });
                console.log("complete data", this.addSysBasic);
                // this.mdmtSystemChannel.push(this.protocolForBothIncOut);
                // this.mdmtSystemDto.mdmtSystemService=this.mdmtSystemService;
                // this.mdmtSystemDto.mdmtSystemChannel=this.mdmtSystemChannel;
                // this.mdmtSystemDto.mdmtSystem=this.addSysBasic;
                console.log("this.mdmtSystemDto.mdmtSystemService", this.mdmtSystemDto.mdmtSystemService);
            }
            else {
                console.log("in else");
                // this.mdmtSystemDto.mdmtSystem=this.addSysBasic;
                this.mdmtSystemChannel.push(this.protocolAllInc);
                this.mdmtSystemChannel.push(this.protocolAllOut);
                this.addSysBasic.sysChannel = this.mdmtSystemChannel;
                // this.addSysBasic.sysChannel[0].sysService.splice(0,0,this.mdmtSystemServiceAllInc)
                // this.addSysBasic.sysChannel[0].sysService.splice(0,0,this.mdmtSystemServiceAllInc);
                // this.mdmtSystemService.push(...this.mdmtSystemServiceAllInc,...this.mdmtSystemServiceAllOut);
                console.log("all", this.mdmtSystemService);
                //  this.addSysBasic.sysChannel.map(el=>{el.sysService=this.mdmtSystemService});
                this.addSysBasic.sysChannel[0].sysService = this.mdmtSystemServiceAllInc;
                this.addSysBasic.sysChannel[1].sysService = this.mdmtSystemServiceAllOut;
                console.log("complete data", this.addSysBasic);
                // this.mdmtSystemDto.mdmtSystemService=this.mdmtSystemService;
                // this.mdmtSystemDto.mdmtSystemChannel=this.mdmtSystemChannel;
            }
            this.addSystem.editaddsystem("update", this.currentUser, this.addSysBasic).subscribe(addSysResp => {
                console.log("resp", addSysResp);
                if (addSysResp) {
                    this.showAuditLog = true;
                    this.disableupdtae = true;
                    // this.addSysRespData=addSysResp;
                    sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a.fire({ text: 'Record saved successfully' });
                }
            }, (err => {
                sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a.fire({ text: 'Server Error' });
                // this.afterFinish=false;
            }));
        }
        else if (this.mdmtSystemServiceAllOut.some(mdmtSystemServiceAllOut => mdmtSystemServiceAllOut['headerTag'] === 'OPERATION') && this.mdmtSystemServiceAllOut.some(mdmtSystemServiceAllOut => mdmtSystemServiceAllOut['headerTag'] === 'SERVICE')) {
            if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
                this.mdmtSystemChannel.push(this.protocolForBothIncOut);
                console.log("in if", this.mdmtSystemService);
                this.addSysBasic.sysChannel = this.mdmtSystemChannel;
                this.addSysBasic.sysChannel[0].messageType = this.addSysBasic.messsageType;
                this.addSysBasic.sysChannel[0].systemId = this.addSysBasic.systemId;
                this.addSysBasic.sysChannel.forEach(element => {
                    element.sysService = this.mdmtSystemService;
                });
                console.log("complete data", this.addSysBasic);
                // this.mdmtSystemChannel.push(this.protocolForBothIncOut);
                // this.mdmtSystemDto.mdmtSystemService=this.mdmtSystemService;
                // this.mdmtSystemDto.mdmtSystemChannel=this.mdmtSystemChannel;
                // this.mdmtSystemDto.mdmtSystem=this.addSysBasic;
                console.log("this.mdmtSystemDto.mdmtSystemService", this.mdmtSystemDto.mdmtSystemService);
            }
            else {
                console.log("in else");
                // this.mdmtSystemDto.mdmtSystem=this.addSysBasic;
                this.mdmtSystemChannel.push(this.protocolAllInc);
                this.mdmtSystemChannel.push(this.protocolAllOut);
                this.addSysBasic.sysChannel = this.mdmtSystemChannel;
                // this.addSysBasic.sysChannel[0].sysService.splice(0,0,this.mdmtSystemServiceAllInc)
                // this.addSysBasic.sysChannel[0].sysService.splice(0,0,this.mdmtSystemServiceAllInc);
                // this.mdmtSystemService.push(...this.mdmtSystemServiceAllInc,...this.mdmtSystemServiceAllOut);
                console.log("all", this.mdmtSystemService);
                //  this.addSysBasic.sysChannel.map(el=>{el.sysService=this.mdmtSystemService});
                this.addSysBasic.sysChannel[0].sysService = this.mdmtSystemServiceAllInc;
                this.addSysBasic.sysChannel[1].sysService = this.mdmtSystemServiceAllOut;
                console.log("complete data", this.addSysBasic);
                // this.mdmtSystemDto.mdmtSystemService=this.mdmtSystemService;
                // this.mdmtSystemDto.mdmtSystemChannel=this.mdmtSystemChannel;
            }
            this.addSystem.editaddsystem("update", this.currentUser, this.addSysBasic).subscribe(addSysResp => {
                console.log("resp", addSysResp);
                if (addSysResp) {
                    this.showAuditLog = true;
                    this.disableupdtae = true;
                    // this.addSysRespData=addSysResp;
                    sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a.fire({ text: 'Record saved successfully' });
                }
            }, (err => {
                sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a.fire({ text: 'Server Error' });
                // this.afterFinish=false;
            }));
        }
        else {
            sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a.fire({ text: 'Header value OPERATION and SERVICE are mandatory !' });
        }
    }
    // onFisnih()
    // { if(this.addSysBasic.messsageType=='I' ||this.addSysBasic.messsageType=='O'){
    //   console.log("in if",this.mdmtSystemService);
    //   this.mdmtSystemChannel.push(this.protocolForBothIncOut);
    //   this.mdmtSystemDto.mdmtSystemService=this.mdmtSystemService;
    //   this.mdmtSystemDto.mdmtSystemChannel=this.mdmtSystemChannel;
    //   this.mdmtSystemDto.mdmtSystem=this.addSysBasic;
    //   console.log("this.mdmtSystemDto.mdmtSystemService",this.mdmtSystemDto.mdmtSystemService);
    // }
    // else{
    //   console.log("in else");
    //   this.mdmtSystemDto.mdmtSystem=this.addSysBasic;
    //   this.mdmtSystemChannel.push(this.protocolAllInc);
    //   this.mdmtSystemChannel.push(this.protocolAllOut);
    //   this.mdmtSystemService.push(...this.mdmtSystemServiceAllInc,...this.mdmtSystemServiceAllOut);
    //   this.mdmtSystemDto.mdmtSystemService=this.mdmtSystemService;
    //   this.mdmtSystemDto.mdmtSystemChannel=this.mdmtSystemChannel;
    // } 
    //   console.log("last",this.mdmtSystemDto);
    //   this.addSystem.submittingAddSystem(this.mdmtSystemDto,this.currentUser).subscribe(addSysResp=>{
    //     console.log("resp",addSysResp);
    //     if(addSysResp){this.showAuditLog=true;
    //       this.addSysRespData=addSysResp.mdmtSystem;
    //       Swal.fire({text:'Record saved successfully'})}
    //   },(err=>{Swal.fire({text:'Server Error'})}));
    // }
    onResetOfAllOut() {
        this.mdmtSystemServiceAllOut.forEach(element => {
            element.dataType = '',
                element.headerValue = '',
                element.id = '',
                element.messageBasis = '',
                element.headerTag = '',
                element.messageKey = '',
                element.systemChannelId = '';
            element.encryption = 'No Encryption';
        });
    }
    authorizeSystem() {
        if (this.currentUser == this.addSysBasic.creatorId) {
            sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a.fire('Maker cannot authorize!');
        }
        else {
            if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
                this.mdmtSystemChannel.push(this.protocolForBothIncOut);
                this.addSysBasic.sysChannel = this.mdmtSystemChannel;
                this.addSysBasic.sysChannel[0].messageType = this.addSysBasic.messsageType;
                this.addSysBasic.sysChannel[0].systemId = this.addSysBasic.systemId;
                this.addSysBasic.sysChannel.forEach(element => {
                    element.sysService = this.mdmtSystemService;
                });
            }
            else {
                this.mdmtSystemChannel.push(this.protocolAllInc);
                this.mdmtSystemChannel.push(this.protocolAllOut);
                this.addSysBasic.sysChannel = this.mdmtSystemChannel;
                this.addSysBasic.sysChannel[0].systemId = this.addSysBasic.systemId;
                this.addSysBasic.sysChannel[0].sysService = this.mdmtSystemServiceAllInc;
                this.addSysBasic.sysChannel[1].sysService = this.mdmtSystemServiceAllOut;
            }
            console.log(this.addSysBasic);
            this.addSystem.editaddsystem("auth", this.currentUser, this.addSysBasic).subscribe((response) => {
                console.log(response);
                this.authorizeDone = true;
                // this.reopenBtn=false;
                this.addSysBasic = response;
                sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a.fire('Authorized Successfully!');
            });
        }
    }
    closeSystem() {
        if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
            this.mdmtSystemChannel.push(this.protocolForBothIncOut);
            this.addSysBasic.sysChannel = this.mdmtSystemChannel;
            this.addSysBasic.sysChannel[0].messageType = this.addSysBasic.messsageType;
            this.addSysBasic.sysChannel[0].systemId = this.addSysBasic.systemId;
            this.addSysBasic.sysChannel.forEach(element => {
                element.sysService = this.mdmtSystemService;
            });
        }
        else {
            this.mdmtSystemChannel.push(this.protocolAllInc);
            this.mdmtSystemChannel.push(this.protocolAllOut);
            this.addSysBasic.sysChannel = this.mdmtSystemChannel;
            this.addSysBasic.sysChannel[0].systemId = this.addSysBasic.systemId;
            this.addSysBasic.sysChannel[0].sysService = this.mdmtSystemServiceAllInc;
            this.addSysBasic.sysChannel[1].sysService = this.mdmtSystemServiceAllOut;
        }
        console.log(this.addSysBasic);
        this.addSystem.editaddsystem("close", this.currentUser, this.addSysBasic).subscribe((response) => {
            console.log(response);
            if (response) {
                this.addSysBasic = response;
                this.editBtn = true;
                this.authBtn = true;
                this.deleted = false;
                this.reopenBtn = false;
                sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a.fire('Closed Successfully!');
            }
        });
    }
    openSystem() {
        if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
            this.mdmtSystemChannel.push(this.protocolForBothIncOut);
            this.addSysBasic.sysChannel = this.mdmtSystemChannel;
            this.addSysBasic.sysChannel[0].systemId = this.addSysBasic.systemId;
            this.addSysBasic.sysChannel[0].messageType = this.addSysBasic.messsageType;
            this.addSysBasic.sysChannel.forEach(element => {
                element.sysService = this.mdmtSystemService;
            });
        }
        else {
            this.mdmtSystemChannel.push(this.protocolAllInc);
            this.mdmtSystemChannel.push(this.protocolAllOut);
            this.addSysBasic.sysChannel = this.mdmtSystemChannel;
            this.addSysBasic.sysChannel[0].systemId = this.addSysBasic.systemId;
            this.addSysBasic.sysChannel[0].sysService = this.mdmtSystemServiceAllInc;
            this.addSysBasic.sysChannel[1].sysService = this.mdmtSystemServiceAllOut;
        }
        console.log(this.addSysBasic);
        this.addSystem.editaddsystem("open", this.currentUser, this.addSysBasic).subscribe((response) => {
            console.log(response);
            if (response) {
                this.addSysBasic = response;
                this.authBtnHide = false;
                this.editBtn = false;
                this.authBtn = false;
                sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a.fire('Opened Successfully!');
            }
        });
    }
    deleteSystem() {
        console.log(this.addSysBasic);
        this.addSystem.deleteAddSystem(this.currentUser, this.addSysBasic.systemId).subscribe((response) => {
            console.log(response);
            if (response) {
                this.deleted = true;
                this.editBtn = true;
                this.authBtn = true;
                this.closeBtn = true;
                sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a.fire({ title: 'Deleted Successfully!',
                    confirmButtonText: 'Ok'
                }).then((result) => {
                    if (result) {
                        this.router.navigateByUrl('/sias-v2/externalSysSummaryNew');
                    }
                });
            }
            else {
                sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a.fire("Failed to delete the reocrd");
            }
            // if(response){
            //   this.deleted = true;
            //   this.editBtn=true;
            //   this.authBtn=true;
            //   this.closeBtn=true;
            //   Swal.fire('Deleted Successfully!');
            // }
        });
    }
    onReset() {
        console.log("this si reset");
        this.mdmtSystemService.forEach(element => {
            element.dataType = '',
                element.headerValue = '',
                element.id = '',
                element.messageBasis = '',
                element.headerTag = '',
                element.messageKey = '',
                element.systemChannelId = '';
            element.encryption = 'No Encryption';
        });
    }
    onDelete(i) {
        this.mdmtSystemService.splice(i, 1);
    }
    // Api for xml,iso and others
    // gettingIso/Tcp record
    fetchingIso() {
        this.showProgressbar = true;
        this.addSystem.fetchingIsoForTcp().subscribe(isoResp => {
            console.log(isoResp);
            this.isoRespData = isoResp;
            // this.isoRespData.map(el=>{
            //   return  el.fieldNo=el.fieldNo+"<"+el.fieldName;
            //   })
            for (let i = 0; i < this.isoRespData.length; i++) {
                this.isoRespData[i].fieldNo = this.isoRespData[i].fieldNo + "<" + this.isoRespData[i].fieldName;
            }
            console.log("isoRespData", this.isoRespData);
            if (isoResp) {
                if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
                    this.onlyInc = true;
                    this.showProgressbar = false;
                    // for dropdown 1
                    this.messageBasisIso = isoResp.map((data) => {
                        return data.fieldName;
                    });
                    // for dropdown 2
                    this.messageKeyIso = isoResp.map((data) => {
                        return data.fieldNo.toString();
                    });
                    this.typeDataIso = isoResp.map((data) => {
                        return data.dataType;
                    });
                    this.headerValueIso = isoResp.map((data) => {
                        return data.headerValue;
                    });
                }
                else if (this.addSysBasic.messsageType == 'A' && this.tabText == 'Incoming') {
                    this.showServiceScreen = true;
                    this.showProgressbar = false;
                    this.onlyInc = false;
                    this.messageBasisIso = isoResp.map((data) => {
                        return data.fieldName;
                    });
                    // for dropdown 2
                    this.messageKeyIso = isoResp.map((data) => {
                        return data.fieldNo.toString();
                    });
                    this.typeDataIso = isoResp.map((data) => {
                        return data.dataType;
                    });
                    this.headerValueIso = isoResp.map((data) => {
                        return data.headerValue;
                    });
                    // this.mdmtSystemServiceAllInc=isoResp;
                }
                else if (this.addSysBasic.messsageType == 'A' && this.tabText == 'Outgoing') {
                    console.log("this is  all out ");
                    this.showServiceScreeAllOut = true;
                    this.showProgressbar = false;
                    this.onlyInc = false;
                    this.messageBasisIso = isoResp.map((data) => {
                        return data.fieldName;
                    });
                    // for dropdown 2
                    this.messageKeyIso = isoResp.map((data) => {
                        return data.fieldNo.toString();
                    });
                    this.typeDataIso = isoResp.map((data) => {
                        return data.dataType;
                    });
                    this.headerValueIso = isoResp.map((data) => {
                        return data.headerValue;
                    });
                    // this.mdmtSystemServiceAllOut=isoResp;
                }
            }
        });
    }
    //gettingxml records
    fetchingXMl() {
        this.addSystem.gettinXMLmsgIncoming().subscribe(xmlResp => {
            console.log(xmlResp);
            this.xmlRespData = xmlResp;
            if (xmlResp) {
                if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
                    this.onlyInc = true;
                    this.showProgressbar = false;
                    // for dropdown 1
                    this.messageBasisIso = xmlResp.map((data) => {
                        return data.fieldName;
                    });
                    // for dropdown 2
                    this.messageKeyIso = xmlResp.map((data) => {
                        return data.fieldNo.toString();
                    });
                    //dopdwon3
                    this.typeDataIso = xmlResp.map((data) => {
                        return data.dataType;
                    });
                    this.headerValueIso = xmlResp.map((data) => {
                        return data.headerValue;
                    });
                }
                else if (this.addSysBasic.messsageType == 'A' && this.tabText == 'Incoming') {
                    this.showServiceScreen = true;
                    this.showProgressbar = false;
                    this.onlyInc = false;
                    this.messageBasisIso = xmlResp.map((data) => {
                        return data.fieldName;
                    });
                    // for dropdown 2
                    this.messageKeyIso = xmlResp.map((data) => {
                        return data.fieldNo.toString();
                    });
                    // this.nodeAndTagName.push({node:this.messageBasisIso,tagName:this.messageKeyIso});
                    this.typeDataIso = xmlResp.map((data) => {
                        return data.dataType;
                    });
                    this.headerValueIso = xmlResp.map((data) => {
                        return data.headerValue;
                    });
                }
                else if (this.addSysBasic.messsageType == 'A' && this.tabText == 'Outgoing') {
                    this.showServiceScreeAllOut = true;
                    this.showProgressbar = false;
                    this.onlyInc = false;
                    this.messageBasisIsoAllOut = xmlResp.map((data) => {
                        return data.fieldName;
                    });
                    // for dropdown 2
                    this.messageKeyIso = xmlResp.map((data) => {
                        return data.fieldNo.toString();
                    });
                    this.typeDataIso = xmlResp.map((data) => {
                        return data.dataType;
                    });
                    this.headerValueIso = xmlResp.map((data) => {
                        return data.headerValue;
                    });
                }
            }
        });
    }
    // upload Excel
    chooseFile() {
        document.getElementById('chFile').click();
    }
    // ------------File Uplaod Methods-----------
    uploadFileXml(event) {
        this.selectedFiles = event.target.files;
        this.sizeOfFile = this.selectedFiles.item(0).size;
        this.currentFileUpload = this.selectedFiles.item(0);
        this.fileName = this.currentFileUpload.name;
        this.addSystem.gettingHederofXMl(this.currentFileUpload).subscribe(xmlResp => {
            console.log(xmlResp);
            if (xmlResp) {
                // this.messageBasisIso=xmlResp;
                this.uploadXmlResp = xmlResp;
                this.messageBasisIso = xmlResp.nodeTagList;
                this.messageBasisIsoAllOut = xmlResp.nodeTagList;
                sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a.fire({ text: 'File Uploaded Successfully' });
            }
        }, err => {
            sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a.fire({ text: 'Invalid Xml file provided' });
        });
    }
    onselectingTag(event, i) {
        console.log(event);
        this.desSystem.push(event.value);
        console.log(this.uploadXmlResp);
        var result = Object.keys(this.uploadXmlResp.nodeValueMap).map((key) => [(key), this.uploadXmlResp.nodeValueMap[key]]);
        var x = result.find(item => item[0] == event.value);
        console.log(x);
        if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
            this.mdmtSystemService[i].headerValue = x[1];
        }
        else if (this.addSysBasic.messsageType == 'A' && this.tabText == 'Incoming') {
            this.mdmtSystemServiceAllInc[i].headerValue = x[1];
        }
        else if (this.addSysBasic.messsageType == 'A' && this.tabText == 'Outgoing') {
            console.log("here");
            this.mdmtSystemServiceAllOut[i].headerValue = x[1];
        }
        // this.mdmtSystemService[i].dataType=x.dataType;
    }
    addOfAllOut() {
        this.mdmtSystemServiceAllOut.push({ id: '', dataType: '', headerValue: '', messageBasis: '', messageKey: '', systemChannelId: '', headerTag: '', encryption: 'No Encryption' });
    }
    onDeleteOfAllOut(i) {
        this.mdmtSystemServiceAllOut.splice(i, 1);
    }
    onResetOfBasicInfo() {
        this.addSysBasic = new AddSystemNew();
    }
    onSelectingMessageBasis(event, i) {
        console.log("option for fieldno", event.value);
        console.log(event.value);
        // both Incoming and outgoing
        if (this.addSysBasic.messsageType == 'I' || this.addSysBasic.messsageType == 'O') {
            if (this.protocolForBothIncOut.messageChannel == 'TCP/IP' && this.protocolForBothIncOut.messageFormat == 'ISO 8583 1987' || this.protocolForBothIncOut.messageFormat == 'ISO 8583 1993' || this.protocolForBothIncOut.messageFormat == 'ISO 8583 2003') {
                var x = this.isoRespData.find(item => item.fieldNo == event.value);
                this.mdmtSystemService[i].messageBasis = x.fieldName;
                this.mdmtSystemService[i].dataType = x.dataType;
            }
            else if (this.protocolForBothIncOut.messageChannel == 'Https/Http' && this.protocolForBothIncOut.messageFormat == 'XML') {
                var xmldata = this.xmlRespData.find(item => item.messageBasis == event.value);
                {
                    this.mdmtSystemService[i].messageKey = xmldata.messageKey;
                    this.mdmtSystemService[i].dataType = xmldata.dataType;
                }
            }
        }
        // All Incoming
        else if (this.addSysBasic.messsageType == 'A' && this.tabText == 'Incoming') {
            console.log("coming in atb inc, All");
            if (this.protocolAllInc.messageChannel == 'TCP/IP' && this.protocolAllInc.messageFormat == 'ISO 8583 1987' || this.protocolAllInc.messageFormat == 'ISO 8583 1993' || this.protocolAllInc.messageFormat == 'ISO 8583 2003') {
                var x = this.isoRespData.find(item => item.fieldNo == event.value);
                console.log(x);
                console.log("this.mdmtSystemServiceAllInc[i].messageKey", this.mdmtSystemServiceAllInc[i].messageKey);
                this.mdmtSystemServiceAllInc[i].messageBasis = x.fieldName;
                this.mdmtSystemServiceAllInc[i].dataType = x.dataType;
            }
            else if (this.protocolAllInc.messageChannel == 'Https/Http' && this.protocolAllInc.messageFormat == 'XML') {
                var xmldata = this.xmlRespData.find(item => item.messageBasis == event.value);
                {
                    this.mdmtSystemServiceAllInc[i].messageKey = x.messageKey;
                    this.mdmtSystemServiceAllInc[i].dataType = x.dataType;
                }
            }
        }
        // All outgoing
        else if (this.addSysBasic.messsageType == 'A' && this.tabText == 'Outgoing') {
            console.log("coming in atb inc, All");
            if (this.protocolAllOut.messageChannel == 'TCP/IP' && this.protocolAllOut.messageFormat == 'ISO 8583 1987' || this.protocolAllOut.messageFormat == 'ISO 8583 1993' || this.protocolAllOut.messageFormat == 'ISO 8583 2003') {
                var x = this.isoRespData.find(item => item.fieldNo == event.value);
                this.mdmtSystemServiceAllOut[i].messageBasis = x.fieldName;
                this.mdmtSystemServiceAllOut[i].dataType = x.dataType;
            }
            else if (this.protocolAllOut.messageChannel == 'Https/Http' && this.protocolAllOut.messageFormat == 'XML') {
                var xmldata = this.xmlRespData.find(item => item.messageBasis == event.value);
                {
                    this.mdmtSystemServiceAllOut[i].messageKey = x.messageKey;
                    this.mdmtSystemServiceAllOut[i].dataType = x.dataType;
                }
            }
        }
    }
    onEdit() {
        console.log(this.addSysBasic.approvedStatus);
        if (this.addSysBasic.approvedStatus == "U") {
            this.isEdit = true;
            sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a.fire("UnAuthorized record can't be edited !");
        }
        this.isEdit = false;
        if (this.addSysBasic.recordStatus == "C") {
            this.isEdit = true;
            sweetalert2__WEBPACK_IMPORTED_MODULE_2___default.a.fire("Closed record can't be edited.");
        }
    }
    //getting hedaer tag
    fetchingHeadertag() {
        this.addSystem.fetchingHeaderTag().subscribe(resp => {
            console.log("res", resp);
            this.headerTagData = resp;
        });
    }
    shouldDisableTagOption(option) {
        return this.desSystem.includes(option);
    }
    check(event, value) {
        console.log("ev", event.value);
        this.desSystem.push(event.value);
        // this.destination=event.value;
        // this.addSystem.gettingHederofXMl(this.currentFileUpload).subscribe(xmlResp=>{
        //   console.log(xmlResp);
        //   if(xmlResp)
        //   {
        //   this.messageBasisIso=xmlResp;
        //   Swal.fire({text:'File Uploaded Successfully'});
        //   }
        // },(err)=>{
        //   console.log(err);
        //   Swal.fire({text:'Invalid Xml file provided'});
        // })
    }
};
ViewOrEditExternalSystemComponent.ctorParameters = () => [
    { type: src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__["AddSystemService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"] }
];
ViewOrEditExternalSystemComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-view-or-edit-external-system',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./view-or-edit-external-system.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/add-system-incoming-message-tcp/view-or-edit-external-system/view-or-edit-external-system.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./view-or-edit-external-system.component.css */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/view-or-edit-external-system/view-or-edit-external-system.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__["AddSystemService"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"]])
], ViewOrEditExternalSystemComponent);

class AddSystemNew {
}
// protocol screen
class MdmtSystemChannel {
}
//3rd screen
class MdmtSystemService {
}
class MdmtSystemDto {
}


/***/ }),

/***/ "./src/app/views/sias-v2/edit-add-system/edit-add-system.component.css":
/*!*****************************************************************************!*\
  !*** ./src/app/views/sias-v2/edit-add-system/edit-add-system.component.css ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".example-container {\r\n    height: 250px;\r\n    overflow: auto;\r\n}\r\n.mat-raised-button {\r\n    width: -webkit-fit-content;\r\n    width: -moz-fit-content;\r\n    width: fit-content;\r\n    height: 20px;\r\n    line-height: 27px;\r\n    min-height: 27px;\r\n    vertical-align: top;\r\n    font-size: 11px;\r\n    padding: 0 0;\r\n    margin: 0;\r\n    }\r\n#customers {\r\n        font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\r\n        border-collapse: collapse;\r\n        width: 100%;\r\n        }\r\n#customers td, #customers th {\r\n        border: 1px solid #ddd;\r\n        padding: 8px;\r\n        text-align: center;\r\n        \r\n        }\r\n#customers tr:nth-child(even){background-color: #f2f2f2;}\r\n#customers th {\r\n        padding-top: 12px;\r\n        padding-bottom: 12px;\r\n        text-align: left;\r\n        background-color:rgb(97, 178, 216);\r\n        color: white;\r\n        }\r\n.baiscInfocard\r\n{\r\n    width: 63%;\r\n   margin-left: 15%;\r\n}\r\n::ng-deep .mat-form-field-flex > .mat-form-field-infix { padding: 0.5em 0px !important;}\r\nmat-form-field{\r\n    width: 100%;\r\n    \r\n}\r\n#chFile{\r\n    display: none;\r\n    }\r\n.btnFile{\r\n    background-color: rgb(130, 130, 173);\r\n    margin-right: 30px;\r\n    width: 110px;\r\n    }\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9lZGl0LWFkZC1zeXN0ZW0vZWRpdC1hZGQtc3lzdGVtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxhQUFhO0lBQ2IsY0FBYztBQUNsQjtBQUNBO0lBQ0ksMEJBQWtCO0lBQWxCLHVCQUFrQjtJQUFsQixrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLGVBQWU7SUFDZixZQUFZO0lBQ1osU0FBUztJQUNUO0FBQ0E7UUFDSSx5REFBeUQ7UUFDekQseUJBQXlCO1FBQ3pCLFdBQVc7UUFDWDtBQUNBO1FBQ0Esc0JBQXNCO1FBQ3RCLFlBQVk7UUFDWixrQkFBa0I7O1FBRWxCO0FBRUEsOEJBQThCLHlCQUF5QixDQUFDO0FBRXhEO1FBQ0EsaUJBQWlCO1FBQ2pCLG9CQUFvQjtRQUNwQixnQkFBZ0I7UUFDaEIsa0NBQWtDO1FBQ2xDLFlBQVk7UUFDWjtBQUVQOztJQUVHLFVBQVU7R0FDWCxnQkFBZ0I7QUFDbkI7QUFFQSx5REFBeUQsNkJBQTZCLENBQUM7QUFHdkY7SUFDSSxXQUFXOztBQUVmO0FBRUE7SUFDSSxhQUFhO0lBQ2I7QUFDQTtJQUNBLG9DQUFvQztJQUNwQyxrQkFBa0I7SUFDbEIsWUFBWTtJQUNaIiwiZmlsZSI6InNyYy9hcHAvdmlld3Mvc2lhcy12Mi9lZGl0LWFkZC1zeXN0ZW0vZWRpdC1hZGQtc3lzdGVtLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXhhbXBsZS1jb250YWluZXIge1xyXG4gICAgaGVpZ2h0OiAyNTBweDtcclxuICAgIG92ZXJmbG93OiBhdXRvO1xyXG59XHJcbi5tYXQtcmFpc2VkLWJ1dHRvbiB7XHJcbiAgICB3aWR0aDogZml0LWNvbnRlbnQ7XHJcbiAgICBoZWlnaHQ6IDIwcHg7XHJcbiAgICBsaW5lLWhlaWdodDogMjdweDtcclxuICAgIG1pbi1oZWlnaHQ6IDI3cHg7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xyXG4gICAgZm9udC1zaXplOiAxMXB4O1xyXG4gICAgcGFkZGluZzogMCAwO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgfVxyXG4gICAgI2N1c3RvbWVycyB7XHJcbiAgICAgICAgZm9udC1mYW1pbHk6IFwiVHJlYnVjaGV0IE1TXCIsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XHJcbiAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICB9XHJcbiAgICAgICAgI2N1c3RvbWVycyB0ZCwgI2N1c3RvbWVycyB0aCB7XHJcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2RkZDtcclxuICAgICAgICBwYWRkaW5nOiA4cHg7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAjY3VzdG9tZXJzIHRyOm50aC1jaGlsZChldmVuKXtiYWNrZ3JvdW5kLWNvbG9yOiAjZjJmMmYyO31cclxuICAgICAgICBcclxuICAgICAgICAjY3VzdG9tZXJzIHRoIHtcclxuICAgICAgICBwYWRkaW5nLXRvcDogMTJweDtcclxuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMTJweDtcclxuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6cmdiKDk3LCAxNzgsIDIxNik7XHJcbiAgICAgICAgY29sb3I6IHdoaXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgIFxyXG4gLmJhaXNjSW5mb2NhcmRcclxue1xyXG4gICAgd2lkdGg6IDYzJTtcclxuICAgbWFyZ2luLWxlZnQ6IDE1JTtcclxufVxyXG5cclxuOjpuZy1kZWVwIC5tYXQtZm9ybS1maWVsZC1mbGV4ID4gLm1hdC1mb3JtLWZpZWxkLWluZml4IHsgcGFkZGluZzogMC41ZW0gMHB4ICFpbXBvcnRhbnQ7fVxyXG5cclxuXHJcbm1hdC1mb3JtLWZpZWxke1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBcclxufVxyXG4gICAgXHJcbiNjaEZpbGV7XHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG4gICAgLmJ0bkZpbGV7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTMwLCAxMzAsIDE3Myk7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDMwcHg7XHJcbiAgICB3aWR0aDogMTEwcHg7XHJcbiAgICB9Il19 */");

/***/ }),

/***/ "./src/app/views/sias-v2/edit-add-system/edit-add-system.component.ts":
/*!****************************************************************************!*\
  !*** ./src/app/views/sias-v2/edit-add-system/edit-add-system.component.ts ***!
  \****************************************************************************/
/*! exports provided: EditAddSystemComponent, Addsystem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditAddSystemComponent", function() { return EditAddSystemComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Addsystem", function() { return Addsystem; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _add_system_incoming_message_tcp_add_system__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../add-system-incoming-message-tcp/add-system */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/add-system.ts");
/* harmony import */ var src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/services/addSys/add-system.service */ "./src/app/shared/services/addSys/add-system.service.ts");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _angular_material_tabs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/tabs */ "./node_modules/@angular/material/esm2015/tabs.js");






let EditAddSystemComponent = class EditAddSystemComponent {
    constructor(addSystem) {
        this.addSystem = addSystem;
        this.createExtSys1 = new _add_system_incoming_message_tcp_add_system__WEBPACK_IMPORTED_MODULE_2__["AddSystemBasicInformation"](); //Basic Info
        //incoming
        this.incomingIntegrationProtocol = [];
        this.incomingMessageConfigurationTcp = [];
        this.incHttpXMl = [];
        this.incHttpJson = [];
        this.incMDBXML = [];
        this.incMdbJson = [];
        this.incEjbXMl = [];
        this.incEjbJson = [];
        this.incDbData = new _add_system_incoming_message_tcp_add_system__WEBPACK_IMPORTED_MODULE_2__["IncDBCredenatils"](); // Db credentials Incoming
        this.mdbQueueInc = ['IBM', 'JMS'];
        // outgoing
        this.outgoingIntegrationProtocol = [];
        this.outgoingMessageConfigurationTcp = [];
        this.outHttpXml = [];
        this.outHttpJson = [];
        this.outMdbXml = [];
        this.outMdbJson = [];
        this.outEjbXml = [];
        this.outEjbJson = [];
        // boolean values
        this.hideBasic = false;
        this.showOfIcoming = true;
        this.showIncMsgProtocol = false;
        this.showOutMsgProtocol = false;
        this.showAllMsgProtocol = false;
        // All
        this.incMsgProtocolAll = [];
        this.outAll = [];
        this.tableNameinc = [];
        this.coulmnNameBasedonTanbleName = [];
        this.showAuditLog = false;
        this.tabText = "Incoming";
        this.selectedIndex = 0;
        //  Save Prj
        this.addSystemSave = new Addsystem();
        this.count = 0;
        this.colRowForDbInc = [];
    }
    ngOnInit() {
        this.navSubscription = this.addSystem.getNavParam.subscribe(data => this.editAddSysResp = data);
        console.log("edit", this.editAddSysResp);
        this.currentUser = localStorage.getItem('userFromLogin');
        this.createExtSys1.code = this.editAddSysResp["code"];
        this.createExtSys1.name = this.editAddSysResp["name"];
        this.createExtSys1.type = this.editAddSysResp["type"];
        this.createExtSys1.externalIp = this.editAddSysResp["externalIp"];
        this.createExtSys1.externalPort = this.editAddSysResp["externalPort"];
        this.createExtSys1.medianIp = this.editAddSysResp["medianIp"];
        this.createExtSys1.medianPort = this.editAddSysResp["medianPort"];
        this.createExtSys1.openToMessage = this.editAddSysResp["openToMessage"];
        // Incoming Message Protocol
        this.incomingIntegrationProtocol = this.editAddSysResp["incomingIntegrationProtocol"];
        // outgoing messages
        this.outgoingIntegrationProtocol = this.editAddSysResp['outIntegratProtocol'];
        console.log("outgoingIntegrationProtocol", this.outgoingIntegrationProtocol);
        this.gettingProtocoleAnddataypeOFIncoming();
        this.gettingProtocoleAnddataypeOFOutgoing(); //out going disply protocola dn datatype
        this.onsystemMessageSelection(this.createExtSys1.openToMessage);
        this.incMsgProtocolAll.push({ typeOfProtocol: '', dataType: '' });
        this.outAll.push({ typeOfProtocol: '', dataType: '' });
        this.incomingMessageConfigurationTcp.push({ fieldName: '', fieldNo: '', dataType: 'alphaNumeric', defaultValue: '', id: '', extSys: '' });
        this.outgoingMessageConfigurationTcp.push({ fieldName: '', fieldNo: '', dataType: 'alphaNumeric', defaultValue: '', id: '', extSys: '' });
        this.incHttpJson.push({ key: '', dataType: '', deafultValue: '' });
        this.incMDBXML.push({ node: '', tagDefault: '', dataType: '', extSysCode: '', defaultValue: '', id: '', tagName: '' });
        this.incHttpXMl.push({ id: '', extSys: '', node: '', tagName: '', dataType: '', defaultValue: '' });
        this.incMdbJson.push({ key: '', defaultValue: '', dataType: '' });
        this.incEjbXMl.push({ id: '', node: '', tagName: '', dataType: '', tagValue: '', extSysCode: '', tagDefault: '' });
        this.incEjbJson.push({ key: '', dataType: '', defaultValue: '' });
        this.outHttpXml.push({ node: '', tagName: '', dataType: '', defaultValue: '', id: '', extSys: '' });
        this.outHttpJson.push({ dataType: '', defaultValue: '', key: '' });
        this.outMdbXml.push({ dataType: '', id: '', extSysCode: '', node: '', tagDefault: '', tagName: '', tagvalue: '' });
        this.outMdbJson.push({ dataType: '', key: '', defaultValue: '' });
        this.outEjbXml.push({ dataType: '', tagvalue: '', tagName: '', tagDefault: '', node: '', extSysCode: '', id: '' });
        this.outEjbJson.push({ dataType: '', defaultValue: '', key: '' });
    }
    // Outgoing Messsage Protocol
    // gettingProtocol and Dataype by loading
    gettingProtocoleAnddataypeOFIncoming() {
        console.log("her on ngOn int ");
        this.incomingIntegrationProtocol.forEach(data => {
            this.incProtocol = data.typeOfProtocol;
            this.incDataType = data.dataType;
        });
        this.onProtocalSlection(this.incProtocol);
    }
    // getting Protocol and dataype for outgoing
    gettingProtocoleAnddataypeOFOutgoing() {
        console.log("her on ngOn int ");
        this.outgoingIntegrationProtocol.forEach(data => {
            this.protocoloutGoing = data.typeOfProtocol;
            this.dataTypeOutgoing = data.dataType;
        });
        this.onOutgoingProtocolSelction(this.protocoloutGoing);
    }
    //  selection of system message
    onsystemMessageSelection(sysMessage) {
        console.log("sysMessage", sysMessage);
        if (sysMessage == 'Incoming') {
            this.showOfIcoming = true;
            this.showALl = false;
            this.showOfoutNext = false;
        }
        else if (sysMessage == 'OutComing') {
            this.showOfoutNext = true;
            this.showOfIcoming = false;
            this.showALl = false;
        }
        else if (sysMessage == 'All') {
            this.showALl = true;
            this.showOfIcoming = false;
            this.showOfoutNext = false;
        }
    }
    onNextToIncomingProtocal() {
        this.showIncMsgProtocol = true;
        this.showOutMsgProtocol = false;
        this.hideBasic = true;
        this.showFinalaFinish = false;
    }
    onNextOutgoingProtocol() {
        this.showOutMsgProtocol = true;
        this.showIncMsgProtocol = false;
        this.hideBasic = true;
        this.showFinalaFinish = false;
    }
    onALlProtocol() {
        this.showAllMsgProtocol = true;
        this.showAllProtocolInc = true;
        this.showAllProtocolOut = true;
        this.showIncMsgProtocol = false;
        this.showOutMsgProtocol = false;
        this.hideBasic = true;
        this.showFinalaFinish = false;
    }
    // selecting Protocol in Incoming
    onProtocalSlection(protocol) {
        console.log(protocol);
        this.dataType = [];
        this.incProtocol = protocol;
        if (protocol == 'TCP/IP') {
            this.dataType = ['ISO 8583 1987', 'ISO 8583 1993', 'ISO 8583 2003'];
        }
        else if (protocol == 'Https/Http') {
            this.dataType = [];
            this.dataType = ['XML', 'JSON'];
        }
        else if (protocol == 'MDB') {
            this.dataType = [];
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
        else if (protocol == 'EJB') {
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
        else if (protocol == 'DB Connection') {
            this.dataType = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
    }
    nextOfIncomingProtocol(protocol) {
        console.log(protocol);
        this.showIncMsgProtocol = false;
        this.showFinalaFinish = true;
        if (protocol.typeOfProtocol == "TCP/IP" && protocol.dataType == "ISO 8583 1987" || protocol.dataType == "ISO 8583 1993" || protocol.dataType == 'ISO 8583 2003') {
            this.fetchingIso();
            // this.showTcpInc=true;
            this.showHttpXmlInc = false;
            this.showEjbCsvInc = false;
            this.showHttpJsonInc = false;
            this.showMdbXmlInc = false;
            this.showMDBJsonInc = false;
            this.showMdbCSVInc = false;
            this.showMdbFlatInc = false;
            this.showEjbXMlInc = false;
            this.showEjbJsonInc = false;
            this.showEjbFlatInc = false;
            this.showDbXmlInc = false;
            this.showDBJsonInc = false;
            this.showDbCsvInc = false;
            this.showDbCsvInc = false;
            this.showDbFlatInc = false;
        }
        else if (protocol.typeOfProtocol == "Https/Http" && protocol.dataType == "XML") {
            this.showTcpInc = false;
            this.showHttpXmlInc = true;
            this.showEjbCsvInc = false;
            this.showHttpJsonInc = false;
            this.showMdbXmlInc = false;
            this.showMDBJsonInc = false;
            this.showMdbCSVInc = false;
            this.showMdbFlatInc = false;
            this.showEjbXMlInc = false;
            this.showEjbJsonInc = false;
            this.showEjbFlatInc = false;
            this.showDbXmlInc = false;
            this.showDBJsonInc = false;
            this.showDbCsvInc = false;
            this.showDbCsvInc = false;
            this.showDbFlatInc = false;
        }
        else if (protocol.typeOfProtocol == "Https/Http" && protocol.dataType == "JSON") {
            this.showTcpInc = false;
            this.showEjbCsvInc = false;
            this.showHttpXmlInc = false;
            this.showHttpJsonInc = true;
            this.showMdbXmlInc = false;
            this.showMDBJsonInc = false;
            this.showMdbCSVInc = false;
            this.showMdbFlatInc = false;
            this.showEjbXMlInc = false;
            this.showEjbJsonInc = false;
            this.showEjbFlatInc = false;
            this.showDbXmlInc = false;
            this.showDBJsonInc = false;
            this.showDbCsvInc = false;
            this.showDbCsvInc = false;
            this.showDbFlatInc = false;
        }
        else if (protocol.typeOfProtocol == "MDB" && protocol.dataType == "XML") {
            this.showTcpInc = false;
            this.showEjbCsvInc = false;
            this.showHttpXmlInc = false;
            this.showHttpJsonInc = false;
            this.showMdbXmlInc = true;
            this.showMDBJsonInc = false;
            this.showMdbCSVInc = false;
            this.showMdbFlatInc = false;
            this.showEjbXMlInc = false;
            this.showEjbJsonInc = false;
            this.showEjbFlatInc = false;
            this.showDbXmlInc = false;
            this.showDBJsonInc = false;
            this.showDbCsvInc = false;
            this.showDbCsvInc = false;
            this.showDbFlatInc = false;
        }
        else if (protocol.typeOfProtocol == "MDB" && protocol.dataType == "JSON") {
            this.showTcpInc = false;
            this.showHttpXmlInc = false;
            this.showHttpJsonInc = false;
            this.showMdbXmlInc = false;
            this.showEjbCsvInc = false;
            this.showMDBJsonInc = true;
            this.showMdbCSVInc = false;
            this.showMdbFlatInc = false;
            this.showEjbXMlInc = false;
            this.showEjbJsonInc = false;
            this.showEjbFlatInc = false;
            this.showDbXmlInc = false;
            this.showDBJsonInc = false;
            this.showDbCsvInc = false;
            this.showDbCsvInc = false;
            this.showDbFlatInc = false;
        }
        else if (protocol.typeOfProtocol == "MDB" && protocol.dataType == "CSV/EXCEL") {
            this.showTcpInc = false;
            this.showHttpXmlInc = false;
            this.showEjbCsvInc = false;
            this.showHttpJsonInc = false;
            this.showMdbXmlInc = false;
            this.showMDBJsonInc = false;
            this.showMdbCSVInc = true;
            this.showMdbFlatInc = false;
            this.showEjbXMlInc = false;
            this.showEjbJsonInc = false;
            this.showEjbFlatInc = false;
            this.showDbXmlInc = false;
            this.showDBJsonInc = false;
            this.showDbCsvInc = false;
            this.showDbCsvInc = false;
            this.showDbFlatInc = false;
        }
        else if (protocol.typeOfProtocol == "MDB" && protocol.dataType == "FLATFILE") {
            this.showTcpInc = false;
            this.showHttpXmlInc = false;
            this.showHttpJsonInc = false;
            this.showMdbXmlInc = false;
            this.showMDBJsonInc = false;
            this.showMdbCSVInc = false;
            this.showMdbFlatInc = true;
            this.showEjbCsvInc = false;
            this.showEjbXMlInc = false;
            this.showEjbJsonInc = false;
            this.showEjbFlatInc = false;
            this.showDbXmlInc = false;
            this.showDBJsonInc = false;
            this.showDbCsvInc = false;
            this.showDbCsvInc = false;
            this.showDbFlatInc = false;
        }
        else if (protocol.typeOfProtocol == "EJB" && protocol.dataType == "XML") {
            this.showTcpInc = false;
            this.showHttpXmlInc = false;
            this.showHttpJsonInc = false;
            this.showMdbXmlInc = false;
            this.showMDBJsonInc = false;
            this.showEjbCsvInc = false;
            this.showMdbCSVInc = false;
            this.showMdbFlatInc = false;
            this.showEjbXMlInc = true;
            this.showEjbJsonInc = false;
            this.showEjbFlatInc = false;
            this.showDbXmlInc = false;
            this.showDBJsonInc = false;
            this.showDbCsvInc = false;
            this.showDbCsvInc = false;
            this.showDbFlatInc = false;
        }
        else if (protocol.typeOfProtocol == "EJB" && protocol.dataType == "JSON") {
            this.showTcpInc = false;
            this.showHttpXmlInc = false;
            this.showHttpJsonInc = false;
            this.showMdbXmlInc = false;
            this.showEjbCsvInc = false;
            this.showMDBJsonInc = false;
            this.showMdbCSVInc = false;
            this.showMdbFlatInc = false;
            this.showEjbXMlInc = false;
            this.showEjbJsonInc = true;
            this.showEjbFlatInc = false;
            this.showDbXmlInc = false;
            this.showDBJsonInc = false;
            this.showDbCsvInc = false;
            this.showDbCsvInc = false;
            this.showDbFlatInc = false;
        }
        else if (protocol.typeOfProtocol == "EJB" && protocol.dataType == "CSV/EXCEL") {
            this.showTcpInc = false;
            this.showHttpXmlInc = false;
            this.showHttpJsonInc = false;
            this.showMdbXmlInc = false;
            this.showEjbCsvInc = true;
            this.showMDBJsonInc = false;
            this.showMdbCSVInc = false;
            this.showMdbFlatInc = false;
            this.showEjbXMlInc = false;
            this.showEjbJsonInc = false;
            this.showEjbFlatInc = false;
            this.showDbXmlInc = false;
            this.showDBJsonInc = false;
            this.showDbCsvInc = false;
            this.showDbCsvInc = false;
            this.showDbFlatInc = false;
        }
        else if (protocol.typeOfProtocol == "EJB" && protocol.dataType == "FLATFILE") {
            this.showTcpInc = false;
            this.showDbCsvInc = false;
            this.showHttpXmlInc = false;
            this.showHttpJsonInc = false;
            this.showMdbXmlInc = false;
            this.showEjbCsvInc = false;
            this.showMDBJsonInc = false;
            this.showMdbCSVInc = false;
            this.showMdbFlatInc = false;
            this.showEjbXMlInc = false;
            this.showEjbJsonInc = false;
            this.showEjbFlatInc = true;
            this.showDbXmlInc = false;
            this.showDBJsonInc = false;
            this.showDbCsvInc = false;
            this.showDbFlatInc = false;
        }
        else if (protocol.typeOfProtocol == "DB Connection" && protocol.dataType == "XML") {
            this.fetchDbconnection();
            this.showTcpInc = false;
            this.showHttpXmlInc = false;
            this.showHttpJsonInc = false;
            this.showMdbXmlInc = false;
            this.showDbCsvInc = false;
            this.showEjbCsvInc = false;
            this.showMDBJsonInc = false;
            this.showMdbCSVInc = false;
            this.showMdbFlatInc = false;
            this.showEjbXMlInc = false;
            this.showEjbJsonInc = false;
            this.showEjbFlatInc = false;
            this.showDbXmlInc = true;
            this.showDBJsonInc = false;
            this.showDbFlatInc = false;
        }
        else if (protocol.typeOfProtocol == "DB Connection" && protocol.dataType == "JSON") {
            this.showTcpInc = false;
            this.showHttpXmlInc = false;
            this.showHttpJsonInc = false;
            this.showDbCsvInc = false;
            this.showMdbXmlInc = false;
            this.showEjbCsvInc = false;
            this.showMDBJsonInc = false;
            this.showMdbCSVInc = false;
            this.showMdbFlatInc = false;
            this.showEjbXMlInc = false;
            this.showEjbJsonInc = false;
            this.showEjbFlatInc = false;
            this.showDbXmlInc = false;
            this.showDbCsvInc = false;
            this.showDBJsonInc = true;
            this.showDbFlatInc = false;
        }
        else if (protocol.typeOfProtocol == "DB Connection" && protocol.dataType == "CSV/EXCEL") {
            this.showTcpInc = false;
            this.showHttpXmlInc = false;
            this.showHttpJsonInc = false;
            this.showMdbXmlInc = false;
            this.showEjbCsvInc = false;
            this.showMDBJsonInc = false;
            this.showMdbCSVInc = false;
            this.showMdbFlatInc = false;
            this.showEjbXMlInc = false;
            this.showEjbJsonInc = false;
            this.showEjbFlatInc = false;
            this.showDbXmlInc = false;
            this.showDbCsvInc = false;
            this.showDBJsonInc = false;
            this.showDbCsvInc = true;
            this.showDbFlatInc = false;
        }
        else if (protocol.typeOfProtocol == "DB Connection" && protocol.dataType == "FLATFILE") {
            this.showTcpInc = false;
            this.showHttpXmlInc = false;
            this.showHttpJsonInc = false;
            this.showMdbXmlInc = false;
            this.showEjbCsvInc = false;
            this.showMDBJsonInc = false;
            this.showMdbCSVInc = false;
            this.showMdbFlatInc = false;
            this.showEjbXMlInc = false;
            this.showEjbJsonInc = false;
            this.showEjbFlatInc = false;
            this.showDbXmlInc = false;
            this.showDbCsvInc = false;
            this.showDBJsonInc = false;
            this.showDbCsvInc = false;
            this.showDbFlatInc = true;
        }
    }
    nextOfAllInc(protocol) {
        this.showOnlyAllBtn = true;
        this.showAllProtocolInc = false;
        if (protocol.typeOfProtocol == "TCP/IP" && protocol.dataType == "ISO 8583 1987" || protocol.dataType == "ISO 8583 1993" || protocol.dataType == 'ISO 8583 2003') {
            this.fetchingIso();
            this.showAllIncTcp = true;
            this.showAllIncHttpXml = false;
            this.showAllIncHttpJosn = false;
            this.showAllIncMdbXml = false;
            this.showAllIncMdbJson = false;
            this.showAllIncMdbCsv = false;
            this.showAllIncMdbFlat = false;
            this.showAllIncEjbXml = false;
            this.showAllIncEjbJson = false;
            this.showAllIncEjbCsv = false;
            this.showAllIncEjbFlat = false;
            this.showAllIncDbXml = false;
            this.showAllIncDbJson = false;
            this.showAllIncDbCsv = false;
            this.showAllIncDbFalt = false;
        }
        else if (protocol.typeOfProtocol == "Https/Http" && protocol.dataType == "XML") {
            this.showAllIncTcp = false;
            this.showAllIncHttpXml = true;
            this.showAllIncHttpJosn = false;
            this.showAllIncEjbFlat = false;
            this.showAllIncMdbXml = false;
            this.showAllIncMdbJson = false;
            this.showAllIncMdbCsv = false;
            this.showAllIncMdbFlat = false;
            this.showAllIncEjbXml = false;
            this.showAllIncEjbJson = false;
            this.showAllIncEjbCsv = false;
            this.showAllIncDbXml = false;
            this.showAllIncDbJson = false;
            this.showAllIncDbCsv = false;
            this.showAllIncDbFalt = false;
        }
        else if (protocol.typeOfProtocol == "Https/Http" && protocol.dataType == "JSON") {
            this.showAllIncTcp = false;
            this.showAllIncEjbFlat = false;
            this.showAllIncHttpXml = false;
            this.showAllIncHttpJosn = true;
            this.showAllIncMdbXml = false;
            this.showAllIncMdbJson = false;
            this.showAllIncMdbCsv = false;
            this.showAllIncMdbFlat = false;
            this.showAllIncEjbXml = false;
            this.showAllIncEjbJson = false;
            this.showAllIncEjbCsv = false;
            this.showAllIncDbXml = false;
            this.showAllIncDbJson = false;
            this.showAllIncDbCsv = false;
            this.showAllIncDbFalt = false;
        }
        else if (protocol.typeOfProtocol == "MDB" && protocol.dataType == "XML") {
            this.showAllIncTcp = false;
            this.showAllIncEjbFlat = false;
            this.showAllIncHttpXml = false;
            this.showAllIncHttpJosn = false;
            this.showAllIncMdbXml = true;
            this.showAllIncMdbJson = false;
            this.showAllIncMdbCsv = false;
            this.showAllIncMdbFlat = false;
            this.showAllIncEjbXml = false;
            this.showAllIncEjbJson = false;
            this.showAllIncEjbCsv = false;
            this.showAllIncDbXml = false;
            this.showAllIncDbJson = false;
            this.showAllIncDbCsv = false;
            this.showAllIncDbFalt = false;
        }
        else if (protocol.typeOfProtocol == "MDB" && protocol.dataType == "JSON") {
            this.showAllIncTcp = false;
            this.showAllIncHttpXml = false;
            this.showAllIncEjbFlat = false;
            this.showAllIncHttpJosn = false;
            this.showAllIncMdbXml = false;
            this.showAllIncMdbJson = true;
            this.showAllIncMdbCsv = false;
            this.showAllIncMdbFlat = false;
            this.showAllIncEjbXml = false;
            this.showAllIncEjbJson = false;
            this.showAllIncEjbCsv = false;
            this.showAllIncDbXml = false;
            this.showAllIncDbJson = false;
            this.showAllIncDbCsv = false;
            this.showAllIncDbFalt = false;
        }
        else if (protocol.typeOfProtocol == "MDB" && protocol.dataType == "CSV/EXCEL") {
            this.showAllIncTcp = false;
            this.showAllIncHttpXml = false;
            this.showAllIncHttpJosn = false;
            this.showAllIncMdbXml = false;
            this.showAllIncMdbJson = false;
            this.showAllIncMdbCsv = true;
            this.showAllIncEjbFlat = false;
            this.showAllIncMdbFlat = false;
            this.showAllIncEjbJson = false;
            this.showAllIncEjbCsv = false;
            this.showAllIncDbXml = false;
            this.showAllIncDbJson = false;
            this.showAllIncDbCsv = false;
            this.showAllIncDbFalt = false;
        }
        else if (protocol.typeOfProtocol == "MDB" && protocol.dataType == "FLATFILE") {
            this.showAllIncTcp = false;
            this.showAllIncHttpXml = false;
            this.showAllIncHttpJosn = false;
            this.showAllIncMdbXml = false;
            this.showAllIncMdbJson = false;
            this.showAllIncMdbCsv = false;
            this.showAllIncEjbFlat = false;
            this.showAllIncMdbFlat = true;
            this.showAllIncEjbXml = false;
            this.showAllIncEjbJson = false;
            this.showAllIncEjbCsv = false;
            this.showAllIncDbXml = false;
            this.showAllIncDbJson = false;
            this.showAllIncDbCsv = false;
            this.showAllIncDbFalt = false;
        }
        else if (protocol.typeOfProtocol == "EJB" && protocol.dataType == "XML") {
            this.showAllIncTcp = false;
            this.showAllIncHttpXml = false;
            this.showAllIncHttpJosn = false;
            this.showAllIncMdbXml = false;
            this.showAllIncMdbJson = false;
            this.showAllIncMdbCsv = false;
            this.showAllIncEjbFlat = false;
            this.showAllIncMdbFlat = false;
            this.showAllIncEjbXml = true;
            this.showAllIncEjbJson = false;
            this.showAllIncEjbCsv = false;
            this.showAllIncDbXml = false;
            this.showAllIncDbJson = false;
            this.showAllIncDbCsv = false;
            this.showAllIncDbFalt = false;
        }
        else if (protocol.typeOfProtocol == "EJB" && protocol.dataType == "JSON") {
            this.showAllIncTcp = false;
            this.showAllIncHttpXml = false;
            this.showAllIncHttpJosn = false;
            this.showAllIncEjbFlat = false;
            this.showAllIncMdbXml = false;
            this.showAllIncMdbJson = false;
            this.showAllIncMdbCsv = false;
            this.showAllIncMdbFlat = false;
            this.showAllIncEjbXml = false;
            this.showAllIncEjbJson = true;
            this.showAllIncEjbCsv = false;
            this.showAllIncDbXml = false;
            this.showAllIncDbJson = false;
            this.showAllIncDbCsv = false;
            this.showAllIncDbFalt = false;
        }
        else if (protocol.typeOfProtocol == "EJB" && protocol.dataType == "CSV/EXCEL") {
            this.showAllIncTcp = false;
            this.showAllIncHttpXml = false;
            this.showAllIncHttpJosn = false;
            this.showAllIncEjbFlat = false;
            this.showAllIncMdbXml = false;
            this.showAllIncMdbJson = false;
            this.showAllIncMdbCsv = false;
            this.showAllIncMdbFlat = false;
            this.showAllIncEjbXml = false;
            this.showAllIncEjbJson = false;
            this.showAllIncEjbCsv = true;
            this.showAllIncDbXml = false;
            this.showAllIncDbJson = false;
            this.showAllIncDbCsv = false;
            this.showAllIncDbFalt = false;
        }
        else if (protocol.typeOfProtocol == "EJB" && protocol.dataType == "FLATFILE") {
            this.showAllIncTcp = false;
            this.showAllIncHttpXml = false;
            this.showAllIncHttpJosn = false;
            this.showAllIncEjbFlat = true;
            this.showAllIncMdbXml = false;
            this.showAllIncMdbJson = false;
            this.showAllIncMdbCsv = false;
            this.showAllIncMdbFlat = false;
            this.showAllIncEjbXml = false;
            this.showAllIncEjbJson = false;
            this.showAllIncEjbCsv = false;
            this.showAllIncDbXml = false;
            this.showAllIncDbJson = false;
            this.showAllIncDbCsv = false;
            this.showAllIncDbFalt = false;
        }
        else if (protocol.typeOfProtocol == "DB Connection" && protocol.dataType == "XML") {
            this.fetchDbconnection();
            this.showAllIncTcp = false;
            this.showAllIncHttpXml = false;
            this.showAllIncHttpJosn = false;
            this.showAllIncDbCsv = false;
            this.showAllIncEjbFlat = false;
            this.showAllIncMdbXml = false;
            this.showAllIncMdbJson = false;
            this.showAllIncMdbCsv = false;
            this.showAllIncMdbFlat = false;
            this.showAllIncEjbXml = false;
            this.showAllIncEjbJson = false;
            this.showAllIncEjbCsv = false;
            this.showAllIncDbXml = true;
            this.showAllIncDbJson = false;
            this.showAllIncDbFalt = false;
        }
        else if (protocol.typeOfProtocol == "DB Connection" && protocol.dataType == "JSON") {
            this.showAllIncTcp = false;
            this.showAllIncHttpXml = false;
            this.showAllIncHttpJosn = false;
            this.showAllIncEjbFlat = false;
            this.showAllIncMdbXml = false;
            this.showAllIncMdbJson = false;
            this.showAllIncMdbCsv = false;
            this.showAllIncMdbFlat = false;
            this.showAllIncEjbXml = false;
            this.showAllIncEjbJson = false;
            this.showAllIncEjbCsv = false;
            this.showAllIncDbXml = false;
            this.showAllIncDbJson = true;
            this.showAllIncDbCsv = false;
            this.showAllIncDbFalt = false;
        }
        else if (protocol.typeOfProtocol == "DB Connection" && protocol.dataType == "CSV/EXCEL") {
            this.showAllIncTcp = false;
            this.showAllIncHttpXml = false;
            this.showAllIncHttpJosn = false;
            this.showAllIncEjbFlat = false;
            this.showAllIncMdbXml = false;
            this.showAllIncMdbJson = false;
            this.showAllIncMdbCsv = false;
            this.showAllIncMdbFlat = false;
            this.showAllIncEjbXml = false;
            this.showAllIncEjbJson = false;
            this.showAllIncEjbCsv = false;
            this.showAllIncDbXml = false;
            this.showAllIncDbJson = false;
            this.showAllIncDbCsv = true;
            this.showAllIncDbFalt = false;
        }
        else if (protocol.typeOfProtocol == "DB Connection" && protocol.dataType == "FLATFILE") {
            this.showAllIncTcp = false;
            this.showAllIncHttpXml = false;
            this.showAllIncHttpJosn = false;
            this.showAllIncEjbFlat = false;
            this.showAllIncMdbXml = false;
            this.showAllIncMdbJson = false;
            this.showAllIncMdbCsv = false;
            this.showAllIncMdbFlat = false;
            this.showAllIncEjbXml = false;
            this.showAllIncEjbJson = false;
            this.showAllIncEjbCsv = false;
            this.showAllIncDbXml = false;
            this.showAllIncDbJson = false;
            this.showAllIncDbCsv = false;
            this.showAllIncDbFalt = true;
        }
    }
    nextOfAllout(protocol) {
        console.log(protocol);
        this.showOnlyAllBtn = true;
        this.onlyAllOut = true;
        this.showAllProtocolOut = false;
        if (protocol.typeOfProtocol == "TCP/IP" && protocol.dataType == "ISO 8583 1987" || protocol.dataType == "ISO 8583 1993" || protocol.dataType == 'ISO 8583 2003') {
            this.fetchingIso();
            this.showAllTcpOut = true;
            this.showAllHttpXmlOut = false;
            this.showAllHttpJsonOut = false;
            this.showAllMdbXmlOut = false;
            this.showAllMdbJsonOut = false;
            this.showAllMdbCsvOut = false;
            this.showAllMdbExcelOut = false;
            this.showAllEjbExcelOut = false;
            this.showAllEjbJsonOut = false;
            this.showAllEjbFlatOut = false;
            this.showAllEjbXmlOut = false;
            this.showAllDbXmlOut = false;
            this.showAllDbJsonOut = false;
            this.showAllDbExcelOut = false;
            this.showAllDbflatOut = false;
        }
        else if (protocol.typeOfProtocol == "Https/Http" && protocol.dataType == "XML") {
            this.showAllTcpOut = false;
            this.showAllHttpXmlOut = true;
            this.showAllHttpJsonOut = false;
            this.showAllMdbXmlOut = false;
            this.showAllMdbJsonOut = false;
            this.showAllMdbCsvOut = false;
            this.showAllMdbExcelOut = false;
            this.showAllEjbExcelOut = false;
            this.showAllEjbXmlOut = false;
            this.showAllEjbJsonOut = false;
            this.showAllEjbFlatOut = false;
            this.showAllDbXmlOut = false;
            this.showAllDbJsonOut = false;
            this.showAllDbExcelOut = false;
            this.showAllDbflatOut = false;
        }
        else if (protocol.typeOfProtocol == "Https/Http" && protocol.dataType == "JSON") {
            this.showAllTcpOut = false;
            this.showAllHttpXmlOut = false;
            this.showAllHttpJsonOut = false;
            this.showAllMdbXmlOut = true;
            this.showAllMdbJsonOut = false;
            this.showAllMdbCsvOut = false;
            this.showAllMdbExcelOut = false;
            this.showAllEjbExcelOut = false;
            this.showAllEjbXmlOut = false;
            this.showAllEjbJsonOut = false;
            this.showAllEjbFlatOut = false;
            this.showAllDbXmlOut = false;
            this.showAllDbJsonOut = false;
            this.showAllDbExcelOut = false;
            this.showAllDbflatOut = false;
        }
        else if (protocol.typeOfProtocol == "MDB" && protocol.dataType == "XML") {
            this.showAllTcpOut = false;
            this.showAllHttpXmlOut = false;
            this.showAllHttpJsonOut = false;
            this.showAllMdbXmlOut = true;
            this.showAllMdbJsonOut = false;
            this.showAllMdbCsvOut = false;
            this.showAllMdbExcelOut = false;
            this.showAllEjbExcelOut = false;
            this.showAllEjbXmlOut = false;
            this.showAllEjbJsonOut = false;
            this.showAllEjbFlatOut = false;
            this.showAllDbXmlOut = false;
            this.showAllDbJsonOut = false;
            this.showAllDbExcelOut = false;
            this.showAllDbflatOut = false;
        }
        else if (protocol.typeOfProtocol == "MDB" && protocol.dataType == "JSON") {
            this.showAllTcpOut = false;
            this.showAllHttpXmlOut = false;
            this.showAllHttpJsonOut = false;
            this.showAllMdbXmlOut = false;
            this.showAllMdbJsonOut = true;
            this.showAllMdbCsvOut = false;
            this.showAllMdbExcelOut = false;
            this.showAllEjbExcelOut = false;
            this.showAllEjbXmlOut = false;
            this.showAllEjbJsonOut = false;
            this.showAllEjbFlatOut = false;
            this.showAllDbXmlOut = false;
            this.showAllDbJsonOut = false;
            this.showAllDbExcelOut = false;
            this.showAllDbflatOut = false;
        }
        else if (protocol.typeOfProtocol == "MDB" && protocol.dataType == "CSV/EXCEL") {
            this.showAllTcpOut = false;
            this.showAllHttpXmlOut = false;
            this.showAllHttpJsonOut = false;
            this.showAllMdbXmlOut = false;
            this.showAllMdbJsonOut = false;
            this.showAllMdbCsvOut = true;
            this.showAllMdbExcelOut = false;
            this.showAllEjbExcelOut = false;
            this.showAllEjbXmlOut = false;
            this.showAllEjbJsonOut = false;
            this.showAllEjbFlatOut = false;
            this.showAllDbXmlOut = false;
            this.showAllDbJsonOut = false;
            this.showAllDbExcelOut = false;
            this.showAllDbflatOut = false;
        }
        else if (protocol.typeOfProtocol == "MDB" && protocol.dataType == "FLATFILE") {
            this.showAllTcpOut = false;
            this.showAllHttpXmlOut = false;
            this.showAllHttpJsonOut = false;
            this.showAllMdbXmlOut = false;
            this.showAllMdbJsonOut = false;
            this.showAllMdbCsvOut = false;
            this.showAllMdbExcelOut = true;
            this.showAllEjbExcelOut = false;
            this.showAllEjbXmlOut = false;
            this.showAllEjbJsonOut = false;
            this.showAllEjbFlatOut = false;
            this.showAllDbXmlOut = false;
            this.showAllDbJsonOut = false;
            this.showAllDbExcelOut = false;
            this.showAllDbflatOut = false;
        }
        else if (protocol.typeOfProtocol == "EJB" && protocol.dataType == "CSV/EXCEL") {
            this.showAllTcpOut = false;
            this.showAllHttpXmlOut = false;
            this.showAllHttpJsonOut = false;
            this.showAllMdbXmlOut = false;
            this.showAllMdbJsonOut = false;
            this.showAllMdbCsvOut = false;
            this.showAllMdbExcelOut = false;
            this.showAllEjbExcelOut = true;
            this.showAllEjbXmlOut = false;
            this.showAllEjbJsonOut = false;
            this.showAllEjbFlatOut = false;
            this.showAllDbXmlOut = false;
            this.showAllDbJsonOut = false;
            this.showAllDbExcelOut = false;
            this.showAllDbflatOut = false;
        }
        else if (protocol.typeOfProtocol == "EJB" && protocol.dataType == "XML") {
            this.showAllTcpOut = false;
            this.showAllHttpXmlOut = false;
            this.showAllHttpJsonOut = false;
            this.showAllMdbXmlOut = false;
            this.showAllMdbJsonOut = false;
            this.showAllMdbCsvOut = false;
            this.showAllMdbExcelOut = false;
            this.showAllEjbExcelOut = false;
            this.showAllEjbXmlOut = true;
            this.showAllEjbJsonOut = false;
            this.showAllEjbFlatOut = false;
            this.showAllDbXmlOut = false;
            this.showAllDbJsonOut = false;
            this.showAllDbExcelOut = false;
            this.showAllDbflatOut = false;
        }
        else if (protocol.typeOfProtocol == "EJB" && protocol.dataType == "JSON") {
            this.showAllTcpOut = false;
            this.showAllHttpXmlOut = false;
            this.showAllHttpJsonOut = false;
            this.showAllMdbXmlOut = false;
            this.showAllMdbJsonOut = false;
            this.showAllMdbCsvOut = false;
            this.showAllMdbExcelOut = false;
            this.showAllEjbExcelOut = false;
            this.showAllEjbXmlOut = false;
            this.showAllEjbJsonOut = true;
            this.showAllEjbFlatOut = false;
            this.showAllDbXmlOut = false;
            this.showAllDbJsonOut = false;
            this.showAllDbExcelOut = false;
            this.showAllDbflatOut = false;
        }
        else if (protocol.typeOfProtocol == "EJB" && protocol.dataType == "FLATFILE") {
            this.showAllTcpOut = false;
            this.showAllHttpXmlOut = false;
            this.showAllHttpJsonOut = false;
            this.showAllMdbXmlOut = false;
            this.showAllMdbJsonOut = false;
            this.showAllMdbCsvOut = false;
            this.showAllMdbExcelOut = false;
            this.showAllDbJsonOut = false;
            this.showAllEjbExcelOut = false;
            this.showAllEjbXmlOut = false;
            this.showAllEjbJsonOut = false;
            this.showAllEjbFlatOut = true;
            this.showAllDbXmlOut = false;
            this.showAllDbExcelOut = false;
            this.showAllDbflatOut = false;
        }
        else if (protocol.typeOfProtocol == "DB Connection" && protocol.dataType == "XML") {
            this.fetchDbconnection();
            this.showAllTcpOut = false;
            this.showAllHttpXmlOut = false;
            this.showAllHttpJsonOut = false;
            this.showAllMdbXmlOut = false;
            this.showAllMdbJsonOut = false;
            this.showAllMdbCsvOut = false;
            this.showAllMdbExcelOut = false;
            this.showAllEjbExcelOut = false;
            this.showAllEjbXmlOut = false;
            this.showAllEjbJsonOut = false;
            this.showAllEjbFlatOut = false;
            this.showAllDbXmlOut = true;
            this.showAllDbJsonOut = false;
            this.showAllDbExcelOut = false;
            this.showAllDbflatOut = false;
        }
        else if (protocol.typeOfProtocol == "DB Connection" && protocol.dataType == "JSON") {
            this.showAllTcpOut = false;
            this.showAllHttpXmlOut = false;
            this.showAllHttpJsonOut = false;
            this.showAllMdbXmlOut = false;
            this.showAllMdbJsonOut = false;
            this.showAllMdbCsvOut = false;
            this.showAllMdbExcelOut = false;
            this.showAllEjbExcelOut = false;
            this.showAllEjbXmlOut = false;
            this.showAllEjbJsonOut = false;
            this.showAllEjbFlatOut = false;
            this.showAllDbXmlOut = false;
            this.showAllDbJsonOut = true;
            this.showAllDbExcelOut = false;
            this.showAllDbflatOut = false;
        }
        else if (protocol.typeOfProtocol == "DB Connection" && protocol.dataType == "CSV/EXCEL") {
            this.showAllTcpOut = false;
            this.showAllHttpXmlOut = false;
            this.showAllHttpJsonOut = false;
            this.showAllMdbXmlOut = false;
            this.showAllDbflatOut = false;
            this.showAllMdbJsonOut = false;
            this.showAllMdbCsvOut = false;
            this.showAllMdbExcelOut = false;
            this.showAllEjbExcelOut = false;
            this.showAllEjbXmlOut = false;
            this.showAllEjbJsonOut = false;
            this.showAllEjbFlatOut = false;
            this.showAllDbXmlOut = false;
            this.showAllDbJsonOut = false;
            this.showAllDbExcelOut = true;
        }
        else if (protocol.typeOfProtocol == "DB Connection" && protocol.dataType == "FLATFILE") {
            this.showAllTcpOut = false;
            this.showAllHttpXmlOut = false;
            this.showAllHttpJsonOut = false;
            this.showAllMdbXmlOut = false;
            this.showAllDbflatOut = true;
            this.showAllMdbJsonOut = false;
            this.showAllMdbCsvOut = false;
            this.showAllMdbExcelOut = false;
            this.showAllEjbExcelOut = false;
            this.showAllEjbXmlOut = false;
            this.showAllEjbJsonOut = false;
            this.showAllEjbFlatOut = false;
            this.showAllDbXmlOut = false;
            this.showAllDbJsonOut = false;
            this.showAllDbExcelOut = false;
        }
    }
    incomingDataypeSelection(dataType) {
        console.log(dataType);
        this.incDataType = dataType;
    }
    // Reset Incoming
    onResetIncoming(protocol) {
        console.log("protocol", protocol);
        protocol.typeOfProtocol = '';
        protocol.dataType = '';
    }
    // previousOfIncoming
    previousOfIncoming() {
        this.hideBasic = false;
        this.showIncMsgProtocol = false;
        this.showAllMsgProtocol = false; //all
        this.showAuditLog = false;
        console.log("here previous");
    }
    onPreviousToProtocolScreen() {
        if (this.createExtSys1.openToMessage === 'Incoming') {
            this.showFinalaFinish = false;
            this.showDBJsonInc = false;
            this.showDbCsvInc = false;
            this.showEjbFlatInc = false;
            this.showDbXmlInc = false;
            this.showTcpInc = false;
            this.showEjbFlatInc = false;
            this.showEjbJsonInc = false;
            this.showEjbCsvInc = false;
            this.showIncMsgProtocol = true;
            this.showHttpXmlInc = false;
            this.showHttpJsonInc = false;
            this.showMdbXmlInc = false;
            this.showMDBJsonInc = false;
            this.showMdbCSVInc = false;
            this.showMdbFlatInc = false;
            this.showEjbXMlInc = false;
            this.showEjbJsonInc = false;
            this.showAuditLog = false;
        }
        else if (this.createExtSys1.openToMessage === 'OutComing') {
            this.showFinalaFinish = false;
            this.showTcpOut = false;
            this.showHttpXmlOut = false;
            this.showOutMsgProtocol = true;
            this.showAuditLog = false;
            this.showHttpJsonOut = false;
            this.showMdbXmlOut = false;
            this.showMdbJsonOut = false;
            this.showMdbCsvOut = false;
            this.showMdbFlatOut = false;
            this.showEjbXMlOut = false;
            this.showEjbJsonOut = false;
            this.showEjbCsvOut = false;
            this.showEjbFlatOut = false;
            this.showDBXmlOut = false;
            this.showDBJsonOut = false;
            this.showDbCsvOut = false;
            this.showDbFaltOut = false;
        }
        else if (this.createExtSys1.openToMessage == 'All') {
            this.showFinalaFinish = false;
            this.showAllMsgProtocol = true;
            this.showAllProtocolInc = true;
            this.showAllIncTcp = false;
            this.showAllIncHttpXml = false;
            this.showAllIncHttpJosn = false;
            this.showAllIncMdbXml = false;
            this.showAllIncMdbJson = false;
            this.showAuditLog = false;
            this.showAllIncMdbFlat = false;
            this.showAllIncEjbXml = false;
            this.showAllIncEjbJson = false;
            this.showAllIncEjbCsv = false;
            this.showAllIncEjbFlat = false;
            this.showAllIncDbXml = false;
            this.showAllIncDbJson = false;
            this.showAllIncDbCsv = false;
            this.showAllIncDbFalt = false;
        }
    }
    onPreviousOnlyAllInc() {
        console.log(this.tabGroup._tabs.first.textLabel);
        if (this.tabGroup._tabs.first.textLabel === 'Incoming') {
            console.log("coming in tab 1");
            this.showAllProtocolInc = true;
            this.showAllIncTcp = false;
            this.showOnlyAllBtn = false;
            this.showAllIncHttpXml = false;
            this.showAllIncHttpJosn = false;
            this.showAllIncMdbXml = false;
            this.showAllIncMdbJson = false;
            this.showAllIncMdbFlat = false;
            this.showAllIncEjbXml = false;
            this.showAllIncEjbJson = false;
            this.showAllIncEjbCsv = false;
            this.showAllIncEjbFlat = false;
            this.showAllIncDbXml = false;
            this.showAllIncDbJson = false;
            this.showAllIncDbCsv = false;
            this.showAllIncDbFalt = false;
            this.showAllIncMdbCsv = false;
        }
    }
    onPreviousOnlyAllOut() {
        this.onlyAllOut = false;
        this.showAllProtocolOut = true;
        this.showOnlyAllBtn = false;
        this.showAllTcpOut = false;
        this.showAllHttpXmlOut = false;
        this.showAllHttpJsonOut = false;
        this.showAllMdbXmlOut = false;
        this.showAllMdbJsonOut = false;
        this.showAllMdbCsvOut = false;
        this.showAllMdbExcelOut = false;
        this.showAllEjbExcelOut = false;
        this.showAllEjbXmlOut = false;
        this.showAllEjbJsonOut = false;
        this.showAllEjbFlatOut = false;
        this.showAllDbXmlOut = false;
        this.showAllDbJsonOut = false;
        this.showAllDbExcelOut = false;
        this.showAllDbflatOut = false;
    }
    tabChanged(event) {
        console.log(event);
        this.tabText = event.tab.textLabel;
    }
    //selecting Protocol Outgoing
    onOutgoingProtocolSelction(protocol) {
        console.log(protocol);
        this.protocoloutGoing = protocol;
        this.dataTypeForOutGoing = [];
        if (protocol == 'TCP/IP') {
            this.dataTypeForOutGoing = ['ISO 8583 1987', 'ISO 8583 1993', 'ISO 8583 2003'];
        }
        else if (protocol == 'Https/Http') {
            this.dataTypeForOutGoing = [];
            this.dataTypeForOutGoing = ['XML', 'JSON'];
        }
        else if (protocol == 'MDB') {
            this.dataTypeForOutGoing = [];
            this.dataTypeForOutGoing = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
        else if (protocol == 'EJB') {
            this.dataTypeForOutGoing = [];
            this.dataTypeForOutGoing = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
        else if (protocol == 'DB Connection') {
            this.dataTypeForOutGoing = [];
            this.dataTypeForOutGoing = ['XML', 'JSON', 'CSV/EXCEL', 'FLATFILE'];
        }
    }
    onDataTypeOFOutgoingProtocol(dataType) {
        console.log(dataType);
        this.dataTypeOutgoing = dataType;
    }
    onResetingOutgoing(protocolOut) {
        protocolOut.typeOfProtocol = '';
        protocolOut.dataType = '';
    }
    previousOfOutgoing() {
        this.hideBasic = false;
        this.showOutMsgProtocol = false;
        this.showAllMsgProtocol = false; //all
    }
    nextOfOutgoinProtocol(protocol) {
        this.showOutMsgProtocol = false;
        this.showFinalaFinish = true;
        if (protocol.typeOfProtocol == "TCP/IP" && protocol.dataType == "ISO 8583 1987" || protocol.dataType == "ISO 8583 1993" || protocol.dataType == 'ISO 8583 2003') {
            this.fetchingIso();
            this.showTcpOut = true;
            this.showHttpXmlOut = false;
            this.showHttpJsonOut = false;
            this.showEjbJsonOut = false;
            this.showMdbXmlOut = false;
            this.showMdbJsonOut = false;
            this.showMdbCsvOut = false;
            this.showMdbFlatOut = false;
            this.showEjbXMlOut = false;
            this.showEjbFlatOut = false;
            this.showEjbCsvOut = false;
            this.showDBXmlOut = false;
            this.showDBJsonOut = false;
        }
        else if (protocol.typeOfProtocol == "Https/Http" && protocol.dataType == "XML") {
            this.showTcpOut = false;
            this.showHttpXmlOut = true;
            this.showEjbJsonOut = false;
            this.showHttpJsonOut = false;
            this.showMdbXmlOut = false;
            this.showMdbJsonOut = false;
            this.showMdbCsvOut = false;
            this.showMdbFlatOut = false;
            this.showEjbXMlOut = false;
            this.showEjbFlatOut = false;
            this.showEjbCsvOut = false;
            this.showDBXmlOut = false;
            this.showDBJsonOut = false;
            this.showDbCsvOut = false;
            this.showDbFaltOut = false;
        }
        else if (protocol.typeOfProtocol == "Https/Http" && protocol.dataType == "JSON") {
            this.showTcpOut = false;
            this.showHttpXmlOut = false;
            this.showHttpJsonOut = true;
            this.showEjbJsonOut = false;
            this.showMdbXmlOut = false;
            this.showMdbJsonOut = false;
            this.showMdbCsvOut = false;
            this.showMdbFlatOut = false;
            this.showEjbXMlOut = false;
            this.showEjbFlatOut = false;
            this.showEjbCsvOut = false;
            this.showDBXmlOut = false;
            this.showDBJsonOut = false;
            this.showDbCsvOut = false;
            this.showDbFaltOut = false;
        }
        else if (protocol.typeOfProtocol == "MDB" && protocol.dataType == "XML") {
            this.showTcpOut = false;
            this.showEjbJsonOut = false;
            this.showHttpXmlOut = false;
            this.showHttpJsonOut = false;
            this.showMdbXmlOut = true;
            this.showMdbJsonOut = false;
            this.showMdbCsvOut = false;
            this.showMdbFlatOut = false;
            this.showEjbXMlOut = false;
            this.showEjbFlatOut = false;
            this.showEjbCsvOut = false;
            this.showDBXmlOut = false;
            this.showDBJsonOut = false;
            this.showDbCsvOut = false;
            this.showDbFaltOut = false;
        }
        else if (protocol.typeOfProtocol == "MDB" && protocol.dataType == "JSON") {
            this.showTcpOut = false;
            this.showEjbJsonOut = false;
            this.showHttpXmlOut = false;
            this.showHttpJsonOut = false;
            this.showMdbXmlOut = false;
            this.showMdbJsonOut = true;
            this.showMdbCsvOut = false;
            this.showMdbFlatOut = false;
            this.showEjbXMlOut = false;
            this.showEjbFlatOut = false;
            this.showEjbCsvOut = false;
            this.showDBXmlOut = false;
            this.showDBJsonOut = false;
            this.showDbCsvOut = false;
            this.showDbFaltOut = false;
        }
        else if (protocol.typeOfProtocol == "MDB" && protocol.dataType == "CSV/EXCEL") {
            this.showTcpOut = false;
            this.showHttpXmlOut = false;
            this.showEjbJsonOut = false;
            this.showHttpJsonOut = false;
            this.showMdbXmlOut = false;
            this.showMdbJsonOut = false;
            this.showMdbCsvOut = true;
            this.showMdbFlatOut = false;
            this.showEjbXMlOut = false;
            this.showEjbFlatOut = false;
            this.showEjbCsvOut = false;
            this.showDBXmlOut = false;
            this.showDBJsonOut = false;
            this.showDbCsvOut = false;
            this.showDbFaltOut = false;
        }
        else if (protocol.typeOfProtocol == "MDB" && protocol.dataType == "FLATFILE") {
            this.showTcpOut = false;
            this.showEjbJsonOut = false;
            this.showHttpXmlOut = false;
            this.showHttpJsonOut = false;
            this.showMdbXmlOut = false;
            this.showMdbJsonOut = false;
            this.showMdbCsvOut = false;
            this.showMdbFlatOut = true;
            this.showEjbXMlOut = false;
            this.showEjbFlatOut = false;
            this.showEjbCsvOut = false;
            this.showDBXmlOut = false;
            this.showDBJsonOut = false;
            this.showDbCsvOut = false;
            this.showDbFaltOut = false;
        }
        else if (protocol.typeOfProtocol == "EJB" && protocol.dataType == "XML") {
            this.showTcpOut = false;
            this.showHttpXmlOut = false;
            this.showHttpJsonOut = false;
            this.showMdbXmlOut = false;
            this.showEjbJsonOut = false;
            this.showMdbJsonOut = false;
            this.showMdbCsvOut = false;
            this.showMdbFlatOut = false;
            this.showEjbXMlOut = true;
            this.showEjbFlatOut = false;
            this.showEjbCsvOut = false;
            this.showDBXmlOut = false;
            this.showDBJsonOut = false;
            this.showDbCsvOut = false;
            this.showDbFaltOut = false;
        }
        else if (protocol.typeOfProtocol == "EJB" && protocol.dataType == "JSON") {
            this.showTcpOut = false;
            this.showHttpXmlOut = false;
            this.showHttpJsonOut = false;
            this.showMdbXmlOut = false;
            this.showEjbJsonOut = true;
            this.showMdbJsonOut = false;
            this.showMdbCsvOut = false;
            this.showMdbFlatOut = false;
            this.showEjbXMlOut = false;
            this.showEjbFlatOut = false;
            this.showEjbCsvOut = false;
            this.showDBXmlOut = false;
            this.showDBJsonOut = false;
            this.showDbCsvOut = false;
            this.showDbFaltOut = false;
        }
        else if (protocol.typeOfProtocol == "EJB" && protocol.dataType == "CSV/EXCEL") {
            this.showTcpOut = false;
            this.showHttpXmlOut = false;
            this.showHttpJsonOut = false;
            this.showMdbXmlOut = false;
            this.showEjbJsonOut = false;
            this.showMdbJsonOut = false;
            this.showMdbCsvOut = false;
            this.showMdbFlatOut = false;
            this.showEjbXMlOut = false;
            this.showEjbFlatOut = false;
            this.showEjbCsvOut = true;
            this.showDBXmlOut = false;
            this.showDBJsonOut = false;
            this.showDbCsvOut = false;
            this.showDbFaltOut = false;
        }
        else if (protocol.typeOfProtocol == "EJB" && protocol.dataType == "FLATFILE") {
            this.showTcpOut = false;
            this.showHttpXmlOut = false;
            this.showHttpJsonOut = false;
            this.showMdbXmlOut = false;
            this.showEjbJsonOut = false;
            this.showMdbJsonOut = false;
            this.showMdbCsvOut = false;
            this.showMdbFlatOut = false;
            this.showEjbXMlOut = false;
            this.showEjbFlatOut = true;
            this.showEjbCsvOut = false;
            this.showDBXmlOut = false;
            this.showDBJsonOut = false;
            this.showDbCsvOut = false;
            this.showDbFaltOut = false;
        }
        else if (protocol.typeOfProtocol == "DB Connection" && protocol.dataType == "XML") {
            this.fetchDbconnection();
            this.showTcpOut = false;
            this.showHttpXmlOut = false;
            this.showHttpJsonOut = false;
            this.showMdbXmlOut = false;
            this.showEjbJsonOut = false;
            this.showMdbJsonOut = false;
            this.showMdbCsvOut = false;
            this.showMdbFlatOut = false;
            this.showEjbXMlOut = false;
            this.showEjbFlatOut = false;
            this.showEjbCsvOut = false;
            this.showDBXmlOut = true;
            this.showDBJsonOut = false;
            this.showDbCsvOut = false;
            this.showDbFaltOut = false;
        }
        else if (protocol.typeOfProtocol == "DB Connection" && protocol.dataType == "JSON") {
            this.showTcpOut = false;
            this.showHttpXmlOut = false;
            this.showHttpJsonOut = false;
            this.showMdbXmlOut = false;
            this.showEjbJsonOut = false;
            this.showMdbJsonOut = false;
            this.showMdbCsvOut = false;
            this.showMdbFlatOut = false;
            this.showEjbXMlOut = false;
            this.showEjbFlatOut = false;
            this.showEjbCsvOut = false;
            this.showDBXmlOut = false;
            this.showDBJsonOut = true;
            this.showDbCsvOut = false;
            this.showDbFaltOut = false;
        }
        else if (protocol.typeOfProtocol == "DB Connection" && protocol.dataType == "CSV/EXCEL") {
            this.showTcpOut = false;
            this.showHttpXmlOut = false;
            this.showHttpJsonOut = false;
            this.showMdbXmlOut = false;
            this.showEjbJsonOut = false;
            this.showMdbJsonOut = false;
            this.showMdbCsvOut = false;
            this.showMdbFlatOut = false;
            this.showEjbXMlOut = false;
            this.showEjbFlatOut = false;
            this.showEjbCsvOut = false;
            this.showDBXmlOut = false;
            this.showDBJsonOut = false;
            this.showDbCsvOut = true;
            this.showDbFaltOut = false;
        }
        else if (protocol.typeOfProtocol == "DB Connection" && protocol.dataType == "FLATFILE") {
            this.showTcpOut = false;
            this.showHttpXmlOut = false;
            this.showHttpJsonOut = false;
            this.showMdbXmlOut = false;
            this.showEjbJsonOut = false;
            this.showMdbJsonOut = false;
            this.showMdbCsvOut = false;
            this.showMdbFlatOut = false;
            this.showEjbXMlOut = false;
            this.showEjbFlatOut = false;
            this.showEjbCsvOut = false;
            this.showDBXmlOut = false;
            this.showDBJsonOut = false;
            this.showDbCsvOut = false;
            this.showDbFaltOut = true;
        }
    }
    // ============Delete row Methods==============
    // Incoming Tcp Delete
    deleteDbXmlInc(i) {
        this.colRowForDbInc.splice(i, 1);
    }
    deleteEjbJsonOut(i) {
        this.outEjbJson.splice(i, 1);
    }
    deleteOutHttpJson(i) {
        this.outHttpJson.splice(i, 1);
    }
    deleteOfTCP(i) {
        this.incomingMessageConfigurationTcp.splice(i, 1);
    }
    deleteIncEjbJson(i) {
        this.incEjbJson.splice(i, 1);
    }
    deleteEjbXmlInc(i) {
        this.incEjbXMl.splice(i, 1);
    }
    deleteIncHttpJson(i) {
        this.incHttpJson.splice(i, 1);
    }
    deleteMdbJsonInc(i) {
        this.incMdbJson.splice(i, 1);
    }
    deleteOutgoingTcp(i) {
        this.outgoingMessageConfigurationTcp.splice(i, 1);
    }
    deleteMdbXmlInc(i) {
        this.incMDBXML.splice(i, 1);
    }
    deleteIncHttpXml(i) {
        this.incHttpXMl.splice(i, 1);
    }
    // =======================delete Methods out going=================
    deleteOutEjbXml(i) {
        this.outEjbXml.splice(i, 1);
    }
    deleteOutHttpxMl(i) {
        this.outHttpXml.splice(i, 1);
    }
    deleteoutMdbXml(i) {
        this.outMdbXml.splice(i, 1);
    }
    deleteMdbJsonOut(i) {
        this.outMdbJson.splice(i, 1);
    }
    // ===================Add Row Methods===========
    // Incoming  Add
    addIncEjbJson() {
        this.incEjbJson.push({ key: '', dataType: '', defaultValue: '' });
    }
    addMdbJsonInc() {
        this.incMdbJson.push({ key: '', defaultValue: '', dataType: '' });
    }
    addEjbXMlInc() {
        this.incEjbXMl.push({ id: '', node: '', tagName: '', dataType: '', tagValue: '', extSysCode: '', tagDefault: '' });
    }
    addIncomingTcp() {
        this.incomingMessageConfigurationTcp.push({ id: '', dataType: '', extSys: '', fieldNo: '', fieldName: '', defaultValue: '' });
    }
    addIncHttpXMl() {
        this.incHttpXMl.push({ id: '', extSys: '', node: '', tagName: '', dataType: '', defaultValue: '' });
    }
    addoutgoingTCP() {
        this.outgoingMessageConfigurationTcp.push({ id: '', dataType: '', extSys: '', fieldNo: '', fieldName: '', defaultValue: '' });
    }
    addIncHttpJson() {
        this.incHttpJson.push({ key: '', dataType: '', deafultValue: '' });
    }
    addMdbXMlInc() {
        this.incMDBXML.push({ node: '', tagDefault: '', dataType: '', extSysCode: '', defaultValue: '', id: '', tagName: '' });
    }
    // ========================Add rows out going=========================
    addEjbJsonOut() {
        this.outEjbJson.push({ dataType: '', defaultValue: '', key: '' });
    }
    addOutHttpXml() { this.outHttpXml.push({ node: '', tagName: '', dataType: '', defaultValue: '', id: '', extSys: '' }); }
    addOutHttpJosn() {
        this.outHttpJson.push({ dataType: '', defaultValue: '', key: '' });
    }
    addoutMdbXMl() {
        this.outMdbXml.push({ dataType: '', id: '', extSysCode: '', node: '', tagDefault: '', tagName: '', tagvalue: '' });
    }
    addoutMdbJosn() {
        this.outMdbJson.push({ dataType: '', key: '', defaultValue: '' });
    }
    addoutEjbXml() {
        this.outEjbXml.push({ dataType: '', tagvalue: '', tagName: '', tagDefault: '', node: '', extSysCode: '', id: '' });
    }
    // ====================File Upload Methods==================
    fileuploadHttpXMlInc() {
    }
    chooseFile() {
        console.log("heyy file");
        document.getElementById('chFile').click();
    }
    // =====================Db connection Table==============
    onsearchingTablName(event) {
        let data = this.tableNameinc.filter(function (e) {
            let tableName = e.toLowerCase();
            let value = event.target.value.toLowerCase();
            return !tableName.indexOf(value);
        });
        this.incDbRecords = data;
    }
    gettingColumnNameForIncoming(event) {
        console.log("from search");
        console.log(event.option.value);
        this.addSystem.coulmnNameBasedonTableName(this.incDbData.connectiongstring, this.incDbData.dataBaseName, this.incDbData.userName, this.incDbData.password, event.option.value).subscribe(columnNAme => {
            console.log(columnNAme);
            this.coulmnNameBasedonTanbleName = columnNAme;
            this.colRowForDbInc.push(columnNAme[0]);
            console.log(this.colRowForDbInc);
            // 
        });
    }
    // ading rows based on index
    onAddingrowsForDbInc(i) {
        console.log("adding rows", i);
        this.count += 1;
        console.log("cc", this.count);
        this.coulmnNameBasedonTanbleName.forEach((el, i) => {
            console.log("count", this.count, i);
            if (this.count == i) {
                this.colRowForDbInc.push(this.coulmnNameBasedonTanbleName[i]);
            }
            // if(count==index)
            // {
            // this.data.push(el[index]);
            // }
        });
    }
    // MDB Queue Selection
    onMdbIncQueue(event) {
        console.log(event);
        console.log(event.value);
        if (event.value == 'JMS') {
            this.showjsmQueue = true;
            this.showibmQueue = false;
        }
        else {
            this.showjsmQueue = false;
            this.showibmQueue = true;
        }
    }
    onMdbQueueOut(event) {
        console.log(event);
        console.log(event.value);
        if (event.value == 'JMS') {
            this.showjsmQueueOut = true;
            this.showibmQueueOut = false;
        }
        else {
            this.showjsmQueueOut = false;
            this.showibmQueueOut = true;
        }
    }
    // gettingIso/Tcp record
    fetchingIso() {
        this.showPrepgrassBar = true;
        this.addSystem.fetchingIsoForTcp().subscribe(isoResp => {
            console.log(isoResp);
            this.showPrepgrassBar = false;
            if (this.createExtSys1.openToMessage == 'Incoming' && isoResp) {
                this.showTcpInc = false;
                this.incomingMessageConfigurationTcp = isoResp;
                this.showTcpInc = true;
                console.log("if inc1");
            }
            else if (this.createExtSys1.openToMessage == 'OutComing') {
                this.outgoingMessageConfigurationTcp = isoResp;
                console.log("if out1");
            }
            else {
                this.outgoingMessageConfigurationTcp = isoResp;
                this.incomingMessageConfigurationTcp = isoResp;
                console.log("all 3");
            }
        });
    }
    // fetch Db conncetion
    fetchDbconnection() {
        console.log("coming in db connection");
        this.showPrepgrassBar = true;
        this.addSystem.pingDataSource(this.incDbData.connectiongstring, this.incDbData.dataBaseName, this.incDbData.userName, this.incDbData.password).subscribe(dbResp => {
            console.log(dbResp);
            if (dbResp) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire({ text: 'Db connection SuccessFull' });
                this.showPrepgrassBar = false;
                this.incDbRecords = dbResp;
                this.tableNameinc = this.incDbRecords;
            }
        });
    }
    // all 
    nextStep(tabIndex) {
        if (this.selectedIndex < 2) {
            this.selectedIndex = tabIndex + 1;
        }
    }
    previousStep(tabIndex) {
        if (this.selectedIndex > 0) {
            this.selectedIndex = tabIndex - 1;
            this.selectedIndex = 0;
            this.showOnlyAllBtn = true;
        }
    }
    // save 
    onfinish() {
        console.log(this.createExtSys1);
        // save==>basic
        this.addSystemSave.code = this.createExtSys1.code;
        this.addSystemSave.name = this.createExtSys1.name;
        this.addSystemSave.type = this.createExtSys1.type;
        this.addSystemSave.openToMessage = this.createExtSys1.openToMessage;
        this.addSystemSave.externalIp = this.createExtSys1.externalIp;
        this.addSystemSave.externalPort = this.createExtSys1.externalPort;
        this.addSystemSave.medianIp = this.createExtSys1.medianIp;
        this.addSystemSave.medianPort = this.createExtSys1.medianPort;
        // Incoming messgaes==save
        this.addSystemSave.incIntegratProtocol = this.incomingIntegrationProtocol;
        this.addSystemSave.incIsoMsgTcp = this.incomingMessageConfigurationTcp;
        this.addSystemSave.incXmlMsgHttp = this.incHttpXMl;
        this.addSystemSave.incmsgconfighttpjson = this.incHttpJson;
        // outgoing ==>messa
        this.addSystemSave.outIntegratProtocol = this.outgoingIntegrationProtocol;
        this.addSystemSave.outgoIsoMsgTcp = this.outgoingMessageConfigurationTcp;
        this.addSystemSave.outgoXmlMsgHttp = this.outHttpXml;
        this.addSystemSave.outgoHttpMsgConfigJSON = this.outHttpJson;
        console.log("thi", this.addSystemSave);
        this.addSystem.editaddsystem("update", this.currentUser, this.addSystemSave).subscribe(addSystemResp => {
            console.log("addSystemResp", addSystemResp);
            if (addSystemResp) {
                this.showAuditLog = true;
                this.addSysResp = addSystemResp;
                sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire({ text: 'Record Saved successFully' });
            }
        }, (err) => { sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire({ text: 'Failed To Save The Record' }); });
    }
};
EditAddSystemComponent.ctorParameters = () => [
    { type: src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__["AddSystemService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('tabGroup', { static: false }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material_tabs__WEBPACK_IMPORTED_MODULE_5__["MatTabGroup"])
], EditAddSystemComponent.prototype, "tabGroup", void 0);
EditAddSystemComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-edit-add-system',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./edit-add-system.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/edit-add-system/edit-add-system.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./edit-add-system.component.css */ "./src/app/views/sias-v2/edit-add-system/edit-add-system.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__["AddSystemService"]])
], EditAddSystemComponent);

class Addsystem {
}


/***/ }),

/***/ "./src/app/views/sias-v2/excel-external-sys/excel-external-sys.component.scss":
/*!************************************************************************************!*\
  !*** ./src/app/views/sias-v2/excel-external-sys/excel-external-sys.component.scss ***!
  \************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("table {\n  width: 100%;\n}\n\nth {\n  /* text-align: center;\n   */\n  align-content: center;\n}\n\ntable td {\n  padding-right: 50px;\n}\n\n#customers {\n  font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\n  border-collapse: collapse;\n  width: 100%;\n}\n\n#customers td, #customers th {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: center;\n}\n\n#customers tr:nth-child(even) {\n  background-color: #f2f2f2;\n}\n\n#customers th {\n  padding-top: 12px;\n  padding-bottom: 12px;\n  text-align: left;\n  background-color: #61b2d8;\n  color: white;\n}\n\n.mat-raised-button {\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  height: 20px;\n  line-height: 27px;\n  min-height: 27px;\n  vertical-align: top;\n  font-size: 11px;\n  padding: 0 0;\n  margin: 0;\n}\n\nmat-card {\n  width: 350px;\n}\n\nmat-card mat-form-field {\n  font-size: 12px;\n}\n\nmat-card a {\n  font-size: 11px;\n}\n\nmat-card p {\n  font-size: 11px;\n}\n\n::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline {\n  color: black !important;\n}\n\nmat-card mat-form-field {\n  font-size: 12px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leGNlbC1leHRlcm5hbC1zeXMvRjpcXG11dGh1LW9uYm9hcmRcXG1lZGlhbi1waDItdWkvc3JjXFxhcHBcXHZpZXdzXFxzaWFzLXYyXFxleGNlbC1leHRlcm5hbC1zeXNcXGV4Y2VsLWV4dGVybmFsLXN5cy5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leGNlbC1leHRlcm5hbC1zeXMvZXhjZWwtZXh0ZXJuYWwtc3lzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksV0FBQTtBQ0NKOztBREVFO0VBQ0U7SUFBQTtFQUVGLHFCQUFBO0FDQ0Y7O0FEQ0U7RUFDRSxtQkFBQTtBQ0VKOztBREFBO0VBQ0kseURBQUE7RUFDQSx5QkFBQTtFQUNBLFdBQUE7QUNHSjs7QUREQTtFQUNJLHNCQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0FDSUo7O0FEQUU7RUFBOEIseUJBQUE7QUNJaEM7O0FERkU7RUFDRSxpQkFBQTtFQUNBLG9CQUFBO0VBQ0EsZ0JBQUE7RUFDQSx5QkFBQTtFQUNBLFlBQUE7QUNLSjs7QURIRTtFQUNFLDBCQUFBO0VBQUEsdUJBQUE7RUFBQSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtFQUNBLGdCQUFBO0VBQ0EsbUJBQUE7RUFDQSxlQUFBO0VBQ0EsWUFBQTtFQUNBLFNBQUE7QUNNSjs7QURKRTtFQUNFLFlBQUE7QUNPSjs7QURKRTtFQUNFLGVBQUE7QUNPSjs7QURMRTtFQUNFLGVBQUE7QUNRSjs7QURORTtFQUNFLGVBQUE7QUNTSjs7QURQRTtFQUNFLHVCQUFBO0FDVUo7O0FEUEU7RUFDRSxlQUFBO0FDVUoiLCJmaWxlIjoic3JjL2FwcC92aWV3cy9zaWFzLXYyL2V4Y2VsLWV4dGVybmFsLXN5cy9leGNlbC1leHRlcm5hbC1zeXMuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICB9XHJcbiAgXHJcbiAgdGh7XHJcbiAgICAvKiB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgKi9cclxuICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XHJcbiAgfVxyXG4gIHRhYmxlIHRkIHtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDUwcHg7XHJcbiAgfVxyXG4jY3VzdG9tZXJzIHtcclxuICAgIGZvbnQtZmFtaWx5OiBcIlRyZWJ1Y2hldCBNU1wiLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xyXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuI2N1c3RvbWVycyB0ZCwgI2N1c3RvbWVycyB0aCB7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xyXG4gICAgcGFkZGluZzogOHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgXHJcbiAgfVxyXG4gIFxyXG4gICNjdXN0b21lcnMgdHI6bnRoLWNoaWxkKGV2ZW4pe2JhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7fVxyXG4gIFxyXG4gICNjdXN0b21lcnMgdGgge1xyXG4gICAgcGFkZGluZy10b3A6IDEycHg7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMTJweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOnJnYig5NywgMTc4LCAyMTYpO1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gIH1cclxuICAubWF0LXJhaXNlZC1idXR0b24ge1xyXG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG4gICAgaGVpZ2h0OiAyMHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDI3cHg7XHJcbiAgICBtaW4taGVpZ2h0OiAyN3B4O1xyXG4gICAgdmVydGljYWwtYWxpZ246IHRvcDtcclxuICAgIGZvbnQtc2l6ZTogMTFweDtcclxuICAgIHBhZGRpbmc6IDAgMDtcclxuICAgIG1hcmdpbjogMDtcclxuICB9XHJcbiAgbWF0LWNhcmQgIHtcclxuICAgIHdpZHRoOiAzNTBweDtcclxuICAgIC8vIGhlaWdodDogMzUwcHg7XHJcbiAgfVxyXG4gIG1hdC1jYXJkIG1hdC1mb3JtLWZpZWxkIHtcclxuICAgIGZvbnQtc2l6ZTogMTJweDtcclxuICB9XHJcbiAgbWF0LWNhcmQgYSB7XHJcbiAgICBmb250LXNpemU6IDExcHg7XHJcbiAgfVxyXG4gIG1hdC1jYXJkIHAge1xyXG4gICAgZm9udC1zaXplOiAxMXB4O1xyXG4gIH1cclxuICA6Om5nLWRlZXAgLm1hdC1mb3JtLWZpZWxkLWFwcGVhcmFuY2Utb3V0bGluZSAubWF0LWZvcm0tZmllbGQtb3V0bGluZSB7XHJcbiAgICBjb2xvcjogYmxhY2sgIWltcG9ydGFudDtcclxuICB9XHJcbiAgXHJcbiAgbWF0LWNhcmQgbWF0LWZvcm0tZmllbGQge1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gIH0iLCJ0YWJsZSB7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG50aCB7XG4gIC8qIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICovXG4gIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbn1cblxudGFibGUgdGQge1xuICBwYWRkaW5nLXJpZ2h0OiA1MHB4O1xufVxuXG4jY3VzdG9tZXJzIHtcbiAgZm9udC1mYW1pbHk6IFwiVHJlYnVjaGV0IE1TXCIsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4jY3VzdG9tZXJzIHRkLCAjY3VzdG9tZXJzIHRoIHtcbiAgYm9yZGVyOiAxcHggc29saWQgI2RkZDtcbiAgcGFkZGluZzogOHB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbiNjdXN0b21lcnMgdHI6bnRoLWNoaWxkKGV2ZW4pIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjtcbn1cblxuI2N1c3RvbWVycyB0aCB7XG4gIHBhZGRpbmctdG9wOiAxMnB4O1xuICBwYWRkaW5nLWJvdHRvbTogMTJweDtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzYxYjJkODtcbiAgY29sb3I6IHdoaXRlO1xufVxuXG4ubWF0LXJhaXNlZC1idXR0b24ge1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gIGhlaWdodDogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI3cHg7XG4gIG1pbi1oZWlnaHQ6IDI3cHg7XG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gIGZvbnQtc2l6ZTogMTFweDtcbiAgcGFkZGluZzogMCAwO1xuICBtYXJnaW46IDA7XG59XG5cbm1hdC1jYXJkIHtcbiAgd2lkdGg6IDM1MHB4O1xufVxuXG5tYXQtY2FyZCBtYXQtZm9ybS1maWVsZCB7XG4gIGZvbnQtc2l6ZTogMTJweDtcbn1cblxubWF0LWNhcmQgYSB7XG4gIGZvbnQtc2l6ZTogMTFweDtcbn1cblxubWF0LWNhcmQgcCB7XG4gIGZvbnQtc2l6ZTogMTFweDtcbn1cblxuOjpuZy1kZWVwIC5tYXQtZm9ybS1maWVsZC1hcHBlYXJhbmNlLW91dGxpbmUgLm1hdC1mb3JtLWZpZWxkLW91dGxpbmUge1xuICBjb2xvcjogYmxhY2sgIWltcG9ydGFudDtcbn1cblxubWF0LWNhcmQgbWF0LWZvcm0tZmllbGQge1xuICBmb250LXNpemU6IDEycHg7XG59Il19 */");

/***/ }),

/***/ "./src/app/views/sias-v2/excel-external-sys/excel-external-sys.component.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/views/sias-v2/excel-external-sys/excel-external-sys.component.ts ***!
  \**********************************************************************************/
/*! exports provided: ExcelExternalSysComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExcelExternalSysComponent", function() { return ExcelExternalSysComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _excelExtSys__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./excelExtSys */ "./src/app/views/sias-v2/excel-external-sys/excelExtSys.ts");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/shared/services/sias2-services/excel-processing.service */ "./src/app/shared/services/sias2-services/excel-processing.service.ts");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_7__);








let ExcelExternalSysComponent = class ExcelExternalSysComponent {
    constructor(api, snack, router, ref, toast, cdr) {
        this.api = api;
        this.snack = snack;
        this.router = router;
        this.ref = ref;
        this.toast = toast;
        this.cdr = cdr;
        this.excelExt = new _excelExtSys__WEBPACK_IMPORTED_MODULE_2__["ExcelExtsys"]();
        this.space = false;
        this.pace = false;
        //added By Fayaz
        this.allDeptNames = [];
    }
    ngOnInit() {
        //console.log(localStorage.getItem("currentUser"));
        this.currentUser = localStorage.getItem("currentUser");
        this.getAllDeptNames();
    }
    // added By Fayaz
    getAllDeptNames() {
        this.api.getAllDept().subscribe(data => {
            this.allDeptNames = data;
            console.log(this.allDeptNames);
        });
    }
    keyPress(event) {
        console.log(event.target.value);
        console.log(event);
        console.log(this.allDeptNames);
        this.result = this.allDeptNames.filter(s => s.includes(event.target.value));
        console.log(this.result);
        this.allDeptNames = this.result;
        this.ref.markForCheck();
        if (event.target.value == '') {
            this.getAllDeptNames();
        }
    }
    save() {
        console.log(this.excelExt);
        if (this.excelExt.extSysName) {
            this.excelExt.modifiedBy = this.currentUser;
            //final data before sending
            // var dataExt = CryptoJS.AES.encrypt(this.excelExt, "@12#90!^*NPR*g&*()$34#$");
            // var uname=USERNAME.toString();
            this.api.createExt(this.excelExt)
                .subscribe((data) => {
                // this.dataext = data;
                console.log(data);
                // this.excelExt = data;
                // console.log(this.excelExt)
                if (data != null) {
                    sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire('Data Saved successfully ');
                    this.disblesave = true;
                    this.excelExt = data;
                    this.dataext = data;
                    // this.saveBtn.disabled = true;
                    this.cdr.markForCheck();
                    if (this.excelExt.authStatus === 'U') {
                        this.excelExt.authStatus = 'UNAUTHORIZED';
                    }
                    if (this.excelExt.authStatus === 'A') {
                        this.excelExt.authStatus = 'AUTHORIZED';
                    }
                    if (this.excelExt.recordStatus === 'O') {
                        this.excelExt.recordStatus = 'OPEN';
                    }
                    if (this.excelExt.recordStatus === 'C') {
                        this.excelExt.recordStatus = 'CLOSED';
                    }
                    //added by vidya for verified once issue id 583
                    if (this.excelExt.verifiedOnce === 'N') {
                        this.excelExt.verifiedOnce = 'NO';
                    }
                }
                else {
                    sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire({
                        text: 'Choose different external system code/external system ',
                    });
                    // if (this.excelExt.authStatus === 'U') {
                    //   this.excelExt.authStatus = 'UNAUTHORIZED'
                    // }
                    // if (this.excelExt.authStatus === 'A') {
                    //   this.excelExt.authStatus = 'AUTHORIZED'
                    // }
                    // if (this.excelExt.recordStatus === 'O') {
                    //   this.excelExt.recordStatus = 'OPEN'
                    // }
                    // if (this.excelExt.recordStatus === 'C') {
                    //   this.excelExt.recordStatus = 'CLOSED'
                    // }
                }
            }, error => {
                //console.log(error)
                sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire({
                    type: 'error',
                    text: 'Server error  ',
                });
            });
        }
        else {
            sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire({
                type: 'error',
                text: 'Enter All Fields  ',
            });
        }
    }
    onSubmit() {
        this.save();
    }
    // onClickOfAuth()
    // {
    //   //console.log("on click of auth");
    //   this.excelExt.authorizedBy = this.currentUser.userId;
    //   let  auth= this.excelExt.authorizedBy
    //   //console.log(this.excelExt.authorizedBy);
    //   this.api.authorizingTheRecord(this.excelExt) .subscribe((data: any) => {  
    //   //console.log(data);
    //   });
    // }
    fun(extSysName) {
        console.log(extSysName);
        console.log("enters inside fn");
        const result = extSysName.trim();
        console.log(result);
        if (result) {
            console.log("valid string");
            this.space = true;
            console.log(this.space);
        }
        else {
            console.log("invalid string");
            this.space = false;
            // this.submitted = false;
            console.log(this.space);
        }
    }
    gun(extSysName) {
        console.log(extSysName);
        console.log("enters inside fn");
        const result = extSysName.trim();
        console.log(result);
        if (result) {
            console.log("valid string");
            this.pace = true;
            console.log(this.pace);
        }
        else {
            console.log("invalid string");
            this.pace = false;
            // this.submitted = false;
            console.log(this.pace);
        }
    }
};
ExcelExternalSysComponent.ctorParameters = () => [
    { type: src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_6__["ExcelProcessingService"] },
    { type: _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSnackBar"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"])(_angular_material__WEBPACK_IMPORTED_MODULE_3__["MatButton"]),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatButton"])
], ExcelExternalSysComponent.prototype, "saveBtn", void 0);
ExcelExternalSysComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-excel-external-sys',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./excel-external-sys.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-external-sys/excel-external-sys.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./excel-external-sys.component.scss */ "./src/app/views/sias-v2/excel-external-sys/excel-external-sys.component.scss")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_6__["ExcelProcessingService"],
        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSnackBar"],
        _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
], ExcelExternalSysComponent);



/***/ }),

/***/ "./src/app/views/sias-v2/excel-external-sys/excelExtSys.ts":
/*!*****************************************************************!*\
  !*** ./src/app/views/sias-v2/excel-external-sys/excelExtSys.ts ***!
  \*****************************************************************/
/*! exports provided: ExcelExtsys */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExcelExtsys", function() { return ExcelExtsys; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class ExcelExtsys {
}


/***/ }),

/***/ "./src/app/views/sias-v2/excel-mapping/excel-mapping-summary/excel-mapping-summary.component.css":
/*!*******************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/excel-mapping/excel-mapping-summary/excel-mapping-summary.component.css ***!
  \*******************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".navigation {\r\n  /* width: 300px; */\r\n  height: 475px;\r\n \r\n\r\n}\r\n\r\ntable{\r\n    width: 100%;\r\n}\r\n\r\ntable {\r\n  border-collapse: initial;\r\n  width:100%;\r\n  text-align: center !important;\r\n}\r\n\r\n:host ::ng-deep .mat-sort-header-container { \r\n  display: flex;  \r\n  justify-content: center; \r\n}\r\n\r\nth.mat-header-cell, td.mat-cell { \r\n  text-align: center; \r\n}\r\n\r\n.mat-raised-button {\r\n  width: -webkit-fit-content;\r\n  width: -moz-fit-content;\r\n  width: fit-content;\r\n  height: 20px;\r\n  line-height: 27px;\r\n  min-height: 27px;\r\n  vertical-align: top;\r\n  font-size: 11px;\r\n  padding: 0 0;\r\n  margin: 0;\r\n}\r\n\r\n.mat-header-cell {\r\n  text-align: center;\r\n  height: 25px !important;\r\n\r\n}\r\n\r\n.mat-cell {\r\n  text-align: center;\r\n  height: 25px !important;\r\n\r\n}\r\n\r\ntr:nth-child(even) {\r\n  height: 25px !important;\r\n}\r\n\r\nth {\r\n  font-weight: small;\r\n  height: 25px !important;\r\n  text-align: center;\r\n}\r\n\r\ntr {\r\n  font-weight: small;\r\n  height: 25px !important;\r\n  text-align: center;\r\n}\r\n\r\nmat-paginator {\r\n  width: auto !important;\r\n  height: 40px !important;\r\n}\r\n\r\nmd-pagination-wrapper {\r\n  width: auto !important;\r\n  height: 40px !important;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leGNlbC1tYXBwaW5nL2V4Y2VsLW1hcHBpbmctc3VtbWFyeS9leGNlbC1tYXBwaW5nLXN1bW1hcnkuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFrQjtFQUNsQixhQUFhOzs7QUFHZjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFDQTtFQUNFLHdCQUF3QjtFQUN4QixVQUFVO0VBQ1YsNkJBQTZCO0FBQy9COztBQUNBO0VBQ0UsYUFBYTtFQUNiLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFDQTtFQUNFLDBCQUFrQjtFQUFsQix1QkFBa0I7RUFBbEIsa0JBQWtCO0VBQ2xCLFlBQVk7RUFDWixpQkFBaUI7RUFDakIsZ0JBQWdCO0VBQ2hCLG1CQUFtQjtFQUNuQixlQUFlO0VBQ2YsWUFBWTtFQUNaLFNBQVM7QUFDWDs7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQix1QkFBdUI7O0FBRXpCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLHVCQUF1Qjs7QUFFekI7O0FBR0E7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsdUJBQXVCO0VBQ3ZCLGtCQUFrQjtBQUNwQjs7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQix1QkFBdUI7RUFDdkIsa0JBQWtCO0FBQ3BCOztBQUNBO0VBQ0Usc0JBQXNCO0VBQ3RCLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLHNCQUFzQjtFQUN0Qix1QkFBdUI7QUFDekIiLCJmaWxlIjoic3JjL2FwcC92aWV3cy9zaWFzLXYyL2V4Y2VsLW1hcHBpbmcvZXhjZWwtbWFwcGluZy1zdW1tYXJ5L2V4Y2VsLW1hcHBpbmctc3VtbWFyeS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm5hdmlnYXRpb24ge1xyXG4gIC8qIHdpZHRoOiAzMDBweDsgKi9cclxuICBoZWlnaHQ6IDQ3NXB4O1xyXG4gXHJcblxyXG59XHJcblxyXG50YWJsZXtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59ICBcclxudGFibGUge1xyXG4gIGJvcmRlci1jb2xsYXBzZTogaW5pdGlhbDtcclxuICB3aWR0aDoxMDAlO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xyXG59XHJcbjpob3N0IDo6bmctZGVlcCAubWF0LXNvcnQtaGVhZGVyLWNvbnRhaW5lciB7IFxyXG4gIGRpc3BsYXk6IGZsZXg7ICBcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgXHJcbn1cclxuXHJcbnRoLm1hdC1oZWFkZXItY2VsbCwgdGQubWF0LWNlbGwgeyBcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7IFxyXG59XHJcbi5tYXQtcmFpc2VkLWJ1dHRvbiB7XHJcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG4gIGhlaWdodDogMjBweDtcclxuICBsaW5lLWhlaWdodDogMjdweDtcclxuICBtaW4taGVpZ2h0OiAyN3B4O1xyXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XHJcbiAgZm9udC1zaXplOiAxMXB4O1xyXG4gIHBhZGRpbmc6IDAgMDtcclxuICBtYXJnaW46IDA7XHJcbn1cclxuLm1hdC1oZWFkZXItY2VsbCB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xyXG5cclxufVxyXG5cclxuLm1hdC1jZWxsIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7XHJcblxyXG59XHJcblxyXG5cclxudHI6bnRoLWNoaWxkKGV2ZW4pIHtcclxuICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcclxufVxyXG5cclxudGgge1xyXG4gIGZvbnQtd2VpZ2h0OiBzbWFsbDtcclxuICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxudHIge1xyXG4gIGZvbnQtd2VpZ2h0OiBzbWFsbDtcclxuICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxubWF0LXBhZ2luYXRvciB7XHJcbiAgd2lkdGg6IGF1dG8gIWltcG9ydGFudDtcclxuICBoZWlnaHQ6IDQwcHggIWltcG9ydGFudDtcclxufVxyXG5cclxubWQtcGFnaW5hdGlvbi13cmFwcGVyIHtcclxuICB3aWR0aDogYXV0byAhaW1wb3J0YW50O1xyXG4gIGhlaWdodDogNDBweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuIl19 */");

/***/ }),

/***/ "./src/app/views/sias-v2/excel-mapping/excel-mapping-summary/excel-mapping-summary.component.ts":
/*!******************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/excel-mapping/excel-mapping-summary/excel-mapping-summary.component.ts ***!
  \******************************************************************************************************/
/*! exports provided: ExcelMappingSummaryComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExcelMappingSummaryComponent", function() { return ExcelMappingSummaryComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/services/sias2-services/excel-processing.service */ "./src/app/shared/services/sias2-services/excel-processing.service.ts");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
/* harmony import */ var src_app_views_roles1_models_fmosNewRolePermissions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/views/roles1/models/fmosNewRolePermissions */ "./src/app/views/roles1/models/fmosNewRolePermissions.ts");
/* harmony import */ var src_app_views_roles1_roles_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/views/roles1/roles.service */ "./src/app/views/roles1/roles.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");







let ExcelMappingSummaryComponent = class ExcelMappingSummaryComponent {
    constructor(excelUpload, router, roleService) {
        this.excelUpload = excelUpload;
        this.router = router;
        this.roleService = roleService;
        this.roleCodes = new src_app_views_roles1_models_fmosNewRolePermissions__WEBPACK_IMPORTED_MODULE_4__["permissionsLabels"]();
        this.displayedColumns = [
            "extSysCode",
            "extSys",
            'inputBy',
            'authStatus',
            'inputDtStamp',
        ];
    }
    ngOnInit() {
        setTimeout(() => {
            this.newRolePermissions();
        }, 2000);
        this.roleService.screenLabelList.subscribe(message => this.roleCodes = message);
        this.getDataForSummary();
    }
    newRolePermissions() {
        this.roleService.fetchScreenPermissions('Excel Mapping');
    }
    getDataForSummary() {
        this.excelUpload.getMappingSummary().subscribe(data => {
            this.data = data;
            console.log(this.data);
            this.dataSource = new _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatTableDataSource"](this.data);
            this.dataSource.sort = this.sort;
            this.dataSource.paginator = this.paginator;
        });
    }
    getDataFromSummaryToUpdateExcelMapping(row) {
        console.log("this is row", row);
        const navigationExtras = {
            queryParams: {
                extSysCode: row.extSysCode,
                processName: row.processName,
                extSysName: row.extSys
            }
        };
        this.router.navigate(['sias-v2/updateExcelMappingComponent'], navigationExtras);
    }
};
ExcelMappingSummaryComponent.ctorParameters = () => [
    { type: src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_2__["ExcelProcessingService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"] },
    { type: src_app_views_roles1_roles_service__WEBPACK_IMPORTED_MODULE_5__["RoleService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_angular_material__WEBPACK_IMPORTED_MODULE_3__["MatPaginator"], { static: true }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatPaginator"])
], ExcelMappingSummaryComponent.prototype, "paginator", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSort"], { static: true }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSort"])
], ExcelMappingSummaryComponent.prototype, "sort", void 0);
ExcelMappingSummaryComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-excel-mapping-summary',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./excel-mapping-summary.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-mapping/excel-mapping-summary/excel-mapping-summary.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./excel-mapping-summary.component.css */ "./src/app/views/sias-v2/excel-mapping/excel-mapping-summary/excel-mapping-summary.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_2__["ExcelProcessingService"],
        _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"], src_app_views_roles1_roles_service__WEBPACK_IMPORTED_MODULE_5__["RoleService"]])
], ExcelMappingSummaryComponent);



/***/ }),

/***/ "./src/app/views/sias-v2/excel-mapping/excel-mapping.component.css":
/*!*************************************************************************!*\
  !*** ./src/app/views/sias-v2/excel-mapping/excel-mapping.component.css ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n\r\ntable {\r\n  width: 50%;\r\n  padding: 0%;\r\n  margin: 0%;\r\n}\r\nth{\r\n  padding: 0%;\r\n  margin: 0%;\r\n}\r\ntd>mat-form-field{\r\n  width: 100px;\r\n  padding: 0%;\r\n  margin: 0%;\r\n}\r\n.forms-table > thead tr th {\r\n  font-weight: 700;\r\n  /* padding: .9rem 1.2rem; */\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.12);\r\n}\r\nth{\r\n  /* text-align: center;\r\n   */\r\nalign-content: center;\r\n}\r\ntable td {\r\n  padding: 0%;\r\n  margin: 0%;\r\n  /* padding-right: 1px; */\r\n}\r\n#customers {\r\n  font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\r\n  border-collapse: collapse;\r\n  width: 100%;\r\n}\r\n#customers td, #customers th {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: center;\r\n}\r\n#customers tr:nth-child(even){background-color: #f2f2f2;}\r\n#customers th {\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n  text-align: left;\r\n  background-color:rgb(97, 178, 216);\r\n  color: white;\r\n}\r\n/* \r\n.mat-raised-button {\r\n  width: fit-content;\r\n  height: 20px;\r\n  line-height: 27px;\r\n  min-height: 27px;\r\n \r\n align-content: center;\r\n  font-size: 15px;\r\n  padding: 0 0;\r\n  margin: 0;\r\n} */\r\nmat-chip{\r\n  font-size: 15px;\r\n}\r\nth{\r\n  font-size: 15px;\r\n}\r\n/* mat-card  {\r\n  width: 350px;\r\n /* height: 350px; */\r\n/* }\r\nmat-card mat-form-field {\r\n  font-size: 10px;\r\n}\r\nmat-card a {\r\n  font-size: 11px;\r\n}\r\nmat-card p {\r\n  font-size: 11px;\r\n} */\r\nmat-card mat-form-field {\r\n  font-size: 13px;\r\n}\r\nth{\r\n  font-size: 15px;\r\n\r\n}\r\nmat-checkbox{\r\n  font-size: 10px;\r\n\r\n}\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leGNlbC1tYXBwaW5nL2V4Y2VsLW1hcHBpbmcuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBO0VBQ0UsVUFBVTtFQUNWLFdBQVc7RUFDWCxVQUFVO0FBQ1o7QUFDQTtFQUNFLFdBQVc7RUFDWCxVQUFVO0FBQ1o7QUFFQTtFQUNFLFlBQVk7RUFDWixXQUFXO0VBQ1gsVUFBVTtBQUNaO0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsMkJBQTJCO0VBQzNCLDRDQUE0QztBQUM5QztBQUdBO0VBQ0U7SUFDRTtBQUNKLHFCQUFxQjtBQUNyQjtBQUNBO0VBQ0UsV0FBVztFQUNYLFVBQVU7RUFDVix3QkFBd0I7QUFDMUI7QUFDQTtFQUNFLHlEQUF5RDtFQUN6RCx5QkFBeUI7RUFDekIsV0FBVztBQUNiO0FBQ0E7RUFDRSxzQkFBc0I7RUFDdEIsWUFBWTtFQUNaLGtCQUFrQjtBQUNwQjtBQUVBLDhCQUE4Qix5QkFBeUIsQ0FBQztBQUV4RDtFQUNFLGlCQUFpQjtFQUNqQixvQkFBb0I7RUFDcEIsZ0JBQWdCO0VBQ2hCLGtDQUFrQztFQUNsQyxZQUFZO0FBQ2Q7QUFFQTs7Ozs7Ozs7Ozs7R0FXRztBQUNIO0VBQ0UsZUFBZTtBQUNqQjtBQUNBO0VBQ0UsZUFBZTtBQUNqQjtBQUNBOztvQkFFb0I7QUFDcEI7Ozs7Ozs7OztHQVNHO0FBQ0g7RUFDRSxlQUFlO0FBQ2pCO0FBRUE7RUFDRSxlQUFlOztBQUVqQjtBQUNBO0VBQ0UsZUFBZTs7QUFFakIiLCJmaWxlIjoic3JjL2FwcC92aWV3cy9zaWFzLXYyL2V4Y2VsLW1hcHBpbmcvZXhjZWwtbWFwcGluZy5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG50YWJsZSB7XHJcbiAgd2lkdGg6IDUwJTtcclxuICBwYWRkaW5nOiAwJTtcclxuICBtYXJnaW46IDAlO1xyXG59XHJcbnRoe1xyXG4gIHBhZGRpbmc6IDAlO1xyXG4gIG1hcmdpbjogMCU7XHJcbn1cclxuXHJcbnRkPm1hdC1mb3JtLWZpZWxke1xyXG4gIHdpZHRoOiAxMDBweDtcclxuICBwYWRkaW5nOiAwJTtcclxuICBtYXJnaW46IDAlO1xyXG59XHJcblxyXG4uZm9ybXMtdGFibGUgPiB0aGVhZCB0ciB0aCB7XHJcbiAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAvKiBwYWRkaW5nOiAuOXJlbSAxLjJyZW07ICovXHJcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xMik7XHJcbn1cclxuXHJcblxyXG50aHtcclxuICAvKiB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICovXHJcbmFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcclxufVxyXG50YWJsZSB0ZCB7XHJcbiAgcGFkZGluZzogMCU7XHJcbiAgbWFyZ2luOiAwJTtcclxuICAvKiBwYWRkaW5nLXJpZ2h0OiAxcHg7ICovXHJcbn1cclxuI2N1c3RvbWVycyB7XHJcbiAgZm9udC1mYW1pbHk6IFwiVHJlYnVjaGV0IE1TXCIsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XHJcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG4jY3VzdG9tZXJzIHRkLCAjY3VzdG9tZXJzIHRoIHtcclxuICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xyXG4gIHBhZGRpbmc6IDhweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcbiNjdXN0b21lcnMgdHI6bnRoLWNoaWxkKGV2ZW4pe2JhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7fVxyXG5cclxuI2N1c3RvbWVycyB0aCB7XHJcbiAgcGFkZGluZy10b3A6IDEycHg7XHJcbiAgcGFkZGluZy1ib3R0b206IDEycHg7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOnJnYig5NywgMTc4LCAyMTYpO1xyXG4gIGNvbG9yOiB3aGl0ZTtcclxufVxyXG5cclxuLyogXHJcbi5tYXQtcmFpc2VkLWJ1dHRvbiB7XHJcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG4gIGhlaWdodDogMjBweDtcclxuICBsaW5lLWhlaWdodDogMjdweDtcclxuICBtaW4taGVpZ2h0OiAyN3B4O1xyXG4gXHJcbiBhbGlnbi1jb250ZW50OiBjZW50ZXI7XHJcbiAgZm9udC1zaXplOiAxNXB4O1xyXG4gIHBhZGRpbmc6IDAgMDtcclxuICBtYXJnaW46IDA7XHJcbn0gKi9cclxubWF0LWNoaXB7XHJcbiAgZm9udC1zaXplOiAxNXB4O1xyXG59XHJcbnRoe1xyXG4gIGZvbnQtc2l6ZTogMTVweDtcclxufVxyXG4vKiBtYXQtY2FyZCAge1xyXG4gIHdpZHRoOiAzNTBweDtcclxuIC8qIGhlaWdodDogMzUwcHg7ICovIFxyXG4vKiB9XHJcbm1hdC1jYXJkIG1hdC1mb3JtLWZpZWxkIHtcclxuICBmb250LXNpemU6IDEwcHg7XHJcbn1cclxubWF0LWNhcmQgYSB7XHJcbiAgZm9udC1zaXplOiAxMXB4O1xyXG59XHJcbm1hdC1jYXJkIHAge1xyXG4gIGZvbnQtc2l6ZTogMTFweDtcclxufSAqLyBcclxubWF0LWNhcmQgbWF0LWZvcm0tZmllbGQge1xyXG4gIGZvbnQtc2l6ZTogMTNweDtcclxufVxyXG5cclxudGh7XHJcbiAgZm9udC1zaXplOiAxNXB4O1xyXG5cclxufVxyXG5tYXQtY2hlY2tib3h7XHJcbiAgZm9udC1zaXplOiAxMHB4O1xyXG5cclxufVxyXG4iXX0= */");

/***/ }),

/***/ "./src/app/views/sias-v2/excel-mapping/excel-mapping.component.ts":
/*!************************************************************************!*\
  !*** ./src/app/views/sias-v2/excel-mapping/excel-mapping.component.ts ***!
  \************************************************************************/
/*! exports provided: ExcelMappingComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExcelMappingComponent", function() { return ExcelMappingComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _excelMapping__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./excelMapping */ "./src/app/views/sias-v2/excel-mapping/excelMapping.ts");
/* harmony import */ var _externalSystem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./externalSystem */ "./src/app/views/sias-v2/excel-mapping/externalSystem.ts");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/shared/services/sias2-services/excel-processing.service */ "./src/app/shared/services/sias2-services/excel-processing.service.ts");
/* harmony import */ var src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/shared/services/sias2-services/ExcelApiService */ "./src/app/shared/services/sias2-services/ExcelApiService.ts");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_9__);










let ExcelMappingComponent = class ExcelMappingComponent {
    constructor(excelUpload, api, fb, cdr, snack, toast) {
        this.excelUpload = excelUpload;
        this.api = api;
        this.fb = fb;
        this.cdr = cdr;
        this.snack = snack;
        this.toast = toast;
        this.fieldArray = [];
        this.newAttribute = {};
        this.object3 = new _excelMapping__WEBPACK_IMPORTED_MODULE_3__["ExcelMappingClass3"]();
        // isHeaderPresent:boolean;
        this.displayedColumns = ['columnnDescription', 'dataType', 'mandatory', 'headerName', 'dateFormat', 'mappingColumn'];
        this.toppings = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]();
        this.dataTypes = [
            { id: 3, type: 'Clob', isActive: false },
            { id: 1, type: 'Date', isActive: true },
            { id: 2, type: 'Number', isActive: false },
            { id: 4, type: 'VarChar', isActive: false }
        ];
        this.submitted = false;
        this.excelMap1 = [];
        this.processData1 = new _externalSystem__WEBPACK_IMPORTED_MODULE_4__["ExternalSystem"];
        this.excelMaint = new _excelMapping__WEBPACK_IMPORTED_MODULE_3__["ExcelMappingClass"]();
        this.poojaprocess2 = null;
        this.extSysCode = null;
    }
    ngOnInit() {
        this.addForm = this.fb.group({
            subArray: this.fb.array([])
        });
        this.notdate = true;
        this.getAllColumn();
        this.getAllExtsysNameAndProcessCodeOnAuthStatus();
        this.isChecked = false;
        this.datebox = false;
        this.datebox1 = true;
        this.message = false;
        // this.addForm.get("items_value").setValue("yes");
        // this.addForm.addControl('rows', this.rows);
        localStorage.setItem("userIdForChangePassword", localStorage.getItem("currentUser"));
        this.currentUser = localStorage.getItem("currentUser");
        //console.log("this.currentUser", this.currentUser);
    }
    checkValue(val) {
        //console.log("For checkbox", val.checked, this.isChecked);
    }
    // this.getExtSysNameByExtSysCode(this.extSysCode);
    finalSubmit(model, isChecked, starting, sheetNumber) {
        this.submitted = true;
        //console.log("extSysCode", this.extSysCode);
        //console.log("poojaprocess2", this.poojaprocess2);
        //console.log("starting", this.starting);
        //console.log("currency",this.currency)
        if (this.addForm.controls.subArray.invalid) {
            // this.toast.error('Error,Numeric values not allowed in mapping column', ``, {
            //   timeOut: 3000,
            //   progressBar: true,
            //   tapToDismiss: true,
            //   closeButton: true,
            //   easeTime: 300,
            //   extendedTimeOut: 1000
            // });
            sweetalert2__WEBPACK_IMPORTED_MODULE_9___default.a.fire({
                type: 'error',
                text: 'Error,Numeric values not allowed in mapping column',
            });
            return;
        }
        //console.log("startingRow : " + starting);
        //console.log("extSysCode : " + this.extSysCode);
        //console.log("processcode : " + this.poojaprocess2);
        //console.log("Model : ", model);
        //console.log("extNameValue : " + this.extNameValue);
        //console.log("Is header present : ", isChecked);
        // let body = JSON.stringify(model);
        this.object3.excelMapping = model;
        model.subArray[0].modifiedBy = this.currentUser;
        //console.log('modifiedBy 1 : ', model.subArray[0].modifiedBy);
        //console.log(this.object3);
        // this.excelExt.modifiedBy = this.currentUser;
        this.excelUpload.columnData(model, this.extNameValue, this.poojaprocess2, isChecked, starting, this.extSysCode, this.currency, this.currentUser, sheetNumber)
            .subscribe(response => {
            this.dataFromresponse = response;
            //console.log(this.dataFromresponse);
            // //console.log(this.dataFromresponse.authStatus);
            if (this.dataFromresponse) {
                // this.toast.success(`Mapped successfully`, '', {
                //   timeOut: 3000,
                //   progressBar: true,
                //   tapToDismiss: true,
                //   closeButton: true,
                //   easeTime: 300,
                //   extendedTimeOut: 1000
                // });
                sweetalert2__WEBPACK_IMPORTED_MODULE_9___default.a.fire('Mapped successfully ');
                this.is_edit = true;
                //console.log(response[0].authStatus);
                //console.log(response[0].modifiedBy);
                if (response[0].authStatus === 'U') {
                    response[0].authStatus = 'UNAUTHORIZED';
                }
                if (response[0].authStatus === 'A') {
                    response[0].authStatus = 'AUTHORIZED';
                }
                if (response[0].recordStatus === 'O') {
                    response[0].recordStatus = 'OPEN';
                }
                if (response[0].recordStatus === 'C') {
                    response[0].recordStatus = 'CLOSE';
                }
                this.tempStore = response[0];
                // this.addForm.reset();
            }
            else {
                // this.toast.error(`Failed! ExternalSystem And ProcessCode Already Mapped`, '', {
                //   timeOut: 3000,
                //   progressBar: true,
                //   tapToDismiss: true,
                //   closeButton: true,
                //   easeTime: 300,
                //   extendedTimeOut: 1000
                // });
                sweetalert2__WEBPACK_IMPORTED_MODULE_9___default.a.fire({
                    type: 'error',
                    text: 'Failed ExternalSystem And ProcessCode Already Mapped',
                });
            }
        }, err => {
            // this.toast.error(`Failed! Server Error`, '', {
            //   timeOut: 3000,
            //   progressBar: true,
            //   tapToDismiss: true,
            //   closeButton: true,
            //   easeTime: 300,
            //   extendedTimeOut: 1000
            // });
            sweetalert2__WEBPACK_IMPORTED_MODULE_9___default.a.fire({
                type: 'error',
                text: 'Failed Server Error',
            });
        });
    }
    // -------------------------------------------------------------
    // NOTE : To get process code by external system name 
    // -------------------------------------------------------------
    // getProcess(extSysName) {
    //   //console.log(extSysName);
    //   this.api.getProcessNameWithExtSys(extSysName).subscribe(response => {
    //     this.pooja = response;
    //     this.processName = this.pooja;
    //     //console.log(this.processName);
    //     // this.processName.split(',');
    //     // this.poojaprocessdata=
    //     // //console.log(this.poojaprocessdata);
    //     //console.log('process method end');
    //   });
    // }
    // --------by pooja--------
    // -------------------------------------------------------------
    // NOTE : To get process code by external system code 
    // -------------------------------------------------------------
    // Changes on 5th sept
    getProcess(extSysCode) {
        //console.log(extSysCode);
        this.api.getProcessNameByExtSysCode(extSysCode).subscribe(response => {
            this.pooja = response;
            this.processName = this.pooja;
            //console.log(this.processName);
            this.getExtSysNameByExtSysCode(extSysCode);
            //console.log('process method end');
        });
    }
    getProcessName1(processCode, extSysCode) {
        //console.log(processCode);
        //console.log(extSysCode);
        this.extSysCode = extSysCode;
        this.poojaprocess2 = processCode;
    }
    getAllExtsysNameAndProcessCodeOnAuthStatus() {
        //console.log("getting extsysname on authstatus")
        this.api.getAllExtsysNameAndProcessCodeOnAuthStatus()
            .subscribe(response => {
            this.extSysData1 = response;
            //console.log(this.extSysData1);
            //   this.dataSource.paginator = this.paginator;
            // this.dataSource.sort = this.sort;
        });
    }
    // onKey(event: any) { // without type info
    //   //this.values += event.target.value + ' | ';
    //  //console.log(event.target.value);
    //  if(event.target.value== '0' || 1 || 2 || 3 || 4 || 5 ||6 || 7 || 8 || 9){
    //    alert("give proper value");
    //  }else{
    //    alert("puuuuuuuuuuuuuuuuuuuuuuuuuuuu");
    //  }
    // }
    // -------------------------------------------------------------
    // NOTE : To get external system name by ext sys code
    // -------------------------------------------------------------
    // --------by pooja--------
    // ----start---------
    getExtSysNameByExtSysCode(extSysCode) {
        //console.log(extSysCode);
        this.api.getExtSysNameByExtSysCode(extSysCode)
            .subscribe(data => {
            this.extNameValue = data;
            //this.poojaext2=
            //console.log(this.extNameValue);
            // //console.log(this.extSysCode);
        });
    }
    // ----end------
    getAllExternalSystem() {
        //console.log('mathos call');
        this.api.getAllExtCode().subscribe(response => {
            this.extSysData1 = response;
            //console.log(this.extSysData1);
            //   this.dataSource.paginator = this.paginator;
            // this.dataSource.sort = this.sort;
        });
        // //console.log( this.extSysData);
    }
    getProcessName(extSys1) {
        //console.log(extSys1);
        //console.log(this.extSysData);
        this.api.getProcessNameWithExtSys(extSys1).subscribe(response => {
            this.processData = response;
            //console.log(this.processData);
        });
    }
    getAllColumn() {
        //console.log("method call");
        this.excelUpload.getAllExcelColumn().subscribe(response => {
            this.excelMap = response;
            //  this.excelMap=this.columnname1.columnname;
            this.patchData(this.excelMap);
            // //console.log(this.excelMap);
            // //console.log(this.excelMap[0]);
            this.dataSource = new _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatTableDataSource"](this.excelMap);
            this.cdr.markForCheck();
        });
    }
    patchData(formdata) {
        //console.log("formdata");
        const control = this.addForm.controls['subArray'];
        for (let i = 0; i < formdata.length; i++) {
            //console.log("lenght", formdata.length);
            control.push(this.getSubArray());
        }
        this.addForm.patchValue({ subArray: formdata });
    }
    getDataType(datevalue, index, row) {
        //console.log(row);
        //console.log("method call");
        // alert("value is"+datevalue);
        if (datevalue == "Date") {
            this.isDate = true;
        }
        else {
            this.notdate = true;
        }
    }
    // Dynamic Form Section
    // ------------by sakthi sept 10th-----------
    //-------------start------------------
    /**
     * Create form subArray
     */
    getSubArray() {
        return this.fb.group({
            columnnName: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]],
            dataType: [null, [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]],
            mappingColumn: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].minLength(1), _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].maxLength(3), _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].pattern('^[a-zA-Z \-#,@,%\']+')]],
            mandatory: false,
            headerName: [''],
            dateFormat: [{ value: '', disabled: true }],
            authStatus: [''],
            modifiedBy: [this.currentUser.userId],
            authorizedBy: [''],
            version: [''],
            modifiedTime: [''],
            authorizedTime: [''],
            recordStatus: [''],
            delimeter: [''],
            defaultValue: [''],
            repeatedTillNextValue: ['']
        });
    }
    /**
     * Add new subArray row into form
     */
    addSubArray() {
        const control = this.addForm.controls['subArray'];
        control.push(this.getSubArray());
    }
    /**
     * Remove subArray row from form on click delete button
     */
    removeSubArray(i) {
        const control = this.addForm.controls['subArray'];
        control.removeAt(i);
    }
    /**
   * This is one of the way how clear subArray fields.
   */
    clearAllSubArray() {
        const control = this.addForm.controls['subArray'];
        while (control.length) {
            control.removeAt(control.length - 1);
        }
        control.clearValidators();
    }
    /**
     *
     * TODO For forms validation
     */
    // subArraysGroup(index): FormGroup {
    //   this.subArrayList = this.addForm.get('subArray') as FormArray;
    //   const formGroup =  this.subArrayList.controls[index] as FormGroup;
    //   return formGroup;
    // }
    // get subArrayFormGroup() {
    //   return this.addForm.get('subArray') as FormArray;
    // }
    get f() { return this.addForm.controls; }
    get t() { return this.f.subArray; }
    /**
     *
     */
    checkTypeStatus(i) {
        //console.log(i);
        const control = this.addForm.controls['subArray'];
        let fg = control.get([i]);
        if (fg.value.dataType == 'Date') {
            this.is_edit = false;
            fg.get('dateFormat').enable();
        }
        else {
            fg.get('dateFormat').disable();
        }
    }
};
ExcelMappingComponent.ctorParameters = () => [
    { type: src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_7__["ExcelProcessingService"] },
    { type: src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_8__["ExcelApiService"] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatSnackBar"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"])('extForm'),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_forms__WEBPACK_IMPORTED_MODULE_2__["NgForm"])
], ExcelMappingComponent.prototype, "extenForm", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"])('isHeaderPresent'),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])
], ExcelMappingComponent.prototype, "isHeaderCustom", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"])('extSys1'),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])
], ExcelMappingComponent.prototype, "extRef", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"])('dateValue'),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])
], ExcelMappingComponent.prototype, "dateRef", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"])(_angular_material__WEBPACK_IMPORTED_MODULE_5__["MatButton"]),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatButton"])
], ExcelMappingComponent.prototype, "saveBtn", void 0);
ExcelMappingComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-excel-mapping',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./excel-mapping.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-mapping/excel-mapping.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./excel-mapping.component.css */ "./src/app/views/sias-v2/excel-mapping/excel-mapping.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_7__["ExcelProcessingService"],
        src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_8__["ExcelApiService"],
        _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],
        _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatSnackBar"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"]])
], ExcelMappingComponent);



/***/ }),

/***/ "./src/app/views/sias-v2/excel-mapping/excelMapping.ts":
/*!*************************************************************!*\
  !*** ./src/app/views/sias-v2/excel-mapping/excelMapping.ts ***!
  \*************************************************************/
/*! exports provided: ExcelMappingClass, ExcelMappingClass2, ExcelMappingClass3, ExcelMappingClass1, ExcelMappingUpdateDTO, ExcelMappingClass5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExcelMappingClass", function() { return ExcelMappingClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExcelMappingClass2", function() { return ExcelMappingClass2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExcelMappingClass3", function() { return ExcelMappingClass3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExcelMappingClass1", function() { return ExcelMappingClass1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExcelMappingUpdateDTO", function() { return ExcelMappingUpdateDTO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExcelMappingClass5", function() { return ExcelMappingClass5; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class ExcelMappingClass {
}
class ExcelMappingClass2 {
}
class ExcelMappingClass3 {
}
class ExcelMappingClass1 {
}
class ExcelMappingUpdateDTO {
}
class ExcelMappingClass5 {
}


/***/ }),

/***/ "./src/app/views/sias-v2/excel-mapping/externalSystem.ts":
/*!***************************************************************!*\
  !*** ./src/app/views/sias-v2/excel-mapping/externalSystem.ts ***!
  \***************************************************************/
/*! exports provided: ExternalSystem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExternalSystem", function() { return ExternalSystem; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class ExternalSystem {
}


/***/ }),

/***/ "./src/app/views/sias-v2/excel-mapping/update-excel-mapping/update-excel-mapping.component.scss":
/*!******************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/excel-mapping/update-excel-mapping/update-excel-mapping.component.scss ***!
  \******************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("table {\n  width: 80%;\n  padding: 0%;\n  margin: 0%;\n}\n\nmat-form-field {\n  width: 250px;\n}\n\ntd > mat-form-field {\n  width: 130px;\n}\n\nth {\n  width: 130px;\n}\n\n.dropdown {\n  position: relative;\n  display: inline-block;\n}\n\n.dropdown-arrow {\n  position: absolute;\n  top: 2px;\n  right: 0;\n}\n\n/*.dropdown::before {\n  position: absolute;\n  content: \" \\2193\";\n  top: 0px;\n  right: -8px;\n  height: 20px;\n  width: 20px;\n}*/\n\n#customers {\n  font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\n  border-collapse: collapse;\n  width: 100%;\n}\n\n#customers td,\n#customers th {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: center;\n}\n\n#customers tr:nth-child(even) {\n  background-color: #f2f2f2;\n}\n\n#customers th {\n  padding-top: 12px;\n  padding-bottom: 12px;\n  text-align: left;\n  background-color: #61b2d8;\n  color: white;\n}\n\nmat-card mat-form-field {\n  font-size: 10px;\n}\n\nmat-chip {\n  font-size: 10px;\n}\n\nmat-checkbox {\n  font-size: 10px;\n}\n\nth {\n  font-size: 10px;\n}\n\n.mat-raised-button {\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  height: 20px;\n  line-height: 27px;\n  min-height: 27px;\n  vertical-align: top;\n  font-size: 11px;\n  padding: 0 0;\n  margin: 0;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leGNlbC1tYXBwaW5nL3VwZGF0ZS1leGNlbC1tYXBwaW5nL0Y6XFxtdXRodS1vbmJvYXJkXFxtZWRpYW4tcGgyLXVpL3NyY1xcYXBwXFx2aWV3c1xcc2lhcy12MlxcZXhjZWwtbWFwcGluZ1xcdXBkYXRlLWV4Y2VsLW1hcHBpbmdcXHVwZGF0ZS1leGNlbC1tYXBwaW5nLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC92aWV3cy9zaWFzLXYyL2V4Y2VsLW1hcHBpbmcvdXBkYXRlLWV4Y2VsLW1hcHBpbmcvdXBkYXRlLWV4Y2VsLW1hcHBpbmcuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxVQUFBO0VBQ0EsV0FBQTtFQUNBLFVBQUE7QUNDRjs7QURFQTtFQUNFLFlBQUE7QUNDRjs7QURDQTtFQUNFLFlBQUE7QUNFRjs7QURFQTtFQUNFLFlBQUE7QUNDRjs7QURPQTtFQUNFLGtCQUFBO0VBQ0EscUJBQUE7QUNKRjs7QURPQTtFQUNFLGtCQUFBO0VBQ0EsUUFBQTtFQUNBLFFBQUE7QUNKRjs7QURPQTs7Ozs7OztFQUFBOztBQVNBO0VBQ0UseURBQUE7RUFDQSx5QkFBQTtFQUNBLFdBQUE7QUNMRjs7QURPQTs7RUFFRSxzQkFBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtBQ0pGOztBRE9BO0VBQ0UseUJBQUE7QUNKRjs7QURPQTtFQUNFLGlCQUFBO0VBQ0Esb0JBQUE7RUFDQSxnQkFBQTtFQUNBLHlCQUFBO0VBQ0EsWUFBQTtBQ0pGOztBRE1BO0VBQ0UsZUFBQTtBQ0hGOztBREtBO0VBQ0UsZUFBQTtBQ0ZGOztBREtBO0VBQ0UsZUFBQTtBQ0ZGOztBRElBO0VBQ0UsZUFBQTtBQ0RGOztBRElBO0VBQ0UsMEJBQUE7RUFBQSx1QkFBQTtFQUFBLGtCQUFBO0VBQ0EsWUFBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxtQkFBQTtFQUNBLGVBQUE7RUFDQSxZQUFBO0VBQ0EsU0FBQTtBQ0RGIiwiZmlsZSI6InNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leGNlbC1tYXBwaW5nL3VwZGF0ZS1leGNlbC1tYXBwaW5nL3VwZGF0ZS1leGNlbC1tYXBwaW5nLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsidGFibGUge1xyXG4gIHdpZHRoOiA4MCU7XHJcbiAgcGFkZGluZzogMCU7XHJcbiAgbWFyZ2luOiAwJTtcclxufVxyXG5cclxubWF0LWZvcm0tZmllbGQge1xyXG4gIHdpZHRoOiAyNTBweDtcclxufVxyXG50ZCA+IG1hdC1mb3JtLWZpZWxkIHtcclxuICB3aWR0aDogMTMwcHg7XHJcblxyXG4gIFxyXG59XHJcbnRoIHtcclxuICB3aWR0aDogMTMwcHg7XHJcblxyXG5cclxuIFxyXG4gIFxyXG4gIFxyXG59XHJcblxyXG4uZHJvcGRvd24ge1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbn1cclxuXHJcbi5kcm9wZG93bi1hcnJvdyB7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHRvcDogMnB4O1xyXG4gIHJpZ2h0OiAwO1xyXG59XHJcblxyXG4vKi5kcm9wZG93bjo6YmVmb3JlIHtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgY29udGVudDogXCIgXFwyMTkzXCI7XHJcbiAgdG9wOiAwcHg7XHJcbiAgcmlnaHQ6IC04cHg7XHJcbiAgaGVpZ2h0OiAyMHB4O1xyXG4gIHdpZHRoOiAyMHB4O1xyXG59Ki9cclxuXHJcbiNjdXN0b21lcnMge1xyXG4gIGZvbnQtZmFtaWx5OiBcIlRyZWJ1Y2hldCBNU1wiLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xyXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxuI2N1c3RvbWVycyB0ZCxcclxuI2N1c3RvbWVycyB0aCB7XHJcbiAgYm9yZGVyOiAxcHggc29saWQgI2RkZDtcclxuICBwYWRkaW5nOiA4cHg7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG4jY3VzdG9tZXJzIHRyOm50aC1jaGlsZChldmVuKSB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjtcclxufVxyXG5cclxuI2N1c3RvbWVycyB0aCB7XHJcbiAgcGFkZGluZy10b3A6IDEycHg7XHJcbiAgcGFkZGluZy1ib3R0b206IDEycHg7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoOTcsIDE3OCwgMjE2KTtcclxuICBjb2xvcjogd2hpdGU7XHJcbn1cclxubWF0LWNhcmQgbWF0LWZvcm0tZmllbGQge1xyXG4gIGZvbnQtc2l6ZTogMTBweDtcclxufVxyXG5tYXQtY2hpcCB7XHJcbiAgZm9udC1zaXplOiAxMHB4O1xyXG59XHJcblxyXG5tYXQtY2hlY2tib3gge1xyXG4gIGZvbnQtc2l6ZTogMTBweDtcclxufVxyXG50aCB7XHJcbiAgZm9udC1zaXplOiAxMHB4O1xyXG59XHJcblxyXG4ubWF0LXJhaXNlZC1idXR0b24ge1xyXG4gIHdpZHRoOiBmaXQtY29udGVudDtcclxuICBoZWlnaHQ6IDIwcHg7XHJcbiAgbGluZS1oZWlnaHQ6IDI3cHg7XHJcbiAgbWluLWhlaWdodDogMjdweDtcclxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xyXG4gIGZvbnQtc2l6ZTogMTFweDtcclxuICBwYWRkaW5nOiAwIDA7XHJcbiAgbWFyZ2luOiAwO1xyXG59XHJcbiIsInRhYmxlIHtcbiAgd2lkdGg6IDgwJTtcbiAgcGFkZGluZzogMCU7XG4gIG1hcmdpbjogMCU7XG59XG5cbm1hdC1mb3JtLWZpZWxkIHtcbiAgd2lkdGg6IDI1MHB4O1xufVxuXG50ZCA+IG1hdC1mb3JtLWZpZWxkIHtcbiAgd2lkdGg6IDEzMHB4O1xufVxuXG50aCB7XG4gIHdpZHRoOiAxMzBweDtcbn1cblxuLmRyb3Bkb3duIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi5kcm9wZG93bi1hcnJvdyB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAycHg7XG4gIHJpZ2h0OiAwO1xufVxuXG4vKi5kcm9wZG93bjo6YmVmb3JlIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBjb250ZW50OiBcIiBcXDIxOTNcIjtcbiAgdG9wOiAwcHg7XG4gIHJpZ2h0OiAtOHB4O1xuICBoZWlnaHQ6IDIwcHg7XG4gIHdpZHRoOiAyMHB4O1xufSovXG4jY3VzdG9tZXJzIHtcbiAgZm9udC1mYW1pbHk6IFwiVHJlYnVjaGV0IE1TXCIsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4jY3VzdG9tZXJzIHRkLFxuI2N1c3RvbWVycyB0aCB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XG4gIHBhZGRpbmc6IDhweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4jY3VzdG9tZXJzIHRyOm50aC1jaGlsZChldmVuKSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7XG59XG5cbiNjdXN0b21lcnMgdGgge1xuICBwYWRkaW5nLXRvcDogMTJweDtcbiAgcGFkZGluZy1ib3R0b206IDEycHg7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG4gIGJhY2tncm91bmQtY29sb3I6ICM2MWIyZDg7XG4gIGNvbG9yOiB3aGl0ZTtcbn1cblxubWF0LWNhcmQgbWF0LWZvcm0tZmllbGQge1xuICBmb250LXNpemU6IDEwcHg7XG59XG5cbm1hdC1jaGlwIHtcbiAgZm9udC1zaXplOiAxMHB4O1xufVxuXG5tYXQtY2hlY2tib3gge1xuICBmb250LXNpemU6IDEwcHg7XG59XG5cbnRoIHtcbiAgZm9udC1zaXplOiAxMHB4O1xufVxuXG4ubWF0LXJhaXNlZC1idXR0b24ge1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gIGhlaWdodDogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI3cHg7XG4gIG1pbi1oZWlnaHQ6IDI3cHg7XG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gIGZvbnQtc2l6ZTogMTFweDtcbiAgcGFkZGluZzogMCAwO1xuICBtYXJnaW46IDA7XG59Il19 */");

/***/ }),

/***/ "./src/app/views/sias-v2/excel-mapping/update-excel-mapping/update-excel-mapping.component.ts":
/*!****************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/excel-mapping/update-excel-mapping/update-excel-mapping.component.ts ***!
  \****************************************************************************************************/
/*! exports provided: UpdateExcelMappingComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpdateExcelMappingComponent", function() { return UpdateExcelMappingComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var _excelMapping__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../excelMapping */ "./src/app/views/sias-v2/excel-mapping/excelMapping.ts");
/* harmony import */ var _externalSystem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../externalSystem */ "./src/app/views/sias-v2/excel-mapping/externalSystem.ts");
/* harmony import */ var src_app_shared_services_app_confirm_app_confirm_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/shared/services/app-confirm/app-confirm.service */ "./src/app/shared/services/app-confirm/app-confirm.service.ts");
/* harmony import */ var src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/shared/services/sias2-services/excel-processing.service */ "./src/app/shared/services/sias2-services/excel-processing.service.ts");
/* harmony import */ var src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/shared/services/sias2-services/ExcelApiService */ "./src/app/shared/services/sias2-services/ExcelApiService.ts");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");












let UpdateExcelMappingComponent = class UpdateExcelMappingComponent {
    constructor(excelUpload, api, fb, cdr, snack, toast, confirmService, route) {
        this.excelUpload = excelUpload;
        this.api = api;
        this.fb = fb;
        this.cdr = cdr;
        this.snack = snack;
        this.toast = toast;
        this.confirmService = confirmService;
        this.route = route;
        this.fieldArray = [];
        this.displayedColumns = ['columnnName', 'dataType', 'mandatory', 'headerName', 'dateFormat', 'excelMappingColumn'];
        this.toppings = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]();
        this.submitted = false;
        this.processData1 = new _externalSystem__WEBPACK_IMPORTED_MODULE_6__["ExternalSystem"];
        this.excelMaint = new _excelMapping__WEBPACK_IMPORTED_MODULE_5__["ExcelMappingClass"]();
        this.disablefetchbtn = false;
        this.fetch_disable = true;
        this.tempStore = [];
        this.excelMappingForUpdate = new _excelMapping__WEBPACK_IMPORTED_MODULE_5__["ExcelMappingUpdateDTO"]();
        this.mapDataForUpdate = new _excelMapping__WEBPACK_IMPORTED_MODULE_5__["ExcelMappingClass5"]();
        this.copyData1 = true;
        this.object3 = new _excelMapping__WEBPACK_IMPORTED_MODULE_5__["ExcelMappingClass3"]();
        this.dataTypes = [
            { id: 1, type: 'Date', isActive: true },
            { id: 2, type: 'Number', isActive: false },
            { id: 3, type: 'Clob', isActive: false },
            { id: 4, type: 'VarChar', isActive: false }
        ];
    }
    ngOnInit() {
        this.route.queryParams.subscribe(params => {
            this.extSysCodeFromsummary = params['extSysCode'];
            this.processNameFromSummary = params['processName'];
            console.log(this.extSysCodeFromsummary);
            this.extNameValue = params['extSysName'];
        });
        this.addForm = this.fb.group({
            subArray: this.fb.array([])
        });
        this.addFormForDynamicRow = this.fb.group({
            subArray: this.fb.array([])
        });
        // this.getProcess(this.extSysCodeFromsummary);
        this.api.getProcessNameByExtSysCodeForUpdateMapping(this.extSysCodeFromsummary).subscribe(response => {
            this.dataResp = response;
            console.log('process method end', this.dataResp);
        });
        // this.getAllExternalSystemCode();
        // this.poojaprocess2 = this.processNameFromSummary;
        // this.getProcessName1(this.extSysCodeFromsummary, this.poojaprocess2)
        //localStorage.setItem('userIdForChangePassword', localStorage.getItem('currentUser'));
        this.currentUser = localStorage.getItem('currentUser');
        // console.log("this.currentUser", this.currentUser);
        this.getAllExtsysNameAndProcessCodeOnAuthStatus();
    }
    getProcess(extSysCode) {
        // if(this.currency==null)
        // {
        //   this.disablefetchbtn = false;
        // }
        console.log(extSysCode);
        this.api.getProcessNameByExtSysCodeForUpdateMapping(extSysCode).subscribe(response => {
            this.dataResp = response;
            this.processName = this.dataResp;
            console.log(this.processName);
            this.getExtSysNameByExtSysCode(extSysCode);
            // console.log('process method end');
        });
    }
    updateMappingData(model, isValid, extSysCode, processCode, starting, isChecked, ccy, sheetNumber) {
        console.log(model);
        console.log("ext", extSysCode);
        this.submitted = true;
        this.progress = true;
        let modifiedBy = model.subArray[0].modifiedBy;
        // console.log("modifiedBy 1 : ", modifiedBy);
        modifiedBy = this.currentUser;
        if (this.addForm.invalid) {
            sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire({
                type: 'error',
                text: 'Numeric values not allowed in mapping column',
            });
            return;
        }
        console.log(model, this.extNameValue, processCode, extSysCode, starting, isChecked, modifiedBy, ccy, sheetNumber);
        this.api.updateMappingData(model, this.extNameValue, processCode, this.extSysCodeFromsummary, starting, isChecked, modifiedBy, ccy, sheetNumber)
            .subscribe(data => {
            this.updateDataResp = data;
            console.log(this.updateDataResp);
            if (this.updateDataResp) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire('Updated successfully');
                if (data[0].authStatus === 'U') {
                    data[0].authStatus = 'UNAUTHORIZED';
                }
                if (data[0].authStatus === 'A') {
                    data[0].authStatus = 'AUTHORIZED';
                }
                if (data[0].recordStatus === 'C') {
                    data[0].recordStatus = 'CLOSED';
                }
                if (data[0].recordStatus === 'O') {
                    data[0].recordStatus = 'OPEN';
                }
                this.tempStore = data[0];
                this.updateButton.disabled = true;
                this.cdr.markForCheck();
            }
            else {
                sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire({
                    type: 'error',
                    text: 'Failed to update ',
                });
            }
        });
        this.progress = false;
    }
    onClickOfAuth(model, isValid, extSysCode, processCode, ccy) {
        // console.log("Auth model : ", model)
        // console.log("isValid : " + isValid)
        // console.log("extSysCode : " + extSysCode + " processCode : " + processCode);
        const modifiedBy = model.subArray[0].modifiedBy;
        // console.log("modified by: ", modifiedBy)
        if (modifiedBy == this.currentUser) {
            sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire({
                type: 'error',
                text: 'Maker Cannot Authorize the record',
            });
            return;
        }
        console.log("authhh", extSysCode);
        this.api.onAuthorizingTheRecordOfExcelMApping(model, this.extNameValue, processCode, this.extSysCode, this.currentUser, ccy)
            .subscribe(authResponse => {
            this.authRespReference = authResponse;
            console.log("backend data", authResponse);
            console.log(this.authRespReference);
            if (this.authRespReference[0].authStatus === 'A') {
                this.authRespReference[0].authStatus = 'AUTHORIZED';
            }
            if (this.authRespReference[0].authStatus === 'U') {
                this.authRespReference[0].authStatus = 'UNAUTHORIZED';
            }
            if (this.authRespReference[0].recordStatus === 'C') {
                this.authRespReference[0].recordStatus = 'CLOSED';
            }
            if (this.authRespReference[0].recordStatus === 'O') {
                this.authRespReference[0].recordStatus = 'OPEN';
            }
            this.tempStore = authResponse[0];
            if (this.authRespReference) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire('You Authorized the record');
            }
            else {
                sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire({
                    type: 'error',
                    text: 'Failed To Authorize ',
                });
            }
            this.cdr.markForCheck();
            // console.log("Auth Resp From Backend : ", this.authRespReference)
        });
    }
    dataChanged(event, type) {
        let data = JSON.parse(localStorage.getItem('mappingData'));
        console.log(event, type, data);
        if (data.sheetNumber != this.sheetNumber && data.processCode != this.poojaprocess2 && data.currency != this.currency) {
            this.disablefetchbtn = false;
        }
        if (data.sheetNumber != null && data.processCode != null && data.currency != null) {
            this.disablefetchbtn = false;
        }
    }
    onClcikOfClose(model, isValid, extSysCode, processCode, ccy) {
        // console.log("Close model : ", model)
        // console.log("isValid : " + isValid)
        // console.log("extSysCode : " + extSysCode + " processCode : " + processCode);
        if (model.subArray[0].recordStatus === 'OPEN') {
            model.subArray[0].recordStatus = 'O';
        }
        if (model.subArray[0].recordStatus === 'CLOSED') {
            model.subArray[0].recordStatus = 'C';
        }
        // console.log(this.currentUser);
        model.subArray[0].modifiedBy = this.currentUser;
        // console.log(model.subArray[0].modifiedBy);
        this.api.onClcikOFCloseOfUpdateExcelMApping(model, this.extNameValue, processCode, this.extSysCode, ccy)
            .subscribe(closeResponse => {
            this.closeRefernce = closeResponse;
            // console.log(this.closeRefernce[0]);
            // console.log(this.closeRefernce[0].recordStatus)
            if (closeResponse[0].authStatus === 'U') {
                closeResponse[0].authStatus = 'UNAUTHORIZED';
            }
            if (closeResponse[0].authStatus === 'A') {
                closeResponse[0].authStatus = 'AUTHORIZED';
            }
            if (closeResponse[0].recordStatus === 'C') {
                closeResponse[0].recordStatus = 'CLOSED';
            }
            if (closeResponse[0].recordStatus === 'O') {
                closeResponse[0].recordStatus = 'OPEN';
            }
            this.tempStore = closeResponse[0];
            if (this.closeRefernce) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire('You Closed the Record');
            }
            else {
                sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire({
                    type: 'error',
                    text: 'Failed To Close ',
                });
            }
            if (closeResponse[0].recordStatus == 'C') {
                this.disableReopenButton = true;
            }
            this.cdr.markForCheck();
            // console.log("close response from backend", this.closeRefernce);
        });
    }
    onClcikOfReopen(model, isValid, extSysCode, processCode, ccy) {
        // console.log("Re-Open model : ", model)
        // console.log("isValid : " + isValid)
        // console.log("extSysCode : " + extSysCode + " processCode : " + processCode);
        if (model.subArray[0].recordStatus === 'OPEN') {
            model.subArray[0].recordStatus = 'O';
        }
        if (model.subArray[0].recordStatus === 'CLOSED') {
            model.subArray[0].recordStatus = 'C';
        }
        // console.log(this.currentUser);
        model.subArray[0].modifiedBy = this.currentUser;
        // console.log(model.subArray[0].modifiedBy);
        this.api.onClcikOfReopenOfUpdateExcelMapping(model, this.extNameValue, processCode, this.extSysCode, ccy)
            .subscribe(reOpenResp => {
            this.reOpenRespReference = reOpenResp;
            if (this.reOpenRespReference[0].authStatus === 'A') {
                this.reOpenRespReference[0].authStatus = 'AUTHORIZED';
            }
            if (this.reOpenRespReference[0].authStatus === 'U') {
                this.reOpenRespReference[0].authStatus = 'UNAUTHORIZED';
            }
            if (this.reOpenRespReference[0].recordStatus === 'C') {
                this.reOpenRespReference[0].recordStatus = 'CLOSED';
            }
            if (this.reOpenRespReference[0].recordStatus === 'O') {
                this.reOpenRespReference[0].recordStatus = 'OPEN';
            }
            this.tempStore = reOpenResp[0];
            if (this.reOpenRespReference) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire('You Re-Opened the record ');
            }
            else {
                sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire({
                    type: 'error',
                    text: 'Failed To Re-Open ',
                });
            }
            if (reOpenResp[0].recordStatus == 'CLOSED') {
                this.disableCloseButton = true;
            }
            this.cdr.markForCheck();
            // console.log("Re-Open resp from backend : ", this.reOpenRespReference);
        });
    }
    // --------------------------------------------------------
    // ---------------To get all ext sys name------------------
    // --------------------------------------------------------
    // getAllExternalSystemName() {
    //   //console.log('mathos call');
    //   this.api.getAllExtSysForUpdateMapping().subscribe(response => {
    //     this.extSysData1 = response;
    //     //console.log(this.extSysData1);
    //   });
    // }
    // --------------------------------------------------------
    // ---------------To get all ext sys code------------------
    // --------------------------------------------------------
    getAllExternalSystemCode() {
        // console.log('mathos call');
        this.api.getAllExtCodeForUpdateMapping().subscribe(response => {
            this.extSysData1 = response;
            // console.log(this.extSysData1);
        });
    }
    // getProcess(extSysName) {
    //   this.clearAllSubArray();
    //   //console.log("Clear form called",extSysName);
    //   this.api.getProcessNameWithExtSysForMapping(extSysName).subscribe(response => {
    //     this.res = response;
    //     this.processName = this.res;
    //     //console.log(this.processName);
    //     //console.log('process method end');
    //   });
    // }
    // getProcessName1(processCode, extSysName) {
    //   //console.log(processCode);
    //   //console.log(extSysName);
    //   this.poojaext2 = extSysName;
    //   this.poojaprocess2 = processCode;
    // }
    // --------by pooja--------
    // -------------------------------------------------------------
    // NOTE : To get process code by external system code
    // -------------------------------------------------------------
    // Changes on 6th sept
    getProcessName1(processCode) {
        // console.log(processCode);
        // this.excelMappingDisabled=true;
        console.log(processCode, this.extNameValue);
        this.extSysCode = this.extSysCodeFromsummary;
        this.poojaprocess2 = processCode;
        this.api.getCurrencyOnExtNameAndProcssCode(this.extNameValue, processCode, this.extSysCodeFromsummary).subscribe(data => {
            // console.log(data);
            this.ccyData = data;
            console.log(this.ccyData);
            if (this.ccyData.length == 0) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire('No Currency Found For the Process code');
            }
        });
        // this.fetch_disable=true;
    }
    // -------------------------------------------------------------
    // NOTE : To get external system name by ext sys code
    // -------------------------------------------------------------
    getExtSysNameByExtSysCode(extSysCode) {
        // console.log(extSysCode);
        this.api.getExtSysNameByExtSysCode(extSysCode)
            .subscribe(data => {
            this.extNameValue = data;
            // this.poojaext2=
            console.log(this.extNameValue);
            // //console.log(this.extSysCode);
        });
    }
    // ----end------
    getAllMapping(extSysName, processCode, ccy) {
        this.addForm.reset();
        let dataobj = { processCode: processCode, currency: ccy, sheetNumber: this.sheetNumber };
        localStorage.setItem('mappingData', JSON.stringify(dataobj));
        this.api.fetchAllName(this.extNameValue, processCode, ccy).subscribe(filenames => {
            console.log("file names from frontend", filenames);
            this.fileNames = filenames;
            console.log("filenames alloted", this.fileNames);
        });
        this.api.getAllMappingByExtSysAndProcessCode(this.extNameValue, processCode, ccy, this.sheetNumber)
            .subscribe(data => {
            console.log(data);
            if (data == null) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire({
                    title: "Excel mapping is not available with this sheet number.",
                    text: 'Please enter the correct sheet number'
                });
                this.formdata = '';
                console.log("inisde if");
            }
            else {
                console.log(this.addForm.controls);
                this.formdata = data;
                // this.addForm=data;
                this.starting = this.formdata[0].startingRow;
                this.isChecked = this.formdata[0].headerRepeated;
                // console.log(this.formdata[0])
                if (this.formdata[0].authStatus === 'U') {
                    this.formdata[0].authStatus = 'UNAUTHORIZED';
                }
                if (this.formdata[0].authStatus === 'A') {
                    this.formdata[0].authStatus = 'AUTHORIZED';
                }
                if (this.formdata[0].recordStatus === 'C') {
                    this.formdata[0].recordStatus = 'CLOSED';
                }
                if (this.formdata[0].recordStatus === 'O') {
                    this.formdata[0].recordStatus = 'OPEN';
                }
                this.tempStore = this.formdata[0];
                this.patchData(this.formdata);
                // console.log("Check Array ==>", this.formdata)
                this.cdr.markForCheck();
                this.dataSource = this.formdata;
                if (this.formdata != null) {
                    // this.toast.success(`Fetched Mapped Data`, '', {
                    //   timeOut: 3000,
                    //   progressBar: true,
                    //   tapToDismiss: true,
                    //   closeButton: true,
                    //   easeTime: 300,
                    //   extendedTimeOut: 1000
                    // });
                    this.progress = false;
                    sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire('Fetched Mapped Data ');
                    this.disablefetchbtn = true;
                    this.fetchButton.disabled = true;
                    this.excelMappingDisabled = false;
                    // this.addForm.reset();
                }
                else {
                    // this.toast.error(`Failed!`, '', {
                    //   timeOut: 3000,
                    //   progressBar: true,
                    //   tapToDismiss: true,
                    //   closeButton: true,
                    //   easeTime: 300,
                    //   extendedTimeOut: 1000
                    // });
                    sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire({
                        type: 'error',
                        text: 'Failed ',
                    });
                }
                this.cdr.markForCheck();
                this.dataSource = this.formdata;
            }
        });
        this.progress = false;
        // this.fetch_disable=false;
    }
    // Dynamic Form Section
    // ------------by sakthi sept 4th-----------
    // -------------start------------------
    /**
     * Create form subArray
     */
    getSubArray() {
        return this.fb.group({
            columnnName: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]],
            dataType: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]],
            mandatory: [false],
            headerName: [''],
            dateFormat: [null],
            excelMappingColumn: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].maxLength(3), _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].pattern('^[a-zA-Z \-\']+')]],
            id: [''],
            tableMappingColumn: [''],
            startingRow: [''],
            headerRepeated: [''],
            authStatus: [''],
            modifiedBy: [''],
            authorizedBy: [''],
            version: [''],
            modifiedTime: [''],
            authorizedTime: [''],
            recordStatus: [''],
            delimeter: [''],
            defaultValue: [''],
            repeatedTillNextValue: ['']
        });
    }
    /**
     * Add new subArray row into form
     */
    addSubArray() {
        // debugger;
        console.log("enter inside add method");
        const control = this.addForm.controls.subArray;
        control.push(this.getSubArray());
        //   let c = new ExcelMappingUpdateDTO;
        //  this.formdata.push(c);
    }
    /**
     * Remove subArray row from form on click delete button
     */
    removeSubArray(i, data) {
        // const control = <FormArray>this.addForm.controls.subArray;
        // control.removeAt(i);
        // // control.reset(i)
        // console.log("removed:?",control);
        this.confirmService
            .confirm({ title: 'Confirm', message: 'Are you sure to delete?', ok: 'Yes', cancel: 'No' })
            .subscribe(res => {
            if (res) {
                this.getRowIdx(i);
            }
            else {
                return;
            }
        });
    }
    /**
     * TODO Populate the data
     */
    patchData(formdata) {
        // console.log("formdata", formdata)
        const control = this.addForm.controls.subArray;
        control.controls = [];
        // debugger;
        for (let i = 0; i < formdata.length; i++) {
            // console.log("lenght", formdata.length)
            control.push(this.getSubArray());
        }
        this.addForm.patchValue({ subArray: formdata });
    }
    /**
     * This is one of the way how clear subArray fields.
     */
    clearAllSubArray() {
        debugger;
        const control = this.addForm.controls.subArray;
        while (control.length) {
            control.removeAt(control.length - 1);
        }
        control.clearValidators();
    }
    /**
     * @method getRowIdx(i){}
     */
    getRowIdx(i) {
        const control = this.addForm.controls.subArray;
        const fg = control.get([i]);
        const idx = fg.get('id').value;
        // console.log("For Delete => ", idx);
        this.api.deleteMappingRow(idx)
            .subscribe(e => {
            // console.log("Resp : ", e);
            if (e) {
                // this.toast.success(`Deleted`, '', {
                //   timeOut: 3000,
                //   progressBar: true,
                //   tapToDismiss: true,
                //   closeButton: true,
                //   easeTime: 300,
                //   extendedTimeOut: 1000
                // });
                sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire('Deleted ');
            }
            else {
                // this.toast.error(`Failed!`, '', {
                //   timeOut: 3000,
                //   progressBar: true,
                //   tapToDismiss: true,
                //   closeButton: true,
                //   easeTime: 300,
                //   extendedTimeOut: 1000
                // });
                sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire({
                    type: 'error',
                    text: 'Failed ',
                });
            }
            control.removeAt(i);
            this.cdr.markForCheck();
        });
    }
    checkTypeStatus(i) {
        // console.log(i);
        // //console.log("test", this.getSubArrayFormGroup(i).controls['dataType'].value);
        const control = this.addForm.controls.subArray;
        const fg = control.get([i]);
        // console.log("Value", fg.value.dataType)
        if (fg.value.dataType == 'Date') {
            fg.get('dateFormat').enable();
        }
        else {
            fg.get('dateFormat').disable();
        }
    }
    getSubArrayFormGroup(index) {
        const control = this.addForm.controls.subArray;
        const fg = control.get([index]);
        //    //console.log("Value", fg.value);
        return fg.value;
    }
    get f() { return this.addForm.controls; }
    get t() { return this.f.subArray; }
    // getCurrencyOnExtNameAndProcssCode()
    // {
    //   //console.log("currency")
    //   this.api.getCurrencyOnExtNameAndProcssCode(,this.extNameValue).subscribe(data=>{
    //     //console.log(data);
    //   })
    // }
    copyData(model, isValid, extSysCode, processCode, starting, isChecked, currencydata) {
        this.extSysCodeFromsummary = '';
        this.editafterfetch = true;
        this.copyData1 = false;
        this.dataResp = [];
        console.log("process code", processCode);
        document.getElementById('muthu').innerHTML = '';
        this.poojaprocess2 = '';
        // this.
        // if (!currencydata) {
        //   Swal.fire('Enter Currency for copy mapping.');
        //   return;
        // }
        // this.progress = true;
        model.subArray.forEach(element => {
            element.id = null;
        });
        console.log(model.subArray);
        // this.api.copyData(model, this.extNameValue, processCode, extSysCode, starting, isChecked, this.currentUser, currencydata)
        //   .subscribe(datares => {
        //     this.datares = datares;
        //     if (this.datares) {
        //       Swal.fire('Mapping copied successfully.')
        //     } else {
        //       console.log(this.datares);
        //       Swal.fire('Mapping already exist', 'create new process code for mapping or failed.')
        //     }
        //   });
        // this.progress = false;
    }
    //issue Id:540 There should be ‘Edit’ button in 
    // Excel mapping page when user has fetched the details
    onEdit() {
        this.editafterfetch = true;
    }
    getAllExtsysNameAndProcessCodeOnAuthStatus() {
        //console.log("getting extsysname on authstatus")
        this.api.getAllExtsysNameAndProcessCodeOnAuthStatus()
            .subscribe(response => {
            this.extSysData1 = response;
            //console.log(this.extSysData1);
            // this.dataSource.paginator = this.paginator;
            // this.dataSource.sort = this.sort;
        });
    }
    finalSubmit(model, isChecked, currency, starting, sheetNumber) {
        this.submitted = true;
        //console.log("extSysCode", this.extSysCode);
        //console.log("poojaprocess2", this.poojaprocess2);
        //console.log("starting", this.starting);
        console.log("currency", this.currency);
        if (this.addForm.controls.subArray.invalid) {
            // this.toast.error('Error,Numeric values not allowed in mapping column', ``, {
            //   timeOut: 3000,
            //   progressBar: true,
            //   tapToDismiss: true,
            //   closeButton: true,
            //   easeTime: 300,
            //   extendedTimeOut: 1000
            // });
            sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire({
                type: 'error',
                text: 'Error,Numeric values not allowed in mapping column',
            });
            return;
        }
        //console.log("startingRow : " + starting);
        //console.log("extSysCode : " + this.extSysCode);
        //console.log("processcode : " + this.poojaprocess2);
        //console.log("Model : ", model);
        //console.log("extNameValue : " + this.extNameValue);
        //console.log("Is header present : ", isChecked);
        // let body = JSON.stringify(model);
        this.object3.excelMapping = model;
        model.subArray[0].modifiedBy = this.currentUser;
        //console.log('modifiedBy 1 : ', model.subArray[0].modifiedBy);
        //console.log(this.object3);
        // this.excelExt.modifiedBy = this.currentUser;
        this.excelUpload.columnData(model, this.extNameValue, this.poojaprocess2, isChecked, starting, this.extSysCode, this.currency, this.currentUser, sheetNumber)
            .subscribe(response => {
            this.dataFromresponse = response;
            //console.log(this.dataFromresponse);
            // //console.log(this.dataFromresponse.authStatus);
            if (this.dataFromresponse) {
                // this.toast.success(`Mapped successfully`, '', {
                //   timeOut: 3000,
                //   progressBar: true,
                //   tapToDismiss: true,
                //   closeButton: true,
                //   easeTime: 300,
                //   extendedTimeOut: 1000
                // });
                sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire('Mapped successfully ');
                //console.log(response[0].authStatus);
                //console.log(response[0].modifiedBy);
                if (response[0].authStatus === 'U') {
                    response[0].authStatus = 'UNAUTHORIZED';
                }
                if (response[0].authStatus === 'A') {
                    response[0].authStatus = 'AUTHORIZED';
                }
                if (response[0].recordStatus === 'O') {
                    response[0].recordStatus = 'OPEN';
                }
                if (response[0].recordStatus === 'C') {
                    response[0].recordStatus = 'CLOSE';
                }
                this.tempStore = response[0];
                // this.addForm.reset();
            }
            else {
                // this.toast.error(`Failed! ExternalSystem And ProcessCode Already Mapped`, '', {
                //   timeOut: 3000,
                //   progressBar: true,
                //   tapToDismiss: true,
                //   closeButton: true,
                //   easeTime: 300,
                //   extendedTimeOut: 1000
                // });
                sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire({
                    type: 'error',
                    text: 'Failed ExternalSystem And ProcessCode Already Mapped',
                });
            }
        }, err => {
            // this.toast.error(`Failed! Server Error`, '', {
            //   timeOut: 3000,
            //   progressBar: true,
            //   tapToDismiss: true,
            //   closeButton: true,
            //   easeTime: 300,
            //   extendedTimeOut: 1000
            // });
            sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire({
                type: 'error',
                text: 'Failed Server Error',
            });
        });
    }
};
UpdateExcelMappingComponent.ctorParameters = () => [
    { type: src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_8__["ExcelProcessingService"] },
    { type: src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_9__["ExcelApiService"] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSnackBar"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_4__["ToastrService"] },
    { type: src_app_shared_services_app_confirm_app_confirm_service__WEBPACK_IMPORTED_MODULE_7__["AppConfirmService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_11__["ActivatedRoute"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"])('fetchBtn'),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatButton"])
], UpdateExcelMappingComponent.prototype, "fetchButton", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"])('updateBtn'),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatButton"])
], UpdateExcelMappingComponent.prototype, "updateButton", void 0);
UpdateExcelMappingComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-update-excel-mapping',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./update-excel-mapping.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-mapping/update-excel-mapping/update-excel-mapping.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./update-excel-mapping.component.scss */ "./src/app/views/sias-v2/excel-mapping/update-excel-mapping/update-excel-mapping.component.scss")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_8__["ExcelProcessingService"],
        src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_9__["ExcelApiService"],
        _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],
        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSnackBar"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_4__["ToastrService"],
        src_app_shared_services_app_confirm_app_confirm_service__WEBPACK_IMPORTED_MODULE_7__["AppConfirmService"], _angular_router__WEBPACK_IMPORTED_MODULE_11__["ActivatedRoute"]])
], UpdateExcelMappingComponent);

// ---------------end-----------------------


/***/ }),

/***/ "./src/app/views/sias-v2/excel-processing/excel-processing.component.css":
/*!*******************************************************************************!*\
  !*** ./src/app/views/sias-v2/excel-processing/excel-processing.component.css ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\ntable {\r\n    width: 100%;\r\n   \r\n  }\r\n.mat-card{\r\n    margin-left: 50px;\r\n    margin-right: 50px;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leGNlbC1wcm9jZXNzaW5nL2V4Y2VsLXByb2Nlc3NpbmcuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7SUFDSSxXQUFXOztFQUViO0FBQ0Y7SUFDSSxpQkFBaUI7SUFDakIsa0JBQWtCO0FBQ3RCIiwiZmlsZSI6InNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leGNlbC1wcm9jZXNzaW5nL2V4Y2VsLXByb2Nlc3NpbmcuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG50YWJsZSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgXHJcbiAgfVxyXG4ubWF0LWNhcmR7XHJcbiAgICBtYXJnaW4tbGVmdDogNTBweDtcclxuICAgIG1hcmdpbi1yaWdodDogNTBweDtcclxufSJdfQ== */");

/***/ }),

/***/ "./src/app/views/sias-v2/excel-processing/excel-processing.component.ts":
/*!******************************************************************************!*\
  !*** ./src/app/views/sias-v2/excel-processing/excel-processing.component.ts ***!
  \******************************************************************************/
/*! exports provided: ExcelProcessingComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExcelProcessingComponent", function() { return ExcelProcessingComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _excel_mapping_excelMapping__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../excel-mapping/excelMapping */ "./src/app/views/sias-v2/excel-mapping/excelMapping.ts");
/* harmony import */ var _excelMasterClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./excelMasterClass */ "./src/app/views/sias-v2/excel-processing/excelMasterClass.ts");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/shared/services/sias2-services/excel-processing.service */ "./src/app/shared/services/sias2-services/excel-processing.service.ts");
/* harmony import */ var src_app_shared_services_date_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/shared/services/date.service */ "./src/app/shared/services/date.service.ts");
/* harmony import */ var src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/shared/services/sias2-services/ExcelApiService */ "./src/app/shared/services/sias2-services/ExcelApiService.ts");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_10__);











let ExcelProcessingComponent = class ExcelProcessingComponent {
    constructor(excelUpload, dateService, snack, api, toast) {
        this.excelUpload = excelUpload;
        this.dateService = dateService;
        this.snack = snack;
        this.api = api;
        this.toast = toast;
        this.displayedColumns = ['creditAmount', 'debitAmount', 'numberOfRecords'];
        this.toppings = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]();
        this.postexcelMasterData = new _excelMasterClass__WEBPACK_IMPORTED_MODULE_4__["ExcelMaster"]();
        this.excelMaint = new _excel_mapping_excelMapping__WEBPACK_IMPORTED_MODULE_3__["ExcelMappingClass"]();
    }
    ngOnInit() {
        this.getAllExternalSystem();
    }
    getProcess(extSysName) {
        //console.log(extSysName);
        this.api.getProcessNameWithExtSys(extSysName).subscribe(response => {
            this.pooja = response;
            this.processName = this.pooja;
            //console.log(this.processName);
            // this.processName.split(',');
            // this.poojaprocessdata=
            // //console.log(this.poojaprocessdata);
            //console.log('process method end');
        });
    }
    getProcessName1(processCode, extSysName) {
        //console.log(processCode);
        //console.log(extSysName);
        this.poojaext2 = extSysName;
        this.poojaprocess2 = processCode;
    }
    getAllExternalSystem() {
        //console.log('mathos call');
        this.api.getAllExtSysName().subscribe(response => {
            this.extSysData1 = response;
            //console.log(this.extSysData1);
        });
    }
    getExternalSystem(ext) {
        //console.log(ext.extSys);
        this.excelUpload.getProcessNameWithExtSys(ext.extSys).subscribe(response => {
            this.processData = response;
            //console.log(this.processData);
            //console.log('process method end');
        });
    }
    getProcessName(extSys1) {
        //console.log(extSys1);
        this.excelUpload.getProcessNameWithExtSys(extSys1).subscribe(response => {
            this.processData = response;
            //console.log(this.processData);
            //console.log('process method end');
        });
    }
    finalSubmit(extSysName, processCode, dateforData) {
        // this.loader.open();
        //console.log(extSysName);
        //console.log(processCode);
        //console.log(dateforData);
        let date = this.dateService.convertDate(dateforData);
        ////console.log(date);
        this.p1 = extSysName;
        this.p2 = processCode;
        this.p3 = date;
        //console.log(this.p1, this.p2, this.p3);
        if (this.p1 === undefined || this.p2 === undefined) {
            // this.toast.error(`Enter Data!`, '', {
            //   timeOut: 3000,
            //   progressBar: true,
            //   tapToDismiss: true,
            //   closeButton: true,
            //   easeTime: 300,
            //   extendedTimeOut: 1000
            // });
            sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire({
                type: 'error',
                text: 'Enter Data ',
            });
            // //console.log("if");
        }
        else {
            // //console.log("else");
            this.api.callProcedureService(extSysName, processCode, date).subscribe(res => {
                //console.log(res);
                if (res) {
                    // this.snack.open('Processed Successfully!', 'OK', { duration: 4000 });
                    // this.toast.success(`Processed Successfully!`, '', {
                    //   timeOut: 3000,
                    //   progressBar: true,
                    //   tapToDismiss: true,
                    //   closeButton: true,
                    //   easeTime: 300,
                    //   extendedTimeOut: 1000
                    // });
                    sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire('Processed Successfully ');
                }
                else {
                    // this.snack.open('Process Failed!', 'OK', { duration: 4000 })
                    // this.toast.error(`Process Failed!`, '', {
                    //   timeOut: 3000,
                    //   progressBar: true,
                    //   tapToDismiss: true,
                    //   closeButton: true,
                    //   easeTime: 300,
                    //   extendedTimeOut: 1000
                    // });
                    sweetalert2__WEBPACK_IMPORTED_MODULE_10___default.a.fire({
                        type: 'error',
                        text: 'Process Failed',
                    });
                }
            });
        }
    }
    // this.excelUpload.callProcedureService(extSys1.extSys, extSys1.processName, date)
    // .subscribe(res => {
    //   //console.log(res);
    //   this.result = res;
    //   this.loader.close();
    //   this.snack.open('Success!', 'OK', { duration: 4000 })
    // },err => {
    //   this.loader.close();
    //   this.snack.open('Error!', 'OK', { duration: 4000 })
    // });
    // this.dataFromresponse = this.excelMasterData;
    // }
    getProcessData() {
        //console.log('get process call');
        this.excelUpload.getProcessDataMethod().subscribe(response => {
            this.responseData = response;
            //console.log(this.responseData);
        });
    }
};
ExcelProcessingComponent.ctorParameters = () => [
    { type: src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_7__["ExcelProcessingService"] },
    { type: src_app_shared_services_date_service__WEBPACK_IMPORTED_MODULE_8__["DateService"] },
    { type: _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatSnackBar"] },
    { type: src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_9__["ExcelApiService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"] }
];
ExcelProcessingComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-excel-processing',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./excel-processing.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-processing/excel-processing.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./excel-processing.component.css */ "./src/app/views/sias-v2/excel-processing/excel-processing.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_7__["ExcelProcessingService"],
        src_app_shared_services_date_service__WEBPACK_IMPORTED_MODULE_8__["DateService"],
        _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatSnackBar"],
        src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_9__["ExcelApiService"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"]])
], ExcelProcessingComponent);



/***/ }),

/***/ "./src/app/views/sias-v2/excel-processing/excelMasterClass.ts":
/*!********************************************************************!*\
  !*** ./src/app/views/sias-v2/excel-processing/excelMasterClass.ts ***!
  \********************************************************************/
/*! exports provided: ExcelMaster */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExcelMaster", function() { return ExcelMaster; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class ExcelMaster {
}


/***/ }),

/***/ "./src/app/views/sias-v2/excel-upload/excel-upload.component.css":
/*!***********************************************************************!*\
  !*** ./src/app/views/sias-v2/excel-upload/excel-upload.component.css ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("body{\r\n    height: 100%;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leGNlbC11cGxvYWQvZXhjZWwtdXBsb2FkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0FBQ2hCIiwiZmlsZSI6InNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leGNlbC11cGxvYWQvZXhjZWwtdXBsb2FkLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJib2R5e1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG59Il19 */");

/***/ }),

/***/ "./src/app/views/sias-v2/excel-upload/excel-upload.component.ts":
/*!**********************************************************************!*\
  !*** ./src/app/views/sias-v2/excel-upload/excel-upload.component.ts ***!
  \**********************************************************************/
/*! exports provided: ExcelUploadComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExcelUploadComponent", function() { return ExcelUploadComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/shared/services/sias2-services/excel-processing.service */ "./src/app/shared/services/sias2-services/excel-processing.service.ts");
/* harmony import */ var src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/shared/services/sias2-services/ExcelApiService */ "./src/app/shared/services/sias2-services/ExcelApiService.ts");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var ng2_file_upload__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ng2-file-upload */ "./node_modules/ng2-file-upload/fesm2015/ng2-file-upload.js");



//dummy url for file
const URL = 'http://localhost:3000/api/upload';







let ExcelUploadComponent = class ExcelUploadComponent {
    constructor(excelUpload, api, snackBar, toast) {
        this.excelUpload = excelUpload;
        this.api = api;
        this.snackBar = snackBar;
        this.toast = toast;
        this.fileUpload = null;
        this.fileUploadStatus = false;
        this.processName = [];
        this.uploader = new ng2_file_upload__WEBPACK_IMPORTED_MODULE_9__["FileUploader"]({ url: URL, itemAlias: 'photo' });
    }
    ngOnInit() {
        // this.getAllExternalSystem();
        this.getAllExternalSystem();
        this.uploader.onAfterAddingFile = (file) => { file.withCredentials = false; };
        this.uploader.onCompleteItem = (item, response, status, headers) => {
            //console.log('ImageUpload:uploaded:', item, status, response);
            alert('File uploaded successfully');
        };
        // this.getAllExternalSystemCode();
    }
    openSnackBar(message, action) {
        this.snackBar.open(message, action, {
            duration: 2000
        });
    }
    getAllExternalSystem() {
        //console.log('mathos call');
        this.api.getAllExtCodeForUpdateMapping().subscribe(response => {
            this.extSysData1 = response;
            //console.log(this.extSysData1);
        });
    }
    getExternalSystem(ext) {
        //console.log(ext.extSys);
        this.excelUpload.getProcessNameWithExtSys(ext.extSys).subscribe(response => {
            this.processData = response;
            //console.log(this.processData);
            //console.log('process method end');
        });
    }
    getProcess(extSysCode) {
        //console.log(extSysCode);
        this.api.getProcessNameByExtSysCodeForUpdateMapping(extSysCode).subscribe(response => {
            this.pooja = response;
            this.processName = this.pooja;
            //console.log(this.processName);
            this.getExtSysNameByExtSysCode(extSysCode);
            //console.log('process method end');
        });
    }
    getExtSysNameByExtSysCode(extSysCode) {
        //console.log(extSysCode);
        this.api.getExtSysNameByExtSysCode(extSysCode)
            .subscribe(data => {
            this.extNameValue = data;
            //this.poojaext2=
            //console.log(this.extNameValue);
            // //console.log(this.extSysCode);
        });
    }
    // getProcess(extSysName) {
    //   //console.log(extSysName);
    //   this.api.getProcessNameWithExtSys(extSysName).subscribe(response => {
    //     this.pooja = response;
    //     this.processName = this.pooja;
    //     //console.log(this.processName);
    //     //console.log(this.poojaprocessdata);
    //     //console.log('process method end');
    //   });
    // }
    //used in upload
    getProcessName1(processCode, extSysCode) {
        //console.log(processCode);
        //console.log(extSysCode);
        this.poojaext2 = extSysCode;
        this.poojaprocess2 = processCode;
    }
    handleFileInput(file) {
        this.fileUpload = file.item(0);
        var reader = new FileReader();
    }
    selectFile(event) {
        this.selectedFiles = event.target.files;
    }
    upload() {
        this.openSnackBar("Excel upload just started please wait", "");
        //console.log("model");
        //this.loader.open("Uploading Please wait...");
        //console.log(this.poojaext2);
        //console.log(this.poojaprocess2);
        this.extSysCode = this.poojaext2;
        this.processName2 = this.poojaprocess2;
        //console.log(this.extSysCode);
        //console.log(this.processName2);
        //console.log(this.responseMsgUpload)
        //console.log(this.extNameValue)
        this.currentFileUpload = this.selectedFiles.item(0);
        //console.log(this.currentFileUpload);
        this.excelUpload.pushFileToStorage(this.extNameValue, this.processName2, this.currentFileUpload, this.extSysCode)
            .subscribe(event => {
            this.res2 = event;
            //console.log(this.res2)
            //this.loader.close();
            if (event) {
                this.responseError = null;
                if (event instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpResponse"]) {
                    //console.log(event.status);
                    //console.log(event.body);
                    if (event.status == 200) {
                        this.responseMsgUpload = "";
                        if (event.body == "true") {
                            this.fileUploadStatus = true;
                            this.responseError = null;
                            this.statusCode = null;
                            // this.snack.open('File Uploaded Successfully!', 'OK', { duration: 4000 })
                            this.openSnackBar('Excel Uploaded Successfully', '');
                            // this.toast.success(`File Uploaded Successfully!`, '', {
                            //   timeOut: 3000,
                            //   progressBar: true,
                            //   tapToDismiss: true,
                            //   closeButton: true,
                            //   easeTime: 300,
                            //   extendedTimeOut: 1000
                            // });
                            sweetalert2__WEBPACK_IMPORTED_MODULE_8___default.a.fire('Excel Uploaded Successfully ');
                        }
                        else {
                            // this.snack.open('Upload Failed!', 'OK', { duration: 4000 })
                            this.openSnackBar('Upload Failed ', 'OK');
                            // this.toast.error(`Upload Failed !`, '', {
                            //   timeOut: 3000,
                            //   progressBar: true,
                            //   tapToDismiss: true,
                            //   closeButton: true,
                            //   easeTime: 300,
                            //   extendedTimeOut: 1000
                            // });
                            sweetalert2__WEBPACK_IMPORTED_MODULE_8___default.a.fire({
                                type: 'error',
                                text: 'Upload Failed ',
                            });
                        }
                    }
                }
            }
        }, (error) => {
            //this.loader.close();
            if (_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpErrorResponse"]) {
                // this.snack.open('Upload Failed Invalid File Format or Data!', 'OK', { duration: 4000 })
                this.openSnackBar('Upload Failed Invalid File Format or Data', '');
                // this.toast.error(`Upload Failed Invalid File Format or Data!`, '', {
                //   timeOut: 3000,
                //   progressBar: true,
                //   tapToDismiss: true,
                //   closeButton: true,
                //   easeTime: 300,
                //   extendedTimeOut: 1000
                // });
                sweetalert2__WEBPACK_IMPORTED_MODULE_8___default.a.fire({
                    type: 'error',
                    text: 'Upload Failed Invalid File Format or Data ',
                });
                if (this.statusCode == 0) {
                    this.openSnackBar('Upload Failed No Response', 'OK');
                    // this.toast.error(`Upload Failed No Response!`, '', {
                    //   timeOut: 3000,
                    //   progressBar: true,
                    //   tapToDismiss: true,
                    //   closeButton: true,
                    //   easeTime: 300,
                    //   extendedTimeOut: 1000
                    // });
                    sweetalert2__WEBPACK_IMPORTED_MODULE_8___default.a.fire({
                        type: 'error',
                        text: 'Upload Failed No Response ',
                    });
                }
            }
        });
    }
    reset() {
        this.processName = [];
        this.excelUploadForm.reset();
    }
};
ExcelUploadComponent.ctorParameters = () => [
    { type: src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_6__["ExcelProcessingService"] },
    { type: src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_7__["ExcelApiService"] },
    { type: _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSnackBar"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_4__["ToastrService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"])('excelUpload'),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NgForm"])
], ExcelUploadComponent.prototype, "excelUploadForm", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"])('myInput'),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])
], ExcelUploadComponent.prototype, "myInputVariable", void 0);
ExcelUploadComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-excel-upload',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./excel-upload.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/excel-upload/excel-upload.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./excel-upload.component.css */ "./src/app/views/sias-v2/excel-upload/excel-upload.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_6__["ExcelProcessingService"],
        src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_7__["ExcelApiService"],
        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSnackBar"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_4__["ToastrService"]])
], ExcelUploadComponent);



/***/ }),

/***/ "./src/app/views/sias-v2/ext-sys-list/ext-sys-list.component.scss":
/*!************************************************************************!*\
  !*** ./src/app/views/sias-v2/ext-sys-list/ext-sys-list.component.scss ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("table {\n  border-collapse: initial;\n  width: 100%;\n  text-align: center !important;\n}\n\n:host ::ng-deep .mat-sort-header-container {\n  display: flex;\n  justify-content: center;\n}\n\nth.mat-header-cell, td.mat-cell {\n  text-align: center;\n}\n\n.mat-raised-button {\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  height: 20px;\n  line-height: 27px;\n  min-height: 27px;\n  vertical-align: top;\n  font-size: 11px;\n  padding: 0 0;\n  margin: 0;\n}\n\n.mat-header-cell {\n  text-align: center;\n  height: 25px !important;\n}\n\n.mat-cell {\n  text-align: center;\n  height: 25px !important;\n}\n\ntr:nth-child(even) {\n  height: 25px !important;\n}\n\nth {\n  font-weight: small;\n  height: 25px !important;\n  text-align: center;\n}\n\ntr {\n  font-weight: small;\n  height: 25px !important;\n  text-align: center;\n}\n\nmat-paginator {\n  width: auto !important;\n  height: 40px !important;\n}\n\nmd-pagination-wrapper {\n  width: auto !important;\n  height: 40px !important;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leHQtc3lzLWxpc3QvRjpcXG11dGh1LW9uYm9hcmRcXG1lZGlhbi1waDItdWkvc3JjXFxhcHBcXHZpZXdzXFxzaWFzLXYyXFxleHQtc3lzLWxpc3RcXGV4dC1zeXMtbGlzdC5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leHQtc3lzLWxpc3QvZXh0LXN5cy1saXN0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBQ0Usd0JBQUE7RUFDQSxXQUFBO0VBQ0EsNkJBQUE7QUNBRjs7QURFQTtFQUNFLGFBQUE7RUFDQSx1QkFBQTtBQ0NGOztBREVBO0VBQ0Usa0JBQUE7QUNDRjs7QURDQTtFQUNFLDBCQUFBO0VBQUEsdUJBQUE7RUFBQSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtFQUNBLGdCQUFBO0VBQ0EsbUJBQUE7RUFDQSxlQUFBO0VBQ0EsWUFBQTtFQUNBLFNBQUE7QUNFRjs7QURBQTtFQUNFLGtCQUFBO0VBQ0EsdUJBQUE7QUNHRjs7QURDQTtFQUNFLGtCQUFBO0VBQ0EsdUJBQUE7QUNFRjs7QURHQTtFQUNFLHVCQUFBO0FDQUY7O0FER0E7RUFDRSxrQkFBQTtFQUNBLHVCQUFBO0VBQ0Esa0JBQUE7QUNBRjs7QURFQTtFQUNFLGtCQUFBO0VBQ0EsdUJBQUE7RUFDQSxrQkFBQTtBQ0NGOztBRENBO0VBQ0Usc0JBQUE7RUFDQSx1QkFBQTtBQ0VGOztBRENBO0VBQ0Usc0JBQUE7RUFDQSx1QkFBQTtBQ0VGIiwiZmlsZSI6InNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leHQtc3lzLWxpc3QvZXh0LXN5cy1saXN0LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiICBcclxudGFibGUge1xyXG4gIGJvcmRlci1jb2xsYXBzZTogaW5pdGlhbDtcclxuICB3aWR0aDoxMDAlO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xyXG59XHJcbjpob3N0IDo6bmctZGVlcCAubWF0LXNvcnQtaGVhZGVyLWNvbnRhaW5lciB7IFxyXG4gIGRpc3BsYXk6IGZsZXg7ICBcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgXHJcbn1cclxuXHJcbnRoLm1hdC1oZWFkZXItY2VsbCwgdGQubWF0LWNlbGwgeyBcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7IFxyXG59XHJcbi5tYXQtcmFpc2VkLWJ1dHRvbiB7XHJcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG4gIGhlaWdodDogMjBweDtcclxuICBsaW5lLWhlaWdodDogMjdweDtcclxuICBtaW4taGVpZ2h0OiAyN3B4O1xyXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XHJcbiAgZm9udC1zaXplOiAxMXB4O1xyXG4gIHBhZGRpbmc6IDAgMDtcclxuICBtYXJnaW46IDA7XHJcbn1cclxuLm1hdC1oZWFkZXItY2VsbCB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xyXG5cclxufVxyXG5cclxuLm1hdC1jZWxsIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7XHJcblxyXG59XHJcblxyXG5cclxudHI6bnRoLWNoaWxkKGV2ZW4pIHtcclxuICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcclxufVxyXG5cclxudGgge1xyXG4gIGZvbnQtd2VpZ2h0OiBzbWFsbDtcclxuICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxudHIge1xyXG4gIGZvbnQtd2VpZ2h0OiBzbWFsbDtcclxuICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxubWF0LXBhZ2luYXRvciB7XHJcbiAgd2lkdGg6IGF1dG8gIWltcG9ydGFudDtcclxuICBoZWlnaHQ6IDQwcHggIWltcG9ydGFudDtcclxufVxyXG5cclxubWQtcGFnaW5hdGlvbi13cmFwcGVyIHtcclxuICB3aWR0aDogYXV0byAhaW1wb3J0YW50O1xyXG4gIGhlaWdodDogNDBweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwidGFibGUge1xuICBib3JkZXItY29sbGFwc2U6IGluaXRpYWw7XG4gIHdpZHRoOiAxMDAlO1xuICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcbn1cblxuOmhvc3QgOjpuZy1kZWVwIC5tYXQtc29ydC1oZWFkZXItY29udGFpbmVyIHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG5cbnRoLm1hdC1oZWFkZXItY2VsbCwgdGQubWF0LWNlbGwge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5tYXQtcmFpc2VkLWJ1dHRvbiB7XG4gIHdpZHRoOiBmaXQtY29udGVudDtcbiAgaGVpZ2h0OiAyMHB4O1xuICBsaW5lLWhlaWdodDogMjdweDtcbiAgbWluLWhlaWdodDogMjdweDtcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgZm9udC1zaXplOiAxMXB4O1xuICBwYWRkaW5nOiAwIDA7XG4gIG1hcmdpbjogMDtcbn1cblxuLm1hdC1oZWFkZXItY2VsbCB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7XG59XG5cbi5tYXQtY2VsbCB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7XG59XG5cbnRyOm50aC1jaGlsZChldmVuKSB7XG4gIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xufVxuXG50aCB7XG4gIGZvbnQtd2VpZ2h0OiBzbWFsbDtcbiAgaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxudHIge1xuICBmb250LXdlaWdodDogc21hbGw7XG4gIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbm1hdC1wYWdpbmF0b3Ige1xuICB3aWR0aDogYXV0byAhaW1wb3J0YW50O1xuICBoZWlnaHQ6IDQwcHggIWltcG9ydGFudDtcbn1cblxubWQtcGFnaW5hdGlvbi13cmFwcGVyIHtcbiAgd2lkdGg6IGF1dG8gIWltcG9ydGFudDtcbiAgaGVpZ2h0OiA0MHB4ICFpbXBvcnRhbnQ7XG59Il19 */");

/***/ }),

/***/ "./src/app/views/sias-v2/ext-sys-list/ext-sys-list.component.ts":
/*!**********************************************************************!*\
  !*** ./src/app/views/sias-v2/ext-sys-list/ext-sys-list.component.ts ***!
  \**********************************************************************/
/*! exports provided: ExtSysListComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExtSysListComponent", function() { return ExtSysListComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
/* harmony import */ var _ext_system_extsys_class__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ext-system/extsys-class */ "./src/app/views/sias-v2/ext-system/extsys-class.ts");
/* harmony import */ var src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/shared/services/sias2-services/ExcelApiService */ "./src/app/shared/services/sias2-services/ExcelApiService.ts");
/* harmony import */ var _users_users_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../users/users.service */ "./src/app/views/users/users.service.ts");
/* harmony import */ var _roles1_roles_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../roles1/roles.service */ "./src/app/views/roles1/roles.service.ts");
/* harmony import */ var _roles1_models_fmosNewRolePermissions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../roles1/models/fmosNewRolePermissions */ "./src/app/views/roles1/models/fmosNewRolePermissions.ts");









let ExtSysListComponent = class ExtSysListComponent {
    constructor(extService, router, roleService, userApi) {
        this.extService = extService;
        this.router = router;
        this.roleService = roleService;
        this.userApi = userApi;
        this.paginator = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"]();
        this.displayedColumns = ['extSysName', 'extSysCode', 'processCode', 'authStatus', 'creatorDtStamp'];
        this.button_permission = {};
        this.roleCodes = new _roles1_models_fmosNewRolePermissions__WEBPACK_IMPORTED_MODULE_8__["permissionsLabels"]();
    }
    ngOnInit() {
        setTimeout(() => {
            this.newRolePermissions();
        }, 2000);
        this.roleService.screenLabelList.subscribe(message => this.roleCodes = message);
        this.userRolesFromLogin = localStorage.getItem('userRolesFromLogin');
        this.user_id = sessionStorage.getItem('user_id');
        this.role = sessionStorage.getItem('user_role');
        // this.userRoles = this.userRolesFromLogin.split(',');
        this.loggedInUser = localStorage.getItem('currentUser');
        this.getExtSysList();
        // this.screenpermission();
    }
    screenpermission() {
        this.screenName = 'roles';
        // this.role='ROLE1';
        this.userApi.getRoleScreenPermission(this.user_id, this.screenName, this.role).subscribe(res => {
            this.rolepermission = res;
            // console.log(this.rolepermission);
            if (this.rolepermission) {
                this.button_permission = this.rolepermission[0];
                // console.log( this.button_permission);
            }
        });
    }
    newRolePermissions() {
        this.roleService.fetchScreenPermissions('Process Code Mapping');
    }
    getExtSysList() {
        this.extService.getAllExtSys().subscribe(data => {
            this.extdata = data;
            console.log(this.extdata);
            // this.dataSource = data;
            this.dataSource = new _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatTableDataSource"](this.extdata);
            this.dataSource.paginator = this.paginator.toArray()[0];
            this.dataSource.sort = this.sort;
            // console.log(this.extdata);
            // this.allUsers.paginator = this.paginator;
        });
    }
    applyFilter(filterValue) {
        this.dataSource.filter = filterValue.trim().toLowerCase();
    }
    // getExtSys(i: number) {
    getExtSys(element) {
        console.log("element", element);
        const navigationExtras = {
            queryParams: {
                id: element.id,
                extSysCode: element.extSysCode,
                extSysName: element.extSysName,
                commChannel: element.commChannel,
                creatorDtStamp: element.creatorDtStamp,
                creatorId: element.creatorId,
                destination: element.destination,
                destinationTag: element.destinationTag,
                dtdFile: element.dtdFile,
                errDirectoryName: element.errDirectoryName,
                errQueueName: element.errQueueName,
                errSchemaName: element.errSchemaName,
                errXsltName: element.errXsltName,
                extSysTag: element.extSysTag,
                formatType: element.formatType,
                isDestNode: element.isDestNode,
                isExtSysNode: element.isExtSysNode,
                isModuleNode: element.isModuleNode,
                isProcessNode: element.isProcessNode,
                isServiceNode: element.isServiceNode,
                latestAmendNo: element.latestAmendNo,
                messageType: element.messageType,
                moduleCode: element.moduleCode,
                moduleTag: element.moduleTag,
                msgDuplication: element.msgDuplication,
                processCode: element.processCode,
                processTag: element.processTag,
                recordStatus: element.recordStatus,
                reqDirectoryName: element.reqDirectoryName,
                reqQueueName: element.reqQueueName,
                reqSchemaName: element.reqSchemaName,
                reqXsltName: element.reqXsltName,
                requestTag: element.requestTag,
                respDirectoryName: element.respDirectoryName,
                respQueueName: element.respQueueName,
                respSchemaName: element.respSchemaName,
                respXsltName: element.respXsltName,
                responseTag: element.responseTag,
                serviceCode: element.serviceCode,
                serviceTag: element.serviceTag,
                updatedAt: element.updatedAt,
                verifiedEver: element.verifiedEver,
                verifierDtStamp: element.verifierDtStamp,
                verifierId: element.verifierId,
                xsdFile: element.xsdFile,
                authStatus: element.authStatus,
                updatedBy: element.updatedBy,
                fristTimeAuth: element.fristTimeAuth,
                versionNo: element.versionNo,
                maxUploadLimit: element.maxUploadLimit,
                fileName: element.fileName,
                bdav: element.bdav,
                backDateAllow: element.backDateAllow,
                futureDateAllow: element.futureDateAllow,
                fdav: element.fdav,
                acft: element.acft,
                autoUpload: element.autoUpload,
                filePath: element.filePath,
                fcyvariance: element.fCYRateVariance,
                fcypercenatage: element.fCYPercentage,
                userName: element.sftpUsername,
                password: element.sftpPassword,
                port: element.sftpPort,
                ipAddress: element.sftpIpaddress,
                sftpRequired: element.sftpRequired,
                path: element.sftpPath,
                mandatoryFieldImposed: element.mandatoryFieldImposed,
                treasuryrefRequired: element.treasuryrefRequired,
                wuFile: element.wuFile,
                //ADDED VERIFIED ONCE BY VIDYA FOR ISSUE ID 583
                verifiedOnce: element.verifiedOnce
            }
        };
        console.log("in summary  to edir" + element);
        this.router.navigate(['/sias-v2/updateMaintanance'], navigationExtras);
    }
    onPaginateChange(event) {
        //console.log(event);
        // //console.log(this.pageSize);
        this.pageSize = event.pageSize;
        this.pageIndex = event.pageIndex;
        //console.log(event.pageSize);
        //console.log(event.pageIndex);
    }
};
ExtSysListComponent.ctorParameters = () => [
    { type: src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_5__["ExcelApiService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] },
    { type: _roles1_roles_service__WEBPACK_IMPORTED_MODULE_7__["RoleService"] },
    { type: _users_users_service__WEBPACK_IMPORTED_MODULE_6__["UsersService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSort"], { static: true }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSort"])
], ExtSysListComponent.prototype, "sort", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"])(_angular_material__WEBPACK_IMPORTED_MODULE_3__["MatPaginator"]),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
], ExtSysListComponent.prototype, "paginator", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _ext_system_extsys_class__WEBPACK_IMPORTED_MODULE_4__["ExtsysClass"])
], ExtSysListComponent.prototype, "userUpdate", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _ext_system_extsys_class__WEBPACK_IMPORTED_MODULE_4__["ExtsysClass"])
], ExtSysListComponent.prototype, "modifyRoleObject", void 0);
ExtSysListComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-ext-sys-list',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./ext-sys-list.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/ext-sys-list/ext-sys-list.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./ext-sys-list.component.scss */ "./src/app/views/sias-v2/ext-sys-list/ext-sys-list.component.scss")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_5__["ExcelApiService"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
        _roles1_roles_service__WEBPACK_IMPORTED_MODULE_7__["RoleService"],
        _users_users_service__WEBPACK_IMPORTED_MODULE_6__["UsersService"]])
], ExtSysListComponent);



/***/ }),

/***/ "./src/app/views/sias-v2/ext-system/ext-system.component.scss":
/*!********************************************************************!*\
  !*** ./src/app/views/sias-v2/ext-system/ext-system.component.scss ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("table {\n  width: 100%;\n}\n\nth {\n  /* text-align: center;\n   */\n  align-content: center;\n}\n\ntable td {\n  padding-right: 50px;\n}\n\n#customers {\n  font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\n  border-collapse: collapse;\n  width: 100%;\n}\n\n#customers td, #customers th {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: center;\n}\n\n#customers tr:nth-child(even) {\n  background-color: #f2f2f2;\n}\n\n#customers th {\n  padding-top: 12px;\n  padding-bottom: 12px;\n  text-align: left;\n  background-color: #61b2d8;\n  color: white;\n}\n\n.mat-raised-button {\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  height: 20px;\n  line-height: 27px;\n  min-height: 27px;\n  vertical-align: top;\n  font-size: 11px;\n  padding: 0 0;\n  margin: 0;\n}\n\n::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline {\n  color: black !important;\n}\n\nmat-card mat-form-field {\n  font-size: 12px;\n}\n\nmat-card a {\n  font-size: 11px;\n}\n\nmat-card p {\n  font-size: 11px;\n}\n\nmat-label, mat-checkbox {\n  color: black;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leHQtc3lzdGVtL0Y6XFxtdXRodS1vbmJvYXJkXFxtZWRpYW4tcGgyLXVpL3NyY1xcYXBwXFx2aWV3c1xcc2lhcy12MlxcZXh0LXN5c3RlbVxcZXh0LXN5c3RlbS5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leHQtc3lzdGVtL2V4dC1zeXN0ZW0uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxXQUFBO0FDQ0o7O0FERUU7RUFDRTtJQUFBO0VBRUYscUJBQUE7QUNDRjs7QURDRTtFQUNFLG1CQUFBO0FDRUo7O0FEQ0U7RUFDRSx5REFBQTtFQUNBLHlCQUFBO0VBQ0EsV0FBQTtBQ0VKOztBRENFO0VBQ0Usc0JBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7QUNFSjs7QURDRTtFQUE4Qix5QkFBQTtBQ0doQzs7QURERTtFQUNFLGlCQUFBO0VBQ0Esb0JBQUE7RUFDQSxnQkFBQTtFQUNBLHlCQUFBO0VBQ0EsWUFBQTtBQ0lKOztBRERFO0VBQ0UsMEJBQUE7RUFBQSx1QkFBQTtFQUFBLGtCQUFBO0VBQ0EsWUFBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxtQkFBQTtFQUNBLGVBQUE7RUFDQSxZQUFBO0VBQ0EsU0FBQTtBQ0lKOztBREZFO0VBQ0UsdUJBQUE7QUNLSjs7QURGRTtFQUNFLGVBQUE7QUNLSjs7QURIRTtFQUNFLGVBQUE7QUNNSjs7QURKRTtFQUNFLGVBQUE7QUNPSjs7QURKRTtFQUVFLFlBQUE7QUNNSiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL3NpYXMtdjIvZXh0LXN5c3RlbS9leHQtc3lzdGVtLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsidGFibGUge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG4gIFxyXG4gIHRoe1xyXG4gICAgLyogdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICovXHJcbiAgYWxpZ24tY29udGVudDogY2VudGVyO1xyXG4gIH1cclxuICB0YWJsZSB0ZCB7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA1MHB4O1xyXG4gIH1cclxuICBcclxuICAjY3VzdG9tZXJzIHtcclxuICAgIGZvbnQtZmFtaWx5OiBcIlRyZWJ1Y2hldCBNU1wiLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xyXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuICBcclxuICAjY3VzdG9tZXJzIHRkLCAjY3VzdG9tZXJzIHRoIHtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XHJcbiAgICBwYWRkaW5nOiA4cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgfVxyXG4gIFxyXG4gICNjdXN0b21lcnMgdHI6bnRoLWNoaWxkKGV2ZW4pe2JhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7fVxyXG4gIFxyXG4gICNjdXN0b21lcnMgdGgge1xyXG4gICAgcGFkZGluZy10b3A6IDEycHg7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMTJweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOnJnYig5NywgMTc4LCAyMTYpO1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gIH1cclxuICBcclxuICAubWF0LXJhaXNlZC1idXR0b24ge1xyXG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG4gICAgaGVpZ2h0OiAyMHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDI3cHg7XHJcbiAgICBtaW4taGVpZ2h0OiAyN3B4O1xyXG4gICAgdmVydGljYWwtYWxpZ246IHRvcDtcclxuICAgIGZvbnQtc2l6ZTogMTFweDtcclxuICAgIHBhZGRpbmc6IDAgMDtcclxuICAgIG1hcmdpbjogMDtcclxuICB9XHJcbiAgOjpuZy1kZWVwIC5tYXQtZm9ybS1maWVsZC1hcHBlYXJhbmNlLW91dGxpbmUgLm1hdC1mb3JtLWZpZWxkLW91dGxpbmUge1xyXG4gICAgY29sb3I6IGJsYWNrICFpbXBvcnRhbnQ7XHJcbiAgfVxyXG4gIFxyXG4gIG1hdC1jYXJkIG1hdC1mb3JtLWZpZWxkIHtcclxuICAgIGZvbnQtc2l6ZTogMTJweDtcclxuICB9XHJcbiAgbWF0LWNhcmQgYSB7XHJcbiAgICBmb250LXNpemU6IDExcHg7XHJcbiAgfVxyXG4gIG1hdC1jYXJkIHAge1xyXG4gICAgZm9udC1zaXplOiAxMXB4O1xyXG4gIH1cclxuICBcclxuICBtYXQtbGFiZWwgLG1hdC1jaGVja2JveFxyXG4gIHtcclxuICAgIGNvbG9yOiBibGFja1xyXG4gIH0iLCJ0YWJsZSB7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG50aCB7XG4gIC8qIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICovXG4gIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbn1cblxudGFibGUgdGQge1xuICBwYWRkaW5nLXJpZ2h0OiA1MHB4O1xufVxuXG4jY3VzdG9tZXJzIHtcbiAgZm9udC1mYW1pbHk6IFwiVHJlYnVjaGV0IE1TXCIsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4jY3VzdG9tZXJzIHRkLCAjY3VzdG9tZXJzIHRoIHtcbiAgYm9yZGVyOiAxcHggc29saWQgI2RkZDtcbiAgcGFkZGluZzogOHB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbiNjdXN0b21lcnMgdHI6bnRoLWNoaWxkKGV2ZW4pIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjtcbn1cblxuI2N1c3RvbWVycyB0aCB7XG4gIHBhZGRpbmctdG9wOiAxMnB4O1xuICBwYWRkaW5nLWJvdHRvbTogMTJweDtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzYxYjJkODtcbiAgY29sb3I6IHdoaXRlO1xufVxuXG4ubWF0LXJhaXNlZC1idXR0b24ge1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gIGhlaWdodDogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI3cHg7XG4gIG1pbi1oZWlnaHQ6IDI3cHg7XG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gIGZvbnQtc2l6ZTogMTFweDtcbiAgcGFkZGluZzogMCAwO1xuICBtYXJnaW46IDA7XG59XG5cbjo6bmctZGVlcCAubWF0LWZvcm0tZmllbGQtYXBwZWFyYW5jZS1vdXRsaW5lIC5tYXQtZm9ybS1maWVsZC1vdXRsaW5lIHtcbiAgY29sb3I6IGJsYWNrICFpbXBvcnRhbnQ7XG59XG5cbm1hdC1jYXJkIG1hdC1mb3JtLWZpZWxkIHtcbiAgZm9udC1zaXplOiAxMnB4O1xufVxuXG5tYXQtY2FyZCBhIHtcbiAgZm9udC1zaXplOiAxMXB4O1xufVxuXG5tYXQtY2FyZCBwIHtcbiAgZm9udC1zaXplOiAxMXB4O1xufVxuXG5tYXQtbGFiZWwsIG1hdC1jaGVja2JveCB7XG4gIGNvbG9yOiBibGFjaztcbn0iXX0= */");

/***/ }),

/***/ "./src/app/views/sias-v2/ext-system/ext-system.component.ts":
/*!******************************************************************!*\
  !*** ./src/app/views/sias-v2/ext-system/ext-system.component.ts ***!
  \******************************************************************/
/*! exports provided: ExtSystemComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExtSystemComponent", function() { return ExtSystemComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _extsys_class__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extsys-class */ "./src/app/views/sias-v2/ext-system/extsys-class.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/shared/services/sias2-services/ExcelApiService */ "./src/app/shared/services/sias2-services/ExcelApiService.ts");
/* harmony import */ var src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/shared/services/sias2-services/excel-processing.service */ "./src/app/shared/services/sias2-services/excel-processing.service.ts");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_8__);









let ExtSystemComponent = class ExtSystemComponent {
    constructor(apiService, api, snack, toast, cdr) {
        this.apiService = apiService;
        this.api = api;
        this.snack = snack;
        this.toast = toast;
        this.cdr = cdr;
        this.createExtSys1 = new _extsys_class__WEBPACK_IMPORTED_MODULE_2__["ExtsysClass"]();
        this.space = false;
        this.enablefilebrowser = false;
        this.paginationDetail = new rxjs__WEBPACK_IMPORTED_MODULE_3__["BehaviorSubject"]({
            length: 10,
            pageIndex: 0,
            pageSize: 10
        });
    }
    ngOnInit() {
        // this.savebutton = true;
        // this.savebutton1 = false;
        localStorage.setItem("userIdForChangePassword", localStorage.getItem("currentUser"));
        this.loggedInUser = localStorage.getItem("userIdForChangePassword");
        // this.getExt();
        this.getAuthorizedExt();
        this.currentUser = localStorage.getItem("currentUser");
        this.createExtSys1.autoUpload = false;
        this.createExtSys1.backDateAllow = false;
        this.createExtSys1.futureDateAllow = false;
        this.createExtSys1.fCYRateVariance = false;
        this.createExtSys1.acft = false;
        this.createExtSys1.mandatoryFieldImposed = false;
        this.createExtSys1.sftpRequired = false;
        this.createExtSys1.wuFile = false;
        this.createExtSys1.treasuryrefRequired = false;
    }
    getExt() {
        this.api.getAllExt().subscribe(data => {
            this.extdata = data;
            this.data = this.extdata;
            //console.log(data);
        });
        //console.log(this.extdata);
    }
    getAuthorizedExt() {
        //console.log("on get Of Auth")
        this.api.getAuthorizedExt().subscribe(data => {
            this.extdata = data;
            this.data = this.extdata;
            //console.log("getAuthorizedExt : ", data);
        });
        //console.log(this.extdata);
    }
    getProcess(extSysCode) {
        //console.log("vlaue:::", extSysCode);
        // this.createExtSys2 = extSysCode.extSysName;
        //console.log(this.createExtSys2);
        this.createExtSys1.extSysName = extSysCode.extSysName;
    }
    save(extSysCode) {
        this.savebutton = true;
        this.savebutton1 = true;
        this.createExtSys1.creatorId = this.loggedInUser;
        this.createExtSys1.extSysCode = extSysCode.extSysCode;
        this.createExtSys1.extSysName = extSysCode.extSysName;
        // this.createExtSys1.autoUpload = this.enablefilebrowser;
        if (this.createExtSys1.processCode) {
            console.log(this.createExtSys1);
            this.apiService.createExtSys(this.createExtSys1)
                .subscribe(data => {
                this.dataForm = data;
                console.log(this.dataForm);
                //console.log(data);
                if (this.dataForm != null) {
                    this.savebutton = true;
                    this.enablesubmit = true;
                    sweetalert2__WEBPACK_IMPORTED_MODULE_8___default.a.fire('Data Saved successfully.');
                    //console.log("before 1",this.dataForm.authStatus);
                    if (this.dataForm.authStatus === 'U') {
                        this.dataForm.authStatus = 'UNAUTHORIZED';
                    }
                    //console.log("after 1",this.dataForm.authStatus);
                    //console.log("record ststus",this.dataForm.recordStatus);
                    if (this.dataForm.recordStatus === 'O') {
                        this.dataForm.recordStatus = 'OPEN';
                    }
                    //added by vidya for firstTimeAuth
                    if (this.dataForm.verifiedOnce === 'N') {
                        this.dataForm.verifiedOnce = 'NO';
                    }
                    //console.log("record ststus",this.dataForm.recordStatus);
                    this.saveBtn.disabled = true;
                    this.createExtSys1 = this.dataForm;
                }
                else {
                    sweetalert2__WEBPACK_IMPORTED_MODULE_8___default.a.fire({
                        type: 'error',
                        text: 'Choose another process code',
                    });
                }
            }, error => {
                //console.log(error);
                sweetalert2__WEBPACK_IMPORTED_MODULE_8___default.a.fire({
                    type: 'error',
                    text: 'Server Error',
                });
            });
        }
        else {
            sweetalert2__WEBPACK_IMPORTED_MODULE_8___default.a.fire({
                type: 'error',
                text: 'Enter all the fields ',
            });
        }
    }
    //future dating
    getValue(event) {
        this.createExtSys1.futureDateAllow = event.checked;
        this.is_edit1 = event.checked;
    }
    //sftp
    getValueSftp(event) {
        this.createExtSys1.sftpRequired = event.checked;
        this.is_sftp = event.checked;
        console.log(this.createExtSys1.sftpRequired);
    }
    getValueMfI(event) {
        this.createExtSys1.mandatoryFieldImposed = event.checked;
        //this.mandatoryFieldImposed=event.checked;
        console.log(this.createExtSys1.mandatoryFieldImposed);
    }
    getwuFileValue(event) {
        this.createExtSys1.wuFile = event.checked;
    }
    //fcy
    getValueOfFCYrateVariance(event) {
        this.createExtSys1.fCYRateVariance = event.checked;
        this.is_edit = event.checked;
        console.log(this.createExtSys1.fCYRateVariance);
    }
    getValue2(event) {
        console.log(event.checked);
        this.createExtSys1.acft = event.checked;
    }
    checkCheckBoxvalue1(event) {
        console.log(event.checked);
        this.enablefilebrowser = event.checked;
        this.createExtSys1.autoUpload = event.checked;
    }
    //back dating
    checkCheckBoxvalue(event) {
        console.log(event.checked);
        this.createExtSys1.backDateAllow = event.checked;
        this.backdate = event.checked;
    }
    //issue Id 532-->check box for treasury ref  added by vidya
    treasuryRequired(event) {
        this.createExtSys1.treasuryrefRequired = event.checked;
        console.log(this.createExtSys1.treasuryrefRequired);
    }
    fun(extSysName) {
        console.log(extSysName);
        console.log("enters inside fn");
        const result = extSysName.trim();
        console.log(result);
        if (result) {
            console.log("valid string");
            this.space = true;
            console.log(this.space);
        }
        else {
            console.log("invalid string");
            this.space = false;
            // this.submitted = false;
            console.log(this.space);
        }
    }
};
ExtSystemComponent.ctorParameters = () => [
    { type: src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_6__["ExcelApiService"] },
    { type: src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_7__["ExcelProcessingService"] },
    { type: _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatSnackBar"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"])(_angular_material__WEBPACK_IMPORTED_MODULE_4__["MatButton"]),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatButton"])
], ExtSystemComponent.prototype, "saveBtn", void 0);
ExtSystemComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-ext-system',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./ext-system.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/ext-system/ext-system.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./ext-system.component.scss */ "./src/app/views/sias-v2/ext-system/ext-system.component.scss")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_6__["ExcelApiService"],
        src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_7__["ExcelProcessingService"],
        _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatSnackBar"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
], ExtSystemComponent);



/***/ }),

/***/ "./src/app/views/sias-v2/ext-system/extsys-class.ts":
/*!**********************************************************!*\
  !*** ./src/app/views/sias-v2/ext-system/extsys-class.ts ***!
  \**********************************************************/
/*! exports provided: ExtsysClass */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExtsysClass", function() { return ExtsysClass; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

class ExtsysClass {
}


/***/ }),

/***/ "./src/app/views/sias-v2/extsummary/extsummary.component.scss":
/*!********************************************************************!*\
  !*** ./src/app/views/sias-v2/extsummary/extsummary.component.scss ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("table {\n  border-collapse: initial;\n  width: 100%;\n  text-align: center !important;\n}\n\n:host ::ng-deep .mat-sort-header-container {\n  display: flex;\n  justify-content: center;\n}\n\nth.mat-header-cell, td.mat-cell {\n  text-align: center;\n}\n\n.mat-raised-button {\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  height: 20px;\n  line-height: 27px;\n  min-height: 27px;\n  vertical-align: top;\n  font-size: 11px;\n  padding: 0 0;\n  margin: 0;\n}\n\n.mat-header-cell {\n  text-align: center;\n  height: 25px !important;\n}\n\n.mat-cell {\n  text-align: center;\n  height: 25px !important;\n}\n\ntr:nth-child(even) {\n  height: 25px !important;\n}\n\nth {\n  font-weight: small;\n  height: 25px !important;\n  text-align: center;\n}\n\ntr {\n  font-weight: small;\n  height: 25px !important;\n  text-align: center;\n}\n\nmat-paginator {\n  width: auto !important;\n  height: 40px !important;\n}\n\nmd-pagination-wrapper {\n  width: auto !important;\n  height: 40px !important;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leHRzdW1tYXJ5L0Y6XFxtdXRodS1vbmJvYXJkXFxtZWRpYW4tcGgyLXVpL3NyY1xcYXBwXFx2aWV3c1xcc2lhcy12MlxcZXh0c3VtbWFyeVxcZXh0c3VtbWFyeS5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leHRzdW1tYXJ5L2V4dHN1bW1hcnkuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7RUFDRSx3QkFBQTtFQUNBLFdBQUE7RUFDQSw2QkFBQTtBQ0RGOztBREdBO0VBQ0UsYUFBQTtFQUNBLHVCQUFBO0FDQUY7O0FER0E7RUFDRSxrQkFBQTtBQ0FGOztBREVBO0VBQ0UsMEJBQUE7RUFBQSx1QkFBQTtFQUFBLGtCQUFBO0VBQ0EsWUFBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxtQkFBQTtFQUNBLGVBQUE7RUFDQSxZQUFBO0VBQ0EsU0FBQTtBQ0NGOztBRENBO0VBQ0Usa0JBQUE7RUFDQSx1QkFBQTtBQ0VGOztBREVBO0VBQ0Usa0JBQUE7RUFDQSx1QkFBQTtBQ0NGOztBRElBO0VBQ0UsdUJBQUE7QUNERjs7QURJQTtFQUNFLGtCQUFBO0VBQ0EsdUJBQUE7RUFDQSxrQkFBQTtBQ0RGOztBREdBO0VBQ0Usa0JBQUE7RUFDQSx1QkFBQTtFQUNBLGtCQUFBO0FDQUY7O0FERUE7RUFDRSxzQkFBQTtFQUNBLHVCQUFBO0FDQ0Y7O0FERUE7RUFDRSxzQkFBQTtFQUNBLHVCQUFBO0FDQ0YiLCJmaWxlIjoic3JjL2FwcC92aWV3cy9zaWFzLXYyL2V4dHN1bW1hcnkvZXh0c3VtbWFyeS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4gIFxyXG50YWJsZSB7XHJcbiAgYm9yZGVyLWNvbGxhcHNlOiBpbml0aWFsO1xyXG4gIHdpZHRoOjEwMCU7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7XHJcbn1cclxuOmhvc3QgOjpuZy1kZWVwIC5tYXQtc29ydC1oZWFkZXItY29udGFpbmVyIHsgXHJcbiAgZGlzcGxheTogZmxleDsgIFxyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyOyBcclxufVxyXG5cclxudGgubWF0LWhlYWRlci1jZWxsLCB0ZC5tYXQtY2VsbCB7IFxyXG4gIHRleHQtYWxpZ246IGNlbnRlcjsgXHJcbn1cclxuLm1hdC1yYWlzZWQtYnV0dG9uIHtcclxuICB3aWR0aDogZml0LWNvbnRlbnQ7XHJcbiAgaGVpZ2h0OiAyMHB4O1xyXG4gIGxpbmUtaGVpZ2h0OiAyN3B4O1xyXG4gIG1pbi1oZWlnaHQ6IDI3cHg7XHJcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcclxuICBmb250LXNpemU6IDExcHg7XHJcbiAgcGFkZGluZzogMCAwO1xyXG4gIG1hcmdpbjogMDtcclxufVxyXG4ubWF0LWhlYWRlci1jZWxsIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7XHJcblxyXG59XHJcblxyXG4ubWF0LWNlbGwge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcclxuXHJcbn1cclxuXHJcblxyXG50cjpudGgtY2hpbGQoZXZlbikge1xyXG4gIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG50aCB7XHJcbiAgZm9udC13ZWlnaHQ6IHNtYWxsO1xyXG4gIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG50ciB7XHJcbiAgZm9udC13ZWlnaHQ6IHNtYWxsO1xyXG4gIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5tYXQtcGFnaW5hdG9yIHtcclxuICB3aWR0aDogYXV0byAhaW1wb3J0YW50O1xyXG4gIGhlaWdodDogNDBweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5tZC1wYWdpbmF0aW9uLXdyYXBwZXIge1xyXG4gIHdpZHRoOiBhdXRvICFpbXBvcnRhbnQ7XHJcbiAgaGVpZ2h0OiA0MHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJ0YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogaW5pdGlhbDtcbiAgd2lkdGg6IDEwMCU7XG4gIHRleHQtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xufVxuXG46aG9zdCA6Om5nLWRlZXAgLm1hdC1zb3J0LWhlYWRlci1jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cblxudGgubWF0LWhlYWRlci1jZWxsLCB0ZC5tYXQtY2VsbCB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLm1hdC1yYWlzZWQtYnV0dG9uIHtcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xuICBoZWlnaHQ6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyN3B4O1xuICBtaW4taGVpZ2h0OiAyN3B4O1xuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICBmb250LXNpemU6IDExcHg7XG4gIHBhZGRpbmc6IDAgMDtcbiAgbWFyZ2luOiAwO1xufVxuXG4ubWF0LWhlYWRlci1jZWxsIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcbn1cblxuLm1hdC1jZWxsIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcbn1cblxudHI6bnRoLWNoaWxkKGV2ZW4pIHtcbiAgaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7XG59XG5cbnRoIHtcbiAgZm9udC13ZWlnaHQ6IHNtYWxsO1xuICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG50ciB7XG4gIGZvbnQtd2VpZ2h0OiBzbWFsbDtcbiAgaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxubWF0LXBhZ2luYXRvciB7XG4gIHdpZHRoOiBhdXRvICFpbXBvcnRhbnQ7XG4gIGhlaWdodDogNDBweCAhaW1wb3J0YW50O1xufVxuXG5tZC1wYWdpbmF0aW9uLXdyYXBwZXIge1xuICB3aWR0aDogYXV0byAhaW1wb3J0YW50O1xuICBoZWlnaHQ6IDQwcHggIWltcG9ydGFudDtcbn0iXX0= */");

/***/ }),

/***/ "./src/app/views/sias-v2/extsummary/extsummary.component.ts":
/*!******************************************************************!*\
  !*** ./src/app/views/sias-v2/extsummary/extsummary.component.ts ***!
  \******************************************************************/
/*! exports provided: ExtsummaryComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExtsummaryComponent", function() { return ExtsummaryComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/shared/services/sias2-services/excel-processing.service */ "./src/app/shared/services/sias2-services/excel-processing.service.ts");
/* harmony import */ var src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/shared/services/sias2-services/ExcelApiService */ "./src/app/shared/services/sias2-services/ExcelApiService.ts");
/* harmony import */ var _users_users_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../users/users.service */ "./src/app/views/users/users.service.ts");
/* harmony import */ var src_app_shared_services_excel_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/shared/services/excel.service */ "./src/app/shared/services/excel.service.ts");
/* harmony import */ var _roles1_roles_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../roles1/roles.service */ "./src/app/views/roles1/roles.service.ts");
/* harmony import */ var _roles1_models_fmosNewRolePermissions__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../roles1/models/fmosNewRolePermissions */ "./src/app/views/roles1/models/fmosNewRolePermissions.ts");











let ExtsummaryComponent = class ExtsummaryComponent {
    constructor(api, route, http, router, userApi, excelService, roleService, apiService) {
        // this.route.queryParams.subscribe(params => {
        this.api = api;
        this.route = route;
        this.http = http;
        this.router = router;
        this.userApi = userApi;
        this.excelService = excelService;
        this.roleService = roleService;
        this.apiService = apiService;
        this.displayedColumns = ['extSysCode', 'extSysName', 'authStatus', 'modifiedTime'];
        this.button_permission = {};
        this.paginator = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["QueryList"]();
        this.roleCodes = new _roles1_models_fmosNewRolePermissions__WEBPACK_IMPORTED_MODULE_10__["permissionsLabels"]();
        //   // this.modifyUserObject.userRef = params["userRef"];
        //   this.formData.extSysCode = params['extSysCode'];
        //   this.formData.extSysName = params['extSysName'];
        // });
    }
    ngOnInit() {
        setTimeout(() => {
            this.newRolePermissions();
        }, 2000);
        this.roleService.screenLabelList.subscribe(message => this.roleCodes = message);
        this.user_id = sessionStorage.getItem('user_id');
        this.role = sessionStorage.getItem('user_role');
        this.getExt();
        // this.screenpermission();
    }
    newRolePermissions() {
        this.roleService.fetchScreenPermissions('External Systems');
    }
    screenpermission() {
        this.screenName = 'ExternalSystem';
        // this.role='ROLE1';
        this.userApi.getRoleScreenPermission(this.user_id, this.screenName, this.role).subscribe(res => {
            this.rolepermission = res;
            //console.log(this.rolepermission);
            if (this.rolepermission) {
                this.button_permission = this.rolepermission[0];
                //console.log( this.button_permission);
            }
        });
    }
    getExt() {
        this.api.getAllExt().subscribe(data => {
            this.extdata = data;
            console.log(data);
            this.dataSource = new _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatTableDataSource"](data);
            this.dataSource.sort = this.sort;
            this.dataSource.paginator = this.paginator.toArray()[0];
            //console.log(data);
        });
        // //console.log(this.extdata);
    }
    getExtSys(row) {
        //console.log("row", row);
        this.apiService.externalSystem.next(row);
        const navigationExtras = {
            queryParams: {}
        };
        this.router.navigate(['/sias-v2/excelExtSysUpdate'], navigationExtras);
    }
    onPaginateChange(event) {
        //console.log(event);
        // //console.log(this.pageSize);
        this.pageSize = event.pageSize;
        this.pageIndex = event.pageIndex;
        //console.log(event.pageSize);
        //console.log(event.pageIndex);
    }
    exportAsXLSX() {
        // this.allUsersList.forEach(element => {
        //   if(element.creatorDtStamp!==null && element.verifierDtStamp !==null){
        //   element.creatorDtStamp
        //   =this.pipe.transform(element.creatorDtStamp        , 'dd-MMM-yy').toString();
        //   element.verifierDtStamp
        //   =this.pipe.transform(element.verifierDtStamp
        //     , 'dd-MMM-yy').toString();
        //   }
        // });
        this.excelService.exportAsExcelFile(this.extdata, 'External_System_Report');
    }
};
ExtsummaryComponent.ctorParameters = () => [
    { type: src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_5__["ExcelProcessingService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"] },
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpClient"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"] },
    { type: _users_users_service__WEBPACK_IMPORTED_MODULE_7__["UsersService"] },
    { type: src_app_shared_services_excel_service__WEBPACK_IMPORTED_MODULE_8__["ExcelService"] },
    { type: _roles1_roles_service__WEBPACK_IMPORTED_MODULE_9__["RoleService"] },
    { type: src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_6__["ExcelApiService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_angular_material__WEBPACK_IMPORTED_MODULE_2__["MatSort"], { static: true }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatSort"])
], ExtsummaryComponent.prototype, "sort", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"])(_angular_material__WEBPACK_IMPORTED_MODULE_2__["MatPaginator"]),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
], ExtsummaryComponent.prototype, "paginator", void 0);
ExtsummaryComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-extsummary',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./extsummary.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/extsummary/extsummary.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./extsummary.component.scss */ "./src/app/views/sias-v2/extsummary/extsummary.component.scss")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_5__["ExcelProcessingService"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
        _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpClient"],
        _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
        _users_users_service__WEBPACK_IMPORTED_MODULE_7__["UsersService"],
        src_app_shared_services_excel_service__WEBPACK_IMPORTED_MODULE_8__["ExcelService"],
        _roles1_roles_service__WEBPACK_IMPORTED_MODULE_9__["RoleService"],
        src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_6__["ExcelApiService"]])
], ExtsummaryComponent);



/***/ }),

/***/ "./src/app/views/sias-v2/extsummary/updateexcelext/updateexcelext.component.scss":
/*!***************************************************************************************!*\
  !*** ./src/app/views/sias-v2/extsummary/updateexcelext/updateexcelext.component.scss ***!
  \***************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("table {\n  width: 100%;\n}\n\nth {\n  /* text-align: center;\n   */\n  align-content: center;\n}\n\ntable td {\n  padding-right: 50px;\n}\n\n#customers {\n  border-collapse: collapse;\n  width: 100%;\n}\n\n#customers td, #customers th {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: center;\n  font-size: x-small;\n}\n\n#customers td mat-chip {\n  font-size: x-small;\n}\n\n#customers tr:nth-child(even) {\n  background-color: #f2f2f2;\n}\n\n#customers th {\n  padding-top: 8px;\n  padding-bottom: 9px;\n  text-align: left;\n  background-color: #61b2d8;\n  color: white;\n}\n\n.mat-raised-button {\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  height: 20px;\n  line-height: 27px;\n  min-height: 27px;\n  vertical-align: top;\n  font-size: 11px;\n  padding: 0 0;\n  margin: 0;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9leHRzdW1tYXJ5L3VwZGF0ZWV4Y2VsZXh0L0Y6XFxtdXRodS1vbmJvYXJkXFxtZWRpYW4tcGgyLXVpL3NyY1xcYXBwXFx2aWV3c1xcc2lhcy12MlxcZXh0c3VtbWFyeVxcdXBkYXRlZXhjZWxleHRcXHVwZGF0ZWV4Y2VsZXh0LmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC92aWV3cy9zaWFzLXYyL2V4dHN1bW1hcnkvdXBkYXRlZXhjZWxleHQvdXBkYXRlZXhjZWxleHQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxXQUFBO0FDQ0o7O0FER0U7RUFDRTtJQUFBO0VBRUYscUJBQUE7QUNBRjs7QURFRTtFQUNFLG1CQUFBO0FDQ0o7O0FEQ0U7RUFDRSx5QkFBQTtFQUNBLFdBQUE7QUNFSjs7QURBRTtFQUNFLHNCQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0VBQ0Esa0JBQUE7QUNHSjs7QURBRTtFQUNFLGtCQUFBO0FDR0o7O0FEREU7RUFBOEIseUJBQUE7QUNLaEM7O0FESEU7RUFDRSxnQkFBQTtFQUNBLG1CQUFBO0VBQ0EsZ0JBQUE7RUFDQSx5QkFBQTtFQUNBLFlBQUE7QUNNSjs7QURKRTtFQUNFLDBCQUFBO0VBQUEsdUJBQUE7RUFBQSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxpQkFBQTtFQUNBLGdCQUFBO0VBQ0EsbUJBQUE7RUFDQSxlQUFBO0VBQ0EsWUFBQTtFQUNBLFNBQUE7QUNPSiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL3NpYXMtdjIvZXh0c3VtbWFyeS91cGRhdGVleGNlbGV4dC91cGRhdGVleGNlbGV4dC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbInRhYmxlIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICBcclxuICB9XHJcbiAgXHJcbiAgdGh7XHJcbiAgICAvKiB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgKi9cclxuICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XHJcbiAgfVxyXG4gIHRhYmxlIHRkIHtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDUwcHg7XHJcbiAgfVxyXG4gICNjdXN0b21lcnMge1xyXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuICAjY3VzdG9tZXJzIHRkLCAjY3VzdG9tZXJzIHRoIHtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XHJcbiAgICBwYWRkaW5nOiA4cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBmb250LXNpemU6IHgtc21hbGw7XHJcbiAgXHJcbiAgfVxyXG4gICNjdXN0b21lcnMgdGQgbWF0LWNoaXAge1xyXG4gICAgZm9udC1zaXplOiB4LXNtYWxsO1xyXG4gIH1cclxuICAjY3VzdG9tZXJzIHRyOm50aC1jaGlsZChldmVuKXtiYWNrZ3JvdW5kLWNvbG9yOiAjZjJmMmYyO31cclxuICBcclxuICAjY3VzdG9tZXJzIHRoIHtcclxuICAgIHBhZGRpbmctdG9wOiA4cHg7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogOXB4O1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6cmdiKDk3LCAxNzgsIDIxNik7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgfVxyXG4gIC5tYXQtcmFpc2VkLWJ1dHRvbiB7XHJcbiAgICB3aWR0aDogZml0LWNvbnRlbnQ7XHJcbiAgICBoZWlnaHQ6IDIwcHg7XHJcbiAgICBsaW5lLWhlaWdodDogMjdweDtcclxuICAgIG1pbi1oZWlnaHQ6IDI3cHg7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xyXG4gICAgZm9udC1zaXplOiAxMXB4O1xyXG4gICAgcGFkZGluZzogMCAwO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gIH1cclxuIiwidGFibGUge1xuICB3aWR0aDogMTAwJTtcbn1cblxudGgge1xuICAvKiB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAqL1xuICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XG59XG5cbnRhYmxlIHRkIHtcbiAgcGFkZGluZy1yaWdodDogNTBweDtcbn1cblxuI2N1c3RvbWVycyB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4jY3VzdG9tZXJzIHRkLCAjY3VzdG9tZXJzIHRoIHtcbiAgYm9yZGVyOiAxcHggc29saWQgI2RkZDtcbiAgcGFkZGluZzogOHB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogeC1zbWFsbDtcbn1cblxuI2N1c3RvbWVycyB0ZCBtYXQtY2hpcCB7XG4gIGZvbnQtc2l6ZTogeC1zbWFsbDtcbn1cblxuI2N1c3RvbWVycyB0cjpudGgtY2hpbGQoZXZlbikge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJmMmYyO1xufVxuXG4jY3VzdG9tZXJzIHRoIHtcbiAgcGFkZGluZy10b3A6IDhweDtcbiAgcGFkZGluZy1ib3R0b206IDlweDtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzYxYjJkODtcbiAgY29sb3I6IHdoaXRlO1xufVxuXG4ubWF0LXJhaXNlZC1idXR0b24ge1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gIGhlaWdodDogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI3cHg7XG4gIG1pbi1oZWlnaHQ6IDI3cHg7XG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gIGZvbnQtc2l6ZTogMTFweDtcbiAgcGFkZGluZzogMCAwO1xuICBtYXJnaW46IDA7XG59Il19 */");

/***/ }),

/***/ "./src/app/views/sias-v2/extsummary/updateexcelext/updateexcelext.component.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/views/sias-v2/extsummary/updateexcelext/updateexcelext.component.ts ***!
  \*************************************************************************************/
/*! exports provided: UpdateexcelextComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpdateexcelextComponent", function() { return UpdateexcelextComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _excel_external_sys_excelExtSys__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../excel-external-sys/excelExtSys */ "./src/app/views/sias-v2/excel-external-sys/excelExtSys.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/shared/services/sias2-services/excel-processing.service */ "./src/app/shared/services/sias2-services/excel-processing.service.ts");
/* harmony import */ var src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/shared/services/sias2-services/ExcelApiService */ "./src/app/shared/services/sias2-services/ExcelApiService.ts");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var src_app_views_users_users_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/views/users/users.service */ "./src/app/views/users/users.service.ts");
/* harmony import */ var src_app_views_roles1_roles_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/views/roles1/roles.service */ "./src/app/views/roles1/roles.service.ts");
/* harmony import */ var src_app_views_roles1_models_fmosNewRolePermissions__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/views/roles1/models/fmosNewRolePermissions */ "./src/app/views/roles1/models/fmosNewRolePermissions.ts");













let UpdateexcelextComponent = class UpdateexcelextComponent {
    constructor(route, http, router, userApi, apiService, shareService, snack, roleService, ref, toast, cdr) {
        this.route = route;
        this.http = http;
        this.router = router;
        this.userApi = userApi;
        this.apiService = apiService;
        this.shareService = shareService;
        this.snack = snack;
        this.roleService = roleService;
        this.ref = ref;
        this.toast = toast;
        this.cdr = cdr;
        //formData:ExcelExtsys;
        this.formData = new _excel_external_sys_excelExtSys__WEBPACK_IMPORTED_MODULE_2__["ExcelExtsys"]();
        this.is_edit = true;
        this.space = true;
        this.allDeptNames = [];
        this.excelExtedit = new _excel_external_sys_excelExtSys__WEBPACK_IMPORTED_MODULE_2__["ExcelExtsys"]();
        this.roleCodes = new src_app_views_roles1_models_fmosNewRolePermissions__WEBPACK_IMPORTED_MODULE_12__["permissionsLabels"]();
        this.button_permission = {};
    }
    ngOnInit() {
        setTimeout(() => {
            this.newRolePermissions();
        }, 2000);
        this.roleService.screenLabelList.subscribe(message => this.roleCodes = message);
        this.getAllDeptNames();
        localStorage.setItem("userIdForChangePassword", localStorage.getItem("currentUser"));
        this.user_id = sessionStorage.getItem('user_id');
        this.role = sessionStorage.getItem('user_role');
        // this.screenpermission();
        //console.log(localStorage.getItem("currentUser"));
        this.currentUser = localStorage.getItem("currentUser");
        this.shareService.externalSystem$.subscribe((data) => {
            //console.log("data works", data);
            this.formData = data;
            //console.log(this.formData);
            ////console.log( data.updatedBy)
            if (this.formData.authStatus === 'U') {
                this.formData.authStatus = 'UNAUTHORIZED';
            }
            if (this.formData.authStatus === 'A') {
                this.formData.authStatus = 'AUTHORIZED';
            }
            if (this.formData.recordStatus === 'O') {
                this.formData.recordStatus = 'OPEN';
            }
            if (this.formData.recordStatus === 'C') {
                this.formData.recordStatus = 'CLOSED';
            }
            if (this.formData.verifiedOnce === 'N') {
                this.formData.verifiedOnce = 'NO';
            }
            if (this.formData.verifiedOnce === 'Y') {
                this.formData.verifiedOnce = 'YES';
            }
        });
        this.editFunction = false;
        this.loggedInUser = localStorage.getItem("userIdForChangePassword");
        this.poovar = true;
    }
    screenpermission() {
        this.screenName = 'roles';
        //this.role='ROLE1';
        this.userApi.getRoleScreenPermission(this.user_id, this.screenName, this.role).subscribe(res => {
            this.rolepermission = res;
            //console.log(this.rolepermission);
            if (this.rolepermission) {
                this.button_permission = this.rolepermission[0];
                //console.log( this.button_permission);
            }
        });
    }
    getAllDeptNames() {
        //console.log('this getting roles');
        this.roleService.getAllDept().subscribe(data => {
            this.allDeptNames = data;
            //console.log(this.allRoleNames);
        });
    }
    //geting user Id based on keyup
    keyPress(event) {
        console.log(event.target.value);
        console.log(event);
        console.log(this.allDeptNames);
        this.result = this.allDeptNames.filter(s => s.includes(event.target.value));
        console.log(this.result);
        this.allDeptNames = this.result;
        this.ref.markForCheck();
        if (event.target.value == '') {
            this.getAllDeptNames();
        }
    }
    newRolePermissions() {
        this.roleService.fetchScreenPermissions('External Systems');
    }
    changeStatus() {
        //console.log('change status call');
        this.is_edit = false;
        this.poovar = false;
        //console.log('done');
        this.editFunction = true;
        // this.editFunction2 = false;
    }
    onSubmit(formData) {
        //console.log('inside modify user');
        formData.updatedBy = this.loggedInUser;
        //console.log(formData);
        formData.modifiedBy = this.loggedInUser;
        //console.log(formData);
        this.formData.authorizedBy = "";
        this.formData.authorizedTime = null;
        if (this.formData.recordStatus === 'OPEN') {
            this.formData.recordStatus = 'O';
        }
        if (this.formData.recordStatus === 'CLOSED') {
            this.formData.recordStatus = 'C';
        }
        if (this.formData.authStatus === 'UNAUTHORIZED') {
            this.formData.authStatus = 'U';
        }
        if (this.formData.authStatus === 'AUTHORIZED') {
            this.formData.authStatus = 'A';
        }
        if (this.formData.verifiedOnce === 'NO') {
            this.formData.verifiedOnce = 'N';
        }
        if (this.formData.verifiedOnce === 'YES') {
            this.formData.verifiedOnce = 'Y';
        }
        this.apiService.modifyExtSys(formData).subscribe(data => {
            this.validationResponse = data;
            // formData=data;
            //console.log(this.validationResponse);
            //console.log(data);
            this.formData = this.validationResponse;
            console.log(this.formData);
            // this.cdr.markForCheck();
            if (this.validationResponse) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_9___default.a.fire('Data updated successfully ');
                this.savedisable = true;
                if (this.formData.recordStatus === 'O') {
                    this.formData.recordStatus = 'OPEN';
                }
                if (this.formData.recordStatus === 'C') {
                    this.formData.recordStatus = 'CLOSED';
                }
                if (this.formData.authStatus === 'A') {
                    this.formData.authStatus = 'AUTHORIZED';
                }
                if (this.formData.authStatus === 'U') {
                    this.formData.authStatus = 'UNAUTHORIZED';
                }
                if (this.formData.verifiedOnce === 'N') {
                    this.formData.verifiedOnce = 'NO';
                }
                if (this.formData.verifiedOnce === 'Y') {
                    this.formData.verifiedOnce = 'YES';
                }
                // this.router.navigate(['/sias/v2/ExtSumamry']);
                this.updateBtn.disabled = true;
                this.cdr.markForCheck();
                //console.log(data);
            }
            else {
                sweetalert2__WEBPACK_IMPORTED_MODULE_9___default.a.fire({
                    type: 'error',
                    text: 'Data update failed ',
                });
            }
        }, err => {
            sweetalert2__WEBPACK_IMPORTED_MODULE_9___default.a.fire({
                type: 'error',
                text: 'Server Error ',
            });
        });
    }
    onClickOfAuth() {
        //console.log("on click of auth");
        if (this.formData.modifiedBy !== this.currentUser) {
            //console.log(this.formData.modifiedBy);
            this.apiService.authorizingTheRecord(this.formData, this.currentUser).subscribe((data) => {
                //console.log(data);
                this.formData = data;
                this.tempStoreRespOfForm = data;
                if (this.formData) {
                    sweetalert2__WEBPACK_IMPORTED_MODULE_9___default.a.fire('You authorized the record ');
                    if (this.formData.authStatus === 'U') {
                        this.formData.authStatus = 'UNAUTHORIZED';
                    }
                    if (this.formData.authStatus === 'A') {
                        this.formData.authStatus = 'AUTHORIZED';
                    }
                    if (this.formData.recordStatus === 'O') {
                        this.formData.recordStatus = 'OPEN';
                    }
                    if (this.formData.recordStatus === 'C') {
                        this.formData.recordStatus = 'CLOSED';
                    }
                    if (this.formData.verifiedOnce === 'N') {
                        this.formData.verifiedOnce = 'NO';
                    }
                    if (this.formData.verifiedOnce === 'Y') {
                        this.formData.verifiedOnce = 'YES';
                    }
                }
                this.cdr.markForCheck();
                this.disableDeleteButton = true;
                //console.log(this.formData);
            });
        }
        else {
            sweetalert2__WEBPACK_IMPORTED_MODULE_9___default.a.fire({
                type: 'error',
                text: 'Maker cannot authorize the record ',
            });
        }
    }
    onClickOfClose() {
        //console.log("on click of close");
        //console.log(this.formData);
        //console.log(this.formData.recordStatus)
        if (this.formData.recordStatus === 'OPEN') {
            this.formData.recordStatus = 'O';
        }
        if (this.formData.recordStatus === 'CLOSED') {
            this.formData.recordStatus = 'C';
        }
        //console.log(this.formData.recordStatus)
        //console.log(this.formData);
        this.formData.modifiedBy = this.currentUser;
        //console.log( this.formData.modifiedBy);
        this.apiService.ClosingTheRecord(this.formData).subscribe((data) => {
            //console.log(data);
            this.formData = data;
            if (this.formData) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_9___default.a.fire('You Closed the record ');
                if (this.formData.authStatus === 'U') {
                    this.formData.authStatus = 'UNAUTHORIZED';
                }
                if (this.formData.authStatus === 'A') {
                    this.formData.authStatus = 'AUTHORIZED';
                }
                //console.log(this.formData.modifiedTime);
                /*
                */
                if (this.formData.verifiedOnce === 'N') {
                    this.formData.verifiedOnce = 'NO';
                }
                if (this.formData.verifiedOnce === 'Y') {
                    this.formData.verifiedOnce = 'YES';
                }
                /**
                 * setting record status
                 */
                if (this.formData.recordStatus === 'O') {
                    this.formData.recordStatus = 'OPEN';
                }
                if (this.formData.recordStatus === 'C') {
                    this.formData.recordStatus = 'CLOSED';
                }
            }
            //console.log(this.formData);
            this.cdr.markForCheck();
            if (this.formData.recordStatus == "CLOSED") {
                this.disableReopenButton = true;
            }
        });
    }
    onClickOfReOpen() {
        if (this.formData.recordStatus === 'OPEN') {
            this.formData.recordStatus = 'O';
        }
        if (this.formData.recordStatus === 'CLOSED') {
            this.formData.recordStatus = 'C';
        }
        //console.log("on click of Reopen");
        this.formData.modifiedBy = this.currentUser;
        //console.log( this.formData.modifiedBy);
        this.apiService.reopeningTheRecord(this.formData).subscribe((data) => {
            //console.log(data);
            this.formData = data;
            if (this.formData) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_9___default.a.fire('You reopened the record ');
                if (this.formData.authStatus === 'U') {
                    this.formData.authStatus = 'UNAUTHORIZED';
                }
                if (this.formData.authStatus === 'A') {
                    this.formData.authStatus = 'AUTHORIZED';
                }
                /*
                */
                if (this.formData.verifiedOnce === 'N') {
                    this.formData.verifiedOnce = 'NO';
                }
                if (this.formData.verifiedOnce === 'Y') {
                    this.formData.verifiedOnce = 'YES';
                }
                /**
                 * setting record status
                 */
                if (this.formData.recordStatus === 'O') {
                    this.formData.recordStatus = 'OPEN';
                }
                if (this.formData.recordStatus === 'C') {
                    this.formData.recordStatus = 'CLOSED';
                }
            }
            //console.log(this.formData);
            //console.log(this.formData);
            if (this.formData.recordStatus == "C") {
                this.disableCloseButton = true;
            }
            this.cdr.markForCheck();
        });
    }
    //added by vidya on sept 23
    onClickOfDeleteOfUpdateExecel() {
        console.log("this is deleting");
        this.apiService.onClickOfDeleteOfUpdateExecel(this.formData).subscribe(deleteResp => {
            console.log(deleteResp);
            if (deleteResp) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_9___default.a.fire({
                    title: "Record Deleted SuccessFully "
                });
            }
            else {
                sweetalert2__WEBPACK_IMPORTED_MODULE_9___default.a.fire({
                    title: "Failed To Delete The Record"
                });
            }
        });
    }
    fun(extSysName) {
        console.log(extSysName);
        console.log("enters inside fn");
        const result = extSysName.trim();
        console.log(result);
        if (result) {
            console.log("valid string");
            this.space = true;
            console.log(this.space);
        }
        else {
            console.log("invalid string");
            this.space = false;
            // this.submitted = false;
            console.log(this.space);
        }
    }
};
UpdateexcelextComponent.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"] },
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpClient"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"] },
    { type: src_app_views_users_users_service__WEBPACK_IMPORTED_MODULE_10__["UsersService"] },
    { type: src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_7__["ExcelProcessingService"] },
    { type: src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_8__["ExcelApiService"] },
    { type: _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatSnackBar"] },
    { type: src_app_views_roles1_roles_service__WEBPACK_IMPORTED_MODULE_11__["RoleService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
], UpdateexcelextComponent.prototype, "formData", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Array)
], UpdateexcelextComponent.prototype, "formData1", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"])(_angular_material__WEBPACK_IMPORTED_MODULE_5__["MatButton"]),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatButton"])
], UpdateexcelextComponent.prototype, "updateBtn", void 0);
UpdateexcelextComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-updateexcelext',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./updateexcelext.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/extsummary/updateexcelext/updateexcelext.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./updateexcelext.component.scss */ "./src/app/views/sias-v2/extsummary/updateexcelext/updateexcelext.component.scss")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
        _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpClient"],
        _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
        src_app_views_users_users_service__WEBPACK_IMPORTED_MODULE_10__["UsersService"],
        src_app_shared_services_sias2_services_excel_processing_service__WEBPACK_IMPORTED_MODULE_7__["ExcelProcessingService"],
        src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_8__["ExcelApiService"],
        _angular_material__WEBPACK_IMPORTED_MODULE_5__["MatSnackBar"],
        src_app_views_roles1_roles_service__WEBPACK_IMPORTED_MODULE_11__["RoleService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_6__["ToastrService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
], UpdateexcelextComponent);



/***/ }),

/***/ "./src/app/views/sias-v2/rules/create-rules/create-rules.component.css":
/*!*****************************************************************************!*\
  !*** ./src/app/views/sias-v2/rules/create-rules/create-rules.component.css ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/* ::ng-deep .mat-form-field-flex > .mat-form-field-infix { padding: 0.4em 0px !important;}\r\n::ng-deep .mat-form-field-label-wrapper { top: -1.5em; }\r\n\r\n::ng-deep .mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label {\r\n    transform: translateY(-1.1em) scale(.75);\r\n    width: 80.33333%;\r\n} */\r\n/* ::ng-deep .mat-form-field-flex > .mat-form-field-infix { width: 30% !important;} */\r\n/* ::ng-deep.mat-form-field-appearance-outline .mat-form-field-flex\r\n{\r\n    width: 160px !important;\r\n    height: 50px !important;\r\n} */\r\ndiv.scrollmenu {\r\n  overflow: auto;\r\n  white-space: nowrap;\r\n}\r\n.redC{\r\n  color: red;\r\n}\r\n.mat-raised-button {\r\n  width: -webkit-fit-content;\r\n  width: -moz-fit-content;\r\n  width: fit-content;\r\n  height: 20px;\r\n  line-height: 27px;\r\n  min-height: 27px;\r\n  vertical-align: top;\r\n  font-size: 11px;\r\n  padding: 0 0;\r\n  margin: 0;\r\n}\r\n#customers {\r\n  font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\r\n  border-collapse: collapse;\r\n  width: 100%;\r\n}\r\n#customers td,\r\n#customers th {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: center;\r\n\r\n}\r\n#customers tr:nth-child(even) {\r\n  background-color: #f2f2f2;\r\n}\r\n#customers th {\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n  text-align: left;\r\n  background-color: rgb(97, 178, 216);\r\n  color: white;\r\n}\r\n#scrl::-webkit-scrollbar-track\r\n{\r\n\t-webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\r\n\tborder-radius: 10px;\r\n\tbackground-color: #F5F5F5;\r\n}\r\n#scrl::-webkit-scrollbar\r\n{\r\n\twidth: 12px;\r\n\tbackground-color: #F5F5F5;\r\n}\r\n#scrl::-webkit-scrollbar-thumb\r\n{\r\n\tborder-radius: 10px;\r\n\t-webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);\r\n\tbackground-color: #555;\r\n}\r\n.border-box{\r\n  border-color: #e5e5e5;\r\n  -ms-box-shadow: 0 1px 8px rgba(69, 65, 78, 0.08);\r\n  -o-box-shadow: 0 1px 8px rgba(69, 65, 78, 0.08);\r\n  box-shadow: 0 1px 8px rgb(69 65 78 / 8%);\r\n  background-color: #ffffff;\r\n  border-radius: 0.71rem;\r\n  border: 1px solid rgba(0,0,0,.125);\r\n  margin-bottom: 2.308rem;\r\n}\r\n.mt-8 {\r\n  margin-top: 15px;\r\n}\r\n.pr-8 {\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n}\r\n.validation-system.border-box {\r\n  background: #f0f1f6;\r\n}\r\n.src-system.border-box {\r\n  background: rgba(51, 94, 234, 0.3);\r\n}\r\n.readonly-wrapper {\r\n  pointer-events:none;\r\n}\r\n.readonly-wrapper .readonly-block {\r\n  pointer-events: none;\r\n}  \r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9ydWxlcy9jcmVhdGUtcnVsZXMvY3JlYXRlLXJ1bGVzLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBQ0gscUZBQXFGO0FBQ3JGOzs7O0dBSUc7QUFFSDtFQUNFLGNBQWM7RUFDZCxtQkFBbUI7QUFDckI7QUFFQTtFQUNFLFVBQVU7QUFDWjtBQUVBO0VBQ0UsMEJBQWtCO0VBQWxCLHVCQUFrQjtFQUFsQixrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLGlCQUFpQjtFQUNqQixnQkFBZ0I7RUFDaEIsbUJBQW1CO0VBQ25CLGVBQWU7RUFDZixZQUFZO0VBQ1osU0FBUztBQUNYO0FBRUE7RUFDRSx5REFBeUQ7RUFDekQseUJBQXlCO0VBQ3pCLFdBQVc7QUFDYjtBQUVBOztFQUVFLHNCQUFzQjtFQUN0QixZQUFZO0VBQ1osa0JBQWtCOztBQUVwQjtBQUVBO0VBQ0UseUJBQXlCO0FBQzNCO0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsb0JBQW9CO0VBQ3BCLGdCQUFnQjtFQUNoQixtQ0FBbUM7RUFDbkMsWUFBWTtBQUNkO0FBR0E7O0NBRUMsaURBQWlEO0NBQ2pELG1CQUFtQjtDQUNuQix5QkFBeUI7QUFDMUI7QUFFQTs7Q0FFQyxXQUFXO0NBQ1gseUJBQXlCO0FBQzFCO0FBRUE7O0NBRUMsbUJBQW1CO0NBQ25CLGdEQUFnRDtDQUNoRCxzQkFBc0I7QUFDdkI7QUFFQTtFQUNFLHFCQUFxQjtFQUVyQixnREFBZ0Q7RUFDaEQsK0NBQStDO0VBRS9DLHdDQUF3QztFQUN4Qyx5QkFBeUI7RUFDekIsc0JBQXNCO0VBQ3RCLGtDQUFrQztFQUNsQyx1QkFBdUI7QUFDekI7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjtBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLGtCQUFrQjtBQUNwQjtBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCO0FBRUE7RUFDRSxrQ0FBa0M7QUFDcEM7QUFDQTtFQUNFLG1CQUFtQjtBQUNyQjtBQUVBO0VBQ0Usb0JBQW9CO0FBQ3RCIiwiZmlsZSI6InNyYy9hcHAvdmlld3Mvc2lhcy12Mi9ydWxlcy9jcmVhdGUtcnVsZXMvY3JlYXRlLXJ1bGVzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiA6Om5nLWRlZXAgLm1hdC1mb3JtLWZpZWxkLWZsZXggPiAubWF0LWZvcm0tZmllbGQtaW5maXggeyBwYWRkaW5nOiAwLjRlbSAwcHggIWltcG9ydGFudDt9XHJcbjo6bmctZGVlcCAubWF0LWZvcm0tZmllbGQtbGFiZWwtd3JhcHBlciB7IHRvcDogLTEuNWVtOyB9XHJcblxyXG46Om5nLWRlZXAgLm1hdC1mb3JtLWZpZWxkLWFwcGVhcmFuY2Utb3V0bGluZS5tYXQtZm9ybS1maWVsZC1jYW4tZmxvYXQubWF0LWZvcm0tZmllbGQtc2hvdWxkLWZsb2F0IC5tYXQtZm9ybS1maWVsZC1sYWJlbCB7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEuMWVtKSBzY2FsZSguNzUpO1xyXG4gICAgd2lkdGg6IDgwLjMzMzMzJTtcclxufSAqL1xyXG4vKiA6Om5nLWRlZXAgLm1hdC1mb3JtLWZpZWxkLWZsZXggPiAubWF0LWZvcm0tZmllbGQtaW5maXggeyB3aWR0aDogMzAlICFpbXBvcnRhbnQ7fSAqL1xyXG4vKiA6Om5nLWRlZXAubWF0LWZvcm0tZmllbGQtYXBwZWFyYW5jZS1vdXRsaW5lIC5tYXQtZm9ybS1maWVsZC1mbGV4XHJcbntcclxuICAgIHdpZHRoOiAxNjBweCAhaW1wb3J0YW50O1xyXG4gICAgaGVpZ2h0OiA1MHB4ICFpbXBvcnRhbnQ7XHJcbn0gKi9cclxuXHJcbmRpdi5zY3JvbGxtZW51IHtcclxuICBvdmVyZmxvdzogYXV0bztcclxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG59XHJcblxyXG4ucmVkQ3tcclxuICBjb2xvcjogcmVkO1xyXG59XHJcblxyXG4ubWF0LXJhaXNlZC1idXR0b24ge1xyXG4gIHdpZHRoOiBmaXQtY29udGVudDtcclxuICBoZWlnaHQ6IDIwcHg7XHJcbiAgbGluZS1oZWlnaHQ6IDI3cHg7XHJcbiAgbWluLWhlaWdodDogMjdweDtcclxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xyXG4gIGZvbnQtc2l6ZTogMTFweDtcclxuICBwYWRkaW5nOiAwIDA7XHJcbiAgbWFyZ2luOiAwO1xyXG59XHJcblxyXG4jY3VzdG9tZXJzIHtcclxuICBmb250LWZhbWlseTogXCJUcmVidWNoZXQgTVNcIiwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcclxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG4jY3VzdG9tZXJzIHRkLFxyXG4jY3VzdG9tZXJzIHRoIHtcclxuICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xyXG4gIHBhZGRpbmc6IDhweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcblxyXG59XHJcblxyXG4jY3VzdG9tZXJzIHRyOm50aC1jaGlsZChldmVuKSB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjtcclxufVxyXG5cclxuI2N1c3RvbWVycyB0aCB7XHJcbiAgcGFkZGluZy10b3A6IDEycHg7XHJcbiAgcGFkZGluZy1ib3R0b206IDEycHg7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoOTcsIDE3OCwgMjE2KTtcclxuICBjb2xvcjogd2hpdGU7XHJcbn1cclxuXHJcblxyXG4jc2NybDo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2tcclxue1xyXG5cdC13ZWJraXQtYm94LXNoYWRvdzogaW5zZXQgMCAwIDZweCByZ2JhKDAsMCwwLDAuMyk7XHJcblx0Ym9yZGVyLXJhZGl1czogMTBweDtcclxuXHRiYWNrZ3JvdW5kLWNvbG9yOiAjRjVGNUY1O1xyXG59XHJcblxyXG4jc2NybDo6LXdlYmtpdC1zY3JvbGxiYXJcclxue1xyXG5cdHdpZHRoOiAxMnB4O1xyXG5cdGJhY2tncm91bmQtY29sb3I6ICNGNUY1RjU7XHJcbn1cclxuXHJcbiNzY3JsOjotd2Via2l0LXNjcm9sbGJhci10aHVtYlxyXG57XHJcblx0Ym9yZGVyLXJhZGl1czogMTBweDtcclxuXHQtd2Via2l0LWJveC1zaGFkb3c6IGluc2V0IDAgMCA2cHggcmdiYSgwLDAsMCwuMyk7XHJcblx0YmFja2dyb3VuZC1jb2xvcjogIzU1NTtcclxufVxyXG5cclxuLmJvcmRlci1ib3h7XHJcbiAgYm9yZGVyLWNvbG9yOiAjZTVlNWU1O1xyXG4gIC13ZWJraXQtYm94LXNoYWRvdzogMCAxcHggOHB4IHJnYig2OSA2NSA3OCAvIDglKTtcclxuICAtbXMtYm94LXNoYWRvdzogMCAxcHggOHB4IHJnYmEoNjksIDY1LCA3OCwgMC4wOCk7XHJcbiAgLW8tYm94LXNoYWRvdzogMCAxcHggOHB4IHJnYmEoNjksIDY1LCA3OCwgMC4wOCk7XHJcbiAgLW1vei1ib3gtc2hhZG93OiAwIDFweCA4cHggcmdiYSg2OSwgNjUsIDc4LCAwLjA4KTtcclxuICBib3gtc2hhZG93OiAwIDFweCA4cHggcmdiKDY5IDY1IDc4IC8gOCUpO1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XHJcbiAgYm9yZGVyLXJhZGl1czogMC43MXJlbTtcclxuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsMCwwLC4xMjUpO1xyXG4gIG1hcmdpbi1ib3R0b206IDIuMzA4cmVtO1xyXG59XHJcblxyXG4ubXQtOCB7XHJcbiAgbWFyZ2luLXRvcDogMTVweDtcclxufVxyXG5cclxuLnByLTgge1xyXG4gIHBhZGRpbmctcmlnaHQ6IDE1cHg7XHJcbiAgcGFkZGluZy1sZWZ0OiAxNXB4O1xyXG59XHJcblxyXG4udmFsaWRhdGlvbi1zeXN0ZW0uYm9yZGVyLWJveCB7XHJcbiAgYmFja2dyb3VuZDogI2YwZjFmNjtcclxufVxyXG5cclxuLnNyYy1zeXN0ZW0uYm9yZGVyLWJveCB7XHJcbiAgYmFja2dyb3VuZDogcmdiYSg1MSwgOTQsIDIzNCwgMC4zKTtcclxufVxyXG4ucmVhZG9ubHktd3JhcHBlciB7XHJcbiAgcG9pbnRlci1ldmVudHM6bm9uZTtcclxufVxyXG5cclxuLnJlYWRvbmx5LXdyYXBwZXIgLnJlYWRvbmx5LWJsb2NrIHtcclxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcclxufSAgIl19 */");

/***/ }),

/***/ "./src/app/views/sias-v2/rules/create-rules/create-rules.component.ts":
/*!****************************************************************************!*\
  !*** ./src/app/views/sias-v2/rules/create-rules/create-rules.component.ts ***!
  \****************************************************************************/
/*! exports provided: CreateRulesComponent, RuleConfig, RuleValidation, RuleDto, MultipleValidation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateRulesComponent", function() { return CreateRulesComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleConfig", function() { return RuleConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleValidation", function() { return RuleValidation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleDto", function() { return RuleDto; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultipleValidation", function() { return MultipleValidation; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/services/rules/rules.service */ "./src/app/shared/services/rules/rules.service.ts");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/services/addSys/add-system.service */ "./src/app/shared/services/addSys/add-system.service.ts");





let CreateRulesComponent = class CreateRulesComponent {
    constructor(addsystem, rules) {
        this.addsystem = addsystem;
        this.rules = rules;
        this.tempArrayData = [];
        this.ruleIdInvalid = false;
        this.showRuleValidation = false;
        this.disableSubmit = false;
        this.showpBar = false;
        this.ruleConfig = new RuleConfig();
        this.ruleValidation = new RuleValidation();
        this.arrRuleValidation = [];
        this.ruleDto = new RuleDto();
        this.multipleValidation = [];
        this.valCount = 0;
        this.sourceSysData = new RuleConfig();
        this.destinationSysData = new RuleConfig();
        this.headerTagData1 = [];
        this.selectedDocumentTypes2 = [];
        this.issourceSysDisabled = (value) => {
            return this.headerTagData1.includes(value);
        };
    }
    ngOnInit() {
        this.currentUser = localStorage.getItem('userFromLogin');
        this.fetchingIso();
        this.fetchingXMl();
        this.gettingExternalSsytem();
        this.arrRuleValidation.push({ id: '', messageKey: '', ruleId: '', validationDetail: '', validationMethod: '' });
        this.multipleValidation.push({ messageType: '', messageKey: '', operation: '', service: '', validationSystem: '', id: '', ruleId: '' });
    }
    gettingExternalSsytem() {
        this.rules.gettingExternalsystem().subscribe(extsysRes => {
            console.log(extsysRes);
            this.externalsystem = extsysRes;
            this.sourcesysdata = this.externalsystem;
            this.tempArrayData = this.externalsystem;
        });
    }
    onSlectionExternalSystem(event) {
        console.log("eve", event.value);
        this.srcSystem = event.option.value;
        console.log(this.srcSystem);
        // this.systemName = event.value;
        this.sourcesystem = event.option.value;
        console.log(this.sourcesystem);
        this.rules.gettingTranslationData(this.sourcesystem).subscribe(resp => {
            console.log(resp);
            if (resp) {
                this.sourceSysData = resp;
                this.ruleConfig.sourceTranslationId = resp.transId;
                this.gettingoperationAndServiceFroSourceSystem(this.sourcesystem, resp.messageType);
            }
        });
        this.externalsystem = this.tempArrayData;
    }
    onSelectionOFMessageType(event) {
        this.msgType = event.value;
        // this.gettingoperationAndServiceFroSourceSystem(this.sourcesystem, this.msgType);
    }
    // for source 
    gettingoperationAndServiceFroSourceSystem(ssysName, msgType) {
        console.log("ssysName", ssysName);
        this.rules.gettingoperationAndService(ssysName, msgType, this.currentUser).subscribe(sourceResp => {
            console.log(sourceResp);
            this.sourceOperation = sourceResp.OPERATION;
            this.sourceService = sourceResp.SERVICE;
            this.sourceDetails = sourceResp.MdmtSystemChannel[0].messageChannel;
            this.messageBasisIso = sourceResp.MdmtSystemService;
            console.log("messageBasisIso", this.messageBasisIso);
        }, (err => {
            console.log(err);
        }));
    }
    // For Destination
    destinaltionSelection(event) {
        console.log(this.srcSystem);
        console.log("ev", event.value);
        this.desSystem = event.option.value;
        this.destination = event.option.value;
        this.rules.gettingTranslationData(this.destination).subscribe(resp => {
            console.log(resp);
            if (resp) {
                this.destinationSysData = resp;
                this.ruleConfig.targetTranslationId = resp.transId;
            }
        });
        this.externalsystem = this.tempArrayData;
    }
    ondestinationMsgType(event) {
        console.log("ev", event.value);
        this.destiMsgType = event.value;
        this.operationAndservDstination(this.destination, this.destiMsgType);
    }
    operationAndservDstination(destination, msgType) {
        this.rules.gettingoperationAndService(destination, msgType, this.currentUser).subscribe(destination => {
            console.log(destination);
            this.destinationRespOperation = destination.OPERATION;
            this.destinatioRespService = destination.SERVICE;
            // console.log(this.destinationRespOperation);
        }, (err => {
            console.log(err);
        }));
    }
    //validation sys
    onvalidateMsgType(event) {
        this.gettingoperationSndservForValidation(this.validationData, event.value);
    }
    gettingoperationSndservForValidation(valData, msg) {
        this.rules.gettingoperationAndService(valData, msg, this.currentUser).subscribe(valResp => {
            console.log(valResp);
            if (valResp) {
                this.valOperation = valResp.OPERATION;
                this.valService = valResp.SERVICE;
                this.valDeatils = valResp.MdmtSystemChannel[0].messageChannel;
                console.log("valDe", this.valDeatils);
                this.xmlRespData = valResp.MdmtSystemService;
                console.log(this.xmlRespData.length);
            }
            // this.destinationRespOperation=destination[0];
            // console.log(this.destinationRespOperation);
        }, (err => {
            console.log(err);
        }));
    }
    onsearchingTablName(event) {
        console.log(event.target.value);
        console.log("this is arr", this.sourcesysdata);
        if (this.sourcesysdata) {
            let data = this.sourcesysdata.filter(function (e) {
                let extValue = e.toLowerCase();
                let value = event.target.value.toLowerCase();
                // console.log(extValue, value);
                // return !extValue.indexOf(value);//changed this for 1192
                return extValue.search(value) > -1;
            });
            console.log(data);
            this.externalsystem = data;
        }
    }
    // save
    submittingCreateRule() {
        this.ruleConfig.mdmtValidationSystemData = this.multipleValidation;
        this.ruleConfig.mdmtValidationSystemData.forEach(el => {
            el.ruleId = this.ruleConfig.ruleId;
        });
        // console.log(this.ruleConfig);
        this.arrRuleValidation.forEach(el => { el.ruleId = this.ruleConfig.ruleId; });
        console.log(this.arrRuleValidation);
        this.ruleConfig.sysRuleDetails = this.arrRuleValidation;
        console.log(this.ruleConfig);
        //     let arrayObj = this.multipleValidation.map(item => {
        //       return {
        //         validationSystems:item.validationSystem
        //       };
        //     });
        //     this.ruleConfig.validationSystems=arrayObj;
        //     this.ruleConfig.creatorId=this.currentUser;
        // console.log(this.ruleConfig);
        // let payloadObj : any = {};
        // payloadObj = this.ruleConfig;
        // payloadObj.mdmtValidationSystemData = this.multipleValidation;
        //   this.ruleDto.msgRule=this.ruleConfig;
        //   this.arrRuleValidation.forEach(data=>{
        //     data.ruleId=this.ruleDto.msgRule.ruleId;
        //   });
        // payloadObj.sysRuleDetails = this.arrRuleValidation;
        // console.log(payloadObj);
        console.log(this.ruleConfig);
        debugger;
        this.rules.saveRuleconfig(this.ruleConfig, this.currentUser).subscribe((data) => {
            if (data) {
                console.log(data);
                this.ruleConfig = data;
                sweetalert2__WEBPACK_IMPORTED_MODULE_3___default.a.fire({ text: 'Record saved successfully' });
                this.auditShowStatus = true;
                this.disableSubmit = true;
            }
        }, err => {
            sweetalert2__WEBPACK_IMPORTED_MODULE_3___default.a.fire({ text: 'Failed save the record' });
        });
        //     console.log(this.ruleDto);
        //   this.ruleDto.msgRule=this.ruleConfig;
        //   this.ruleDto.msgRule.creatorId=this.currentUser;
        //   this.arrRuleValidation.forEach(data=>{
        //     data.ruleId=this.ruleDto.msgRule.ruleId;
        //     data.sourceTransDelId=this.ruleConfig.sourceTranslationId;
        //    data.validationSyatems=this.validationData;
        //   });
        //  console.log(this.arrRuleValidation);
        //   this.ruleDto.msgValidation=this.arrRuleValidation;
        //   console.log(this.ruleDto);
        //   this.rules.saveRuleconfig(this.ruleDto,this.currentUser).subscribe(data=>{
        //     console.log(data);
        //     if(data)
        //     {
        //       Swal.fire({
        //         text:'Record Saved'
        //       })
        //     }
        //   },(err)=>{
        //     Swal.fire({
        //       text:'Internal server error'
        //     })
        //   })  
    }
    onNext() {
        // this.showpBar = true;
        this.showRuleValidation = true;
    }
    onReset() {
        this.disableSubmit = false;
        this.desSystem = "";
        this.srcSystem = "";
        this.validationData = "";
    }
    Previous() {
        this.showRuleValidation = false;
    }
    // fetching ISo
    fetchingIso() {
        this.addsystem.fetchingIsoForTcp().subscribe(isoResp => {
            this.isoRespData = isoResp;
            console.log(this.isoRespData);
            this.messageBasisIso = isoResp.map((data) => {
                return data.messageKey;
            });
        });
    }
    //fetching Xml
    fetchingXMl() {
        this.addsystem.gettinXMLmsgIncoming().subscribe(xmlResp => {
            console.log(xmlResp);
            // this.xmlRespData=xmlResp.map((data)=>{
            //   return data.messageBasis;
            // });
        });
    }
    ruleIdInvalidOrNot(e) {
        console.log(e);
        var regexp = /^[a-zA-Z0-9-_]+$/;
        console.log(this.ruleIdInvalid);
        if (e) {
            if (e.search(regexp) === -1) {
                this.ruleIdInvalid = true;
                console.log("1" + " " + this.ruleIdInvalid);
            }
            else {
                this.ruleIdInvalid = false;
                console.log("2" + " " + this.ruleIdInvalid);
            }
        }
    }
    onPrevoius() {
        this.showRuleValidation = false;
    }
    onValidtion(event, i) {
        console.log(this.srcSystem, this.desSystem);
        console.log(event.value);
        this.validationData = event.option.value;
        if (this.selectedDocumentTypes2[i]) {
            this.headerTagData1 = this.externalsystem.filter(val => val !== this.selectedDocumentTypes2[i]);
        }
        this.selectedDocumentTypes2[i] = this.validationData;
        this.headerTagData1.push(this.validationData);
        console.log(this.validationData);
        this.rules.gettingTranslationData(this.validationData).subscribe(resp => {
            console.log(resp);
            if (resp) {
                this.validationTransData = resp;
                // this.multipleValidation=resp;
                this.multipleValidation[i].messageType = this.validationTransData.messageType;
                this.multipleValidation[i].service = this.validationTransData.serviceName;
                this.multipleValidation[i].operation = this.validationTransData.operationName;
                // this.ruleConfig.sourceTranslationId=resp.transId;
                this.gettingoperationSndservForValidation(this.validationData, resp.messageType);
            }
        });
        this.externalsystem = this.tempArrayData;
    }
    onSubmitofValidtaion() {
        if (this.validationData) {
            sweetalert2__WEBPACK_IMPORTED_MODULE_3___default.a.fire({ text: 'Record Saved SuccessFully' });
        }
    }
    addCreateRule() {
        this.arrRuleValidation.push({ id: '', messageKey: '', validationDetail: '', validationMethod: '', ruleId: '' });
    }
    addValidation() {
        this.add = true;
        this.multipleValidation.push({ messageType: '', messageKey: '', operation: '', service: '', validationSystem: '', id: '', ruleId: '' });
    }
    removeValidation(i) {
        this.multipleValidation.splice(i, 1);
    }
    removeCreateRule(i) {
        this.arrRuleValidation.splice(i, 1);
    }
};
CreateRulesComponent.ctorParameters = () => [
    { type: src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_4__["AddSystemService"] },
    { type: src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__["RulesService"] }
];
CreateRulesComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-create-rules',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./create-rules.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/create-rules/create-rules.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./create-rules.component.css */ "./src/app/views/sias-v2/rules/create-rules/create-rules.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_4__["AddSystemService"], src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__["RulesService"]])
], CreateRulesComponent);

class RuleConfig {
}
class RuleValidation {
}
class RuleDto {
}
class MultipleValidation {
}


/***/ }),

/***/ "./src/app/views/sias-v2/rules/create-rules/edit-rules/edit-rules.component.css":
/*!**************************************************************************************!*\
  !*** ./src/app/views/sias-v2/rules/create-rules/edit-rules/edit-rules.component.css ***!
  \**************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/* ::ng-deep .mat-form-field-flex > .mat-form-field-infix { padding: 0.4em 0px !important;}\r\n::ng-deep .mat-form-field-label-wrapper { top: -1.5em; }\r\n\r\n::ng-deep .mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label {\r\n    transform: translateY(-1.1em) scale(.75);\r\n    width: 80.33333%;\r\n} */\r\n/* ::ng-deep .mat-form-field-flex > .mat-form-field-infix { width: 30% !important;} */\r\n::ng-deep.mat-form-field-appearance-outline .mat-form-field-flex\r\n{\r\n    width: 160px !important;\r\n    height: 50px !important;\r\n}\r\n.mat-raised-button {\r\n    width: -webkit-fit-content;\r\n    width: -moz-fit-content;\r\n    width: fit-content;\r\n    height: 20px;\r\n    line-height: 27px;\r\n    min-height: 27px;\r\n    vertical-align: top;\r\n    font-size: 11px;\r\n    padding: 0 0;\r\n    margin: 0;\r\n    }\r\n#customers {\r\n        font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\r\n        border-collapse: collapse;\r\n        width: 100%;\r\n      }\r\n#customers td, #customers th {\r\n        border: 1px solid #ddd;\r\n        padding: 8px;\r\n        text-align: center;\r\n        \r\n      }\r\n#customers tr:nth-child(even){background-color: #f2f2f2;}\r\n#customers th {\r\n        padding-top: 12px;\r\n        padding-bottom: 12px;\r\n        text-align: left;\r\n        background-color:rgb(97, 178, 216);\r\n        color: white;\r\n      }\r\n     \r\n      \r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9ydWxlcy9jcmVhdGUtcnVsZXMvZWRpdC1ydWxlcy9lZGl0LXJ1bGVzLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBQ0gscUZBQXFGO0FBQ3JGOztJQUVJLHVCQUF1QjtJQUN2Qix1QkFBdUI7QUFDM0I7QUFDQTtJQUNJLDBCQUFrQjtJQUFsQix1QkFBa0I7SUFBbEIsa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQixlQUFlO0lBQ2YsWUFBWTtJQUNaLFNBQVM7SUFDVDtBQUNBO1FBQ0kseURBQXlEO1FBQ3pELHlCQUF5QjtRQUN6QixXQUFXO01BQ2I7QUFDQTtRQUNFLHNCQUFzQjtRQUN0QixZQUFZO1FBQ1osa0JBQWtCOztNQUVwQjtBQUVBLDhCQUE4Qix5QkFBeUIsQ0FBQztBQUV4RDtRQUNFLGlCQUFpQjtRQUNqQixvQkFBb0I7UUFDcEIsZ0JBQWdCO1FBQ2hCLGtDQUFrQztRQUNsQyxZQUFZO01BQ2QiLCJmaWxlIjoic3JjL2FwcC92aWV3cy9zaWFzLXYyL3J1bGVzL2NyZWF0ZS1ydWxlcy9lZGl0LXJ1bGVzL2VkaXQtcnVsZXMuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIDo6bmctZGVlcCAubWF0LWZvcm0tZmllbGQtZmxleCA+IC5tYXQtZm9ybS1maWVsZC1pbmZpeCB7IHBhZGRpbmc6IDAuNGVtIDBweCAhaW1wb3J0YW50O31cclxuOjpuZy1kZWVwIC5tYXQtZm9ybS1maWVsZC1sYWJlbC13cmFwcGVyIHsgdG9wOiAtMS41ZW07IH1cclxuXHJcbjo6bmctZGVlcCAubWF0LWZvcm0tZmllbGQtYXBwZWFyYW5jZS1vdXRsaW5lLm1hdC1mb3JtLWZpZWxkLWNhbi1mbG9hdC5tYXQtZm9ybS1maWVsZC1zaG91bGQtZmxvYXQgLm1hdC1mb3JtLWZpZWxkLWxhYmVsIHtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMS4xZW0pIHNjYWxlKC43NSk7XHJcbiAgICB3aWR0aDogODAuMzMzMzMlO1xyXG59ICovXHJcbi8qIDo6bmctZGVlcCAubWF0LWZvcm0tZmllbGQtZmxleCA+IC5tYXQtZm9ybS1maWVsZC1pbmZpeCB7IHdpZHRoOiAzMCUgIWltcG9ydGFudDt9ICovXHJcbjo6bmctZGVlcC5tYXQtZm9ybS1maWVsZC1hcHBlYXJhbmNlLW91dGxpbmUgLm1hdC1mb3JtLWZpZWxkLWZsZXhcclxue1xyXG4gICAgd2lkdGg6IDE2MHB4ICFpbXBvcnRhbnQ7XHJcbiAgICBoZWlnaHQ6IDUwcHggIWltcG9ydGFudDtcclxufVxyXG4ubWF0LXJhaXNlZC1idXR0b24ge1xyXG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG4gICAgaGVpZ2h0OiAyMHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDI3cHg7XHJcbiAgICBtaW4taGVpZ2h0OiAyN3B4O1xyXG4gICAgdmVydGljYWwtYWxpZ246IHRvcDtcclxuICAgIGZvbnQtc2l6ZTogMTFweDtcclxuICAgIHBhZGRpbmc6IDAgMDtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIH1cclxuICAgICNjdXN0b21lcnMge1xyXG4gICAgICAgIGZvbnQtZmFtaWx5OiBcIlRyZWJ1Y2hldCBNU1wiLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xyXG4gICAgICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIH1cclxuICAgICAgI2N1c3RvbWVycyB0ZCwgI2N1c3RvbWVycyB0aCB7XHJcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2RkZDtcclxuICAgICAgICBwYWRkaW5nOiA4cHg7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgIFxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAjY3VzdG9tZXJzIHRyOm50aC1jaGlsZChldmVuKXtiYWNrZ3JvdW5kLWNvbG9yOiAjZjJmMmYyO31cclxuICAgICAgXHJcbiAgICAgICNjdXN0b21lcnMgdGgge1xyXG4gICAgICAgIHBhZGRpbmctdG9wOiAxMnB4O1xyXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAxMnB4O1xyXG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjpyZ2IoOTcsIDE3OCwgMjE2KTtcclxuICAgICAgICBjb2xvcjogd2hpdGU7XHJcbiAgICAgIH1cclxuICAgICBcclxuICAgICAgIl19 */");

/***/ }),

/***/ "./src/app/views/sias-v2/rules/create-rules/edit-rules/edit-rules.component.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/views/sias-v2/rules/create-rules/edit-rules/edit-rules.component.ts ***!
  \*************************************************************************************/
/*! exports provided: EditRulesComponent, RuleConfig, RuleValidation, RuleDto, MultipleValidation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditRulesComponent", function() { return EditRulesComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleConfig", function() { return RuleConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleValidation", function() { return RuleValidation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleDto", function() { return RuleDto; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultipleValidation", function() { return MultipleValidation; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/services/addSys/add-system.service */ "./src/app/shared/services/addSys/add-system.service.ts");
/* harmony import */ var src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/services/rules/rules.service */ "./src/app/shared/services/rules/rules.service.ts");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_5__);






let EditRulesComponent = class EditRulesComponent {
    constructor(cdr, addsystem, rules, router) {
        this.cdr = cdr;
        this.addsystem = addsystem;
        this.rules = rules;
        this.router = router;
        this.showRuleValidation = false;
        this.showpBar = false;
        this.isEdit = false;
        this.ruleConfig = new RuleConfig();
        this.authorizeDone = false;
        this.deleted = false;
        this.ruleValidation = new RuleValidation();
        this.arrRuleValidation = [];
        this.ruleDto = new RuleDto();
        this.multipleValidation = [];
        this.multipleValidationData = [];
        this.valCount = 0;
        this.sourceSysData = new RuleConfig();
        this.destinationSysData = new RuleConfig();
        this.ModifyCreateRule = false;
    }
    ngOnInit() {
        this.currentUser = localStorage.getItem('userFromLogin');
        this.navSubscription = this.addsystem.getNavParam.subscribe(data => this.editRule = data);
        console.log("in edit", this.editRule);
        this.ruleConfig.ruleId = this.editRule["ruleId"];
        this.ruleConfig.ruleName = this.editRule["ruleName"];
        this.ruleConfig.approvedEver = this.editRule["approvedEver"];
        this.ruleConfig.recordStatus = this.editRule["recordStatus"];
        this.ruleConfig.approvedStatus = this.editRule["approvedStatus"];
        this.ruleConfig.approverId = this.editRule["approverId"];
        this.ruleConfig.createdTime = this.editRule["createdTime"];
        this.ruleConfig.creatorId = this.editRule["creatorId"];
        this.ruleConfig.sysRuleId = this.editRule["sysRuleId"];
        this.ruleConfig.versionNo = this.editRule["versionNo"];
        this.multipleValidationData = this.editRule["mdmtValidationSystemData"];
        this.multipleValidation = this.editRule["mdmtValidationSystemData"];
        console.log(this.editRule["sourceSys"]);
        this.arrRuleValidation = this.editRule["sysRuleDetails"];
        console.log(this.arrRuleValidation);
        if (this.ruleConfig.recordStatus == "C") {
            console.log(this.ruleConfig.recordStatus);
            this.authBtnHide = true;
            this.reopenBtn = false;
        }
        this.gettingExternalSsytem();
        this.rules.gettingSysCode(this.editRule["sourceTranslationId"]).subscribe(sourceresp => {
            console.log(sourceresp);
            if (sourceresp) {
                this.ruleConfig.sourceTranslationId = "";
                this.ruleConfig.sourceTranslationId = sourceresp.systemCode;
                this.sourcedata = this.ruleConfig.sourceTranslationId;
                this.cdr.markForCheck();
                this.onSlectionExternalSystem(this.ruleConfig.sourceTranslationId);
            }
        });
        this.rules.gettingSysCode(this.editRule["targetTranslationId"]).subscribe(targetResp => {
            console.log(targetResp);
            this.ruleConfig.targetTranslationId = targetResp.systemCode;
            this.destinationId = this.ruleConfig.targetTranslationId;
            this.destinaltionSelection(this.ruleConfig.targetTranslationId);
        });
        this.multipleValidation.forEach((el, i) => {
            console.log(el);
            this.rules.gettingSysCode(el.id).subscribe(valReps => {
                console.log("valReps", valReps);
            });
            this.onValidtion(el.validationSystem, i);
        });
        this.multipleValidationData.forEach((el, i) => {
            this.rules.gettingSysCode(el.id).subscribe(valReps => {
                console.log("valReps vvvvvv", valReps);
            });
            this.onValidtion(el.validationSystem, i);
        });
        // this.fetchingIso();
        // this.fetchingXMl();
        // this.arrRuleValidation.push({id:'',ruleId:'',validationDetail:'',validationMethod:''});
        // this.multipleValidation.push({ messageType: '', operation: '', service: '', validationSystem: '', id: '', ruleId: '' });
    }
    onEdit() {
        this.isEdit = true;
        if (this.ruleConfig.approvedStatus == "U") {
            this.isEdit = false;
            sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire("UnAuthorized record can't be edited.");
        }
        if (this.ruleConfig.recordStatus == "C") {
            this.isEdit = false;
            sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire("Closed record can't be edited.");
        }
    }
    gettingExternalSsytem() {
        this.rules.gettingExternalsystem().subscribe(extsysRes => {
            console.log(extsysRes);
            this.externalsystem = extsysRes;
        });
    }
    onSlectionExternalSystem(event) {
        console.log("eve", event);
        // this.systemName = event.value;
        this.sourcesystem = event;
        this.rules.gettingTranslationData(this.sourcesystem).subscribe(resp => {
            console.log(resp);
            if (resp) {
                this.sourceSysData = resp;
                this.ruleConfig.sourceTranslationId = resp.transId;
                this.gettingoperationAndServiceFroSourceSystem(this.sourcesystem, resp.messageType);
            }
        });
    }
    onSelectionOFMessageType(event) {
        this.msgType = event.value;
        // this.gettingoperationAndServiceFroSourceSystem(this.sourcesystem, this.msgType);
    }
    // for source 
    gettingoperationAndServiceFroSourceSystem(ssysName, msgType) {
        console.log("ssysName", ssysName);
        this.rules.gettingoperationAndService(ssysName, msgType, this.currentUser).subscribe(sourceResp => {
            this.sourceOperation = sourceResp.OPERATION;
            this.sourceService = sourceResp.SERVICE;
            this.sourceDetails = sourceResp.MdmtSystemChannel[0].messageChannel;
            this.messageBasisIso = sourceResp.MdmtSystemService;
            for (let k = 0; k <= this.messageBasisIso.length; k++) {
                // this.messageBasisIso[k].setValue('validationMethod', this.arrRuleValidation[0].validationMethod);
                // this.messageBasisIso[k].setValue('validationDetail', this.arrRuleValidation[0].validationDetail);
                this.messageBasisIso[k].validationMethod = this.arrRuleValidation[0].validationMethod;
                this.messageBasisIso[k].validationDetail = this.arrRuleValidation[0].validationDetail;
            }
        }, (err => {
            console.log(err);
        }));
    }
    // For Destination
    destinaltionSelection(event) {
        console.log("ev", event);
        this.destination = event;
        this.rules.gettingTranslationData(this.destination).subscribe(resp => {
            console.log(resp);
            if (resp) {
                this.destinationSysData = resp;
                this.ruleConfig.targetTranslationId = resp.transId;
            }
        });
    }
    ondestinationMsgType(event) {
        console.log("ev", event.value);
        this.destiMsgType = event.value;
        this.operationAndservDstination(this.destination, this.destiMsgType);
    }
    operationAndservDstination(destination, msgType) {
        this.rules.gettingoperationAndService(destination, msgType, this.currentUser).subscribe(destination => {
            console.log(destination);
            this.destinationRespOperation = destination.OPERATION;
            this.destinatioRespService = destination.SERVICE;
            // console.log(this.destinationRespOperation);
        }, (err => {
            console.log(err);
        }));
    }
    //validation sys
    onvalidateMsgType(event) {
        this.gettingoperationSndservForValidation(this.validationData, event.value);
    }
    gettingoperationSndservForValidation(valData, msg) {
        this.rules.gettingoperationAndService(valData, msg, this.currentUser).subscribe(valResp => {
            console.log(valResp);
            if (valResp) {
                this.valOperation = valResp.OPERATION;
                this.valService = valResp.SERVICE;
                this.valDeatils = valResp.MdmtSystemChannel[0].messageChannel;
                console.log("valDe", this.valDeatils);
                this.xmlRespData = valResp.MdmtSystemService;
                console.log(this.xmlRespData.length);
            }
            // this.destinationRespOperation=destination[0];
            // console.log(this.destinationRespOperation);
        }, (err => {
            console.log(err);
        }));
    }
    // save
    submittingCreateRule() {
        // let arrayObj = this.multipleValidation.map(item => {
        //   return {
        //     validationSystems: item.validationSystem
        //   };
        // });
        // this.ruleConfig.validationSystems = arrayObj;
        // this.ruleConfig.creatorId = this.currentUser;
        // console.log(this.ruleConfig);
        // let payloadObj: any = {};
        // payloadObj = this.ruleConfig;
        // payloadObj.mdmtValidationSystemData = this.multipleValidation;
        // this.ruleDto.msgRule = this.ruleConfig;
        // this.arrRuleValidation.forEach(data => {
        //   data.ruleId = this.ruleDto.msgRule.ruleId;
        // });
        // payloadObj.sysRuleDetails = this.arrRuleValidation;
        // console.log(payloadObj);
        this.multipleValidation = this.multipleValidationData;
        this.ruleConfig.mdmtValidationSystemData = this.multipleValidation;
        this.ruleConfig.mdmtValidationSystemData.forEach(el => {
            el.ruleId = this.ruleConfig.ruleId;
        });
        // console.log(this.ruleConfig);
        this.arrRuleValidation.forEach(el => { el.ruleId = this.ruleConfig.ruleId; });
        console.log(this.arrRuleValidation);
        this.ruleConfig.sysRuleDetails = this.arrRuleValidation;
        console.log(this.ruleConfig);
        this.rules.editRuleConfig("update", this.ruleConfig, this.currentUser).subscribe((data) => {
            if (data) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire({
                    text: 'Record Saved successfully'
                });
                this.ModifyCreateRule = true;
            }
        }, err => {
            sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire({ text: 'Failed To Save the Record' });
        });
        //     console.log(this.ruleDto);
        //   this.ruleDto.msgRule=this.ruleConfig;
        //   this.ruleDto.msgRule.creatorId=this.currentUser;
        //   this.arrRuleValidation.forEach(data=>{
        //     data.ruleId=this.ruleDto.msgRule.ruleId;
        //     data.sourceTransDelId=this.ruleConfig.sourceTranslationId;
        //    data.validationSyatems=this.validationData;
        //   });
        //  console.log(this.arrRuleValidation);
        //   this.ruleDto.msgValidation=this.arrRuleValidation;
        //   console.log(this.ruleDto);
        //   this.rules.saveRuleconfig(this.ruleDto,this.currentUser).subscribe(data=>{
        //     console.log(data);
        //     if(data)
        //     {
        //       Swal.fire({
        //         text:'Record Saved'
        //       })
        //     }
        //   },(err)=>{
        //     Swal.fire({
        //       text:'Internal server error'
        //     })
        //   })  
    }
    onNext() {
        // this.showpBar = true;
        this.showRuleValidation = true;
    }
    Previous() {
        this.showRuleValidation = false;
    }
    // fetching ISo
    fetchingIso() {
        this.addsystem.fetchingIsoForTcp().subscribe(isoResp => {
            this.isoRespData = isoResp;
            console.log(this.isoRespData);
            this.messageBasisIso = isoResp.map((data) => {
                return data.messageKey;
            });
        });
    }
    //fetching Xml
    fetchingXMl() {
        this.addsystem.gettinXMLmsgIncoming().subscribe(xmlResp => {
            console.log(xmlResp);
            // this.xmlRespData=xmlResp.map((data)=>{
            //   return data.messageBasis;
            // });
        });
    }
    onPrevoius() {
        this.showRuleValidation = false;
    }
    onValidtion(event, i) {
        console.log(event);
        this.validationData = event;
        console.log(this.validationData);
        this.rules.gettingTranslationData(this.validationData).subscribe(resp => {
            console.log(resp);
            if (resp) {
                this.validationTransData = resp;
                this.multipleValidation[i].messageType = resp.messageType;
                this.multipleValidation[i].service = resp.serviceName;
                this.multipleValidation[i].operation = resp.operationName;
                // this.multipleValidation[i].validationSystem = resp.transId;
                this.multipleValidationData[i].messageType = resp.messageType;
                this.multipleValidationData[i].service = resp.serviceName;
                this.multipleValidationData[i].operation = resp.operationName;
                // this.multipleValidation[i].validationSystem = this.validationData;
                console.log(this.multipleValidationData);
                // this.multipleValidation[i].validationSystem = resp.transId;
                this.gettingoperationSndservForValidation(this.validationData, resp.messageType);
            }
        });
    }
    onSubmitofValidtaion() {
        if (this.validationData) {
            sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire({ text: 'Record Saved SuccessFully' });
        }
    }
    addCreateRule() {
        this.arrRuleValidation.push({ id: '', validationDetail: '', validationMethod: '', ruleId: '' });
    }
    addValidation() {
        this.multipleValidationData.push({ messageType: '', operation: '', service: '', validationSystem: '', id: '', ruleId: '' });
    }
    removeValidation(i) {
        this.multipleValidationData.splice(i, 1);
    }
    removeCreateRule(i) {
        this.arrRuleValidation.splice(i, 1);
    }
    onAuthOfRule() {
        // let payloadObj: any = {};
        // payloadObj = this.ruleConfig;
        // payloadObj.mdmtValidationSystemData = this.multipleValidation;
        // this.ruleDto.msgRule = this.ruleConfig;
        // this.arrRuleValidation.forEach(data => {
        //   data.ruleId = this.ruleDto.msgRule.ruleId;
        // });
        // payloadObj.sysRuleDetails = this.arrRuleValidation;
        // console.log(payloadObj);
        if (this.ruleConfig.creatorId == this.currentUser) {
            sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire({ text: "Maker cannot authorize!" });
        }
        else {
            this.ruleConfig.mdmtValidationSystemData = this.multipleValidation;
            this.ruleConfig.mdmtValidationSystemData.forEach(el => {
                el.ruleId = this.ruleConfig.ruleId;
            });
            // console.log(this.ruleConfig);
            this.arrRuleValidation.forEach(el => { el.ruleId = this.ruleConfig.ruleId; });
            console.log(this.arrRuleValidation);
            this.ruleConfig.sysRuleDetails = this.arrRuleValidation;
            console.log(this.ruleConfig);
            this.rules.editRuleConfig("auth", this.ruleConfig, this.currentUser).subscribe(authResp => {
                console.log(authResp);
                if (authResp) {
                    this.ruleConfig = authResp;
                    this.authorizeDone = true;
                    sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire({ text: "Record Authorized" });
                }
            }, (err) => {
                sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire({ text: "Failed To Authorize" });
            });
        }
    }
    onCloseOfRule() {
        // let payloadObj: any = {};
        // payloadObj = this.ruleConfig;
        // payloadObj.mdmtValidationSystemData = this.multipleValidation;
        // this.ruleDto.msgRule = this.ruleConfig;
        // this.arrRuleValidation.forEach(data => {
        //   data.ruleId = this.ruleDto.msgRule.ruleId;
        // });
        // payloadObj.sysRuleDetails = this.arrRuleValidation;
        // console.log(payloadObj);
        this.ruleConfig.mdmtValidationSystemData = this.multipleValidation;
        this.ruleConfig.mdmtValidationSystemData.forEach(el => {
            el.ruleId = this.ruleConfig.ruleId;
        });
        // console.log(this.ruleConfig);
        this.arrRuleValidation.forEach(el => { el.ruleId = this.ruleConfig.ruleId; });
        console.log(this.arrRuleValidation);
        this.ruleConfig.sysRuleDetails = this.arrRuleValidation;
        console.log(this.ruleConfig);
        console.log(this.reopenBtn);
        this.rules.editRuleConfig("close", this.ruleConfig, this.currentUser).subscribe(closeResp => {
            console.log(closeResp);
            if (closeResp) {
                this.ruleConfig = closeResp;
                this.editBtn = true;
                this.authBtn = true;
                this.deleted = false;
                this.reopenBtn = false;
                sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire({ text: "Record Closed SuccessFully" });
            }
        }, err => {
            sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire({ text: "Failed to close the Record" });
        });
    }
    onOpenRule() {
        // let payloadObj: any = {};
        // payloadObj = this.ruleConfig;
        // payloadObj.mdmtValidationSystemData = this.multipleValidation;
        // this.ruleDto.msgRule = this.ruleConfig;
        // this.arrRuleValidation.forEach(data => {
        //   data.ruleId = this.ruleDto.msgRule.ruleId;
        // });
        // payloadObj.sysRuleDetails = this.arrRuleValidation;
        // console.log(payloadObj);
        this.ruleConfig.mdmtValidationSystemData = this.multipleValidation;
        this.ruleConfig.mdmtValidationSystemData.forEach(el => {
            el.ruleId = this.ruleConfig.ruleId;
        });
        // console.log(this.ruleConfig);
        this.arrRuleValidation.forEach(el => { el.ruleId = this.ruleConfig.ruleId; });
        console.log(this.arrRuleValidation);
        this.ruleConfig.sysRuleDetails = this.arrRuleValidation;
        console.log(this.ruleConfig);
        this.rules.editRuleConfig("open", this.ruleConfig, this.currentUser).subscribe(openResp => {
            console.log(openResp);
            if (openResp) {
                this.ruleConfig = openResp;
                this.authBtnHide = false;
                this.editBtn = false;
                this.authBtn = false;
                sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire({ text: "Record Open Successfully" });
            }
        }, err => {
            sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire({ text: "Failed to open the Record" });
        });
    }
    deleteRule() {
        // let payloadObj: any = {};
        // payloadObj = this.ruleConfig;
        // payloadObj.mdmtValidationSystemData = this.multipleValidation;
        // this.ruleDto.msgRule = this.ruleConfig;
        // this.arrRuleValidation.forEach(data => {
        //   data.ruleId = this.ruleDto.msgRule.ruleId;
        // });
        // payloadObj.sysRuleDetails = this.arrRuleValidation;
        // console.log(payloadObj);
        this.ruleConfig.mdmtValidationSystemData = this.multipleValidation;
        this.ruleConfig.mdmtValidationSystemData.forEach(el => {
            el.ruleId = this.ruleConfig.ruleId;
        });
        // console.log(this.ruleConfig);
        this.arrRuleValidation.forEach(el => { el.ruleId = this.ruleConfig.ruleId; });
        console.log(this.arrRuleValidation);
        this.ruleConfig.sysRuleDetails = this.arrRuleValidation;
        console.log(this.ruleConfig);
        this.rules.onDeleteRuleCongif(this.ruleConfig.sysRuleId, this.currentUser).subscribe((response) => {
            if (response) {
                this.deleted = true;
                this.editBtn = true;
                this.authBtn = true;
                this.closeBtn = true;
                sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire({ title: 'Deleted Successfully!',
                    confirmButtonText: 'Ok'
                }).then((result) => {
                    if (result) {
                        this.router.navigateByUrl('/sias-v2/ruleSummary');
                    }
                });
            }
            else {
                sweetalert2__WEBPACK_IMPORTED_MODULE_5___default.a.fire("Failed to delete the reocrd");
            }
        });
    }
};
EditRulesComponent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] },
    { type: src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__["AddSystemService"] },
    { type: src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_4__["RulesService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] }
];
EditRulesComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-edit-rules',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./edit-rules.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/create-rules/edit-rules/edit-rules.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./edit-rules.component.css */ "./src/app/views/sias-v2/rules/create-rules/edit-rules/edit-rules.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],
        src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__["AddSystemService"], src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_4__["RulesService"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"]])
], EditRulesComponent);

class RuleConfig {
}
class RuleValidation {
}
class RuleDto {
}
class MultipleValidation {
}


/***/ }),

/***/ "./src/app/views/sias-v2/rules/rule-summary/rule-summary.component.css":
/*!*****************************************************************************!*\
  !*** ./src/app/views/sias-v2/rules/rule-summary/rule-summary.component.css ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("table {\r\n  border-collapse: initial;\r\n  width:100%;\r\n  text-align: center !important;\r\n}\r\n:host ::ng-deep .mat-sort-header-container { \r\n  display: flex;  \r\n  justify-content: center; \r\n}\r\nth.mat-header-cell, td.mat-cell { \r\n  text-align: center; \r\n}\r\n.mat-header-cell {\r\n  text-align: center;\r\n  height: 25px !important;\r\n\r\n}\r\n.mat-cell {\r\n  text-align: center;\r\n  height: 25px !important;\r\n\r\n}\r\ntr:nth-child(even) {\r\n  height: 25px !important;\r\n}\r\nth {\r\n  font-weight: small;\r\n  height: 25px !important;\r\n  text-align: center;\r\n}\r\ntr {\r\n  font-weight: small;\r\n  height: 25px !important;\r\n  text-align: center;\r\n}\r\nmat-paginator {\r\n  width: auto !important;\r\n  height: 40px !important;\r\n}\r\nmd-pagination-wrapper {\r\n  width: auto !important;\r\n  height: 40px !important;\r\n}\r\n.mat-raised-button {\r\n  width: -webkit-fit-content;\r\n  width: -moz-fit-content;\r\n  width: fit-content;\r\n  height: 20px;\r\n  line-height: 27px;\r\n  min-height: 27px;\r\n  vertical-align: top;\r\n  font-size: 11px;\r\n  padding: 0 0;\r\n  margin: 0;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9ydWxlcy9ydWxlLXN1bW1hcnkvcnVsZS1zdW1tYXJ5LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSx3QkFBd0I7RUFDeEIsVUFBVTtFQUNWLDZCQUE2QjtBQUMvQjtBQUNBO0VBQ0UsYUFBYTtFQUNiLHVCQUF1QjtBQUN6QjtBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCO0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsdUJBQXVCOztBQUV6QjtBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLHVCQUF1Qjs7QUFFekI7QUFHQTtFQUNFLHVCQUF1QjtBQUN6QjtBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLHVCQUF1QjtFQUN2QixrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQix1QkFBdUI7RUFDdkIsa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxzQkFBc0I7RUFDdEIsdUJBQXVCO0FBQ3pCO0FBRUE7RUFDRSxzQkFBc0I7RUFDdEIsdUJBQXVCO0FBQ3pCO0FBS0E7RUFDRSwwQkFBa0I7RUFBbEIsdUJBQWtCO0VBQWxCLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osaUJBQWlCO0VBQ2pCLGdCQUFnQjtFQUNoQixtQkFBbUI7RUFDbkIsZUFBZTtFQUNmLFlBQVk7RUFDWixTQUFTO0FBQ1giLCJmaWxlIjoic3JjL2FwcC92aWV3cy9zaWFzLXYyL3J1bGVzL3J1bGUtc3VtbWFyeS9ydWxlLXN1bW1hcnkuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbInRhYmxlIHtcclxuICBib3JkZXItY29sbGFwc2U6IGluaXRpYWw7XHJcbiAgd2lkdGg6MTAwJTtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcclxufVxyXG46aG9zdCA6Om5nLWRlZXAgLm1hdC1zb3J0LWhlYWRlci1jb250YWluZXIgeyBcclxuICBkaXNwbGF5OiBmbGV4OyAgXHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IFxyXG59XHJcblxyXG50aC5tYXQtaGVhZGVyLWNlbGwsIHRkLm1hdC1jZWxsIHsgXHJcbiAgdGV4dC1hbGlnbjogY2VudGVyOyBcclxufVxyXG5cclxuLm1hdC1oZWFkZXItY2VsbCB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xyXG5cclxufVxyXG5cclxuLm1hdC1jZWxsIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7XHJcblxyXG59XHJcblxyXG5cclxudHI6bnRoLWNoaWxkKGV2ZW4pIHtcclxuICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcclxufVxyXG5cclxudGgge1xyXG4gIGZvbnQtd2VpZ2h0OiBzbWFsbDtcclxuICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxudHIge1xyXG4gIGZvbnQtd2VpZ2h0OiBzbWFsbDtcclxuICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxubWF0LXBhZ2luYXRvciB7XHJcbiAgd2lkdGg6IGF1dG8gIWltcG9ydGFudDtcclxuICBoZWlnaHQ6IDQwcHggIWltcG9ydGFudDtcclxufVxyXG5cclxubWQtcGFnaW5hdGlvbi13cmFwcGVyIHtcclxuICB3aWR0aDogYXV0byAhaW1wb3J0YW50O1xyXG4gIGhlaWdodDogNDBweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG4ubWF0LXJhaXNlZC1idXR0b24ge1xyXG4gIHdpZHRoOiBmaXQtY29udGVudDtcclxuICBoZWlnaHQ6IDIwcHg7XHJcbiAgbGluZS1oZWlnaHQ6IDI3cHg7XHJcbiAgbWluLWhlaWdodDogMjdweDtcclxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xyXG4gIGZvbnQtc2l6ZTogMTFweDtcclxuICBwYWRkaW5nOiAwIDA7XHJcbiAgbWFyZ2luOiAwO1xyXG59Il19 */");

/***/ }),

/***/ "./src/app/views/sias-v2/rules/rule-summary/rule-summary.component.ts":
/*!****************************************************************************!*\
  !*** ./src/app/views/sias-v2/rules/rule-summary/rule-summary.component.ts ***!
  \****************************************************************************/
/*! exports provided: RuleSummaryComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleSummaryComponent", function() { return RuleSummaryComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/services/rules/rules.service */ "./src/app/shared/services/rules/rules.service.ts");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/shared/services/addSys/add-system.service */ "./src/app/shared/services/addSys/add-system.service.ts");







let RuleSummaryComponent = class RuleSummaryComponent {
    constructor(rulesSummary, router, addSystem) {
        this.rulesSummary = rulesSummary;
        this.router = router;
        this.addSystem = addSystem;
        this.displayedColumns = ['ruleId', 'ruleName', 'sourceTranslationId', 'targetTranslationId', 'creatorId', 'createdTime'];
    }
    ngOnInit() {
        this.fetchingallTheRules();
    }
    fetchingallTheRules() {
        this.rulesSummary.fetchingRules().subscribe(rulesummaryResp => {
            console.log(rulesummaryResp);
            if (rulesummaryResp) {
                this.ruleData = rulesummaryResp;
                // this.setForm(this.sumaData);
                this.dataSource = new _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatTableDataSource"](this.ruleData);
                this.dataSource.paginator = this.paginator;
                this.dataSource.sort = this.sort;
            }
            else {
                sweetalert2__WEBPACK_IMPORTED_MODULE_3___default.a.fire({
                    type: 'error',
                    text: 'Server Error',
                });
            }
        });
    }
    editcreateRule(row) {
        console.log(row);
        this.rulesSummary.gettingCreateRuleById(row.ruleId).subscribe(resp => {
            console.log(resp);
            let queryParams = {
                'ruleId': resp.ruleId,
                'ruleName': resp.ruleName,
                'recordStatus': resp.recordStatus,
                'approvedEver': resp.approvedEver,
                'approvedStatus': resp.approvedStatus,
                'approverId': resp.approverId,
                'createdTime': resp.createdTime,
                'creatorId': resp.creatorId,
                'sysRuleDetails': resp.sysRuleDetails,
                'sourceTranslationId': resp.sourceTranslationId,
                'targetTranslationId': resp.targetTranslationId,
                'mdmtValidationSystemData': resp.mdmtValidationSystemData,
                'sysRuleId': resp.sysRuleId,
                'versionNo': resp.versionNo
                // 'sourceTransDelId':resp[0].sourceTransDelId,
                // 'validationDetail':resp[0].validationDetail,
                // 'validationMethod':resp[0].validationMethod,
                // 'validationSystems':resp[0].validationSystems
            };
            this.addSystem.sendNavParam(queryParams);
            this.router.navigateByUrl('/sias-v2/editRules');
            console.log(queryParams);
        });
    }
};
RuleSummaryComponent.ctorParameters = () => [
    { type: src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__["RulesService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"] },
    { type: src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_6__["AddSystemService"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_angular_material__WEBPACK_IMPORTED_MODULE_4__["MatPaginator"], { static: true }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatPaginator"])
], RuleSummaryComponent.prototype, "paginator", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_angular_material__WEBPACK_IMPORTED_MODULE_4__["MatSort"], { static: false }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatSort"])
], RuleSummaryComponent.prototype, "sort", void 0);
RuleSummaryComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-rule-summary',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./rule-summary.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rule-summary/rule-summary.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./rule-summary.component.css */ "./src/app/views/sias-v2/rules/rule-summary/rule-summary.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__["RulesService"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"], src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_6__["AddSystemService"]])
], RuleSummaryComponent);



/***/ }),

/***/ "./src/app/views/sias-v2/rules/rule-translation/edit-rule-tarnslation/edit-rule-tarnslation.component.css":
/*!****************************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/rules/rule-translation/edit-rule-tarnslation/edit-rule-tarnslation.component.css ***!
  \****************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("::ng-deep.mat-form-field-appearance-outline .mat-form-field-flex\r\n{\r\n    width: 180px !important;\r\n    height: 50px !important;\r\n}  \r\n::ng-deep .mat-form-field-flex > .mat-form-field-infix \r\n{ padding: 0.5em 0px !important;}  \r\n#chFile{\r\n  display: none;\r\n  }  \r\n.btnFile{\r\n  background-color: rgb(130, 130, 173);\r\n  margin-right: 30px;\r\n  width: 110px;\r\n  }  \r\n.mat-raised-button {\r\n    width: -webkit-fit-content;\r\n    width: -moz-fit-content;\r\n    width: fit-content;\r\n    height: 20px;\r\n    line-height: 27px;\r\n    min-height: 27px;\r\n    vertical-align: top;\r\n    font-size: 11px;\r\n    padding: 0 0;\r\n    margin: 0;\r\n    margin-bottom:20px;\r\n  }  \r\n.baiscInfocard\r\n{\r\n  width: 100%;\r\n /* margin-left: 15%; */\r\n}  \r\n.example-container {\r\n  height: 250px;\r\n  overflow: auto;\r\n}  \r\n.mat-raised-button {\r\n  width: -webkit-fit-content;\r\n  width: -moz-fit-content;\r\n  width: fit-content;\r\n  height: 20px;\r\n  line-height: 27px;\r\n  min-height: 27px;\r\n  vertical-align: top;\r\n  font-size: 11px;\r\n  padding: 0 0;\r\n  margin: 0;\r\n  }  \r\n#customers {\r\n      font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\r\n      border-collapse: collapse;\r\n      width: 100%;\r\n      }  \r\n#customers td, #customers th {\r\n      border: 1px solid #ddd;\r\n      padding: 8px;\r\n      text-align: center;\r\n      \r\n      }  \r\n#customers tr:nth-child(even){background-color: #f2f2f2;}  \r\n#customers th {\r\n      padding-top: 12px;\r\n      padding-bottom: 12px;\r\n      text-align: left;\r\n      background-color:rgb(97, 178, 216);\r\n      color: white;\r\n      }  \r\nmat-form-field{\r\n  width: 100%;\r\n  \r\n}\r\n  \r\n  \r\n  \r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9ydWxlcy9ydWxlLXRyYW5zbGF0aW9uL2VkaXQtcnVsZS10YXJuc2xhdGlvbi9lZGl0LXJ1bGUtdGFybnNsYXRpb24uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7SUFFSSx1QkFBdUI7SUFDdkIsdUJBQXVCO0FBQzNCO0FBQ0E7RUFDRSw2QkFBNkIsQ0FBQztBQUVoQztFQUNFLGFBQWE7RUFDYjtBQUNBO0VBQ0Esb0NBQW9DO0VBQ3BDLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1o7QUFFQTtJQUNFLDBCQUFrQjtJQUFsQix1QkFBa0I7SUFBbEIsa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQixlQUFlO0lBQ2YsWUFBWTtJQUNaLFNBQVM7SUFDVCxrQkFBa0I7RUFDcEI7QUFDQTs7RUFFQSxXQUFXO0NBQ1osc0JBQXNCO0FBQ3ZCO0FBSUE7RUFDRSxhQUFhO0VBQ2IsY0FBYztBQUNoQjtBQUNBO0VBQ0UsMEJBQWtCO0VBQWxCLHVCQUFrQjtFQUFsQixrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLGlCQUFpQjtFQUNqQixnQkFBZ0I7RUFDaEIsbUJBQW1CO0VBQ25CLGVBQWU7RUFDZixZQUFZO0VBQ1osU0FBUztFQUNUO0FBQ0E7TUFDSSx5REFBeUQ7TUFDekQseUJBQXlCO01BQ3pCLFdBQVc7TUFDWDtBQUNBO01BQ0Esc0JBQXNCO01BQ3RCLFlBQVk7TUFDWixrQkFBa0I7O01BRWxCO0FBRUEsOEJBQThCLHlCQUF5QixDQUFDO0FBRXhEO01BQ0EsaUJBQWlCO01BQ2pCLG9CQUFvQjtNQUNwQixnQkFBZ0I7TUFDaEIsa0NBQWtDO01BQ2xDLFlBQVk7TUFDWjtBQUVOO0VBQ0UsV0FBVzs7QUFFYiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL3NpYXMtdjIvcnVsZXMvcnVsZS10cmFuc2xhdGlvbi9lZGl0LXJ1bGUtdGFybnNsYXRpb24vZWRpdC1ydWxlLXRhcm5zbGF0aW9uLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6Om5nLWRlZXAubWF0LWZvcm0tZmllbGQtYXBwZWFyYW5jZS1vdXRsaW5lIC5tYXQtZm9ybS1maWVsZC1mbGV4XHJcbntcclxuICAgIHdpZHRoOiAxODBweCAhaW1wb3J0YW50O1xyXG4gICAgaGVpZ2h0OiA1MHB4ICFpbXBvcnRhbnQ7XHJcbn0gIFxyXG46Om5nLWRlZXAgLm1hdC1mb3JtLWZpZWxkLWZsZXggPiAubWF0LWZvcm0tZmllbGQtaW5maXggXHJcbnsgcGFkZGluZzogMC41ZW0gMHB4ICFpbXBvcnRhbnQ7fVxyXG5cclxuI2NoRmlsZXtcclxuICBkaXNwbGF5OiBub25lO1xyXG4gIH1cclxuICAuYnRuRmlsZXtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTMwLCAxMzAsIDE3Myk7XHJcbiAgbWFyZ2luLXJpZ2h0OiAzMHB4O1xyXG4gIHdpZHRoOiAxMTBweDtcclxuICB9XHJcblxyXG4gIC5tYXQtcmFpc2VkLWJ1dHRvbiB7XHJcbiAgICB3aWR0aDogZml0LWNvbnRlbnQ7XHJcbiAgICBoZWlnaHQ6IDIwcHg7XHJcbiAgICBsaW5lLWhlaWdodDogMjdweDtcclxuICAgIG1pbi1oZWlnaHQ6IDI3cHg7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xyXG4gICAgZm9udC1zaXplOiAxMXB4O1xyXG4gICAgcGFkZGluZzogMCAwO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgbWFyZ2luLWJvdHRvbToyMHB4O1xyXG4gIH1cclxuICAuYmFpc2NJbmZvY2FyZFxyXG57XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAvKiBtYXJnaW4tbGVmdDogMTUlOyAqL1xyXG59XHJcblxyXG5cclxuXHJcbi5leGFtcGxlLWNvbnRhaW5lciB7XHJcbiAgaGVpZ2h0OiAyNTBweDtcclxuICBvdmVyZmxvdzogYXV0bztcclxufVxyXG4ubWF0LXJhaXNlZC1idXR0b24ge1xyXG4gIHdpZHRoOiBmaXQtY29udGVudDtcclxuICBoZWlnaHQ6IDIwcHg7XHJcbiAgbGluZS1oZWlnaHQ6IDI3cHg7XHJcbiAgbWluLWhlaWdodDogMjdweDtcclxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xyXG4gIGZvbnQtc2l6ZTogMTFweDtcclxuICBwYWRkaW5nOiAwIDA7XHJcbiAgbWFyZ2luOiAwO1xyXG4gIH1cclxuICAjY3VzdG9tZXJzIHtcclxuICAgICAgZm9udC1mYW1pbHk6IFwiVHJlYnVjaGV0IE1TXCIsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XHJcbiAgICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICB9XHJcbiAgICAgICNjdXN0b21lcnMgdGQsICNjdXN0b21lcnMgdGgge1xyXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xyXG4gICAgICBwYWRkaW5nOiA4cHg7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgICNjdXN0b21lcnMgdHI6bnRoLWNoaWxkKGV2ZW4pe2JhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7fVxyXG4gICAgICBcclxuICAgICAgI2N1c3RvbWVycyB0aCB7XHJcbiAgICAgIHBhZGRpbmctdG9wOiAxMnB4O1xyXG4gICAgICBwYWRkaW5nLWJvdHRvbTogMTJweDtcclxuICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgICAgYmFja2dyb3VuZC1jb2xvcjpyZ2IoOTcsIDE3OCwgMjE2KTtcclxuICAgICAgY29sb3I6IHdoaXRlO1xyXG4gICAgICB9XHJcblxyXG5tYXQtZm9ybS1maWVsZHtcclxuICB3aWR0aDogMTAwJTtcclxuICBcclxufVxyXG4gIFxyXG4gIFxyXG4gIFxyXG4iXX0= */");

/***/ }),

/***/ "./src/app/views/sias-v2/rules/rule-translation/edit-rule-tarnslation/edit-rule-tarnslation.component.ts":
/*!***************************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/rules/rule-translation/edit-rule-tarnslation/edit-rule-tarnslation.component.ts ***!
  \***************************************************************************************************************/
/*! exports provided: EditRuleTarnslationComponent, msgTranslation, translationDeatils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditRuleTarnslationComponent", function() { return EditRuleTarnslationComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "msgTranslation", function() { return msgTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translationDeatils", function() { return translationDeatils; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/services/rules/rules.service */ "./src/app/shared/services/rules/rules.service.ts");
/* harmony import */ var src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/services/addSys/add-system.service */ "./src/app/shared/services/addSys/add-system.service.ts");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");






let EditRuleTarnslationComponent = class EditRuleTarnslationComponent {
    constructor(rules, addSystem, router) {
        this.rules = rules;
        this.addSystem = addSystem;
        this.router = router;
        this.msgTranslation = new msgTranslation();
        this.translationDeatils = [];
        this.translationDTO = new translationDTO();
        this.displaySubmit = false;
        this.authorizeDone = false;
    }
    ngOnInit() {
        this.currentUser = localStorage.getItem('userFromLogin');
        // this.translationDeatils.push({ messageBasis: '', defaultValue: '', translationId: '', encryption: '', id: '', dataType: '', messageKey: '' })
        this.gettingExternalsystem();
        this.fetchingHeadertag();
        // this.fetchingXMl();
        // this.fetchingIso();
        this.navSubscription = this.addSystem.getNavParam.subscribe(data => this.editRuleTransResp = data);
        console.log(this.editRuleTransResp);
        // this.translationDeatils.push(...this.editRuleTransResp['translationDeatils']);
        this.ruleTRespData = this.editRuleTransResp['ruleTRespData'];
        console.log(this.ruleTRespData);
        this.transId = this.ruleTRespData.transId;
        console.log(this.transId);
        // commenting beacuse below array data is not coming
        this.msgTranslation.systemCode = this.editRuleTransResp["systemCode"];
        this.msgTranslation.messageType = this.editRuleTransResp["messageType"];
        this.msgTranslation.operationName = this.editRuleTransResp["operationName"];
        this.msgTranslation.serviceName = this.editRuleTransResp["serviceName"];
        this.onSelectionOFMessageType(this.msgTranslation.messageType);
        this.onSlectionExternalSystem(this.msgTranslation.systemCode);
        this.gettingoperationAndService(this.msgTranslation.systemCode, this.msgTranslation.messageType, this.currentUser);
        this.translationDeatils = this.editRuleTransResp['ruleTRespData'].msgTransDetails;
        console.log(this.translationDeatils);
        if (this.ruleTRespData.recordStatus == "C") {
            console.log(this.ruleTRespData.recordStatus);
            this.reopenBtn = false;
            this.authBtnHide = true;
        }
        // this.translationDeatils.map(el=>{
        //   this.messageBasisIso=el.messagebasis
        // });
        console.log("is", this.messageBasisIso);
        // this.messageBasisIso.operationName=this.editRuleTransResp["operationName"];
        // this.messageBasisIso.operationName=this.editRuleTransResp["serviceName"];
        // this.onSlectionExternalSystem(this.msgTranslation.systemCode);
        // this.onSelectionOFMessageType(this.msgTranslation.messageType);
        // this.gettingoperationAndService(this.msgTranslation.systemCode,this.msgTranslation.messageType,this.currentUser);
        console.log("tab1", this.msgTranslation);
        console.log(this.translationDeatils);
        // this.translationDeatils.forEach(el=>{
        //   el.dataType=this.editRuleTransResp["dataType"];
        //   el.encryption=this.editRuleTransResp["encryption"];
        //   el.messageKey=this.editRuleTransResp["messageKey"];
        //   el.messageBasis=this.editRuleTransResp["messagebasis"];
        //   el.defaultValue=this.editRuleTransResp["defaultValue"];
        //   el.translationId=this.editRuleTransResp["translationId"];
        // });
        console.log(this.translationDeatils);
        // this.ruleRecord.dataType = this.editRuleTransResp["dataType"];
    }
    gettingExternalsystem() {
        this.rules.gettingExternalsystem().subscribe(extSysResp => {
            console.log(extSysResp);
            if (extSysResp) {
                this.externalSystem = extSysResp;
            }
        }, (err) => {
            console.log("err", err);
        });
    }
    onSlectionExternalSystem(event) {
        console.log(event.value);
        this.sourcesystem = this.msgTranslation.messageType;
    }
    onSelectionOFMessageType(event) {
        this.msgType = event.value;
        console.log(this.msgType);
        if (this.sourcesystem && this.msgType) {
            this.gettingoperationAndService(this.msgTranslation.systemCode, this.msgTranslation.messageType, this.currentUser);
        }
        else {
            console.log("enter both msg and ext");
        }
    }
    gettingoperationAndService(source, msgType, logginuser) {
        this.rules.gettingoperationAndService(source, msgType, logginuser).subscribe(translationResp => {
            console.log(translationResp);
            console.log(translationResp);
            this.messageBasisData = translationResp.MdmtSystemService;
            console.log("messageBasisData", this.messageBasisData);
            let keys = Object.keys(translationResp);
            console.log(keys);
            let x = keys[2];
            let y = keys[3];
            if (x == 'I' && Object.keys(translationResp).length == 3) {
                console.log("yes", x);
                if (translationResp.I.SERVICE.length !== 0) {
                    this.msgTranslation.serviceName = translationResp.I.SERVICE[0].headerValue;
                }
                if (translationResp.I.OPERATION.length !== 0) {
                    this.msgTranslation.operationName = translationResp.I.OPERATION[0].headerValue;
                    this.translationDataOperation = translationResp.I.OPERATION;
                }
                this.translationDataService = translationResp.I.SERVICE;
            }
            else if (x == 'O' && Object.keys(translationResp).length == 3) {
                console.log("else if", x);
                if (translationResp.O.SERVICE.length !== 0) {
                    this.msgTranslation.serviceName = translationResp.O.SERVICE[0].headerValue;
                }
                if (translationResp.O.OPERATION.length !== 0) {
                    this.msgTranslation.operationName = translationResp.O.OPERATION[0].headerValue;
                    this.translationDataOperation = translationResp.O.OPERATION;
                }
                this.translationDataService = translationResp.O.SERVICE;
            }
            else if (x == 'I' && this.msgTranslation.messageType == 'I' && Object.keys(translationResp).length == 4) {
                if (translationResp.I.SERVICE.length !== 0) {
                    this.msgTranslation.serviceName = translationResp.I.SERVICE[0].headerValue;
                }
                if (translationResp.I.OPERATION.length !== 0) {
                    this.msgTranslation.operationName = translationResp.I.OPERATION[0].headerValue;
                    this.translationDataOperation = translationResp.I.OPERATION;
                }
                this.translationDataService = translationResp.I.SERVICE;
            }
            else if (y == 'O' && this.msgTranslation.messageType == 'O' && Object.keys(translationResp).length == 4) {
                if (translationResp.O.SERVICE.length !== 0) {
                    this.msgTranslation.serviceName = translationResp.O.SERVICE[0].headerValue;
                }
                if (translationResp.O.OPERATION.length !== 0) {
                    this.msgTranslation.operationName = translationResp.O.OPERATION[0].headerValue;
                    this.translationDataOperation = translationResp.O.OPERATION;
                }
                this.translationDataService = translationResp.O.SERVICE;
            }
            this.showFetch = translationResp.MdmtSystemChannel[0].messageChannel;
            console.log(this.showFetch);
            if (this.showFetch == 'Https/Http') {
                // this.fetchingXMl();
            }
            else {
                this.fetchingIso();
            }
        }, (err => {
            console.log(err);
            sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire({ text: 'External system Service data not present' });
        }));
    }
    //  temproary
    onSubmit() {
        let payloadObj = {};
        payloadObj = this.msgTranslation;
        payloadObj.transId = this.transId;
        payloadObj.msgTransDetails = this.translationDeatils;
        this.translationDTO.msgTranslation = this.msgTranslation;
        this.translationDTO.msgTranslationDet = this.ruleRecord;
        console.log(this.translationDTO);
        this.rules.editruleTranslation("update", this.currentUser, payloadObj).subscribe(ruleTranslationResp => {
            console.log(ruleTranslationResp);
            if (ruleTranslationResp) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire({ text: 'Record Saved SuucessFully' });
                this.showAuditLog = true;
                this.editValue = false;
            }
        }, (err => {
            sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire({ text: 'Server Error' });
        }));
    }
    onFetch() {
        this.showRecords = true;
    }
    onReset() {
        this.msgTranslation = new msgTranslation();
        this.ruleRecord = [];
    }
    addTranlation() {
        // this.translationDeatils.push({id:'',translationId:'', messagebasis:'',messageKey:'',defaultValue:'',dataType:''});
        this.translationDeatils.push({ messagebasis: '', defaultValue: '', translationId: '', encryption: '', id: '', dataType: '', messageKey: '' });
    }
    deleteTranslation(i) {
        this.translationDeatils.splice(i);
    }
    selectFileFORHTTPXMLIncoming(event) {
        console.log("here http and xML", event);
        this.selectedFiles = event.target.files;
        // this.sizeOfFile = this.selectedFiles.item(0).size;
        // console.log(this.sizeOfFile);
        console.log(this.selectedFiles);
        console.log(this.selectedFiles[0].name);
        this.fileName = this.selectedFiles[0].name;
        this.currentFileUpload = this.selectedFiles.item(0);
        console.log(event.target.files);
        this.addSystem.gettingBodyOfXml(this.currentFileUpload).subscribe(xmlHttpResp => {
            console.log(xmlHttpResp);
            if (xmlHttpResp) {
                this.xmlRespData = xmlHttpResp;
                this.afterupload = true;
                sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire({ text: "File Uploaded Successfully" });
            }
        }, (err) => { sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire({ text: "Invalid Xml file provided" }); });
    }
    fetchingHeadertag() {
        this.addSystem.fetchingHeaderTag().subscribe(resp => {
            console.log("res", resp);
            this.headerTagData = resp;
        });
    }
    fetchingIso() {
        this.addSystem.fetchingIsoForTcp().subscribe(isoResp => {
            console.log(isoResp);
            this.matlabel1 = "Filed No";
            // this.translationDeatils=isoResp;
            this.messageBasisIso = isoResp.map((data) => {
                return data.fieldName;
            });
            // for dropdown 2
            this.messageKeyIso = isoResp.map((data) => {
                return data.fieldNo.toString();
            });
        });
    }
    fetchingXMl() {
        this.addSystem.gettinXMLmsgIncoming().subscribe(xmlResp => {
            console.log(xmlResp);
            this.xmlRespData = xmlResp.map((data) => {
                return data.messageBasis;
            });
        });
    }
    edit() {
        this.editValue = true;
        this.displaySubmit = true;
        this.onlysubmit = true;
        this.showAuditLog = false;
        console.log(this.ruleTRespData);
        if (this.ruleTRespData.approvedStatus == "U") {
            this.editValue = false;
            sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire("UnAuthorized record can't be edited.");
        }
        if (this.ruleTRespData.recordStatus == "C") {
            this.editValue = false;
            sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire("Closed record can't be edited.");
        }
    }
    chooseFile() {
        console.log("heyy file");
        document.getElementById('chFile').click();
    }
    authorizeRuleTranslation() {
        if (this.currentUser == this.ruleTRespData.creatorId) {
            sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire('Maker cannot authorize!');
        }
        else {
            let RuleTranslationData = this.ruleTRespData;
            this.addSystem.editruleTranslation("auth", this.currentUser, RuleTranslationData).subscribe((response) => {
                console.log(response);
                if (response.approverId) {
                    this.authorizeDone = true;
                    sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire('Authorized Successfully!');
                    this.ruleTRespData = response;
                }
            });
        }
    }
    openRuleTranslation() {
        let RuleTranslationData = this.ruleTRespData;
        this.addSystem.editruleTranslation("open", this.currentUser, RuleTranslationData).subscribe((response) => {
            console.log(response);
            if (response) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire('Opened Successfully!');
                this.ruleTRespData = response;
                this.authBtnHide = false;
                this.editBtn = false;
                this.authBtn = false;
            }
        });
    }
    closeRuleTranslation() {
        let RuleTranslationData = this.ruleTRespData;
        this.addSystem.editruleTranslation("close", this.currentUser, RuleTranslationData).subscribe((response) => {
            console.log(response);
            if (response) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire("Closed Successfully!");
                this.ruleTRespData = response;
                this.editBtn = true;
                this.authBtn = true;
                this.deleted = false;
                this.reopenBtn = false;
            }
        });
    }
    deleteRuleTranslation() {
        // this.translationDTO.msgTranslation = this.ruleTRespData;
        // this.translationDTO.msgTranslationDet = this.ruleRecord;
        let RuleTranslationData = this.ruleTRespData;
        console.log(this.ruleTRespData);
        this.addSystem.deleteRuleTranslation(this.currentUser, RuleTranslationData.transId).subscribe((response) => {
            // console.log(response.Text);
            // if(response){
            // }
        }, (err) => {
            if (err.status == 200) {
                this.showdelete = true;
                this.editBtn = true;
                this.authBtn = true;
                this.closeBtn = true;
                sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire({ title: 'Deleted Successfully!',
                    confirmButtonText: 'Ok'
                }).then((result) => {
                    if (result) {
                        this.router.navigateByUrl('/sias-v2/tranlationSummary');
                    }
                });
            }
            else {
                sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire("Failed to delete the reocrd");
            }
        });
    }
};
EditRuleTarnslationComponent.ctorParameters = () => [
    { type: src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__["RulesService"] },
    { type: src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__["AddSystemService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"] }
];
EditRuleTarnslationComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-edit-rule-tarnslation',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./edit-rule-tarnslation.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rule-translation/edit-rule-tarnslation/edit-rule-tarnslation.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./edit-rule-tarnslation.component.css */ "./src/app/views/sias-v2/rules/rule-translation/edit-rule-tarnslation/edit-rule-tarnslation.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__["RulesService"], src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__["AddSystemService"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"]])
], EditRuleTarnslationComponent);

class msgTranslation {
}
// after fetch assign to this object
class translationDeatils {
}
class translationDTO {
}


/***/ }),

/***/ "./src/app/views/sias-v2/rules/rule-translation/rule-translation.component.css":
/*!*************************************************************************************!*\
  !*** ./src/app/views/sias-v2/rules/rule-translation/rule-translation.component.css ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\r\n::ng-deep.mat-form-field-appearance-outline .mat-form-field-flex\r\n{\r\n    width: 180px !important;\r\n    height: 50px !important;\r\n}  \r\n::ng-deep .mat-form-field-flex > .mat-form-field-infix \r\n{ padding: 0.5em 0px !important;}  \r\n#chFile{\r\n  display: none;\r\n  }  \r\n.btnFile{\r\n  background-color: rgb(130, 130, 173);\r\n  margin-right: 30px;\r\n  width: 110px;\r\n  }  \r\n.mat-raised-button {\r\n    width: -webkit-fit-content;\r\n    width: -moz-fit-content;\r\n    width: fit-content;\r\n    height: 20px;\r\n    line-height: 27px;\r\n    min-height: 27px;\r\n    vertical-align: top;\r\n    font-size: 11px;\r\n    padding: 0 0;\r\n    margin: 0;\r\n    margin-bottom: 20px;\r\n  }  \r\n.baiscInfocard\r\n{\r\n  /* width: 63%; */\r\n  width: 100%;\r\n /* margin-left: 15%; */\r\n /* margin-right:30px; */\r\n}  \r\n#customers {\r\n  font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\r\n  border-collapse: collapse;\r\n  width: 100%;\r\n  }  \r\n#customers td, #customers th {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: center;\r\n  \r\n  }  \r\n#customers tr:nth-child(even){background-color: #f2f2f2;}  \r\n#customers th {\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n  text-align: left;\r\n  background-color:rgb(97, 178, 216);\r\n  color: white;\r\n  }\r\n \r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9ydWxlcy9ydWxlLXRyYW5zbGF0aW9uL3J1bGUtdHJhbnNsYXRpb24uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7O0lBRUksdUJBQXVCO0lBQ3ZCLHVCQUF1QjtBQUMzQjtBQUNBO0VBQ0UsNkJBQTZCLENBQUM7QUFFaEM7RUFDRSxhQUFhO0VBQ2I7QUFDQTtFQUNBLG9DQUFvQztFQUNwQyxrQkFBa0I7RUFDbEIsWUFBWTtFQUNaO0FBRUE7SUFDRSwwQkFBa0I7SUFBbEIsdUJBQWtCO0lBQWxCLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLFlBQVk7SUFDWixTQUFTO0lBQ1QsbUJBQW1CO0VBQ3JCO0FBQ0E7O0VBRUEsZ0JBQWdCO0VBQ2hCLFdBQVc7Q0FDWixzQkFBc0I7Q0FDdEIsdUJBQXVCO0FBQ3hCO0FBRUE7RUFDRSx5REFBeUQ7RUFDekQseUJBQXlCO0VBQ3pCLFdBQVc7RUFDWDtBQUNBO0VBQ0Esc0JBQXNCO0VBQ3RCLFlBQVk7RUFDWixrQkFBa0I7O0VBRWxCO0FBRUEsOEJBQThCLHlCQUF5QixDQUFDO0FBRXhEO0VBQ0EsaUJBQWlCO0VBQ2pCLG9CQUFvQjtFQUNwQixnQkFBZ0I7RUFDaEIsa0NBQWtDO0VBQ2xDLFlBQVk7RUFDWiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL3NpYXMtdjIvcnVsZXMvcnVsZS10cmFuc2xhdGlvbi9ydWxlLXRyYW5zbGF0aW9uLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuOjpuZy1kZWVwLm1hdC1mb3JtLWZpZWxkLWFwcGVhcmFuY2Utb3V0bGluZSAubWF0LWZvcm0tZmllbGQtZmxleFxyXG57XHJcbiAgICB3aWR0aDogMTgwcHggIWltcG9ydGFudDtcclxuICAgIGhlaWdodDogNTBweCAhaW1wb3J0YW50O1xyXG59ICBcclxuOjpuZy1kZWVwIC5tYXQtZm9ybS1maWVsZC1mbGV4ID4gLm1hdC1mb3JtLWZpZWxkLWluZml4IFxyXG57IHBhZGRpbmc6IDAuNWVtIDBweCAhaW1wb3J0YW50O31cclxuXHJcbiNjaEZpbGV7XHJcbiAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcbiAgLmJ0bkZpbGV7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDEzMCwgMTMwLCAxNzMpO1xyXG4gIG1hcmdpbi1yaWdodDogMzBweDtcclxuICB3aWR0aDogMTEwcHg7XHJcbiAgfVxyXG5cclxuICAubWF0LXJhaXNlZC1idXR0b24ge1xyXG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG4gICAgaGVpZ2h0OiAyMHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDI3cHg7XHJcbiAgICBtaW4taGVpZ2h0OiAyN3B4O1xyXG4gICAgdmVydGljYWwtYWxpZ246IHRvcDtcclxuICAgIGZvbnQtc2l6ZTogMTFweDtcclxuICAgIHBhZGRpbmc6IDAgMDtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XHJcbiAgfVxyXG4gIC5iYWlzY0luZm9jYXJkXHJcbntcclxuICAvKiB3aWR0aDogNjMlOyAqL1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gLyogbWFyZ2luLWxlZnQ6IDE1JTsgKi9cclxuIC8qIG1hcmdpbi1yaWdodDozMHB4OyAqL1xyXG59XHJcblxyXG4jY3VzdG9tZXJzIHtcclxuICBmb250LWZhbWlseTogXCJUcmVidWNoZXQgTVNcIiwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcclxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuICAjY3VzdG9tZXJzIHRkLCAjY3VzdG9tZXJzIHRoIHtcclxuICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xyXG4gIHBhZGRpbmc6IDhweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgXHJcbiAgfVxyXG4gIFxyXG4gICNjdXN0b21lcnMgdHI6bnRoLWNoaWxkKGV2ZW4pe2JhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7fVxyXG4gIFxyXG4gICNjdXN0b21lcnMgdGgge1xyXG4gIHBhZGRpbmctdG9wOiAxMnB4O1xyXG4gIHBhZGRpbmctYm90dG9tOiAxMnB4O1xyXG4gIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjpyZ2IoOTcsIDE3OCwgMjE2KTtcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgfVxyXG4gIl19 */");

/***/ }),

/***/ "./src/app/views/sias-v2/rules/rule-translation/rule-translation.component.ts":
/*!************************************************************************************!*\
  !*** ./src/app/views/sias-v2/rules/rule-translation/rule-translation.component.ts ***!
  \************************************************************************************/
/*! exports provided: RuleTranslationComponent, msgTranslation, translationDeatils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleTranslationComponent", function() { return RuleTranslationComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "msgTranslation", function() { return msgTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translationDeatils", function() { return translationDeatils; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/services/rules/rules.service */ "./src/app/shared/services/rules/rules.service.ts");
/* harmony import */ var src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/services/addSys/add-system.service */ "./src/app/shared/services/addSys/add-system.service.ts");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_4__);





let RuleTranslationComponent = class RuleTranslationComponent {
    constructor(rules, addSystem) {
        this.rules = rules;
        this.addSystem = addSystem;
        this.msgTranslation = new msgTranslation();
        this.translationDeatils = [];
        this.translationDTO = new translationDTO();
        this.recordSaved = false;
        this.disableSubmit = false;
        this.disableReset = false;
        this.desSystem = [];
        this.isoRespData = [];
    }
    ngOnInit() {
        this.currentUser = localStorage.getItem('userFromLogin');
        this.msgTranslation.messageType = "null";
        this.translationDeatils.push({ messagebasis: '', headerTag: '', defaultValue: '', systemChannelId: '', encryption: 'No Encryption', id: '', dataType: '', messageKey: '' });
        this.gettingExternalsystem();
        this.fetchingHeadertag();
        // this.fetchingIso();
    }
    gettingExternalsystem() {
        this.rules.gettingExternalsystem().subscribe(extSysResp => {
            console.log(extSysResp);
            if (extSysResp) {
                this.externalSystem = extSysResp;
                this.sourcesysData = this.externalSystem;
            }
        }, (err) => {
            console.log("err", err);
        });
    }
    onSlectionExternalSystem(event) {
        console.log(event);
        this.sourcesystem = event.option.value;
        this.rules.getAddSystem(this.sourcesystem).subscribe(resp => {
            console.log(resp);
            if (resp) {
                this.msgTranslation.messageType = resp.messsageType;
                //  this.mtype.push(this.msgTranslation.messageType);
                this.msgTranslation.operationName = resp.operationName;
                this.msgTranslation.serviceName = resp.serviceName;
                if (resp.messsageType == 'A') {
                    this.msgTranslation.messageType = 'I';
                }
                console.log(this.msgTranslation);
                this.gettingoperationAndService(this.sourcesystem, this.msgTranslation.messageType);
            }
        });
    }
    onSelectionOFMessageType(event) {
        this.msgType = event.value;
        console.log(this.msgType);
        if (this.sourcesystem && this.msgType) {
            this.gettingoperationAndService(this.sourcesystem, this.msgTranslation.messageType);
        }
        else {
            console.log("enter both msg and ext");
        }
    }
    gettingoperationAndService(sourcesystem, msgType) {
        this.rules.gettingoperationAndService(sourcesystem, msgType, this.currentUser).subscribe(translationResp => {
            console.log(translationResp);
            let keys = Object.keys(translationResp);
            console.log(keys);
            let x = keys[2];
            let y = keys[3];
            if (x == 'I' && Object.keys(translationResp).length == 3) {
                console.log("yes", x);
                if (translationResp.I.SERVICE.length !== 0) {
                    this.msgTranslation.serviceName = translationResp.I.SERVICE[0].headerValue;
                }
                if (translationResp.I.OPERATION.length !== 0) {
                    this.msgTranslation.operationName = translationResp.I.OPERATION[0].headerValue;
                    this.translationDataOperation = translationResp.I.OPERATION;
                }
                this.translationDataService = translationResp.I.SERVICE;
            }
            else if (x == 'O' && Object.keys(translationResp).length == 3) {
                console.log("else if", x);
                if (translationResp.O.SERVICE.length !== 0) {
                    this.msgTranslation.serviceName = translationResp.O.SERVICE[0].headerValue;
                }
                if (translationResp.O.OPERATION.length !== 0) {
                    this.msgTranslation.operationName = translationResp.O.OPERATION[0].headerValue;
                    this.translationDataOperation = translationResp.O.OPERATION;
                }
                this.translationDataService = translationResp.O.SERVICE;
            }
            else if (x == 'I' && this.msgTranslation.messageType == 'I' && Object.keys(translationResp).length == 4) {
                if (translationResp.I.SERVICE.length !== 0) {
                    this.msgTranslation.serviceName = translationResp.I.SERVICE[0].headerValue;
                }
                if (translationResp.I.OPERATION.length !== 0) {
                    this.msgTranslation.operationName = translationResp.I.OPERATION[0].headerValue;
                    this.translationDataOperation = translationResp.I.OPERATION;
                }
                this.translationDataService = translationResp.I.SERVICE;
            }
            else if (y == 'O' && this.msgTranslation.messageType == 'O' && Object.keys(translationResp).length == 4) {
                if (translationResp.O.SERVICE.length !== 0) {
                    this.msgTranslation.serviceName = translationResp.O.SERVICE[0].headerValue;
                }
                if (translationResp.O.OPERATION.length !== 0) {
                    this.msgTranslation.operationName = translationResp.O.OPERATION[0].headerValue;
                    this.translationDataOperation = translationResp.O.OPERATION;
                }
                this.translationDataService = translationResp.O.SERVICE;
            }
            this.showFetch = translationResp.MdmtSystemChannel[0].messageChannel;
            console.log(this.showFetch);
            if (this.showFetch == 'Https/Http') {
                // this.fetchingXMl();
            }
            else {
                this.fetchingIso();
            }
        }, (err => {
            console.log(err);
            sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire({ text: 'External system Service data not present' });
        }));
    }
    onSubmit() {
        console.log(this.translationDeatils);
        this.msgTranslation.msgTransDetails = this.translationDeatils;
        console.log(this.msgTranslation);
        this.rules.submittingruleTranslation(this.currentUser, this.msgTranslation).subscribe(ruleTranslationResp => {
            console.log(ruleTranslationResp);
            this.translationResp = ruleTranslationResp;
            if (ruleTranslationResp) {
                this.recordSaved = true;
                sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire({ text: 'Record Saved SuccessFully' });
                this.showAuditLog = true;
                this.disableSubmit = true;
                this.disableReset = true;
            }
        }, (err => {
            // Swal.fire({ text: 'Server Error' });
            sweetalert2__WEBPACK_IMPORTED_MODULE_4___default.a.fire({ text: 'Rule Translation already exists, kindly recheck the data.' });
            //Swal.fire({text: err.error.text});
            this.disableSubmit = true;
            console.log("error: : ", err.error);
        }));
    }
    onFetch() {
        this.showRecords = true;
        console.log("translationDeatils", this.translationDeatils);
    }
    onReset() {
        this.msgTranslation = new msgTranslation();
        this.translationDeatils = [];
        this.disableSubmit = false;
    }
    addTranlation() {
        this.translationDeatils.push({ messagebasis: '', headerTag: '', defaultValue: '', systemChannelId: '', encryption: 'No Encryption', id: '', dataType: '', messageKey: '' });
    }
    deleteTranslation(i) {
        this.translationDeatils.splice(i, 1);
    }
    selectFileFORHTTPXMLIncoming(event) {
        console.log("here http and xML", event);
        this.selectedFiles = event.target.files;
        // this.sizeOfFile = this.selectedFiles.item(0).size;
        // console.log(this.sizeOfFile);
        console.log(this.selectedFiles);
        console.log(this.selectedFiles[0].name);
        this.fileName = this.selectedFiles[0].name;
        this.currentFileUpload = this.selectedFiles.item(0);
        console.log(event.target.files);
        this.addSystem.gettingBodyOfXml(this.currentFileUpload).subscribe(xmlHttpResp => {
            console.log(xmlHttpResp);
            this.uploadXmlResp = xmlHttpResp;
            if (xmlHttpResp) {
                this.messageBasisIso = xmlHttpResp.nodeTagList;
                this.showRecords = true;
                this.addTranlation();
            }
        });
    }
    fetchingHeadertag() {
        this.addSystem.fetchingHeaderTag().subscribe(resp => {
            console.log("res", resp);
            this.headerTagData = resp;
        });
    }
    onselectingTag(event, i) {
        console.log(event);
        console.log(this.uploadXmlResp);
        var result = Object.keys(this.uploadXmlResp.nodeValueMap).map((key) => [(key), this.uploadXmlResp.nodeValueMap[key]]);
        var x = result.find(item => item[0] == event.value);
        console.log(x);
        this.translationDeatils[i].defaultValue = x[1];
        this.desSystem.push(event.value);
        // this.mdmtSystemService[i].dataType=x.dataType;
    }
    fetchingIso() {
        this.addSystem.fetchingIsoForTcp().subscribe(isoResp => {
            console.log(isoResp);
            debugger;
            this.isoRespData = isoResp;
            let arrayObj = isoResp.map(item => {
                return {
                    messageKey: item.fieldNo,
                    messageBasis: item.fieldName,
                    dataType: item.dataType
                };
            });
            console.log("arrayObj", arrayObj);
            this.translationDeatils = arrayObj;
            console.log("tra", this.translationDeatils);
            // for dropdown 2
            this.messageKeyIso = isoResp.map((data) => {
                return data.fieldNo;
            });
            this.messageBasisIso = isoResp.map((data) => {
                return data.fieldName;
            });
        });
    }
    onsearchingTablName(event) {
        console.log(event.target.value);
        console.log("this is arr", this.sourcesysData);
        if (this.sourcesysData) {
            let data = this.sourcesysData.filter(function (e) {
                let extValue = e.toLowerCase();
                let value = event.target.value.toLowerCase();
                console.log(extValue, value);
                // return !extValue.indexOf(value);//changed this for 1192
                return extValue.search(value) > -1;
            });
            console.log(data);
            this.externalSystem = data;
        }
    }
    chooseFile() {
        console.log("heyy file");
        document.getElementById('chFile').click();
    }
    //gettingxml records
    fetchingXMl() {
        this.addSystem.gettinXMLmsgIncoming().subscribe(xmlResp => {
            console.log(xmlResp);
            this.xmlRespData = xmlResp;
            //  this.messageBasisIso=xmlResp.map((data)=>{
            //       return data.messageBasis;
            //     });
        });
    }
    check(event, value) {
        console.log("ev", event.value);
        this.desSystem.push(event.value);
        // this.destination=event.value;
        // this.addSystem.gettingHederofXMl(this.currentFileUpload).subscribe(xmlResp=>{
        //   console.log(xmlResp);
        //   if(xmlResp)
        //   {
        //   this.messageBasisIso=xmlResp;
        //   Swal.fire({text:'File Uploaded Successfully'});
        //   }
        // },(err)=>{
        //   console.log(err);
        //   Swal.fire({text:'Invalid Xml file provided'});
        // })
    }
    shouldDisableTagOption(option) {
        return this.desSystem.includes(option);
    }
};
RuleTranslationComponent.ctorParameters = () => [
    { type: src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__["RulesService"] },
    { type: src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__["AddSystemService"] }
];
RuleTranslationComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-rule-translation',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./rule-translation.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rule-translation/rule-translation.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./rule-translation.component.css */ "./src/app/views/sias-v2/rules/rule-translation/rule-translation.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__["RulesService"], src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_3__["AddSystemService"]])
], RuleTranslationComponent);

class msgTranslation {
}
// after fetch assign to this object
class translationDeatils {
}
class translationDTO {
}


/***/ }),

/***/ "./src/app/views/sias-v2/rules/rule-translationsummary/rule-translationsummary.component.css":
/*!***************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/rules/rule-translationsummary/rule-translationsummary.component.css ***!
  \***************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("table {\r\n  border-collapse: initial;\r\n  width:100%;\r\n  text-align: center !important;\r\n}\r\n:host ::ng-deep .mat-sort-header-container { \r\n  display: flex;  \r\n  justify-content: center; \r\n}\r\nth.mat-header-cell, td.mat-cell { \r\n  text-align: center; \r\n}\r\n.mat-header-cell {\r\n  text-align: center;\r\n  height: 25px !important;\r\n\r\n}\r\n.mat-cell {\r\n  text-align: center;\r\n  height: 25px !important;\r\n\r\n}\r\ntr:nth-child(even) {\r\n  height: 25px !important;\r\n}\r\nth {\r\n  font-weight: small;\r\n  height: 25px !important;\r\n  text-align: center;\r\n}\r\ntr {\r\n  font-weight: small;\r\n  height: 25px !important;\r\n  text-align: center;\r\n}\r\nmat-paginator {\r\n  width: auto !important;\r\n  height: 40px !important;\r\n}\r\nmd-pagination-wrapper {\r\n  width: auto !important;\r\n  height: 40px !important;\r\n}\r\n.mat-raised-button {\r\n  width: -webkit-fit-content;\r\n  width: -moz-fit-content;\r\n  width: fit-content;\r\n  height: 20px;\r\n  line-height: 27px;\r\n  min-height: 27px;\r\n  vertical-align: top;\r\n  font-size: 11px;\r\n  padding: 0 0;\r\n  margin: 0;\r\n}\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9ydWxlcy9ydWxlLXRyYW5zbGF0aW9uc3VtbWFyeS9ydWxlLXRyYW5zbGF0aW9uc3VtbWFyeS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0Usd0JBQXdCO0VBQ3hCLFVBQVU7RUFDViw2QkFBNkI7QUFDL0I7QUFDQTtFQUNFLGFBQWE7RUFDYix1QkFBdUI7QUFDekI7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjtBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLHVCQUF1Qjs7QUFFekI7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQix1QkFBdUI7O0FBRXpCO0FBR0E7RUFDRSx1QkFBdUI7QUFDekI7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQix1QkFBdUI7RUFDdkIsa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxrQkFBa0I7RUFDbEIsdUJBQXVCO0VBQ3ZCLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0Usc0JBQXNCO0VBQ3RCLHVCQUF1QjtBQUN6QjtBQUVBO0VBQ0Usc0JBQXNCO0VBQ3RCLHVCQUF1QjtBQUN6QjtBQUtBO0VBQ0UsMEJBQWtCO0VBQWxCLHVCQUFrQjtFQUFsQixrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLGlCQUFpQjtFQUNqQixnQkFBZ0I7RUFDaEIsbUJBQW1CO0VBQ25CLGVBQWU7RUFDZixZQUFZO0VBQ1osU0FBUztBQUNYIiwiZmlsZSI6InNyYy9hcHAvdmlld3Mvc2lhcy12Mi9ydWxlcy9ydWxlLXRyYW5zbGF0aW9uc3VtbWFyeS9ydWxlLXRyYW5zbGF0aW9uc3VtbWFyeS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsidGFibGUge1xyXG4gIGJvcmRlci1jb2xsYXBzZTogaW5pdGlhbDtcclxuICB3aWR0aDoxMDAlO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50O1xyXG59XHJcbjpob3N0IDo6bmctZGVlcCAubWF0LXNvcnQtaGVhZGVyLWNvbnRhaW5lciB7IFxyXG4gIGRpc3BsYXk6IGZsZXg7ICBcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgXHJcbn1cclxuXHJcbnRoLm1hdC1oZWFkZXItY2VsbCwgdGQubWF0LWNlbGwgeyBcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7IFxyXG59XHJcblxyXG4ubWF0LWhlYWRlci1jZWxsIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgaGVpZ2h0OiAyNXB4ICFpbXBvcnRhbnQ7XHJcblxyXG59XHJcblxyXG4ubWF0LWNlbGwge1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBoZWlnaHQ6IDI1cHggIWltcG9ydGFudDtcclxuXHJcbn1cclxuXHJcblxyXG50cjpudGgtY2hpbGQoZXZlbikge1xyXG4gIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG50aCB7XHJcbiAgZm9udC13ZWlnaHQ6IHNtYWxsO1xyXG4gIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG50ciB7XHJcbiAgZm9udC13ZWlnaHQ6IHNtYWxsO1xyXG4gIGhlaWdodDogMjVweCAhaW1wb3J0YW50O1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5tYXQtcGFnaW5hdG9yIHtcclxuICB3aWR0aDogYXV0byAhaW1wb3J0YW50O1xyXG4gIGhlaWdodDogNDBweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5tZC1wYWdpbmF0aW9uLXdyYXBwZXIge1xyXG4gIHdpZHRoOiBhdXRvICFpbXBvcnRhbnQ7XHJcbiAgaGVpZ2h0OiA0MHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbi5tYXQtcmFpc2VkLWJ1dHRvbiB7XHJcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG4gIGhlaWdodDogMjBweDtcclxuICBsaW5lLWhlaWdodDogMjdweDtcclxuICBtaW4taGVpZ2h0OiAyN3B4O1xyXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XHJcbiAgZm9udC1zaXplOiAxMXB4O1xyXG4gIHBhZGRpbmc6IDAgMDtcclxuICBtYXJnaW46IDA7XHJcbn0iXX0= */");

/***/ }),

/***/ "./src/app/views/sias-v2/rules/rule-translationsummary/rule-translationsummary.component.ts":
/*!**************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/rules/rule-translationsummary/rule-translationsummary.component.ts ***!
  \**************************************************************************************************/
/*! exports provided: RuleTranslationsummaryComponent, translationDeatils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleTranslationsummaryComponent", function() { return RuleTranslationsummaryComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translationDeatils", function() { return translationDeatils; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/services/rules/rules.service */ "./src/app/shared/services/rules/rules.service.ts");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
/* harmony import */ var src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/services/addSys/add-system.service */ "./src/app/shared/services/addSys/add-system.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");






let RuleTranslationsummaryComponent = class RuleTranslationsummaryComponent {
    constructor(ruleServ, addSystem, router) {
        this.ruleServ = ruleServ;
        this.addSystem = addSystem;
        this.router = router;
        this.displayedColumns = ['id', 'systemCode', 'operationName', 'serviceName', 'creatorId', 'createdTime'];
        this.translationDeatils = [];
    }
    ngOnInit() {
        this.fetchingruleTranslationSummary();
    }
    fetchingruleTranslationSummary() {
        this.ruleServ.fetchingruleTranslation().subscribe(resp => {
            console.log(resp);
            if (resp) {
                this.translationList = resp;
                // this.setForm(this.sumaData);
                this.dataSource = new _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatTableDataSource"](this.translationList);
                console.log("datasource", this.dataSource);
                // this.dataSource.forEach(el => {
                //   if(el.messsageType=='I')
                //   {
                //     el.messsageType=='Incoming'
                //   }
                //   else if(el.messsageType=='O')
                //   {
                //     el.messsageType=='Outgoing';
                //   }
                //   else{
                //     el.messsageType=='All'
                //   }
                // });
                this.dataSource.sort = this.sort;
                this.dataSource.paginator = this.paginator;
            }
        });
    }
    oneditBasedOnId(row) {
        console.log(row);
        this.ruleServ.ruleTranslationBasedonId(row.transId).subscribe(resp => {
            console.log(resp);
            this.translationDeatils = resp;
            let queryParams = {
                'translationDeatils': resp,
                'ruleTRespData': row,
                'systemCode': row.systemCode,
                'messageType': row.messageType,
                'operationName': row.operationName,
                'serviceName': row.serviceName
            };
            // console.log(queryParams);
            this.addSystem.sendNavParam(queryParams);
            this.router.navigateByUrl('/sias-v2/editTranslation');
        });
    }
};
RuleTranslationsummaryComponent.ctorParameters = () => [
    { type: src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__["RulesService"] },
    { type: src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_4__["AddSystemService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_angular_material__WEBPACK_IMPORTED_MODULE_3__["MatPaginator"], { static: true }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatPaginator"])
], RuleTranslationsummaryComponent.prototype, "paginator", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSort"], { static: false }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSort"])
], RuleTranslationsummaryComponent.prototype, "sort", void 0);
RuleTranslationsummaryComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-rule-translationsummary',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./rule-translationsummary.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rule-translationsummary/rule-translationsummary.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./rule-translationsummary.component.css */ "./src/app/views/sias-v2/rules/rule-translationsummary/rule-translationsummary.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_2__["RulesService"], src_app_shared_services_addSys_add_system_service__WEBPACK_IMPORTED_MODULE_4__["AddSystemService"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"]])
], RuleTranslationsummaryComponent);

class translationDeatils {
}


/***/ }),

/***/ "./src/app/views/sias-v2/rules/rule-validation/rule-validation.component.css":
/*!***********************************************************************************!*\
  !*** ./src/app/views/sias-v2/rules/rule-validation/rule-validation.component.css ***!
  \***********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/* ::ng-deep .mat-form-field-flex > .mat-form-field-infix { padding: 0.4em 0px !important;}\r\n::ng-deep .mat-form-field-label-wrapper { top: -1.5em; }\r\n\r\n::ng-deep .mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label {\r\n    transform: translateY(-1.1em) scale(.75);\r\n    width: 80.33333%;\r\n} */\r\n/* ::ng-deep .mat-form-field-flex > .mat-form-field-infix { width: 30% !important;} */\r\n::ng-deep.mat-form-field-flex\r\n{\r\n    width: 150px !important;\r\n    height: 50px !important;\r\n}\r\n.mat-raised-button {\r\n    width: -webkit-fit-content;\r\n    width: -moz-fit-content;\r\n    width: fit-content;\r\n    height: 20px;\r\n    line-height: 27px;\r\n    min-height: 27px;\r\n    vertical-align: top;\r\n    font-size: 11px;\r\n    padding: 0 0;\r\n    margin: 0;\r\n    }\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9ydWxlcy9ydWxlLXZhbGlkYXRpb24vcnVsZS12YWxpZGF0aW9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBQ0gscUZBQXFGO0FBQ3JGOztJQUVJLHVCQUF1QjtJQUN2Qix1QkFBdUI7QUFDM0I7QUFDQTtJQUNJLDBCQUFrQjtJQUFsQix1QkFBa0I7SUFBbEIsa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQixlQUFlO0lBQ2YsWUFBWTtJQUNaLFNBQVM7SUFDVCIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL3NpYXMtdjIvcnVsZXMvcnVsZS12YWxpZGF0aW9uL3J1bGUtdmFsaWRhdGlvbi5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyogOjpuZy1kZWVwIC5tYXQtZm9ybS1maWVsZC1mbGV4ID4gLm1hdC1mb3JtLWZpZWxkLWluZml4IHsgcGFkZGluZzogMC40ZW0gMHB4ICFpbXBvcnRhbnQ7fVxyXG46Om5nLWRlZXAgLm1hdC1mb3JtLWZpZWxkLWxhYmVsLXdyYXBwZXIgeyB0b3A6IC0xLjVlbTsgfVxyXG5cclxuOjpuZy1kZWVwIC5tYXQtZm9ybS1maWVsZC1hcHBlYXJhbmNlLW91dGxpbmUubWF0LWZvcm0tZmllbGQtY2FuLWZsb2F0Lm1hdC1mb3JtLWZpZWxkLXNob3VsZC1mbG9hdCAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xLjFlbSkgc2NhbGUoLjc1KTtcclxuICAgIHdpZHRoOiA4MC4zMzMzMyU7XHJcbn0gKi9cclxuLyogOjpuZy1kZWVwIC5tYXQtZm9ybS1maWVsZC1mbGV4ID4gLm1hdC1mb3JtLWZpZWxkLWluZml4IHsgd2lkdGg6IDMwJSAhaW1wb3J0YW50O30gKi9cclxuOjpuZy1kZWVwLm1hdC1mb3JtLWZpZWxkLWZsZXhcclxue1xyXG4gICAgd2lkdGg6IDE1MHB4ICFpbXBvcnRhbnQ7XHJcbiAgICBoZWlnaHQ6IDUwcHggIWltcG9ydGFudDtcclxufSBcclxuLm1hdC1yYWlzZWQtYnV0dG9uIHtcclxuICAgIHdpZHRoOiBmaXQtY29udGVudDtcclxuICAgIGhlaWdodDogMjBweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAyN3B4O1xyXG4gICAgbWluLWhlaWdodDogMjdweDtcclxuICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XHJcbiAgICBmb250LXNpemU6IDExcHg7XHJcbiAgICBwYWRkaW5nOiAwIDA7XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgICB9Il19 */");

/***/ }),

/***/ "./src/app/views/sias-v2/rules/rule-validation/rule-validation.component.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/views/sias-v2/rules/rule-validation/rule-validation.component.ts ***!
  \**********************************************************************************/
/*! exports provided: RuleValidationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleValidationComponent", function() { return RuleValidationComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/services/rules/rules.service */ "./src/app/shared/services/rules/rules.service.ts");




let RuleValidationComponent = class RuleValidationComponent {
    constructor(route, ruleVallidation) {
        this.route = route;
        this.ruleVallidation = ruleVallidation;
    }
    ngOnInit() {
        this.ruleVallidation.gettingExternalsystem().subscribe(extSysResp => {
            console.log(extSysResp);
        }, (err) => {
            console.log("err" + err);
        });
        this.ruleVallidation.gettingISoBasedonExtsys().subscribe(extSysISOResp => {
            console.log(extSysISOResp);
        });
        this.ruleVallidation.xmlbasedonExternalsystem().subscribe(extsysXMLREsp => {
            console.log(extsysXMLREsp);
        });
        this.ruleBValidationData =
            [{
                    fieldNo: "123",
                    node: "678",
                    key: "678",
                    objectName: "678",
                    validationMethod: 'yyy',
                    validationDetails: 'yyy'
                },
                {
                    fieldNo: "123",
                    node: "678",
                    key: "678",
                    objectName: "678",
                    validationMethod: 'yyy',
                    validationDetails: 'yyy'
                },
                {
                    fieldNo: "123",
                    node: "678",
                    key: "678",
                    objectName: "678",
                    validationMethod: 'yyy',
                    validationDetails: 'yyy'
                },
                {
                    fieldNo: "123",
                    node: "678",
                    key: "678",
                    objectName: "678",
                    validationMethod: 'yyy',
                    validationDetails: 'yyy'
                },];
    }
    deleteRuleVlidtion(i) {
        this.ruleBValidationData.splice(i, 1);
    }
    ruleTranslation() {
    }
    addRuleValidtion() {
        this.ruleBValidationData.push({
            fieldNo: "",
            node: "",
            key: "",
            objectName: "",
            validationMethod: '',
            validationDetails: ''
        });
    }
    moveToruletranslation() {
        this.route.navigateByUrl('/sias-v2/ruleTranslation');
    }
};
RuleValidationComponent.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] },
    { type: src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_3__["RulesService"] }
];
RuleValidationComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-rule-validation',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./rule-validation.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rule-validation/rule-validation.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./rule-validation.component.css */ "./src/app/views/sias-v2/rules/rule-validation/rule-validation.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
        src_app_shared_services_rules_rules_service__WEBPACK_IMPORTED_MODULE_3__["RulesService"]])
], RuleValidationComponent);



/***/ }),

/***/ "./src/app/views/sias-v2/rules/rules.component.css":
/*!*********************************************************!*\
  !*** ./src/app/views/sias-v2/rules/rules.component.css ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL3NpYXMtdjIvcnVsZXMvcnVsZXMuY29tcG9uZW50LmNzcyJ9 */");

/***/ }),

/***/ "./src/app/views/sias-v2/rules/rules.component.ts":
/*!********************************************************!*\
  !*** ./src/app/views/sias-v2/rules/rules.component.ts ***!
  \********************************************************/
/*! exports provided: RulesComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RulesComponent", function() { return RulesComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let RulesComponent = class RulesComponent {
    constructor() { }
    ngOnInit() {
    }
};
RulesComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-rules',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./rules.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/rules/rules.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./rules.component.css */ "./src/app/views/sias-v2/rules/rules.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
], RulesComponent);



/***/ }),

/***/ "./src/app/views/sias-v2/sias-v2-routing.module.ts":
/*!*********************************************************!*\
  !*** ./src/app/views/sias-v2/sias-v2-routing.module.ts ***!
  \*********************************************************/
/*! exports provided: siasv2Routes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "siasv2Routes", function() { return siasv2Routes; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _add_system_incoming_message_tcp_view_or_edit_external_system_view_or_edit_external_system_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-system-incoming-message-tcp/view-or-edit-external-system/view-or-edit-external-system.component */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/view-or-edit-external-system/view-or-edit-external-system.component.ts");
/* harmony import */ var _source_destination_system_validation_source_destination_system_validation_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./source-destination-system-validation/source-destination-system-validation.component */ "./src/app/views/sias-v2/source-destination-system-validation/source-destination-system-validation.component.ts");
/* harmony import */ var _excel_mapping_excel_mapping_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./excel-mapping/excel-mapping.component */ "./src/app/views/sias-v2/excel-mapping/excel-mapping.component.ts");
/* harmony import */ var _excel_upload_excel_upload_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./excel-upload/excel-upload.component */ "./src/app/views/sias-v2/excel-upload/excel-upload.component.ts");
/* harmony import */ var _excel_processing_excel_processing_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./excel-processing/excel-processing.component */ "./src/app/views/sias-v2/excel-processing/excel-processing.component.ts");
/* harmony import */ var _extsummary_extsummary_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extsummary/extsummary.component */ "./src/app/views/sias-v2/extsummary/extsummary.component.ts");
/* harmony import */ var _excel_external_sys_excel_external_sys_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./excel-external-sys/excel-external-sys.component */ "./src/app/views/sias-v2/excel-external-sys/excel-external-sys.component.ts");
/* harmony import */ var _ext_system_ext_system_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ext-system/ext-system.component */ "./src/app/views/sias-v2/ext-system/ext-system.component.ts");
/* harmony import */ var _ext_sys_list_ext_sys_list_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ext-sys-list/ext-sys-list.component */ "./src/app/views/sias-v2/ext-sys-list/ext-sys-list.component.ts");
/* harmony import */ var _extsummary_updateexcelext_updateexcelext_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extsummary/updateexcelext/updateexcelext.component */ "./src/app/views/sias-v2/extsummary/updateexcelext/updateexcelext.component.ts");
/* harmony import */ var _update_extsys_update_extsys_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./update-extsys/update-extsys.component */ "./src/app/views/sias-v2/update-extsys/update-extsys.component.ts");
/* harmony import */ var _excel_mapping_update_excel_mapping_update_excel_mapping_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./excel-mapping/update-excel-mapping/update-excel-mapping.component */ "./src/app/views/sias-v2/excel-mapping/update-excel-mapping/update-excel-mapping.component.ts");
/* harmony import */ var _excel_mapping_excel_mapping_summary_excel_mapping_summary_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./excel-mapping/excel-mapping-summary/excel-mapping-summary.component */ "./src/app/views/sias-v2/excel-mapping/excel-mapping-summary/excel-mapping-summary.component.ts");
/* harmony import */ var _add_system_incoming_message_tcp_add_system_incoming_message_tcp_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./add-system-incoming-message-tcp/add-system-incoming-message-tcp.component */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/add-system-incoming-message-tcp.component.ts");
/* harmony import */ var _rules_create_rules_create_rules_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./rules/create-rules/create-rules.component */ "./src/app/views/sias-v2/rules/create-rules/create-rules.component.ts");
/* harmony import */ var _add_system_incoming_message_tcp_external_system_matenance_summary_external_system_matenance_summary_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./add-system-incoming-message-tcp/external-system-matenance-summary/external-system-matenance-summary.component */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/external-system-matenance-summary/external-system-matenance-summary.component.ts");
/* harmony import */ var _rules_rule_translation_rule_translation_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./rules/rule-translation/rule-translation.component */ "./src/app/views/sias-v2/rules/rule-translation/rule-translation.component.ts");
/* harmony import */ var _rules_rule_validation_rule_validation_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./rules/rule-validation/rule-validation.component */ "./src/app/views/sias-v2/rules/rule-validation/rule-validation.component.ts");
/* harmony import */ var _add_system_incoming_message_tcp_rule_mapping_rule_mapping_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./add-system-incoming-message-tcp/rule-mapping/rule-mapping.component */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/rule-mapping.component.ts");
/* harmony import */ var _edit_add_system_edit_add_system_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./edit-add-system/edit-add-system.component */ "./src/app/views/sias-v2/edit-add-system/edit-add-system.component.ts");
/* harmony import */ var _rules_rule_summary_rule_summary_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./rules/rule-summary/rule-summary.component */ "./src/app/views/sias-v2/rules/rule-summary/rule-summary.component.ts");
/* harmony import */ var _rules_rule_translationsummary_rule_translationsummary_component__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./rules/rule-translationsummary/rule-translationsummary.component */ "./src/app/views/sias-v2/rules/rule-translationsummary/rule-translationsummary.component.ts");
/* harmony import */ var _rules_rule_translation_edit_rule_tarnslation_edit_rule_tarnslation_component__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./rules/rule-translation/edit-rule-tarnslation/edit-rule-tarnslation.component */ "./src/app/views/sias-v2/rules/rule-translation/edit-rule-tarnslation/edit-rule-tarnslation.component.ts");
/* harmony import */ var _rules_create_rules_edit_rules_edit_rules_component__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./rules/create-rules/edit-rules/edit-rules.component */ "./src/app/views/sias-v2/rules/create-rules/edit-rules/edit-rules.component.ts");
/* harmony import */ var _add_system_incoming_message_tcp_rule_mapping_edit_rule_mapping_edit_rule_mapping_component__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./add-system-incoming-message-tcp/rule-mapping/edit-rule-mapping/edit-rule-mapping.component */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/edit-rule-mapping/edit-rule-mapping.component.ts");
/* harmony import */ var _add_system_incoming_message_tcp_rule_mapping_list_rule_mapping_list_rule_mapping_component__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./add-system-incoming-message-tcp/rule-mapping/list-rule-mapping/list-rule-mapping.component */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/list-rule-mapping/list-rule-mapping.component.ts");



























const siasv2Routes = [
    {
        path: "",
        component: _excel_mapping_excel_mapping_component__WEBPACK_IMPORTED_MODULE_3__["ExcelMappingComponent"],
        pathMatch: "full",
        data: { title: 'Excel Mapping', breadcrumb: 'Excel Mapping' }
    },
    {
        path: "ExcelMapping",
        component: _excel_mapping_excel_mapping_component__WEBPACK_IMPORTED_MODULE_3__["ExcelMappingComponent"],
        pathMatch: "full",
        data: { title: 'Excel Mapping', breadcrumb: 'Excel Mapping' }
    },
    {
        path: "ExcelMappingSummary",
        component: _excel_mapping_excel_mapping_summary_excel_mapping_summary_component__WEBPACK_IMPORTED_MODULE_13__["ExcelMappingSummaryComponent"],
        pathMatch: "full",
        data: { title: 'Excel Mapping Summary', breadcrumb: 'Excel Mapping Summary' }
    },
    {
        path: "ExcelUpload",
        component: _excel_upload_excel_upload_component__WEBPACK_IMPORTED_MODULE_4__["ExcelUploadComponent"],
        pathMatch: "full",
        data: { title: 'Excel Upload', breadcrumb: 'Excel Upload' }
    }, {
        path: "ExcelProcessing",
        component: _excel_processing_excel_processing_component__WEBPACK_IMPORTED_MODULE_5__["ExcelProcessingComponent"],
        pathMatch: "full",
        data: { title: 'Excel Processing', breadcrumb: 'Excel Processing' }
    }, {
        path: "ExtSumamry",
        component: _extsummary_extsummary_component__WEBPACK_IMPORTED_MODULE_6__["ExtsummaryComponent"],
        pathMatch: "full",
        data: { title: 'External System Summary', breadcrumb: 'External System Summary' }
    }, {
        path: "excelExtSysUpdate",
        component: _extsummary_updateexcelext_updateexcelext_component__WEBPACK_IMPORTED_MODULE_10__["UpdateexcelextComponent"],
        pathMatch: "full",
        data: { title: 'Update External System', breadcrumb: 'Update External System' }
    }, {
        path: "ExtSysList",
        component: _ext_sys_list_ext_sys_list_component__WEBPACK_IMPORTED_MODULE_9__["ExtSysListComponent"],
        pathMatch: "full",
        data: { title: 'Process Code Mapping Summary', breadcrumb: 'Process Code Mapping Summary' }
    }, {
        path: "extSystem",
        component: _ext_system_ext_system_component__WEBPACK_IMPORTED_MODULE_8__["ExtSystemComponent"],
        pathMatch: "full",
        data: { title: 'Process Code Mapping', breadcrumb: 'Process Code Mapping' }
    }, {
        path: "ExcelExternalSys",
        component: _excel_external_sys_excel_external_sys_component__WEBPACK_IMPORTED_MODULE_7__["ExcelExternalSysComponent"],
        pathMatch: "full",
        data: { title: 'Ext System', breadcrumb: 'External System' }
    }, {
        path: "updateMaintanance",
        component: _update_extsys_update_extsys_component__WEBPACK_IMPORTED_MODULE_11__["UpdateExtsysComponent"],
        pathMatch: "full",
        data: { title: 'Update Process Code Mapping', breadcrumb: 'Update Process Code Mapping' }
    },
    {
        path: "updateExcelMappingComponent",
        component: _excel_mapping_update_excel_mapping_update_excel_mapping_component__WEBPACK_IMPORTED_MODULE_12__["UpdateExcelMappingComponent"],
        pathMatch: "full",
        data: { title: 'Update Mapping', breadcrumb: 'Update Mapping' }
    },
    {
        path: "addSystem",
        component: _add_system_incoming_message_tcp_add_system_incoming_message_tcp_component__WEBPACK_IMPORTED_MODULE_14__["AddSystemIncomingMessageTcpComponent"],
        pathMatch: "full",
        data: { title: 'Add System', breadcrumb: 'add System incoming tcp' }
    },
    {
        path: "sourceDestinationSystemValidation",
        component: _source_destination_system_validation_source_destination_system_validation_component__WEBPACK_IMPORTED_MODULE_2__["SourceDestinationSystemValidationComponent"],
        pathMatch: "full",
        data: { title: 'Source Destination System', breadcrumb: 'Source Destination System' }
    },
    {
        path: "viewOrEditSystem",
        component: _add_system_incoming_message_tcp_view_or_edit_external_system_view_or_edit_external_system_component__WEBPACK_IMPORTED_MODULE_1__["ViewOrEditExternalSystemComponent"],
        pathMatch: "full",
        data: { title: 'View/Edit System', breadcrumb: 'View/Edit System' }
    },
    {
        path: "createRule",
        component: _rules_create_rules_create_rules_component__WEBPACK_IMPORTED_MODULE_15__["CreateRulesComponent"],
        pathMatch: "full",
        data: { title: 'Create Rule', breadcrumb: 'Create Rule' }
    },
    {
        path: "ruleValidation",
        component: _rules_rule_validation_rule_validation_component__WEBPACK_IMPORTED_MODULE_18__["RuleValidationComponent"],
        pathMatch: "full",
        data: { title: 'ruleValidation', breadcrumb: 'ruleValidation' }
    },
    {
        path: "ruleTranslation",
        component: _rules_rule_translation_rule_translation_component__WEBPACK_IMPORTED_MODULE_17__["RuleTranslationComponent"],
        pathMatch: "full",
        data: { title: 'ruleTranslation', breadcrumb: 'ruleTranslation' }
    },
    {
        path: "externalSysSummaryNew",
        component: _add_system_incoming_message_tcp_external_system_matenance_summary_external_system_matenance_summary_component__WEBPACK_IMPORTED_MODULE_16__["ExternalSystemMatenanceSummaryComponent"],
        pathMatch: "full",
        data: { title: 'Summary System', breadcrumb: 'Summary System' }
    },
    {
        path: "RuleMapping",
        component: _add_system_incoming_message_tcp_rule_mapping_rule_mapping_component__WEBPACK_IMPORTED_MODULE_19__["RuleMappingComponent"],
        pathMatch: "full",
        data: { title: 'Rule Mapping', breadcrumb: 'Rule Mapping' }
    },
    {
        path: "EditAddSys",
        component: _edit_add_system_edit_add_system_component__WEBPACK_IMPORTED_MODULE_20__["EditAddSystemComponent"],
        pathMatch: "full",
        data: { title: 'Rule Mapping', breadcrumb: 'Rule Mapping' }
    },
    {
        path: "ruleSummary",
        component: _rules_rule_summary_rule_summary_component__WEBPACK_IMPORTED_MODULE_21__["RuleSummaryComponent"],
        pathMatch: "full",
        data: { title: 'Rule Mapping', breadcrumb: 'Rule Mapping' }
    },
    {
        path: "tranlationSummary",
        component: _rules_rule_translationsummary_rule_translationsummary_component__WEBPACK_IMPORTED_MODULE_22__["RuleTranslationsummaryComponent"],
        pathMatch: "full",
        data: { title: 'Rule Mapping', breadcrumb: 'Rule Mapping' }
    },
    {
        path: "editTranslation",
        component: _rules_rule_translation_edit_rule_tarnslation_edit_rule_tarnslation_component__WEBPACK_IMPORTED_MODULE_23__["EditRuleTarnslationComponent"],
        pathMatch: "full",
        data: { title: 'Rule Mapping', breadcrumb: 'Rule Mapping' }
    },
    {
        path: "editRules",
        component: _rules_create_rules_edit_rules_edit_rules_component__WEBPACK_IMPORTED_MODULE_24__["EditRulesComponent"],
        pathMatch: "full",
        data: { title: 'Rule Mapping', breadcrumb: 'Rule Mapping' }
    },
    {
        path: "editRuleMapping",
        component: _add_system_incoming_message_tcp_rule_mapping_edit_rule_mapping_edit_rule_mapping_component__WEBPACK_IMPORTED_MODULE_25__["EditRuleMappingComponent"],
        pathMatch: "full",
        data: { title: 'Rule Mapping', breadcrumb: 'Rule Mapping' }
    },
    {
        path: "litsRuleMapping",
        component: _add_system_incoming_message_tcp_rule_mapping_list_rule_mapping_list_rule_mapping_component__WEBPACK_IMPORTED_MODULE_26__["ListRuleMappingComponent"],
        pathMatch: "full",
        data: { title: 'Rule Mapping', breadcrumb: 'Rule Mapping' }
    }
];


/***/ }),

/***/ "./src/app/views/sias-v2/sias-v2.module.ts":
/*!*************************************************!*\
  !*** ./src/app/views/sias-v2/sias-v2.module.ts ***!
  \*************************************************/
/*! exports provided: SiasV2Module */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SiasV2Module", function() { return SiasV2Module; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _sias_v2_routing_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sias-v2-routing.module */ "./src/app/views/sias-v2/sias-v2-routing.module.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _angular_flex_layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/flex-layout */ "./node_modules/@angular/flex-layout/esm2015/flex-layout.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var _excel_mapping_excel_mapping_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./excel-mapping/excel-mapping.component */ "./src/app/views/sias-v2/excel-mapping/excel-mapping.component.ts");
/* harmony import */ var _excel_upload_excel_upload_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./excel-upload/excel-upload.component */ "./src/app/views/sias-v2/excel-upload/excel-upload.component.ts");
/* harmony import */ var _excel_processing_excel_processing_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./excel-processing/excel-processing.component */ "./src/app/views/sias-v2/excel-processing/excel-processing.component.ts");
/* harmony import */ var _ext_system_ext_system_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ext-system/ext-system.component */ "./src/app/views/sias-v2/ext-system/ext-system.component.ts");
/* harmony import */ var _update_extsys_update_extsys_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./update-extsys/update-extsys.component */ "./src/app/views/sias-v2/update-extsys/update-extsys.component.ts");
/* harmony import */ var _excel_external_sys_excel_external_sys_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./excel-external-sys/excel-external-sys.component */ "./src/app/views/sias-v2/excel-external-sys/excel-external-sys.component.ts");
/* harmony import */ var _extsummary_updateexcelext_updateexcelext_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./extsummary/updateexcelext/updateexcelext.component */ "./src/app/views/sias-v2/extsummary/updateexcelext/updateexcelext.component.ts");
/* harmony import */ var _extsummary_extsummary_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./extsummary/extsummary.component */ "./src/app/views/sias-v2/extsummary/extsummary.component.ts");
/* harmony import */ var _ext_sys_list_ext_sys_list_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ext-sys-list/ext-sys-list.component */ "./src/app/views/sias-v2/ext-sys-list/ext-sys-list.component.ts");
/* harmony import */ var _excel_mapping_update_excel_mapping_update_excel_mapping_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./excel-mapping/update-excel-mapping/update-excel-mapping.component */ "./src/app/views/sias-v2/excel-mapping/update-excel-mapping/update-excel-mapping.component.ts");
/* harmony import */ var src_app_shared_angular_material_angular_material_module__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! src/app/shared/angular-material/angular-material.module */ "./src/app/shared/angular-material/angular-material.module.ts");
/* harmony import */ var src_app_shared_shared_module__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! src/app/shared/shared.module */ "./src/app/shared/shared.module.ts");
/* harmony import */ var ng2_file_upload__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ng2-file-upload */ "./node_modules/ng2-file-upload/fesm2015/ng2-file-upload.js");
/* harmony import */ var _excel_mapping_excel_mapping_summary_excel_mapping_summary_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./excel-mapping/excel-mapping-summary/excel-mapping-summary.component */ "./src/app/views/sias-v2/excel-mapping/excel-mapping-summary/excel-mapping-summary.component.ts");
/* harmony import */ var _add_system_incoming_message_tcp_add_system_incoming_message_tcp_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./add-system-incoming-message-tcp/add-system-incoming-message-tcp.component */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/add-system-incoming-message-tcp.component.ts");
/* harmony import */ var _source_destination_system_validation_source_destination_system_validation_component__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./source-destination-system-validation/source-destination-system-validation.component */ "./src/app/views/sias-v2/source-destination-system-validation/source-destination-system-validation.component.ts");
/* harmony import */ var _add_system_incoming_message_tcp_view_or_edit_external_system_view_or_edit_external_system_component__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./add-system-incoming-message-tcp/view-or-edit-external-system/view-or-edit-external-system.component */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/view-or-edit-external-system/view-or-edit-external-system.component.ts");
/* harmony import */ var _rules_rules_component__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./rules/rules.component */ "./src/app/views/sias-v2/rules/rules.component.ts");
/* harmony import */ var _rules_create_rules_create_rules_component__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./rules/create-rules/create-rules.component */ "./src/app/views/sias-v2/rules/create-rules/create-rules.component.ts");
/* harmony import */ var _rules_rule_validation_rule_validation_component__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./rules/rule-validation/rule-validation.component */ "./src/app/views/sias-v2/rules/rule-validation/rule-validation.component.ts");
/* harmony import */ var _rules_rule_translation_rule_translation_component__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./rules/rule-translation/rule-translation.component */ "./src/app/views/sias-v2/rules/rule-translation/rule-translation.component.ts");
/* harmony import */ var _add_system_incoming_message_tcp_external_system_matenance_summary_external_system_matenance_summary_component__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./add-system-incoming-message-tcp/external-system-matenance-summary/external-system-matenance-summary.component */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/external-system-matenance-summary/external-system-matenance-summary.component.ts");
/* harmony import */ var _add_system_incoming_message_tcp_rule_mapping_rule_mapping_component__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./add-system-incoming-message-tcp/rule-mapping/rule-mapping.component */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/rule-mapping.component.ts");
/* harmony import */ var _edit_add_system_edit_add_system_component__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./edit-add-system/edit-add-system.component */ "./src/app/views/sias-v2/edit-add-system/edit-add-system.component.ts");
/* harmony import */ var _rules_rule_summary_rule_summary_component__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./rules/rule-summary/rule-summary.component */ "./src/app/views/sias-v2/rules/rule-summary/rule-summary.component.ts");
/* harmony import */ var _rules_rule_translationsummary_rule_translationsummary_component__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./rules/rule-translationsummary/rule-translationsummary.component */ "./src/app/views/sias-v2/rules/rule-translationsummary/rule-translationsummary.component.ts");
/* harmony import */ var _rules_rule_translation_edit_rule_tarnslation_edit_rule_tarnslation_component__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./rules/rule-translation/edit-rule-tarnslation/edit-rule-tarnslation.component */ "./src/app/views/sias-v2/rules/rule-translation/edit-rule-tarnslation/edit-rule-tarnslation.component.ts");
/* harmony import */ var _rules_create_rules_edit_rules_edit_rules_component__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./rules/create-rules/edit-rules/edit-rules.component */ "./src/app/views/sias-v2/rules/create-rules/edit-rules/edit-rules.component.ts");
/* harmony import */ var _add_system_incoming_message_tcp_rule_mapping_edit_rule_mapping_edit_rule_mapping_component__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./add-system-incoming-message-tcp/rule-mapping/edit-rule-mapping/edit-rule-mapping.component */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/edit-rule-mapping/edit-rule-mapping.component.ts");
/* harmony import */ var _add_system_incoming_message_tcp_rule_mapping_list_rule_mapping_list_rule_mapping_component__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./add-system-incoming-message-tcp/rule-mapping/list-rule-mapping/list-rule-mapping.component */ "./src/app/views/sias-v2/add-system-incoming-message-tcp/rule-mapping/list-rule-mapping/list-rule-mapping.component.ts");





































let SiasV2Module = class SiasV2Module {
};
SiasV2Module = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        declarations: [
            _excel_mapping_excel_mapping_component__WEBPACK_IMPORTED_MODULE_7__["ExcelMappingComponent"],
            _excel_upload_excel_upload_component__WEBPACK_IMPORTED_MODULE_8__["ExcelUploadComponent"],
            _excel_processing_excel_processing_component__WEBPACK_IMPORTED_MODULE_9__["ExcelProcessingComponent"],
            _ext_system_ext_system_component__WEBPACK_IMPORTED_MODULE_10__["ExtSystemComponent"],
            _update_extsys_update_extsys_component__WEBPACK_IMPORTED_MODULE_11__["UpdateExtsysComponent"],
            _ext_sys_list_ext_sys_list_component__WEBPACK_IMPORTED_MODULE_15__["ExtSysListComponent"],
            _extsummary_extsummary_component__WEBPACK_IMPORTED_MODULE_14__["ExtsummaryComponent"],
            _excel_external_sys_excel_external_sys_component__WEBPACK_IMPORTED_MODULE_12__["ExcelExternalSysComponent"],
            _extsummary_updateexcelext_updateexcelext_component__WEBPACK_IMPORTED_MODULE_13__["UpdateexcelextComponent"],
            _excel_mapping_update_excel_mapping_update_excel_mapping_component__WEBPACK_IMPORTED_MODULE_16__["UpdateExcelMappingComponent"],
            _excel_mapping_excel_mapping_summary_excel_mapping_summary_component__WEBPACK_IMPORTED_MODULE_20__["ExcelMappingSummaryComponent"],
            _add_system_incoming_message_tcp_add_system_incoming_message_tcp_component__WEBPACK_IMPORTED_MODULE_21__["AddSystemIncomingMessageTcpComponent"],
            _source_destination_system_validation_source_destination_system_validation_component__WEBPACK_IMPORTED_MODULE_22__["SourceDestinationSystemValidationComponent"],
            _add_system_incoming_message_tcp_view_or_edit_external_system_view_or_edit_external_system_component__WEBPACK_IMPORTED_MODULE_23__["ViewOrEditExternalSystemComponent"],
            _rules_rules_component__WEBPACK_IMPORTED_MODULE_24__["RulesComponent"],
            _rules_create_rules_create_rules_component__WEBPACK_IMPORTED_MODULE_25__["CreateRulesComponent"],
            _rules_rule_validation_rule_validation_component__WEBPACK_IMPORTED_MODULE_26__["RuleValidationComponent"],
            _rules_rule_translation_rule_translation_component__WEBPACK_IMPORTED_MODULE_27__["RuleTranslationComponent"],
            _add_system_incoming_message_tcp_external_system_matenance_summary_external_system_matenance_summary_component__WEBPACK_IMPORTED_MODULE_28__["ExternalSystemMatenanceSummaryComponent"],
            _add_system_incoming_message_tcp_rule_mapping_rule_mapping_component__WEBPACK_IMPORTED_MODULE_29__["RuleMappingComponent"],
            _edit_add_system_edit_add_system_component__WEBPACK_IMPORTED_MODULE_30__["EditAddSystemComponent"],
            _rules_rule_summary_rule_summary_component__WEBPACK_IMPORTED_MODULE_31__["RuleSummaryComponent"],
            _rules_rule_translationsummary_rule_translationsummary_component__WEBPACK_IMPORTED_MODULE_32__["RuleTranslationsummaryComponent"],
            _rules_rule_translation_edit_rule_tarnslation_edit_rule_tarnslation_component__WEBPACK_IMPORTED_MODULE_33__["EditRuleTarnslationComponent"],
            _rules_create_rules_edit_rules_edit_rules_component__WEBPACK_IMPORTED_MODULE_34__["EditRulesComponent"],
            _add_system_incoming_message_tcp_rule_mapping_edit_rule_mapping_edit_rule_mapping_component__WEBPACK_IMPORTED_MODULE_35__["EditRuleMappingComponent"],
            _add_system_incoming_message_tcp_rule_mapping_list_rule_mapping_list_rule_mapping_component__WEBPACK_IMPORTED_MODULE_36__["ListRuleMappingComponent"]
        ],
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            ng2_file_upload__WEBPACK_IMPORTED_MODULE_19__["FileUploadModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_4__["ReactiveFormsModule"],
            src_app_shared_angular_material_angular_material_module__WEBPACK_IMPORTED_MODULE_17__["AngularMaterialModule"],
            _angular_flex_layout__WEBPACK_IMPORTED_MODULE_5__["FlexLayoutModule"],
            src_app_shared_shared_module__WEBPACK_IMPORTED_MODULE_18__["SharedModule"],
            _angular_router__WEBPACK_IMPORTED_MODULE_6__["RouterModule"].forChild(_sias_v2_routing_module__WEBPACK_IMPORTED_MODULE_3__["siasv2Routes"])
        ],
        entryComponents: []
    })
], SiasV2Module);



/***/ }),

/***/ "./src/app/views/sias-v2/source-destination-system-validation/source-destination-system-validation.component.css":
/*!***********************************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/source-destination-system-validation/source-destination-system-validation.component.css ***!
  \***********************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (".Outer-div{\r\n  /* background-color: rgb(221, 217, 217) !important; */\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.head{\r\n  background-color: #e6e6e6;\r\n  height: 60px;\r\n}\r\n\r\n.Div_card{\r\n  padding-top: 1%;\r\n  padding-bottom: 3%;\r\n  padding-right: 1%;\r\n  padding-left: 1%;\r\n  /* background-color: rgb(221, 217, 217) !important; */\r\n\r\n}\r\n\r\n.tabb{\r\n  width: 100%;\r\n  box-shadow: 0 0 black;\r\n  border: 1px solid #e6e6e6;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  text-align: center;\r\n}\r\n\r\n.mat-raised-button {\r\nwidth: -webkit-fit-content;\r\nwidth: -moz-fit-content;\r\nwidth: fit-content;\r\nheight: 20px;\r\nline-height: 27px;\r\nmin-height: 27px;\r\nvertical-align: top;\r\nfont-size: 11px;\r\npadding: 0 0;\r\nmargin: 0;\r\n}\r\n\r\nth, td {\r\nmin-height: 100px;\r\n padding: 0 10px !important;\r\n   border-top: 1px rgba(0, 0, 0, 0.12) solid;\r\n   border-right: 1px rgba(0, 0, 0, 0.12) solid; \r\n   border-left: 1px rgba(0, 0, 0, 0.12) solid; \r\n}\r\n\r\n.top\r\n{\r\npadding-top: 30px;\r\n}\r\n\r\nth.mat-header-cell{\r\n  text-align: center;\r\n}\r\n\r\n.newTagMapping{\r\n  margin-left: 1%;\r\n  background-color:#006699;\r\n}\r\n\r\n.Div_btn_new_tag{\r\n  padding-top: 1%;\r\n  padding-bottom: 2%;\r\n}\r\n\r\n.show{\r\n  background-color:#006699;\r\n}\r\n\r\n/* .inputWithIcon input[type=\"text\"] {\r\n  padding-left: 40px;\r\n} */\r\n\r\n/* .inputWithIcon {\r\n  position: relative;\r\n} */\r\n\r\n/* .inputWithIcon i {\r\n  position: absolute;\r\n  margin-top: -33px !important;\r\n  padding-left: 10px !important;\r\n  color: grey;\r\n} */\r\n\r\n.searchicon {\r\n  float: right;\r\n  margin-right: 6px;\r\n  margin-top: -36px;\r\n  position: relative !important;\r\n  z-index: 2;\r\n  color:grey;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n/* input[type=\"text\"] {\r\n  width: 100%;\r\n  height: 33px !important;\r\n  margin: 8px 0;\r\n  outline: none;\r\n  padding: 8px;\r\n  box-sizing: border-box;\r\n} */\r\n\r\n.closicon{\r\n  padding-left: 10px;\r\n  vertical-align: baseline;\r\n}\r\n\r\n/* input:focus, input.form-control:focus {\r\n  outline:none !important;\r\n  outline-width: 0 !important;\r\n  box-shadow: none;\r\n  -moz-box-shadow: none;\r\n  -webkit-box-shadow: none;\r\n  border:1px solid gray;\r\n} */\r\n\r\n\r\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi9zb3VyY2UtZGVzdGluYXRpb24tc3lzdGVtLXZhbGlkYXRpb24vc291cmNlLWRlc3RpbmF0aW9uLXN5c3RlbS12YWxpZGF0aW9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxxREFBcUQ7RUFDckQsWUFBWTtFQUNaLFdBQVc7QUFDYjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLGlCQUFpQjtFQUNqQixnQkFBZ0I7RUFDaEIscURBQXFEOztBQUV2RDs7QUFFQTtFQUNFLFdBQVc7RUFDWCxxQkFBcUI7RUFDckIseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UsV0FBVztFQUNYLGtCQUFrQjtBQUNwQjs7QUFFQTtBQUNBLDBCQUFrQjtBQUFsQix1QkFBa0I7QUFBbEIsa0JBQWtCO0FBQ2xCLFlBQVk7QUFDWixpQkFBaUI7QUFDakIsZ0JBQWdCO0FBQ2hCLG1CQUFtQjtBQUNuQixlQUFlO0FBQ2YsWUFBWTtBQUNaLFNBQVM7QUFDVDs7QUFDQTtBQUNBLGlCQUFpQjtDQUNoQiwwQkFBMEI7R0FDeEIseUNBQXlDO0dBQ3pDLDJDQUEyQztHQUMzQywwQ0FBMEM7QUFDN0M7O0FBQ0E7O0FBRUEsaUJBQWlCO0FBQ2pCOztBQUNBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLHdCQUF3QjtBQUMxQjs7QUFFQTtFQUNFLGVBQWU7RUFDZixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSx3QkFBd0I7QUFDMUI7O0FBRUE7O0dBRUc7O0FBRUg7O0dBRUc7O0FBRUg7Ozs7O0dBS0c7O0FBRUg7RUFDRSxZQUFZO0VBQ1osaUJBQWlCO0VBQ2pCLGlCQUFpQjtFQUNqQiw2QkFBNkI7RUFDN0IsVUFBVTtFQUNWLFVBQVU7RUFDVixvQkFBb0I7QUFDdEI7O0FBRUE7Ozs7Ozs7R0FPRzs7QUFFSDtFQUNFLGtCQUFrQjtFQUNsQix3QkFBd0I7QUFDMUI7O0FBRUE7Ozs7Ozs7R0FPRyIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL3NpYXMtdjIvc291cmNlLWRlc3RpbmF0aW9uLXN5c3RlbS12YWxpZGF0aW9uL3NvdXJjZS1kZXN0aW5hdGlvbi1zeXN0ZW0tdmFsaWRhdGlvbi5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLk91dGVyLWRpdntcclxuICAvKiBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjIxLCAyMTcsIDIxNykgIWltcG9ydGFudDsgKi9cclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbi5oZWFke1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNlNmU2ZTY7XHJcbiAgaGVpZ2h0OiA2MHB4O1xyXG59XHJcblxyXG4uRGl2X2NhcmR7XHJcbiAgcGFkZGluZy10b3A6IDElO1xyXG4gIHBhZGRpbmctYm90dG9tOiAzJTtcclxuICBwYWRkaW5nLXJpZ2h0OiAxJTtcclxuICBwYWRkaW5nLWxlZnQ6IDElO1xyXG4gIC8qIGJhY2tncm91bmQtY29sb3I6IHJnYigyMjEsIDIxNywgMjE3KSAhaW1wb3J0YW50OyAqL1xyXG5cclxufVxyXG5cclxuLnRhYmJ7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgYm94LXNoYWRvdzogMCAwIGJsYWNrO1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkICNlNmU2ZTY7XHJcbn1cclxuXHJcbnRhYmxlIHtcclxuICB3aWR0aDogMTAwJTtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcbi5tYXQtcmFpc2VkLWJ1dHRvbiB7XHJcbndpZHRoOiBmaXQtY29udGVudDtcclxuaGVpZ2h0OiAyMHB4O1xyXG5saW5lLWhlaWdodDogMjdweDtcclxubWluLWhlaWdodDogMjdweDtcclxudmVydGljYWwtYWxpZ246IHRvcDtcclxuZm9udC1zaXplOiAxMXB4O1xyXG5wYWRkaW5nOiAwIDA7XHJcbm1hcmdpbjogMDtcclxufVxyXG50aCwgdGQge1xyXG5taW4taGVpZ2h0OiAxMDBweDtcclxuIHBhZGRpbmc6IDAgMTBweCAhaW1wb3J0YW50O1xyXG4gICBib3JkZXItdG9wOiAxcHggcmdiYSgwLCAwLCAwLCAwLjEyKSBzb2xpZDtcclxuICAgYm9yZGVyLXJpZ2h0OiAxcHggcmdiYSgwLCAwLCAwLCAwLjEyKSBzb2xpZDsgXHJcbiAgIGJvcmRlci1sZWZ0OiAxcHggcmdiYSgwLCAwLCAwLCAwLjEyKSBzb2xpZDsgXHJcbn0gXHJcbi50b3Bcclxue1xyXG5wYWRkaW5nLXRvcDogMzBweDtcclxufVxyXG50aC5tYXQtaGVhZGVyLWNlbGx7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG4ubmV3VGFnTWFwcGluZ3tcclxuICBtYXJnaW4tbGVmdDogMSU7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjojMDA2Njk5O1xyXG59XHJcblxyXG4uRGl2X2J0bl9uZXdfdGFne1xyXG4gIHBhZGRpbmctdG9wOiAxJTtcclxuICBwYWRkaW5nLWJvdHRvbTogMiU7XHJcbn1cclxuXHJcbi5zaG93e1xyXG4gIGJhY2tncm91bmQtY29sb3I6IzAwNjY5OTtcclxufVxyXG5cclxuLyogLmlucHV0V2l0aEljb24gaW5wdXRbdHlwZT1cInRleHRcIl0ge1xyXG4gIHBhZGRpbmctbGVmdDogNDBweDtcclxufSAqL1xyXG5cclxuLyogLmlucHV0V2l0aEljb24ge1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxufSAqL1xyXG5cclxuLyogLmlucHV0V2l0aEljb24gaSB7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIG1hcmdpbi10b3A6IC0zM3B4ICFpbXBvcnRhbnQ7XHJcbiAgcGFkZGluZy1sZWZ0OiAxMHB4ICFpbXBvcnRhbnQ7XHJcbiAgY29sb3I6IGdyZXk7XHJcbn0gKi9cclxuXHJcbi5zZWFyY2hpY29uIHtcclxuICBmbG9hdDogcmlnaHQ7XHJcbiAgbWFyZ2luLXJpZ2h0OiA2cHg7XHJcbiAgbWFyZ2luLXRvcDogLTM2cHg7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlICFpbXBvcnRhbnQ7XHJcbiAgei1pbmRleDogMjtcclxuICBjb2xvcjpncmV5O1xyXG4gIHBhZGRpbmctYm90dG9tOiAxMHB4O1xyXG59XHJcblxyXG4vKiBpbnB1dFt0eXBlPVwidGV4dFwiXSB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgaGVpZ2h0OiAzM3B4ICFpbXBvcnRhbnQ7XHJcbiAgbWFyZ2luOiA4cHggMDtcclxuICBvdXRsaW5lOiBub25lO1xyXG4gIHBhZGRpbmc6IDhweDtcclxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG59ICovXHJcblxyXG4uY2xvc2ljb257XHJcbiAgcGFkZGluZy1sZWZ0OiAxMHB4O1xyXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcclxufVxyXG5cclxuLyogaW5wdXQ6Zm9jdXMsIGlucHV0LmZvcm0tY29udHJvbDpmb2N1cyB7XHJcbiAgb3V0bGluZTpub25lICFpbXBvcnRhbnQ7XHJcbiAgb3V0bGluZS13aWR0aDogMCAhaW1wb3J0YW50O1xyXG4gIGJveC1zaGFkb3c6IG5vbmU7XHJcbiAgLW1vei1ib3gtc2hhZG93OiBub25lO1xyXG4gIC13ZWJraXQtYm94LXNoYWRvdzogbm9uZTtcclxuICBib3JkZXI6MXB4IHNvbGlkIGdyYXk7XHJcbn0gKi9cclxuXHJcbiJdfQ== */");

/***/ }),

/***/ "./src/app/views/sias-v2/source-destination-system-validation/source-destination-system-validation.component.ts":
/*!**********************************************************************************************************************!*\
  !*** ./src/app/views/sias-v2/source-destination-system-validation/source-destination-system-validation.component.ts ***!
  \**********************************************************************************************************************/
/*! exports provided: SourceDestinationSystemValidationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SourceDestinationSystemValidationComponent", function() { return SourceDestinationSystemValidationComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");





let SourceDestinationSystemValidationComponent = class SourceDestinationSystemValidationComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.options = ['Sys1', 'System2', 'System3', 'Sys4', 'Sys5'];
        this.options1 = ['Sys1', 'System2', 'System3', 'Sys4', 'Sys5'];
        this.isSourceDestination = true;
        this.isSrcDestValidation = false;
        this.displayedColumns = ['source', 'destination', 'validationMethod', 'details', 'values'];
        this.paginator = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["QueryList"]();
    }
    ngOnInit() {
        this.sourceDestinationSystemForm = this.formBuilder.group({
            sourceSystem: [''],
            destinationSystem: ['']
        });
        this.filteredOptions = this.sourceDestinationSystemForm.controls['sourceSystem'].valueChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])(''), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(value => this._filterSource(value)));
        this.filteredOptions1 = this.sourceDestinationSystemForm.controls['destinationSystem'].valueChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])(''), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(value => this._filterDestination(value)));
        this.dataSource = ELEMENT_DATA;
        this.dataSource.paginator = this.paginator.toArray()[0];
    }
    _filterSource(value) {
        const filterValue = value.toLowerCase();
        return this.options.filter(option => option.toLowerCase().includes(filterValue));
    }
    _filterDestination(value) {
        const filterValue = value.toLowerCase();
        return this.options1.filter(option => option.toLowerCase().includes(filterValue));
    }
    submit(sourceDestinationSystemForm) {
        console.log(sourceDestinationSystemForm);
        this.isSourceDestination = false;
        this.isSrcDestValidation = true;
    }
};
SourceDestinationSystemValidationComponent.ctorParameters = () => [
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ViewChildren"])(_angular_material__WEBPACK_IMPORTED_MODULE_4__["MatPaginator"]),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
], SourceDestinationSystemValidationComponent.prototype, "paginator", void 0);
SourceDestinationSystemValidationComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"])({
        selector: 'app-source-destination-system-validation',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./source-destination-system-validation.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/source-destination-system-validation/source-destination-system-validation.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./source-destination-system-validation.component.css */ "./src/app/views/sias-v2/source-destination-system-validation/source-destination-system-validation.component.css")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"]])
], SourceDestinationSystemValidationComponent);

const ELEMENT_DATA = [
    { source: 'system1', destination: 'system4', validationMethod: 'SOURCE METHOD', details: 'MAPPING OF SOURCE METHOD', values: '123456' },
    { source: 'system2', destination: 'System5', validationMethod: 'DESTINATION METHOD', details: 'MAPPING OF DESTINATION METHOD', values: '456789' },
    { source: 'system1', destination: 'system4', validationMethod: 'SOURCE METHOD', details: 'MAPPING OF SOURCE METHOD', values: '123456' },
];


/***/ }),

/***/ "./src/app/views/sias-v2/update-extsys/update-extsys.component.scss":
/*!**************************************************************************!*\
  !*** ./src/app/views/sias-v2/update-extsys/update-extsys.component.scss ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("table {\n  width: 100%;\n}\n\nmat-form-field, mat-checkbox {\n  padding-left: 20px;\n}\n\nth {\n  /* text-align: center;\n   */\n  font-size: 10px;\n  align-content: center;\n}\n\nmat-chip {\n  font-size: 10px;\n}\n\ntable td {\n  padding-right: 50px;\n}\n\n#customers {\n  font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\n  border-collapse: collapse;\n  width: 100%;\n}\n\n#customers td, #customers th {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: center;\n}\n\n#customers tr:nth-child(even) {\n  background-color: #f2f2f2;\n}\n\n#customers th {\n  padding-top: 12px;\n  padding-bottom: 12px;\n  text-align: left;\n  background-color: #61b2d8;\n  color: white;\n}\n\n.mat-raised-button {\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  height: 20px;\n  line-height: 27px;\n  min-height: 27px;\n  vertical-align: top;\n  font-size: 11px;\n  padding: 0 0;\n  margin: 0;\n}\n\nmat-form-field {\n  font-size: 12px;\n}\n\n::ng-deep .mat-checkbox-checked .mat-checkbox-background, .mat-checkbox-indeterminate .mat-checkbox-background {\n  background-color: #fa25b3 !important;\n  color: black;\n}\n\n::ng-deep .mat-checkbox-disabled .mat-checkbox-label {\n  color: black;\n}\n\n::ng-deep .mat-checkbox:not(.mat-checkbox-disabled) .mat-checkbox-ripple .mat-ripple-element {\n  background-color: #fa25b3 !important;\n}\n\n::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline {\n  color: black !important;\n}\n\nmat-label {\n  color: black;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3Mvc2lhcy12Mi91cGRhdGUtZXh0c3lzL0Y6XFxtdXRodS1vbmJvYXJkXFxtZWRpYW4tcGgyLXVpL3NyY1xcYXBwXFx2aWV3c1xcc2lhcy12MlxcdXBkYXRlLWV4dHN5c1xcdXBkYXRlLWV4dHN5cy5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvdmlld3Mvc2lhcy12Mi91cGRhdGUtZXh0c3lzL3VwZGF0ZS1leHRzeXMuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFBO0FDQ0Y7O0FEQ0E7RUFDRSxrQkFBQTtBQ0VGOztBREFBO0VBQ0U7SUFBQTtFQUVDLGVBQUE7RUFDSCxxQkFBQTtBQ0dBOztBRERBO0VBQ0UsZUFBQTtBQ0lGOztBREZBO0VBQ0UsbUJBQUE7QUNLRjs7QURIRTtFQUNFLHlEQUFBO0VBQ0EseUJBQUE7RUFDQSxXQUFBO0FDTUo7O0FESkE7RUFDSSxzQkFBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtBQ09KOztBREpFO0VBQThCLHlCQUFBO0FDUWhDOztBRE5FO0VBQ0UsaUJBQUE7RUFDQSxvQkFBQTtFQUNBLGdCQUFBO0VBQ0EseUJBQUE7RUFDQSxZQUFBO0FDU0o7O0FEUEU7RUFDRSwwQkFBQTtFQUFBLHVCQUFBO0VBQUEsa0JBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7RUFDQSxnQkFBQTtFQUNBLG1CQUFBO0VBQ0EsZUFBQTtFQUNBLFlBQUE7RUFDQSxTQUFBO0FDVUo7O0FEUEU7RUFDRSxlQUFBO0FDVUo7O0FEUEE7RUFDRSxvQ0FBQTtFQUVBLFlBQUE7QUNTRjs7QURQQTtFQUVBLFlBQUE7QUNTQTs7QURMQTtFQUNFLG9DQUFBO0FDUUY7O0FESkE7RUFDRSx1QkFBQTtBQ09GOztBREpBO0VBRUksWUFBQTtBQ01KIiwiZmlsZSI6InNyYy9hcHAvdmlld3Mvc2lhcy12Mi91cGRhdGUtZXh0c3lzL3VwZGF0ZS1leHRzeXMuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxubWF0LWZvcm0tZmllbGQsbWF0LWNoZWNrYm94e1xyXG4gIHBhZGRpbmctbGVmdDogMjBweDtcclxufVxyXG50aHtcclxuICAvKiB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICovXHJcbiAgIGZvbnQtc2l6ZTogMTBweDtcclxuYWxpZ24tY29udGVudDogY2VudGVyO1xyXG59XHJcbm1hdC1jaGlwe1xyXG4gIGZvbnQtc2l6ZTogMTBweDtcclxufVxyXG50YWJsZSB0ZCB7XHJcbiAgcGFkZGluZy1yaWdodDogNTBweDtcclxufVxyXG4gICNjdXN0b21lcnMge1xyXG4gICAgZm9udC1mYW1pbHk6IFwiVHJlYnVjaGV0IE1TXCIsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XHJcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG4jY3VzdG9tZXJzIHRkLCAjY3VzdG9tZXJzIHRoIHtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XHJcbiAgICBwYWRkaW5nOiA4cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgfVxyXG4gIFxyXG4gICNjdXN0b21lcnMgdHI6bnRoLWNoaWxkKGV2ZW4pe2JhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7fVxyXG4gIFxyXG4gICNjdXN0b21lcnMgdGgge1xyXG4gICAgcGFkZGluZy10b3A6IDEycHg7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMTJweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOnJnYig5NywgMTc4LCAyMTYpO1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gIH1cclxuICAubWF0LXJhaXNlZC1idXR0b24ge1xyXG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG4gICAgaGVpZ2h0OiAyMHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDI3cHg7XHJcbiAgICBtaW4taGVpZ2h0OiAyN3B4O1xyXG4gICAgdmVydGljYWwtYWxpZ246IHRvcDtcclxuICAgIGZvbnQtc2l6ZTogMTFweDtcclxuICAgIHBhZGRpbmc6IDAgMDtcclxuICAgIG1hcmdpbjogMDtcclxuICB9XHJcbiBcclxuICBtYXQtZm9ybS1maWVsZCB7XHJcbiAgICBmb250LXNpemU6IDEycHg7XHJcbiAgfVxyXG4gIC8vIG92ZXJ3cml0ZSB0aGUgY2hlY2tib3ggYmFja2dyb3VuZFxyXG46Om5nLWRlZXAgLm1hdC1jaGVja2JveC1jaGVja2VkIC5tYXQtY2hlY2tib3gtYmFja2dyb3VuZCwgLm1hdC1jaGVja2JveC1pbmRldGVybWluYXRlIC5tYXQtY2hlY2tib3gtYmFja2dyb3VuZCB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1MCwgMzcsIDE3OSkgIWltcG9ydGFudDtcclxuICBcclxuICBjb2xvcjogYmxhY2s7XHJcbn1cclxuOjpuZy1kZWVwIC5tYXQtY2hlY2tib3gtZGlzYWJsZWQgLm1hdC1jaGVja2JveC1sYWJlbFxyXG57XHJcbmNvbG9yOiBibGFjaztcclxufVxyXG5cclxuLy8gb3ZlcndyaXRlIHRoZSByaXBwbGUgb3ZlcmxheSBvbiBob3ZlciBhbmQgY2xpY2tcclxuOjpuZy1kZWVwIC5tYXQtY2hlY2tib3g6bm90KC5tYXQtY2hlY2tib3gtZGlzYWJsZWQpIC5tYXQtY2hlY2tib3gtcmlwcGxlIC5tYXQtcmlwcGxlLWVsZW1lbnQge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTAsIDM3LCAxNzkpICFpbXBvcnRhbnQ7XHJcblxyXG59XHJcblxyXG46Om5nLWRlZXAgLm1hdC1mb3JtLWZpZWxkLWFwcGVhcmFuY2Utb3V0bGluZSAubWF0LWZvcm0tZmllbGQtb3V0bGluZSB7XHJcbiAgY29sb3I6IGJsYWNrICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbm1hdC1sYWJlbFxyXG4gIHtcclxuICAgIGNvbG9yOiBibGFja1xyXG4gIH1cclxuICAiLCJ0YWJsZSB7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG5tYXQtZm9ybS1maWVsZCwgbWF0LWNoZWNrYm94IHtcbiAgcGFkZGluZy1sZWZ0OiAyMHB4O1xufVxuXG50aCB7XG4gIC8qIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICovXG4gIGZvbnQtc2l6ZTogMTBweDtcbiAgYWxpZ24tY29udGVudDogY2VudGVyO1xufVxuXG5tYXQtY2hpcCB7XG4gIGZvbnQtc2l6ZTogMTBweDtcbn1cblxudGFibGUgdGQge1xuICBwYWRkaW5nLXJpZ2h0OiA1MHB4O1xufVxuXG4jY3VzdG9tZXJzIHtcbiAgZm9udC1mYW1pbHk6IFwiVHJlYnVjaGV0IE1TXCIsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4jY3VzdG9tZXJzIHRkLCAjY3VzdG9tZXJzIHRoIHtcbiAgYm9yZGVyOiAxcHggc29saWQgI2RkZDtcbiAgcGFkZGluZzogOHB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbiNjdXN0b21lcnMgdHI6bnRoLWNoaWxkKGV2ZW4pIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjtcbn1cblxuI2N1c3RvbWVycyB0aCB7XG4gIHBhZGRpbmctdG9wOiAxMnB4O1xuICBwYWRkaW5nLWJvdHRvbTogMTJweDtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzYxYjJkODtcbiAgY29sb3I6IHdoaXRlO1xufVxuXG4ubWF0LXJhaXNlZC1idXR0b24ge1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gIGhlaWdodDogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI3cHg7XG4gIG1pbi1oZWlnaHQ6IDI3cHg7XG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gIGZvbnQtc2l6ZTogMTFweDtcbiAgcGFkZGluZzogMCAwO1xuICBtYXJnaW46IDA7XG59XG5cbm1hdC1mb3JtLWZpZWxkIHtcbiAgZm9udC1zaXplOiAxMnB4O1xufVxuXG46Om5nLWRlZXAgLm1hdC1jaGVja2JveC1jaGVja2VkIC5tYXQtY2hlY2tib3gtYmFja2dyb3VuZCwgLm1hdC1jaGVja2JveC1pbmRldGVybWluYXRlIC5tYXQtY2hlY2tib3gtYmFja2dyb3VuZCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmYTI1YjMgIWltcG9ydGFudDtcbiAgY29sb3I6IGJsYWNrO1xufVxuXG46Om5nLWRlZXAgLm1hdC1jaGVja2JveC1kaXNhYmxlZCAubWF0LWNoZWNrYm94LWxhYmVsIHtcbiAgY29sb3I6IGJsYWNrO1xufVxuXG46Om5nLWRlZXAgLm1hdC1jaGVja2JveDpub3QoLm1hdC1jaGVja2JveC1kaXNhYmxlZCkgLm1hdC1jaGVja2JveC1yaXBwbGUgLm1hdC1yaXBwbGUtZWxlbWVudCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmYTI1YjMgIWltcG9ydGFudDtcbn1cblxuOjpuZy1kZWVwIC5tYXQtZm9ybS1maWVsZC1hcHBlYXJhbmNlLW91dGxpbmUgLm1hdC1mb3JtLWZpZWxkLW91dGxpbmUge1xuICBjb2xvcjogYmxhY2sgIWltcG9ydGFudDtcbn1cblxubWF0LWxhYmVsIHtcbiAgY29sb3I6IGJsYWNrO1xufSJdfQ== */");

/***/ }),

/***/ "./src/app/views/sias-v2/update-extsys/update-extsys.component.ts":
/*!************************************************************************!*\
  !*** ./src/app/views/sias-v2/update-extsys/update-extsys.component.ts ***!
  \************************************************************************/
/*! exports provided: UpdateExtsysComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpdateExtsysComponent", function() { return UpdateExtsysComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _ext_system_extsys_class__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ext-system/extsys-class */ "./src/app/views/sias-v2/ext-system/extsys-class.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
/* harmony import */ var ngx_toastr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ngx-toastr */ "./node_modules/ngx-toastr/fesm2015/ngx-toastr.js");
/* harmony import */ var src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/shared/services/sias2-services/ExcelApiService */ "./src/app/shared/services/sias2-services/ExcelApiService.ts");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! sweetalert2 */ "./node_modules/sweetalert2/dist/sweetalert2.all.js");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _users_users_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../users/users.service */ "./src/app/views/users/users.service.ts");
/* harmony import */ var _roles1_roles_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../roles1/roles.service */ "./src/app/views/roles1/roles.service.ts");
/* harmony import */ var _roles1_models_fmosNewRolePermissions__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../roles1/models/fmosNewRolePermissions */ "./src/app/views/roles1/models/fmosNewRolePermissions.ts");











let UpdateExtsysComponent = class UpdateExtsysComponent {
    constructor(apiService, route, snack, userApi, toast, roleService, cdr) {
        this.apiService = apiService;
        this.route = route;
        this.snack = snack;
        this.userApi = userApi;
        this.toast = toast;
        this.roleService = roleService;
        this.cdr = cdr;
        this.enablefilebrowser = false;
        this.space = true;
        this.backDateAllow = false;
        this.createExtSys1 = new _ext_system_extsys_class__WEBPACK_IMPORTED_MODULE_2__["ExtsysClass"]();
        this.button_permission = {};
        //checkbox
        this.autoupload = false;
        this.modifyRoleObject = new _ext_system_extsys_class__WEBPACK_IMPORTED_MODULE_2__["ExtsysClass"]();
        this.roleCodes = new _roles1_models_fmosNewRolePermissions__WEBPACK_IMPORTED_MODULE_10__["permissionsLabels"]();
    }
    ngOnInit() {
        setTimeout(() => {
            this.newRolePermissions();
        }, 2000);
        this.roleService.screenLabelList.subscribe(message => this.roleCodes = message);
        this.user_id = sessionStorage.getItem('user_id');
        this.role = sessionStorage.getItem('user_role');
        //localStorage.setItem("currentUser","PRABHAT1");
        localStorage.setItem("userIdForChangePassword", localStorage.getItem("currentUser"));
        this.route.queryParams.subscribe(params => {
            // this.modifyUserObject.userRef = params["userRef"];
            this.modifyRoleObject.id = params.id;
            this.modifyRoleObject.extSysCode = params.extSysCode;
            this.modifyRoleObject.extSysName = params.extSysName;
            this.modifyRoleObject.commChannel = params.commChannel;
            this.modifyRoleObject.createdAt = params.createdAt;
            this.modifyRoleObject.creatorDtStamp = params.creatorDtStamp;
            this.modifyRoleObject.creatorId = params.creatorId;
            this.modifyRoleObject.destination = params.destination;
            this.modifyRoleObject.destinationTag = params.destinationTag;
            this.modifyRoleObject.dtdFile = params.dtdFile;
            this.modifyRoleObject.errDirectoryName = params.errDirectoryName;
            this.modifyRoleObject.errQueueName = params.errQueueName;
            this.modifyRoleObject.errSchemaName = params.errSchemaName;
            this.modifyRoleObject.errXsltName = params.errXsltName;
            this.modifyRoleObject.extSysCode = params.extSysCode;
            this.modifyRoleObject.extSysName = params.extSysName;
            this.modifyRoleObject.extSysTag = params.extSysTag;
            this.modifyRoleObject.formatType = params.formatType;
            this.modifyRoleObject.isDestNode = params.isDestNode;
            this.modifyRoleObject.isExtSysNode = params.isExtSysNode;
            this.modifyRoleObject.isModuleNode = params.isModuleNode;
            this.modifyRoleObject.isProcessNode = params.isProcessNode;
            this.modifyRoleObject.isServiceNode = params.isServiceNode;
            this.modifyRoleObject.latestAmendNo = params.latestAmendNo;
            this.modifyRoleObject.messageType = params.messageType;
            this.modifyRoleObject.moduleCode = params.moduleCode;
            this.modifyRoleObject.moduleTag = params.moduleTag;
            this.modifyRoleObject.msgDuplication = params.msgDuplication;
            this.modifyRoleObject.processCode = params.processCode;
            this.modifyRoleObject.processTag = params.processTag;
            this.modifyRoleObject.recordStatus = params.recordStatus;
            this.modifyRoleObject.reqDirectoryName = params.reqDirectoryName;
            this.modifyRoleObject.reqQueueName = params.reqQueueName;
            this.modifyRoleObject.reqSchemaName = params.reqSchemaName;
            this.modifyRoleObject.reqXsltName = params.reqXsltName;
            this.modifyRoleObject.requestTag = params.requestTag;
            this.modifyRoleObject.respDirectoryName = params.respDirectoryName;
            this.modifyRoleObject.respQueueName = params.respQueueName;
            this.modifyRoleObject.respSchemaName = params.respSchemaName;
            this.modifyRoleObject.responseTag = params.responseTag;
            this.modifyRoleObject.serviceCode = params.serviceCode;
            this.modifyRoleObject.serviceTag = params.serviceTag;
            this.modifyRoleObject.updatedAt = params.updatedAt;
            this.modifyRoleObject.verifiedEver = params.verifiedEver;
            this.modifyRoleObject.verifierDtStamp = params.verifierDtStamp;
            this.modifyRoleObject.verifierId = params.verifierId;
            this.modifyRoleObject.xsdFile = params.xsdFile;
            this.modifyRoleObject.authStatus = params.authStatus;
            this.modifyRoleObject.updatedBy = params.updatedBy;
            this.modifyRoleObject.fristTimeAuth = params.fristTimeAuth;
            this.modifyRoleObject.versionNo = params.versionNo;
            this.modifyRoleObject.maxUploadLimit = params.maxUploadLimit;
            this.modifyRoleObject.fileName = params.fileName;
            this.modifyRoleObject.bdav = params.bdav;
            this.modifyRoleObject.backDateAllow = params.backDateAllow;
            this.modifyRoleObject.futureDateAllow = params.futureDateAllow;
            this.modifyRoleObject.fdav = params.fdav;
            this.modifyRoleObject.acft = params.acft;
            this.modifyRoleObject.filePath = params.filePath;
            this.modifyRoleObject.autoUpload = params.autoUpload;
            this.modifyRoleObject.fCYRateVariance = params.fcyvariance;
            this.modifyRoleObject.fCYPercentage = params.fcypercenatage;
            this.modifyRoleObject.sftpUsername = params.userName;
            this.modifyRoleObject.sftpPassword = params.password;
            this.modifyRoleObject.sftpPort = params.port;
            this.modifyRoleObject.sftpIpaddress = params.ipAddress;
            this.modifyRoleObject.sftpPath = params.path;
            this.modifyRoleObject.sftpRequired = params.sftpRequired;
            this.modifyRoleObject.mandatoryFieldImposed = params.mandatoryFieldImposed;
            this.modifyRoleObject.treasuryrefRequired = params.treasuryrefRequired;
            this.modifyRoleObject.wuFile = params.wuFile;
            // ADDED BY VIDYA FOR ISSUE ID 583
            this.modifyRoleObject.verifiedOnce = params.verifiedOnce;
            console.log("this is in edit screen", this.modifyRoleObject);
            if (this.modifyRoleObject.fCYRateVariance == "false") {
                this.modifyRoleObject.fCYRateVariance = false;
            }
            else {
                this.modifyRoleObject.fCYRateVariance = true;
            }
            if (this.modifyRoleObject.autoUpload == "false" || this.modifyRoleObject.autoUpload == null) {
                this.modifyRoleObject.autoUpload = false;
                this.enablefilebrowser = false;
                console.log(this.enablefilebrowser);
                this.cdr.markForCheck();
            }
            else {
                this.modifyRoleObject.autoUpload = true;
                this.enablefilebrowser = true;
                console.log(this.enablefilebrowser);
                this.cdr.markForCheck();
            }
            if (this.modifyRoleObject.backDateAllow == "false" || this.modifyRoleObject.backDateAllow == null) {
                this.modifyRoleObject.backDateAllow = false;
            }
            else {
                this.modifyRoleObject.backDateAllow = true;
            }
            if (this.modifyRoleObject.futureDateAllow == "false" || this.modifyRoleObject.futureDateAllow == null) {
                this.modifyRoleObject.futureDateAllow = false;
            }
            else {
                this.modifyRoleObject.futureDateAllow = true;
            }
            if (this.modifyRoleObject.fCYPercentage == 0) {
                this.modifyRoleObject.fCYPercentage = '';
            }
            if (this.modifyRoleObject.wuFile == "false") {
                this.modifyRoleObject.wuFile = false;
            }
            else {
                this.modifyRoleObject.wuFile = true;
            }
            if (this.modifyRoleObject.sftpRequired == "true") {
                this.modifyRoleObject.sftpRequired = true;
                this.is_sftp = true;
            }
            else {
                this.modifyRoleObject.sftpRequired = false;
                this.is_sftp = false;
            }
            if (this.modifyRoleObject.mandatoryFieldImposed == "true") {
                this.modifyRoleObject.mandatoryFieldImposed = true;
            }
            else {
                this.modifyRoleObject.mandatoryFieldImposed = false;
            }
            if (this.modifyRoleObject.treasuryrefRequired == "true") {
                this.modifyRoleObject.treasuryrefRequired = true;
            }
            else {
                this.modifyRoleObject.treasuryrefRequired = false;
            }
            if (this.modifyRoleObject.acft == "true") {
                this.modifyRoleObject.acft = true;
            }
            else {
                this.modifyRoleObject.acft = false;
            }
            ;
            // }
            // else {
            //   this.enablefilebrowser = false;
            // }
        });
        // this.apiService.getExtSysById(this.modifyRoleObject.id).subscribe(res => {
        //   this.resext = res;
        //   console.log(this.res);
        //   this.modifyRoleObject = this.resext;
        // })
        this.userRolesFromLogin = localStorage.getItem('userRolesFromLogin');
        // this.userRoles = this.userRolesFromLogin.split(',');
        // this.loggedInUser = localStorage.getItem('userFromLogin');
        this.loggedInUser = localStorage.getItem("userIdForChangePassword");
        //console.log(this.userRoles);
        this.editFunction = false;
        this.editFunction2 = true;
        this.poovar = true;
        if (this.modifyRoleObject.authStatus === 'U') {
            this.modifyRoleObject.authStatus = 'UNAUTHORIZED';
        }
        if (this.modifyRoleObject.authStatus === 'A') {
            this.modifyRoleObject.authStatus = 'AUTHORIZED';
        }
        if (this.modifyRoleObject.recordStatus === 'O') {
            this.modifyRoleObject.recordStatus = 'OPEN';
        }
        if (this.modifyRoleObject.recordStatus === 'C') {
            this.modifyRoleObject.recordStatus = 'CLOSED';
        }
        if (this.modifyRoleObject.verifiedOnce === 'N') {
            this.modifyRoleObject.verifiedOnce = 'NO';
        }
        if (this.modifyRoleObject.verifiedOnce === 'Y') {
            this.modifyRoleObject.verifiedOnce = 'YES';
        }
    }
    newRolePermissions() {
        this.roleService.fetchScreenPermissions('Process Code Mapping');
    }
    changeStatus() {
        //console.log('change status call');
        this.is_edit = false;
        this.poovar = false;
        //console.log('done');
        this.editFunction = true;
        this.editFunction2 = false;
    }
    modifyExt(modifyExt) {
        //console.log('inside modify user');
        modifyExt.updatedBy = this.loggedInUser;
        modifyExt.creatorId = this.loggedInUser;
        //console.log(modifyExt);
        //console.log("Modify Object ", this.modifyRoleObject);
        modifyExt.extSysCode = this.modifyRoleObject.extSysCode;
        modifyExt.extSysName = this.modifyRoleObject.extSysName;
        modifyExt.maxUploadLimit = this.modifyRoleObject.maxUploadLimit;
        modifyExt.fileName = this.modifyRoleObject.fileName;
        modifyExt.id = this.modifyRoleObject.id;
        modifyExt.treasuryrefRequired = this.modifyRoleObject.treasuryrefRequired;
        modifyExt.autoUpload = this.modifyRoleObject.autoUpload;
        modifyExt.verifierId = "";
        modifyExt.verifierDtStamp = null;
        console.log(modifyExt);
        console.log(modifyExt);
        this.apiService.modifyExtSysService(modifyExt)
            .subscribe(data => {
            this.validationResponse = data;
            if (this.validationResponse) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire('Data updated successfully');
                //added by vidya for issue id 583
                this.enableSubmit = true;
                // this.processCode.nativeElement.disabled = true;
                // this.maxUploadLimit.nativeElement.disabled = true;
                //console.log(this.modifyRoleObject);
                this.modifyRoleObject = this.validationResponse;
                this.cdr.markForCheck();
                //console.log("validationResponse : ", this.validationResponse)
                this.updateBtn.disabled = true;
                this.cdr.markForCheck();
            }
            else {
                modifyExt.creatorId = this.loggedInUser;
                //console.log(modifyExt);
                //console.log("Modify Object ", this.modifyRoleObject);
                modifyExt.extSysCode = this.modifyRoleObject.extSysCode;
                modifyExt.extSysName = this.modifyRoleObject.extSysName;
                modifyExt.maxUploadLimit = this.modifyRoleObject.maxUploadLimit;
                modifyExt.id = this.modifyRoleObject.id;
                sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire({
                    type: 'error',
                    text: 'Combination Already Exists, Cannot update ',
                });
            }
        }, (err) => {
            // this.snack.open('Server Error!', 'OK', { duration: 4000 })
            // this.toast.error(`Server Error!`, '', {
            //   timeOut: 3000,
            //   progressBar: true,
            //   tapToDismiss: true,
            //   closeButton: true,
            //   easeTime: 300,
            //   extendedTimeOut: 1000
            // });
            sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire({
                type: 'error',
                text: 'Server error ',
            });
        });
    }
    // verify/authorize a user
    verifyExtSys(extSysName) {
        const userIdLoggedIn = localStorage.getItem('currentUser');
        if (this.modifyRoleObject.creatorId === userIdLoggedIn) {
            alert('Maker cannot authorize the record');
        }
        else {
            if (confirm('are you sure you want to verify the external system ')) {
                this.apiService.verifyExtSys(extSysName, userIdLoggedIn).subscribe(data => {
                    this.updatedExtObject = data;
                    this.modifyRoleObject = this.updatedExtObject;
                    //console.log('ext sys is authorized');
                });
            }
        }
    }
    // delete a user
    deleteExtSys(extSysName) {
        const userIdLoggedIn = localStorage.getItem('currentUser');
        confirm('are you sure you want to delete ');
        this.apiService.deleteExtSys(extSysName, userIdLoggedIn).subscribe(data => {
            //console.log('ext is deleted');
        });
    }
    // close a user
    closelockRecordExtSys(extSysName) {
        const userIdLoggedIn = localStorage.getItem('currentUser');
        // if ( this.modifyRoleObject.creatorId === userIdLoggedIn) {
        //   alert('Maker cannot close the record!');
        // } else {
        if (confirm('are you sure you want to close the external system ')) {
            this.apiService.closelockRecordExtSys(extSysName, userIdLoggedIn).subscribe(data => {
                this.updatedExtObject = data;
                this.modifyRoleObject = this.updatedExtObject;
                //console.log('ext is closed');
            });
        }
    }
    // reopen a user
    reopenRecordExtSys(extSysName) {
        const userIdLoggedIn = localStorage.getItem('currentUser');
        if (confirm('are you sure you want to reopen the external system ')) {
            this.apiService.reopenRecordExtSys(extSysName, userIdLoggedIn).subscribe(data => {
                this.updatedExtObject = data;
                this.modifyRoleObject = this.updatedExtObject;
                //console.log('ext is reopened');
            });
        }
    }
    onClickOfClose() {
        //console.log(this.modifyRoleObject.extSysCode);
        //console.log("on click of close");
        if (this.modifyRoleObject.authStatus === 'UNAUTHORIZED') {
            this.modifyRoleObject.authStatus = 'U';
        }
        if (this.modifyRoleObject.authStatus === 'AUTHORIZED') {
            this.modifyRoleObject.authStatus = 'A';
        }
        /*
        */
        // if(this.userObjWithAudit.verifiedOnce === 'N')
        // {
        //   this.userObjWithAudit.verifiedOnce = 'NO'
        // }
        // if(this.userObjWithAudit.verifiedOnce === 'Y')
        // {
        //   this.userObjWithAudit.verifiedOnce = 'YES'
        // }
        //ADDED BY VIDYA FOR ISSUE ID 583
        if (this.modifyRoleObject.verifiedOnce === 'N') {
            this.modifyRoleObject.verifiedOnce = 'NO';
        }
        if (this.modifyRoleObject.verifiedOnce === 'Y') {
            this.modifyRoleObject.verifiedOnce = 'YES';
        }
        /**
         * setting record status
         */
        if (this.modifyRoleObject.recordStatus === 'OPEN') {
            this.modifyRoleObject.recordStatus = 'O';
        }
        if (this.modifyRoleObject.recordStatus === 'CLOSED') {
            this.modifyRoleObject.recordStatus = 'C';
        }
        //console.log(this.loggedInUser);
        this.modifyRoleObject.creatorId = this.loggedInUser;
        //console.log(  this.modifyRoleObject.creatorId);
        this.apiService.closingTheRecordOfProcessCodeMapping(this.modifyRoleObject).subscribe((data) => {
            //console.log(data)
            this.modifyRoleObject = data;
            if (this.modifyRoleObject.authStatus === 'U') {
                this.modifyRoleObject.authStatus = 'UNAUTHORIZED';
            }
            if (this.modifyRoleObject.authStatus === 'A') {
                this.modifyRoleObject.authStatus = 'AUTHORIZED';
            }
            /*
            */
            // if(this.userObjWithAudit.verifiedOnce === 'N')
            // {
            //   this.userObjWithAudit.verifiedOnce = 'NO'
            // }
            // if(this.userObjWithAudit.verifiedOnce === 'Y')
            // {
            //   this.userObjWithAudit.verifiedOnce = 'YES'
            // }
            if (this.modifyRoleObject.verifiedOnce === 'N') {
                this.modifyRoleObject.verifiedOnce = 'NO';
            }
            if (this.modifyRoleObject.verifiedOnce === 'Y') {
                this.modifyRoleObject.verifiedOnce = 'YES';
            }
            /**
             * setting record status
             */
            if (this.modifyRoleObject.recordStatus === 'O') {
                this.modifyRoleObject.recordStatus = 'OPEN';
            }
            if (this.modifyRoleObject.recordStatus === 'C') {
                this.modifyRoleObject.recordStatus = 'CLOSED';
            }
            if (data) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire('You Closed the Record');
            }
            else {
                sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire({
                    type: 'error',
                    text: 'Failed To Close ',
                });
            }
            this.cdr.markForCheck();
        });
    }
    onClickOfReOpen(modifyExt) {
        //console.log("on click of reopen");
        modifyExt.extSysCode = this.modifyRoleObject.extSysCode;
        modifyExt.extSysName = this.modifyRoleObject.extSysName;
        modifyExt.processCode = this.modifyRoleObject.processCode;
        modifyExt.id = this.modifyRoleObject.id;
        //console.log( modifyExt.id);
        //console.log(this.loggedInUser);
        modifyExt.creatorId = this.loggedInUser;
        //console.log(  this.modifyRoleObject.creatorId);
        //console.log(modifyExt);
        this.apiService.reopeningTheRecordOfProcessCodeMapping(modifyExt)
            .subscribe((data) => {
            //console.log(data)
            this.modifyRoleObject = data;
            if (this.modifyRoleObject.authStatus === 'U') {
                this.modifyRoleObject.authStatus = 'UNAUTHORIZED';
            }
            if (this.modifyRoleObject.authStatus === 'A') {
                this.modifyRoleObject.authStatus = 'AUTHORIZED';
            }
            /*
            */
            // if(this.userObjWithAudit.verifiedOnce === 'N')
            // {
            //   this.userObjWithAudit.verifiedOnce = 'NO'
            // }
            // if(this.userObjWithAudit.verifiedOnce === 'Y')
            // {
            //   this.userObjWithAudit.verifiedOnce = 'YES'
            // }
            //added by vidya for issue id 583
            if (this.modifyRoleObject.verifiedOnce === 'N') {
                this.modifyRoleObject.verifiedOnce = 'NO';
            }
            if (this.modifyRoleObject.verifiedOnce === 'Y') {
                this.modifyRoleObject.verifiedOnce = 'YES';
            }
            /**
             *
             * setting record status
             */
            if (this.modifyRoleObject.recordStatus === 'O') {
                this.modifyRoleObject.recordStatus = 'OPEN';
            }
            if (this.modifyRoleObject.recordStatus === 'C') {
                this.modifyRoleObject.recordStatus = 'CLOSED';
            }
            if (data) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire('You Re-Opened the Record');
            }
            else {
                sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire({
                    type: 'error',
                    text: 'Failed To Re-Open ',
                });
            }
            //console.log(this.modifyRoleObject);
            this.cdr.markForCheck();
        });
    }
    onClickOfAuth(modifyExt) {
        //console.log("on clcik of auth");
        //console.log(modifyExt);
        //console.log(this.modifyRoleObject);
        modifyExt.extSysCode = this.modifyRoleObject.extSysCode;
        modifyExt.extSysName = this.modifyRoleObject.extSysName;
        modifyExt.authStatus = this.modifyRoleObject.authStatus;
        modifyExt.processCode = this.modifyRoleObject.processCode;
        modifyExt.recordStatus = this.modifyRoleObject.recordStatus;
        modifyExt.id = this.modifyRoleObject.id;
        modifyExt.verifierId = this.loggedInUser;
        // modifyExt.verifierId = this.loggedInUser;
        //modifyExt.verifierDtStamp=this.modifyRoleObject.verifierDtStamp;
        //console.log("Object ", modifyExt);
        const userIdLoggedIn = localStorage.getItem('currentUser');
        //modifyExt.verifierId = this.loggedInUser;
        // this.modifyRoleObject.verifierId=modifyExt.verifierId;
        // if (!this.modifyRoleObject.verifierId == this.currentUser)
        //console.log("creatorid:" + this.modifyRoleObject.creatorId);
        //console.log("userid" + this.loggedInUser)
        if (this.modifyRoleObject.creatorId !== this.loggedInUser) {
            this.apiService.authorizingTheRecord(modifyExt, this.loggedInUser)
                .subscribe((data) => {
                //console.log("data" + data);
                //console.log("" + modifyExt)
                this.modifyRoleObject = data;
                if (this.modifyRoleObject.authStatus === 'U') {
                    this.modifyRoleObject.authStatus = 'UNAUTHORIZED';
                }
                if (this.modifyRoleObject.authStatus === 'A') {
                    this.modifyRoleObject.authStatus = 'AUTHORIZED';
                }
                //added by vidya for issue id 583
                if (this.modifyRoleObject.verifiedOnce === 'Y') {
                    this.modifyRoleObject.verifiedOnce = 'YES';
                }
                if (this.modifyRoleObject.verifiedOnce === 'N') {
                    this.modifyRoleObject.verifiedOnce = 'NO';
                }
                if (this.modifyRoleObject.recordStatus === 'O') {
                    this.modifyRoleObject.recordStatus = 'OPEN';
                }
                if (this.modifyRoleObject.recordStatus === 'C') {
                    this.modifyRoleObject.recordStatus = 'CLOSED';
                }
                if (data) {
                    sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire('You Authorized the Record');
                }
                else {
                    sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire({
                        type: 'error',
                        text: 'Failed To Authorize',
                    });
                }
                //console.log(this.modifyRoleObject)
                this.cdr.markForCheck();
            });
        }
        else {
            // this.toast.info(`Maker can not Authorized the Record !`, '', {
            //   timeOut: 3000,
            //   progressBar: true,
            //   tapToDismiss: true,
            //   closeButton: true,
            //   easeTime: 300,
            //   extendedTimeOut: 1000
            // });
            sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire({
                type: 'error',
                text: 'Maker can not Authorized the Record ',
            });
        }
    }
    getValueOfFCYrateVariance(event) {
        console.log(event.checked);
        this.modifyRoleObject.fCYRateVariance = event.checked;
        if (!this.modifyRoleObject.fCYRateVariance) {
            this.modifyRoleObject.fCYPercentage = '';
        }
    }
    getValue(event) {
        console.log(event.checked);
        this.modifyRoleObject.futureDateAllow = event.checked;
        if (!this.modifyRoleObject.futureDateAllow) {
            this.modifyRoleObject.fdav = '';
        }
    }
    getValue2(event) {
        console.log(event.checked);
        this.modifyRoleObject.acft = event.checked;
        //  this.acft=true;
    }
    getwuFileValue(event) {
        this.modifyRoleObject.wuFile = event.checked;
        this.cdr.markForCheck();
        console.log(this.modifyRoleObject.wuFile);
    }
    checkCheckBoxvalueBDA(event) {
        console.log(event.checked);
        this.backDateAllow = true;
        this.modifyRoleObject.backDateAllow = event.checked;
        if (!this.modifyRoleObject.backDateAllow) {
            this.modifyRoleObject.bdav = '';
        }
        //  this.is_edit=true;
    }
    checkCheckBoxvalueUpload(event) {
        console.log(event.checked);
        this.modifyRoleObject.autoUpload = event.checked;
        this.enablefilebrowser = event.checked;
        if (!this.modifyRoleObject.autoUpload) {
            this.modifyRoleObject.fileName = '';
            this.modifyRoleObject.filePath = '';
        }
        // this.autouplaodchecked=true;
    }
    getValueSftp(event) {
        this.modifyRoleObject.sftpRequired = event.checked;
        this.cdr.markForCheck();
        this.is_sftp = this.modifyRoleObject.sftpRequired;
        if (!this.modifyRoleObject.sftpRequired) {
            this.modifyRoleObject.sftpUsername = '';
            this.modifyRoleObject.sftpPassword = '';
            this.modifyRoleObject.sftpIpaddress = '';
            this.modifyRoleObject.sftpPort = '';
            this.modifyRoleObject.sftpPath = '';
        }
    }
    getValueMfI(event) {
        this.modifyRoleObject.mandatoryFieldImposed = event.checked;
        this.cdr.markForCheck();
        console.log(this.modifyRoleObject.mandatoryFieldImposed);
    }
    //issue Id 532-->check box for treasury ref  added by vidya
    treasuryRequired(event) {
        this.modifyRoleObject.treasuryrefRequired = event.checked;
        console.log(this.modifyRoleObject.treasuryrefRequired);
    }
    // added by vidya for 583 issue
    onDeleteOfProcessCodeMapping() {
        this.apiService.onDeleteOfProcessCodeMapping(this.modifyRoleObject).subscribe(deleteReps => {
            console.log(deleteReps);
            if (deleteReps) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire({
                    title: 'Record Deleted SuccessFully'
                });
            }
            else {
                sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire({
                    title: 'Failed To  Delete The Record'
                });
            }
        });
    }
    fun(extSysName) {
        console.log(extSysName);
        console.log("enters inside fn");
        const result = extSysName.trim();
        console.log(result);
        if (result) {
            console.log("valid string");
            this.space = true;
            console.log(this.space);
        }
        else {
            console.log("invalid string");
            this.space = false;
            // this.submitted = false;
            console.log(this.space);
        }
    }
};
UpdateExtsysComponent.ctorParameters = () => [
    { type: src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_6__["ExcelApiService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"] },
    { type: _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatSnackBar"] },
    { type: _users_users_service__WEBPACK_IMPORTED_MODULE_8__["UsersService"] },
    { type: ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"] },
    { type: _roles1_roles_service__WEBPACK_IMPORTED_MODULE_9__["RoleService"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
], UpdateExtsysComponent.prototype, "modifyRoleObject", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"])(_angular_material__WEBPACK_IMPORTED_MODULE_4__["MatButton"]),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatButton"])
], UpdateExtsysComponent.prototype, "updateBtn", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"])('pcode'),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])
], UpdateExtsysComponent.prototype, "processCode", void 0);
tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChildren"])('maxUpload'),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])
], UpdateExtsysComponent.prototype, "maxUploadLimit", void 0);
UpdateExtsysComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-update-extsys',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./update-extsys.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/views/sias-v2/update-extsys/update-extsys.component.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./update-extsys.component.scss */ "./src/app/views/sias-v2/update-extsys/update-extsys.component.scss")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [src_app_shared_services_sias2_services_ExcelApiService__WEBPACK_IMPORTED_MODULE_6__["ExcelApiService"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
        _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatSnackBar"], _users_users_service__WEBPACK_IMPORTED_MODULE_8__["UsersService"],
        ngx_toastr__WEBPACK_IMPORTED_MODULE_5__["ToastrService"],
        _roles1_roles_service__WEBPACK_IMPORTED_MODULE_9__["RoleService"],
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"]])
], UpdateExtsysComponent);



/***/ })

}]);
//# sourceMappingURL=views-sias-v2-sias-v2-module-es2015.js.map